"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*global setTimeout: false */
var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers, defined = {}, waiting = {}, config = {}, defining = {}, hasOwn = Object.prototype.hasOwnProperty, aps = [].slice, jsSuffixRegExp = /\.js$/;
    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }
    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex, foundI, foundStarMap, starI, i, j, part, normalizedBaseParts, baseParts = baseName && baseName.split("/"), map = config.map, starMap = (map && map['*']) || {};
        //Adjust any relative paths.
        if (name) {
            name = name.split('/');
            lastIndex = name.length - 1;
            // If wanting node ID compatibility, strip .js from end
            // of IDs. Have to do this here, and not in nameToUrl
            // because node allows either .js or non .js to map
            // to same file.
            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
            }
            // Starts with a '.' so need the baseName
            if (name[0].charAt(0) === '.' && baseParts) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that 'directory' and not name of the baseName's
                //module. For instance, baseName of 'one/two/three', maps to
                //'one/two/three.js', but we want the directory, 'one/two' for
                //this normalization.
                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                name = normalizedBaseParts.concat(name);
            }
            //start trimDots
            for (i = 0; i < name.length; i++) {
                part = name[i];
                if (part === '.') {
                    name.splice(i, 1);
                    i -= 1;
                }
                else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                        continue;
                    }
                    else if (i > 0) {
                        name.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
            //end trimDots
            name = name.join('/');
        }
        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');
            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");
                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];
                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }
                if (foundMap) {
                    break;
                }
                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }
            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }
            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }
        return name;
    }
    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);
            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }
    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }
    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }
    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }
        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }
    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix, index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }
    //Creates a parts array for a relName where first part is plugin ID,
    //second part is resource ID. Assumes relName has already been normalized.
    function makeRelParts(relName) {
        return relName ? splitPrefix(relName) : [];
    }
    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relParts) {
        var plugin, parts = splitPrefix(name), prefix = parts[0], relResourceName = relParts[1];
        name = parts[1];
        if (prefix) {
            prefix = normalize(prefix, relResourceName);
            plugin = callDep(prefix);
        }
        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relResourceName));
            }
            else {
                name = normalize(name, relResourceName);
            }
        }
        else {
            name = normalize(name, relResourceName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }
        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name,
            n: name,
            pr: prefix,
            p: plugin
        };
    };
    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }
    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            }
            else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };
    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i, relParts, args = [], callbackType = typeof callback, usingExports;
        //Use name if no relName
        relName = relName || name;
        relParts = makeRelParts(relName);
        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relParts);
                depName = map.f;
                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                }
                else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                }
                else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                }
                else if (hasProp(defined, depName) ||
                    hasProp(waiting, depName) ||
                    hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                }
                else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                }
                else {
                    throw new Error(name + ' missing ' + depName);
                }
            }
            ret = callback ? callback.apply(defined[name], args) : undefined;
            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                    cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                }
                else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        }
        else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };
    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, makeRelParts(callback)).f);
        }
        else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            }
            else {
                deps = undef;
            }
        }
        //Support require(['a'])
        callback = callback || function () { };
        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }
        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        }
        else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }
        return req;
    };
    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };
    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;
    define = function (name, deps, callback) {
        if (typeof name !== 'string') {
            throw new Error('See almond README: incorrect module build, no module name');
        }
        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }
        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };
    define.amd = {
        jQuery: true
    };
}());
define("toplevel", ["require", "exports", "./third-party/almond"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("lib/live/Receiver", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function combineReceivers(...receivers) {
        return (newValue) => {
            receivers.forEach(r => r(newValue));
        };
    }
    exports.combineReceivers = combineReceivers;
});
define("lib/live/Listenable", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("lib/live/Listen", ["require", "exports", "react"], function (require, exports, react_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_1 = __importDefault(react_1);
    class Listen extends react_1.default.Component {
        constructor(props) {
            super(props);
            this.receivers = {};
            const initialState = {};
            const { to: listenables } = props;
            // calculate initial state and create receivers
            for (const key in listenables) {
                initialState[key] = listenables[key].peek();
                this.receivers[key] = (newValue) => {
                    this.setState(state => (Object.assign({}, state, { [key]: newValue })));
                };
            }
            this.state = initialState;
        }
        componentDidMount() {
            const { to: listenables } = this.props;
            // update all receivers and listen to future changes
            for (const key in listenables) {
                const listenable = listenables[key];
                const receiver = this.receivers[key];
                receiver(listenable.peek());
                listenable.listen(receiver);
            }
        }
        componentDidUpdate(prevProps) {
            const { to: oldListenables } = prevProps;
            const { to: newListenables } = this.props;
            // unlisten and relisten for each listener that changed.
            // keys should be the same in oldListenables and newListenables
            for (const key in newListenables) {
                const oldListenable = oldListenables[key];
                const newListenable = newListenables[key];
                if (oldListenable !== newListenable) {
                    const receiver = this.receivers[key];
                    oldListenable.unlisten(receiver);
                    receiver(newListenable.peek());
                    newListenable.listen(receiver);
                }
            }
        }
        componentWillUnmount() {
            const { to: listenables } = this.props;
            // unlisten
            for (const key in listenables) {
                listenables[key].unlisten(this.receivers[key]);
            }
        }
        render() {
            return this.props.children(this.state);
        }
    }
    exports.Listen = Listen;
});
define("lib/live/LiveVar", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createLiveVar(initialValue) {
        const receivers = new Set();
        let currentValue = initialValue;
        const LiveVar = (newValue) => {
            currentValue = newValue;
            receivers.forEach(r => r(newValue));
        };
        LiveVar.listen = (receiver) => void receivers.add(receiver);
        LiveVar.unlisten = (receiver) => void receivers.delete(receiver);
        LiveVar.peek = () => currentValue;
        return LiveVar;
    }
    exports.createLiveVar = createLiveVar;
    exports.createLiveDOMVar = (initialValue = null) => createLiveVar(initialValue);
});
define("lib/live/hooks", ["require", "exports", "react", "lib/live/LiveVar"], function (require, exports, react_2, LiveVar_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // useOnce runs some code only on first render and remembers the result.  It's like
    // useMemo(() => ..., []), except technically useMemo is a performance optimization
    // and doesn't guarantee it won't recalculate the value.
    function useOnce(compute) {
        // wrap the value in an object in case "undefined" is a valid value of type T
        const ref = react_2.useRef();
        if (!ref.current) {
            ref.current = { result: compute() };
        }
        return ref.current.result;
    }
    exports.useOnce = useOnce;
    function useLiveVar(initialValue) {
        return useOnce(() => LiveVar_1.createLiveVar(initialValue()));
    }
    exports.useLiveVar = useLiveVar;
    function useListen(v) {
        const [state, setState] = react_2.useState();
        const ref = react_2.useRef();
        if (ref.current) {
            const { lastVar, receiver } = ref.current;
            if (lastVar === v) {
                return state;
            }
            lastVar.unlisten(receiver);
            ref.current.lastVar = v;
        }
        else {
            ref.current = { lastVar: v, receiver: setState };
        }
        const value = v.peek();
        setState(value);
        v.listen(ref.current.receiver);
        return value;
    }
    exports.useListen = useListen;
});
define("lib/live/index", ["require", "exports", "lib/live/Receiver", "lib/live/Listen", "lib/live/LiveVar", "lib/live/hooks"], function (require, exports, Receiver_1, Listen_1, LiveVar_2, hooks_1) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(Receiver_1);
    __export(Listen_1);
    __export(LiveVar_2);
    __export(hooks_1);
});
define("demos/ax1/index", ["require", "exports", "react", "react-dom", "lib/live/index", "reactstrap"], function (require, exports, react_3, react_dom_1, live_1, reactstrap_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_3 = __importStar(react_3);
    react_dom_1 = __importDefault(react_dom_1);
    function App() {
        const input = live_1.useLiveVar(() => '');
        const inputValue = live_1.useListen(input);
        return (react_3.default.createElement("main", { role: "main", className: "container mt-3" },
            react_3.default.createElement("div", { className: "row" },
                react_3.default.createElement("div", { className: "col-md colLeft" },
                    react_3.default.createElement("div", { className: "px-3 pt-4" },
                        react_3.default.createElement("div", { className: "inputWrapper" },
                            react_3.default.createElement("textarea", { className: "form-control text-monospace input", value: inputValue, onChange: e => input(e.target.value) })))),
                react_3.default.createElement("div", { className: "col-md colRight" },
                    react_3.default.createElement("div", { className: "px-3" },
                        react_3.default.createElement(TabbedOutput, { input: inputValue }))))));
    }
    function TabbedOutput({ input }) {
        const [mode, setMode] = react_3.useState('Pretty Printer');
        const setModeParser = react_3.useCallback(() => setMode('Parser'), []);
        const setModePrettyPrinter = react_3.useCallback(() => setMode('Pretty Printer'), []);
        const setModeDOM = react_3.useCallback(() => setMode('DOM'), []);
        return (react_3.default.createElement(react_3.default.Fragment, null,
            react_3.default.createElement(reactstrap_1.Nav, { className: "mb-4", tabs: true },
                react_3.default.createElement(reactstrap_1.NavItem, null,
                    react_3.default.createElement(reactstrap_1.NavLink, { href: "#", active: mode === 'Parser', onClick: setModeParser }, "Parser")),
                react_3.default.createElement(reactstrap_1.NavItem, null,
                    react_3.default.createElement(reactstrap_1.NavLink, { href: "#", active: mode === 'Pretty Printer', onClick: setModePrettyPrinter }, "Pretty Printer")),
                react_3.default.createElement(reactstrap_1.NavItem, null,
                    react_3.default.createElement(reactstrap_1.NavLink, { href: "#", active: mode === 'DOM', onClick: setModeDOM }, "DOM"))),
            react_3.default.createElement(ParserOutput, { input: input, mode: mode })));
    }
    function ParserOutput({ input, mode }) {
        const result = react_3.useMemo(() => parseAx(input), [input]);
        if (result.type === 'failure') {
            return (react_3.default.createElement("pre", null,
                react_3.default.createElement("code", { className: "failure" }, JSON.stringify(result, null, 2))));
        }
        const parsed = result.result;
        if (mode === 'DOM') {
            try {
                return toDOM(parsed);
            }
            catch (e) {
                return react_3.default.createElement("span", { className: "failure" }, e.message);
            }
        }
        else if (mode === 'Pretty Printer') {
            const prettied = prettyPrint(parsed, 40);
            return (react_3.default.createElement("pre", null,
                react_3.default.createElement("code", null, prettied)));
        }
        else {
            return (react_3.default.createElement("pre", null,
                react_3.default.createElement("code", null, JSON.stringify(result, null, 2))));
        }
    }
    function toDOM(ax, key = 0) {
        if (!ax.name) {
            const children = [];
            let i = 0;
            for (const parameter of ax.parameters) {
                children.push(toDOM(parameter, i));
                i++;
            }
            return react_3.default.createElement(react_3.default.Fragment, { key: key }, children);
        }
        if (ax.name === 'div') {
            const attributes = {};
            const children = [];
            let i = 0;
            for (const parameter of ax.parameters) {
                const { name, parameters } = parameter;
                if (name === 'class') {
                    attributes.className = parameters.map(toClassName).join(' ');
                }
                else if (name === 'style') {
                    attributes.style = toStyleDictionary(parameters);
                }
                else {
                    children.push(toDOM(parameter, i));
                }
                i++;
            }
            return (react_3.default.createElement("div", Object.assign({}, attributes, { key: key }), children));
        }
        else if (ax.name === 'text') {
            return (react_3.default.createElement(react_3.default.Fragment, { key: key }, ax.parameters.map(a => toStringLiteral(a))));
        }
        else {
            throw new Error('unknown command: ' + ax.name);
        }
    }
    function toStyleDictionary(ax) {
        const result = {};
        for (const { name, parameters } of ax) {
            if (parameters.length !== 1) {
                throw new Error('bad key/value pair');
            }
            const value = toStringLiteral(parameters[0]);
            result[name] = value;
        }
        return result;
    }
    function toClassName(ax) {
        const str = toStringLiteral(ax);
        if (/^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/.test(str)) {
            return str;
        }
        else {
            throw new Error('not a class name');
        }
    }
    function toStringLiteral(ax) {
        if (ax.parameters.length) {
            throw new Error('not a string literal: ' + ax.name);
        }
        return ax.name;
    }
    const NO_PARAMETERS = Object.seal([]); // shared object for performance
    function pushParameter(command, parameter) {
        if (!command.parameters) {
            command.parameters = [];
        }
        command.parameters.push(parameter);
    }
    function completeAx(partial) {
        return {
            name: partial.name,
            parameters: partial.parameters
                ? partial.parameters.map(completeAx)
                : NO_PARAMETERS,
        };
    }
    class Scanner {
        constructor(input) {
            this.input = input;
            this.index = 0;
        }
        match(re) {
            if (!re.sticky) {
                throw new Error('reg ex must be sticky');
            }
            re.lastIndex = this.index;
            const match = re.exec(this.input);
            if (!match) {
                return undefined;
            }
            this.index = re.lastIndex;
            return match;
        }
        matchAlways(re) {
            return this.match(re) || [''];
        }
    }
    const WORD_REGEX = /[^\s":,]+/y;
    function parseName(s) {
        const stringMatch = s.match(/"([^"\\]*|\\["\\bfnrt\/]|\\u[0-9a-f]{4})*"/y);
        if (stringMatch) {
            return JSON.parse(stringMatch[0]);
        }
        else {
            const wordMatch = s.match(WORD_REGEX);
            if (wordMatch) {
                return wordMatch[0];
            }
        }
        return null;
    }
    function parseLinearCommandExpression(s) {
        const name = parseName(s);
        if (name === null) {
            return 'Expected command';
        }
        const firstCommand = { name };
        let lastCommand = firstCommand;
        while (s.match(/ /y)) {
            const subname = parseName(s);
            if (subname === null) {
                return 'Expected command as parameter';
            }
            const subcommand = { name: subname };
            pushParameter(lastCommand, subcommand);
            lastCommand = subcommand;
        }
        return { firstCommand, lastCommand };
    }
    const INDENT_SIZE = 2;
    function parseAx(input) {
        const lines = input.split('\n');
        let indentSpacesCount = 0;
        const root = { name: '' };
        let currentCommand = root;
        const commandStack = [root];
        let lineNumber = 1;
        function failure(message) {
            return { type: 'failure', errors: [{ lineNumber, message }] };
        }
        for (const line of lines) {
            const s = new Scanner(line);
            const [spaces] = s.matchAlways(/ */y);
            while (spaces.length <= indentSpacesCount - INDENT_SIZE) {
                commandStack.pop();
                currentCommand = commandStack[commandStack.length - 1];
                indentSpacesCount -= INDENT_SIZE;
            }
            if (spaces.length !== indentSpacesCount) {
                return failure('indent');
            }
            const lceResult = parseLinearCommandExpression(s);
            if (typeof lceResult === 'string') {
                return failure(lceResult);
            }
            const { firstCommand, lastCommand } = lceResult;
            let eolCommand = lastCommand;
            pushParameter(currentCommand, firstCommand);
            currentCommand = lastCommand;
            indentSpacesCount += INDENT_SIZE;
            if (s.match(/: /y)) {
                const colonCommand = currentCommand;
                const lce1 = parseLinearCommandExpression(s);
                if (typeof lce1 === 'string') {
                    return failure(lce1);
                }
                const { firstCommand, lastCommand } = lce1;
                pushParameter(colonCommand, firstCommand);
                eolCommand = lastCommand;
                if (!s.match(/, /y)) {
                    return failure('Expected comma');
                }
                do {
                    const lce = parseLinearCommandExpression(s);
                    if (typeof lce === 'string') {
                        return failure(lce);
                    }
                    const { firstCommand, lastCommand } = lce;
                    pushParameter(colonCommand, firstCommand);
                    eolCommand = lastCommand;
                } while (s.match(/, /y));
            }
            currentCommand = eolCommand;
            commandStack.push(currentCommand);
            if (!s.match(/$/my)) {
                return failure('Expected end of line');
            }
            lineNumber++;
        }
        return { type: 'success', result: completeAx(root) };
    }
    function prettyPrintName(name) {
        WORD_REGEX.lastIndex = 0;
        if (WORD_REGEX.exec(name) && WORD_REGEX.lastIndex === name.length) {
            return name;
        }
        return JSON.stringify(name);
    }
    const SPACES_MEMO = new Map();
    function getSpaces(count) {
        if (!SPACES_MEMO.has(count)) {
            SPACES_MEMO.set(count, new Array(count + 1).join(' '));
        }
        return SPACES_MEMO.get(count);
    }
    function prettyPrint(ax, lineLength) {
        if (!ax.name) {
            // root
            return ax.parameters.map(a => doPrettyPrint(a, lineLength)).join('');
        }
        return doPrettyPrint(ax, lineLength);
    }
    function doPrettyPrint(ax, lineLength, indentSpacesCount = 0, leftOnLine = lineLength, afterComma = false) {
        const name = prettyPrintName(ax.name);
        const firstParameter = ax.parameters[0];
        if (!firstParameter) {
            return name + '\n';
        }
        if (ax.parameters.length === 1) {
            if (name.length + 1 + prettyPrintName(firstParameter.name).length <=
                leftOnLine) {
                return (name +
                    ' ' +
                    doPrettyPrint(firstParameter, lineLength, indentSpacesCount, leftOnLine - name.length - 1, afterComma));
            }
        }
        else if (!afterComma) {
            const lastParameter = ax.parameters[ax.parameters.length - 1];
            const allButLastParameter = ax.parameters
                .slice(0, -1)
                .map(prettyPrintLinearLine);
            if (allButLastParameter.every(x => x !== null)) {
                const line = name + ': ' + allButLastParameter.join(', ') + ', ';
                if (line.length + prettyPrintName(lastParameter.name).length <=
                    leftOnLine) {
                    return (line +
                        doPrettyPrint(lastParameter, lineLength, indentSpacesCount, leftOnLine - line.length, true));
                }
            }
        }
        const newIndent = indentSpacesCount + INDENT_SIZE;
        return (name +
            '\n' +
            ax.parameters
                .map(a => getSpaces(newIndent) +
                doPrettyPrint(a, lineLength, newIndent, lineLength - newIndent))
                .join(''));
    }
    function prettyPrintLinearLine(ax) {
        const firstParameter = ax.parameters[0];
        if (!firstParameter) {
            return prettyPrintName(ax.name);
        }
        else if (ax.parameters.length === 1) {
            const parameter = prettyPrintLinearLine(firstParameter);
            if (parameter !== null) {
                return prettyPrintName(ax.name) + ' ' + parameter;
            }
            else {
                return null;
            }
        }
        else {
            return null;
        }
    }
    const root = document.getElementById('root');
    react_dom_1.default.render(react_3.default.createElement(App, null), root);
});
/*enum AxTokenType {
  BLANK_LINE,
  STRING,
}

interface AxStringToken {
  readonly type: AxTokenType.STRING
  readonly value: string
  readonly children: AxToken[]
  readonly comment?: string
}

interface AxBlankLineToken {
  readonly type: AxTokenType.BLANK_LINE
  readonly comment?: string
}

type AxToken = AxStringToken | AxBlankLineToken

interface AxStringTokenBuilder {
  addChild(child: AxToken): void
  setComment(comment: string): void
  build(): AxStringToken
}

interface AxStringTokenBuilderConfig {
  value: string
}

const EMPTY_ARRAY = Object.seal([])

function createAxStringTokenBuilder(
  config: AxStringTokenBuilderConfig
): AxStringTokenBuilder {
  const { value } = config
  let children: AxToken[] | undefined
  let comment: string | undefined
  return {
    addChild(child: AxToken): void {
      children = children || []
      children.push(child)
    },
    setComment(newComment: string): void {
      comment = newComment
    },
    build(): AxStringToken {
      return {
        type: AxTokenType.STRING,
        value,
        comment,
        children: children || EMPTY_ARRAY,
      }
    },
  }
}

class Scanner {
  constructor(private input: string) {}
  index = 0
  match(re: RegExp): string[] | undefined {
    if (!re.sticky) {
      throw new Error('reg ex must be sticky')
    }
    re.lastIndex = this.index
    const match = re.exec(this.input)
    if (!match) {
      return undefined
    }
    this.index = re.lastIndex
    return match
  }
  matchAlways(re: RegExp): string[] {
    return this.match(re) || ['']
  }
}
*/ 
define("demos/matcher/Matcher", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function exact(text) {
        return (start, source) => {
            const end = start + text.length;
            return source.slice(start, end) === text ? end : null;
        };
    }
    exports.exact = exact;
    function makeSticky(re) {
        let flags = re.flags;
        if (!flags.includes('y')) {
            flags = flags + 'y';
        }
        return new RegExp(re.source, flags);
    }
    function regex(re) {
        re = makeSticky(re);
        return (start, source) => {
            re.lastIndex = start;
            const result = re.exec(source);
            return result ? re.lastIndex : null;
        };
    }
    exports.regex = regex;
    function takeRegex(re) {
        const m = regex(re);
        return (start, source) => {
            const result = m(start, source);
            return result === null ? start : result;
        };
    }
    exports.takeRegex = takeRegex;
    function zeroOrMore(m) {
        return (start, source) => {
            let current = start;
            let result;
            while ((result = m(current, source)) !== null) {
                if (result === current) {
                    break;
                }
                current = result;
            }
            return current;
        };
    }
    exports.zeroOrMore = zeroOrMore;
    function oneOrMore(m) {
        return seq(m, zeroOrMore(m));
    }
    exports.oneOrMore = oneOrMore;
    function seq(m, ...mm) {
        return (start, source) => {
            let result = m(start, source);
            if (result === null) {
                return result;
            }
            for (let i = 0; i < mm.length; i++) {
                const newStart = result;
                if (newStart === null) {
                    return result;
                }
                result = mm[i](newStart, source);
            }
            return result;
        };
    }
    exports.seq = seq;
});
define("demos/matcher/index", ["require", "exports", "demos/matcher/Matcher"], function (require, exports, Matcher_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const a = Matcher_1.exact('a');
    const b = Matcher_1.zeroOrMore(a);
    const c = Matcher_1.seq(b, Matcher_1.takeRegex(/[bc]/));
    console.log(c(1, 'baaabd'));
});
define("demos/overlays/Overlay", ["require", "exports", "react", "react-dom", "lib/live/index"], function (require, exports, react_4, react_dom_2, live_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_4 = __importStar(react_4);
    react_dom_2 = __importDefault(react_dom_2);
    const Context = react_4.createContext(null);
    function OverlayManager({ children }) {
        const { context, containerRef } = live_2.useOnce(() => {
            let container = null;
            const context = {
                attachDiv(div, level) {
                    if (!container)
                        return;
                    let nextSibling = container.firstElementChild;
                    // try to insert the div at end of the divs with same level, for easy debugging
                    // (even though we also set zIndex which should control the stacking order)
                    while (nextSibling instanceof HTMLElement &&
                        Number(nextSibling.style.zIndex) <= level) {
                        nextSibling = nextSibling.nextElementSibling;
                    }
                    div.style.zIndex = String(level);
                    container.insertBefore(div, nextSibling);
                },
                detachDiv(div) {
                    if (div.parentNode) {
                        div.parentNode.removeChild(div);
                    }
                },
            };
            const containerRef = (element) => {
                container = element;
            };
            return { context, containerRef };
        });
        return (react_4.default.createElement(Context.Provider, { value: context },
            children,
            react_4.default.createElement("div", { ref: containerRef })));
    }
    exports.OverlayManager = OverlayManager;
    function createOverlay(level) {
        function Portal({ children }) {
            // create a single div at first render to use for the portal.
            // we can't actually put it in the DOM, because rendering should
            // not have side effects, especially ones that require cleanup.
            const div = live_2.useOnce(() => document.createElement('div'));
            // use a state variable to not render children until div is attached.
            // we want to avoid confusing the children, which will probably want
            // to assume they are attached after they are rendered.
            const [divAttached, setDivAttached] = react_4.useState(false);
            const context = react_4.useContext(Context);
            if (!context) {
                console.warn('createOverlay used without an enclosing OverlayManager');
                return react_4.default.createElement(react_4.default.Fragment, null);
            }
            react_4.useEffect(() => {
                // this effect only runs once, it's like a componentDidMount.
                // we attach the div and set our state variable.
                context.attachDiv(div, level);
                setDivAttached(true);
                return () => {
                    context.detachDiv(div);
                };
            }, []);
            // always create a portal, but conditionally render the children in it.
            return react_dom_2.default.createPortal(divAttached ? children : null, div);
        }
        return { Portal };
    }
    exports.createOverlay = createOverlay;
    // note that level is not reactive
    function useOverlay(level) {
        return live_2.useOnce(() => createOverlay(level));
    }
    exports.useOverlay = useOverlay;
});
define("demos/overlays/index", ["require", "exports", "react", "react-dom", "reactstrap", "demos/overlays/Overlay"], function (require, exports, react_5, react_dom_3, reactstrap_2, Overlay_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_5 = __importDefault(react_5);
    react_dom_3 = __importDefault(react_dom_3);
    function App() {
        return (react_5.default.createElement(Overlay_1.OverlayManager, null,
            react_5.default.createElement("main", { role: "main", className: "container mt-5" },
                react_5.default.createElement("h1", null, "Hello, Reactstrap!"),
                react_5.default.createElement(reactstrap_2.Alert, { color: "primary" }, "This is a primary alert \u2014 check it out!"))));
    }
    const root = document.getElementById('root');
    react_dom_3.default.render(react_5.default.createElement(App, null), root);
});
define("demos/popover/hooks", ["require", "exports", "react"], function (require, exports, react_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // This module is for utility hooks that are of totally general use.
    // Create a memoized callback that calls all the given callbacks.
    // Example:
    // const onClick = useAllCallbacks(handleClick1, handleClick2)
    // const ref = useAllCallbacks(ref1, ref2)
    function useAllCallbacks(...callbacks) {
        return react_6.useCallback(((...args) => {
            callbacks.forEach(cb => cb(...args));
        }), callbacks);
    }
    exports.useAllCallbacks = useAllCallbacks;
    // useOnce runs some code only on first render and remembers the result.  It's like
    // useMemo(() => ..., []), except technically useMemo is a performance optimization
    // and doesn't guarantee it won't recalculate the value.
    function useOnce(compute) {
        // wrap the value in an object in case "undefined" is a valid value of type T
        const ref = react_6.useRef();
        if (!ref.current) {
            ref.current = { result: compute() };
        }
        return ref.current.result;
    }
    exports.useOnce = useOnce;
    // TODO: document
    function useComputingWrapper(func) {
        return useOnce(() => function (props) {
            return props.children(func(props));
        });
    }
    exports.useComputingWrapper = useComputingWrapper;
    function usePromise(getPromise) {
        const [value, setValue] = react_6.useState(null);
        useOnce(() => getPromise().then(v => setValue(v)));
        return value;
    }
    exports.usePromise = usePromise;
});
define("demos/popover/LiveRef", ["require", "exports", "demos/popover/hooks", "react"], function (require, exports, hooks_2, react_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function useLiveRef(initialValue) {
        return hooks_2.useOnce(() => {
            const ref = (newValue) => {
                ref._current = newValue;
                ref._listeners.forEach(L => L(newValue));
            };
            ref._current = (typeof initialValue === 'function') ? initialValue() : initialValue;
            ref._listeners = new Set();
            return ref;
        });
    }
    exports.useLiveRef = useLiveRef;
    function useLiveRefState(liveRef) {
        const [value, setValue] = react_7.useState(liveRef._current);
        react_7.useEffect(() => {
            setValue(liveRef._current); // catch any changes since render time
            liveRef._listeners.add(setValue);
            return () => { liveRef._listeners.delete(setValue); };
        }, [liveRef]);
        return value;
    }
    exports.useLiveRefState = useLiveRefState;
});
!function (e, t) { if ("function" == typeof define && define.amd)
    define("hoverintent", ["module"], t);
else if ("undefined" != typeof exports)
    t(module);
else {
    var n = { exports: {} };
    t(n), e.hoverintent = n.exports;
} }(this, function (e) {
    "use strict";
    var t = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var o in n)
            Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);
    } return e; };
    e.exports = function (e, n, o) { function i(e, t) { return y && (y = clearTimeout(y)), b = 0, p ? void 0 : o.call(e, t); } function r(e) { m = e.clientX, d = e.clientY; } function u(e, t) { if (y && (y = clearTimeout(y)), Math.abs(h - m) + Math.abs(E - d) < x.sensitivity)
        return b = 1, p ? void 0 : n.call(e, t); h = m, E = d, y = setTimeout(function () { u(e, t); }, x.interval); } function s(t) { return L = !0, y && (y = clearTimeout(y)), e.removeEventListener("mousemove", r, !1), 1 !== b && (h = t.clientX, E = t.clientY, e.addEventListener("mousemove", r, !1), y = setTimeout(function () { u(e, t); }, x.interval)), this; } function c(t) { return L = !1, y && (y = clearTimeout(y)), e.removeEventListener("mousemove", r, !1), 1 === b && (y = setTimeout(function () { i(e, t); }, x.timeout)), this; } function v(t) { L || (p = !0, n.call(e, t)); } function a(t) { !L && p && (p = !1, o.call(e, t)); } function f() { e.addEventListener("focus", v, !1), e.addEventListener("blur", a, !1); } function l() { e.removeEventListener("focus", v, !1), e.removeEventListener("blur", a, !1); } var m, d, h, E, L = !1, p = !1, T = {}, b = 0, y = 0, x = { sensitivity: 7, interval: 100, timeout: 0, handleFocus: !1 }; return T.options = function (e) { var n = e.handleFocus !== x.handleFocus; return x = t({}, x, e), n && (x.handleFocus ? f() : l()), T; }, T.remove = function () { e && (e.removeEventListener("mouseover", s, !1), e.removeEventListener("mouseout", c, !1), l()); }, e && (e.addEventListener("mouseover", s, !1), e.addEventListener("mouseout", c, !1)), T; };
});
define("demos/popover/hover", ["require", "exports", "demos/popover/hooks", "hoverintent"], function (require, exports, hooks_3, hoverintent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    hoverintent_1 = __importDefault(hoverintent_1);
    // This function returns a callback ref that will correctly set up and tear down the "hoverintent" package
    // when the element mounts and unmounts.
    // 
    // For "options" you can pass:
    // - `false` for plain hover with no intent
    // - `true` for default hover intent
    // - an object with options to pass to the "hoverintent" package
    function getHoverRef(setHovered, options = {}) {
        let element = null;
        let handle = null;
        const onOver = () => setHovered(true);
        const onOut = () => setHovered(false);
        return (newElement) => {
            if (newElement === element) {
                return;
            }
            element = newElement;
            if (handle) {
                handle.remove();
                handle = null;
            }
            if (element) {
                handle = hoverintent_1.default(element, onOver, onOut);
                const { intent = false } = options;
                if (intent === false) {
                    handle.options({ sensitivity: Infinity });
                }
                else if (typeof intent === 'object') {
                    handle.options(intent);
                }
            }
        };
    }
    exports.getHoverRef = getHoverRef;
    // This hook returns a memoized callback ref that you can put on an element to get called when its
    // hover state changes.  By default, no hover intent is used, but you can pass `true` or an options
    // object to the "intent" option to enable hover intent.
    function useHover(setHovered, options = {}) {
        return hooks_3.useOnce(() => getHoverRef(setHovered, options));
    }
    exports.useHover = useHover;
});
define("demos/popover/popper", ["require", "exports", "react", "react-popper", "demos/popover/LiveRef"], function (require, exports, react_8, react_popper_1, LiveRef_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_8 = __importDefault(react_8);
    function usePopper() {
        const targetRef = LiveRef_1.useLiveRef(null);
        function BoundPopper(props) {
            const referenceElement = LiveRef_1.useLiveRefState(targetRef) || undefined;
            return react_8.default.createElement(react_popper_1.Popper, Object.assign({}, Object.assign({ referenceElement }, props)));
        }
        return [targetRef, BoundPopper];
    }
    exports.usePopper = usePopper;
    function PopperInner(props) {
        const { args, showArrow = true, children } = props;
        const { placement, ref, style, arrowProps } = args;
        return react_8.default.createElement("div", { className: `popover bs-popover-${placement}`, ref: ref, style: style },
            react_8.default.createElement("div", { className: "popover-inner", role: "tooltip", "aria-hidden": "true" }, children),
            showArrow && react_8.default.createElement("div", { className: "arrow", ref: arrowProps.ref, style: arrowProps.style }));
    }
    exports.PopperInner = PopperInner;
});
define("demos/popover/settings", ["require", "exports", "react", "reactstrap", "demos/popover/LiveRef"], function (require, exports, react_9, reactstrap_3, LiveRef_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_9 = __importDefault(react_9);
    function useSettings() {
        return {
            showArrow: LiveRef_2.useLiveRef(false),
            forceOpen: LiveRef_2.useLiveRef(false),
        };
    }
    exports.useSettings = useSettings;
    function SettingsForm({ settings }) {
        const showArrow = LiveRef_2.useLiveRefState(settings.showArrow);
        const forceOpen = LiveRef_2.useLiveRefState(settings.forceOpen);
        return react_9.default.createElement(reactstrap_3.Form, null,
            react_9.default.createElement(reactstrap_3.FormGroup, { check: true },
                react_9.default.createElement(reactstrap_3.Label, { check: true },
                    react_9.default.createElement(reactstrap_3.Input, { type: "checkbox", id: "showArrow", checked: showArrow, onChange: e => settings.showArrow(e.target.checked) }),
                    ' ',
                    "Show Arrow")),
            react_9.default.createElement(reactstrap_3.FormGroup, { check: true },
                react_9.default.createElement(reactstrap_3.Label, { check: true },
                    react_9.default.createElement(reactstrap_3.Input, { type: "checkbox", id: "forceOpen", checked: forceOpen, onChange: e => settings.forceOpen(e.target.checked) }),
                    ' ',
                    "Force Open")));
    }
    exports.SettingsForm = SettingsForm;
});
define("demos/popover/index", ["require", "exports", "react", "react-dom", "reactstrap", "demos/popover/LiveRef", "demos/popover/hooks", "demos/popover/hover", "demos/popover/popper", "demos/popover/settings"], function (require, exports, react_10, react_dom_4, reactstrap_4, LiveRef_3, hooks_4, hover_1, popper_1, settings_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_10 = __importDefault(react_10);
    react_dom_4 = __importDefault(react_dom_4);
    function usePopoverComputeShown(forceOpen) {
        const isTargetHoveredRef = LiveRef_3.useLiveRef(false);
        const isPopoverHoveredRef = LiveRef_3.useLiveRef(false);
        const ComputeShown = hooks_4.useComputingWrapper(() => {
            const isTargetHovered = LiveRef_3.useLiveRefState(isTargetHoveredRef);
            const isPopoverHovered = LiveRef_3.useLiveRefState(isPopoverHoveredRef);
            const isForceOpen = forceOpen ? LiveRef_3.useLiveRefState(forceOpen) : false;
            return isTargetHovered || isPopoverHovered || isForceOpen;
        });
        const result = [ComputeShown, isTargetHoveredRef, isPopoverHoveredRef];
        return result;
    }
    function usePopoverHoverLogic(popperTargetRef, forceOpen) {
        const [ComputeShown, isTargetHoveredRef, isPopoverHoveredRef] = usePopoverComputeShown(forceOpen);
        const targetHover = hover_1.useHover(isTargetHoveredRef, { intent: { timeout: 1000 } });
        const targetRef = hooks_4.useAllCallbacks(popperTargetRef, targetHover);
        const popoverRef = hover_1.useHover(isPopoverHoveredRef);
        const result = [ComputeShown, targetRef, popoverRef];
        return result;
    }
    function ParagraphWithPopover({ settings }) {
        const showArrow = LiveRef_3.useLiveRefState(settings.showArrow);
        const [popperTargetRef, BoundPopper] = popper_1.usePopper();
        const [ComputeShown, targetRef, popoverRef] = usePopoverHoverLogic(popperTargetRef, settings.forceOpen);
        return react_10.default.createElement(react_10.default.Fragment, null,
            react_10.default.createElement("p", null,
                "This link has a ",
                react_10.default.createElement("a", { ref: targetRef, href: "#" }, "popover")),
            react_10.default.createElement(ComputeShown, null, shown => react_10.default.createElement(reactstrap_4.Fade, { in: shown, mountOnEnter: true, unmountOnExit: true, enter: false },
                react_10.default.createElement(BoundPopper, { placement: "bottom", innerRef: popoverRef }, args => react_10.default.createElement(popper_1.PopperInner, { args: args, showArrow: showArrow },
                    react_10.default.createElement(reactstrap_4.PopoverBody, null,
                        react_10.default.createElement("h1", null, "Woohoo"),
                        react_10.default.createElement("p", null, "This is all inside the popover.")))))));
    }
    function App() {
        const settings = settings_1.useSettings();
        const code = hooks_4.usePromise(getCode);
        return react_10.default.createElement("main", { role: "main", className: "container mt-5" },
            react_10.default.createElement(reactstrap_4.Jumbotron, null,
                react_10.default.createElement("h1", null, "Hello, Reactstrap!"),
                react_10.default.createElement(ParagraphWithPopover, { settings: settings })),
            react_10.default.createElement("h4", null, "Settings:"),
            react_10.default.createElement(settings_1.SettingsForm, { settings: settings }),
            react_10.default.createElement("h4", null, "Code:"),
            react_10.default.createElement("pre", { className: "small" },
                react_10.default.createElement("code", null, code)));
    }
    function getCode() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch('index.tsx');
            const text = yield response.text();
            return text;
        });
    }
    const root = document.getElementById('root');
    react_dom_4.default.render(react_10.default.createElement(App, null), root);
});
define("demos/popover-classes/live/Receiver", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function combineReceivers(...receivers) {
        return (newValue) => {
            receivers.forEach(r => r(newValue));
        };
    }
    exports.combineReceivers = combineReceivers;
});
define("demos/popover-classes/live/Listenable", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("demos/popover-classes/live/Listen", ["require", "exports", "react"], function (require, exports, react_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_11 = __importDefault(react_11);
    class Listen extends react_11.default.Component {
        constructor(props) {
            super(props);
            this.receivers = {};
            const initialState = {};
            const { to: listenables } = props;
            // calculate initial state and create receivers
            for (const key in listenables) {
                initialState[key] = listenables[key].peek();
                this.receivers[key] = (newValue) => {
                    this.setState(state => (Object.assign({}, state, { [key]: newValue })));
                };
            }
            this.state = initialState;
        }
        componentDidMount() {
            const { to: listenables } = this.props;
            // update all receivers and listen to future changes
            for (const key in listenables) {
                const listenable = listenables[key];
                const receiver = this.receivers[key];
                receiver(listenable.peek());
                listenable.listen(receiver);
            }
        }
        componentDidUpdate(prevProps) {
            const { to: oldListenables } = prevProps;
            const { to: newListenables } = this.props;
            // unlisten and relisten for each listener that changed.
            // keys should be the same in oldListenables and newListenables
            for (const key in newListenables) {
                const oldListenable = oldListenables[key];
                const newListenable = newListenables[key];
                if (oldListenable !== newListenable) {
                    const receiver = this.receivers[key];
                    oldListenable.unlisten(receiver);
                    receiver(newListenable.peek());
                    newListenable.listen(receiver);
                }
            }
        }
        componentWillUnmount() {
            const { to: listenables } = this.props;
            // unlisten
            for (const key in listenables) {
                listenables[key].unlisten(this.receivers[key]);
            }
        }
        render() {
            return this.props.children(this.state);
        }
    }
    exports.Listen = Listen;
});
define("demos/popover-classes/live/LiveVar", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createLiveVar(initialValue) {
        const receivers = new Set();
        let currentValue = initialValue;
        const LiveVar = (newValue) => {
            currentValue = newValue;
            receivers.forEach(r => r(newValue));
        };
        LiveVar.listen = (receiver) => void receivers.add(receiver);
        LiveVar.unlisten = (receiver) => void receivers.delete(receiver);
        LiveVar.peek = () => currentValue;
        return LiveVar;
    }
    exports.createLiveVar = createLiveVar;
    exports.createLiveDOMVar = (initialValue = null) => createLiveVar(initialValue);
});
define("demos/popover-classes/live/index", ["require", "exports", "demos/popover-classes/live/Receiver", "demos/popover-classes/live/Listen", "demos/popover-classes/live/LiveVar"], function (require, exports, Receiver_2, Listen_2, LiveVar_3) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(Receiver_2);
    __export(Listen_2);
    __export(LiveVar_3);
});
define("demos/popover-classes/components/Hover", ["require", "exports", "hoverintent"], function (require, exports, hoverintent_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    hoverintent_2 = __importDefault(hoverintent_2);
    // This function returns a callback ref that will correctly set up and tear down the "hoverintent" package
    // when the element mounts and unmounts.
    // 
    // For "options" you can pass:
    // - `false` for plain hover with no intent
    // - `true` for default hover intent
    // - an object with options to pass to the "hoverintent" package
    function createHover(setIsHovered, options = {}) {
        let element = null;
        let handle = null;
        const onOver = () => setIsHovered(true);
        const onOut = () => setIsHovered(false);
        const targetElement = (newElement) => {
            if (newElement === element) {
                return;
            }
            element = newElement;
            if (handle) {
                handle.remove();
                handle = null;
            }
            if (element) {
                handle = hoverintent_2.default(element, onOver, onOut);
                const { intent = false } = options;
                if (intent === false) {
                    handle.options({ sensitivity: Infinity });
                }
                else if (typeof intent === 'object') {
                    handle.options(intent);
                }
            }
        };
        return { targetElement };
    }
    exports.createHover = createHover;
});
define("demos/popover-classes/components/ListenableHover", ["require", "exports", "demos/popover-classes/live/index", "demos/popover-classes/components/Hover"], function (require, exports, live_3, Hover_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createListenableHover(options) {
        const isHovered = live_3.createLiveVar(false);
        const hover = Hover_1.createHover(isHovered, options);
        return {
            targetElement: hover.targetElement,
            isHovered,
        };
    }
    exports.createListenableHover = createListenableHover;
});
define("demos/popover-classes/components/Popover", ["require", "exports", "react", "reactstrap", "demos/popover-classes/components/ListenableHover", "demos/popover-classes/live/index", "react-popper"], function (require, exports, react_12, reactstrap_5, ListenableHover_1, live_4, react_popper_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_12 = __importDefault(react_12);
    function createPopover() {
        const referenceHover = ListenableHover_1.createListenableHover({ intent: { timeout: 1000 } });
        const popoverHover = ListenableHover_1.createListenableHover({ intent: false });
        const referenceElement = live_4.createLiveDOMVar();
        const referenceWithHover = live_4.combineReceivers(referenceElement, referenceHover.targetElement);
        return {
            referenceElement: referenceWithHover,
            BoundPopover: ({ showArrow = true, forceOpen = false, placement, children, }) => react_12.default.createElement(live_4.Listen, { to: {
                    isTargetHovered: referenceHover.isHovered,
                    isPopoverHovered: popoverHover.isHovered,
                    referenceElement,
                } }, ({ isTargetHovered, isPopoverHovered, referenceElement }) => {
                const shown = isTargetHovered || isPopoverHovered || forceOpen;
                return react_12.default.createElement(reactstrap_5.Fade, { in: shown, mountOnEnter: true, unmountOnExit: true, enter: false },
                    react_12.default.createElement(react_popper_2.Popper, { referenceElement: referenceElement || undefined, placement: placement, innerRef: popoverHover.targetElement, key: String(showArrow) }, ({ ref, style, arrowProps }) => 
                    // Attach Popover's refs and styles, and apply Bootstrap classes.
                    // The caller is expected to nest popover-header and/or popover-body inside.
                    // TODO: perhaps provide a way to customize the style, such as by
                    // adding extra classNames.
                    react_12.default.createElement("div", { className: `popover bs-popover-${placement}`, ref: ref, style: style },
                        react_12.default.createElement("div", { className: "popover-inner", role: "tooltip", "aria-hidden": "true" }, children),
                        showArrow && react_12.default.createElement("div", { className: "arrow", ref: arrowProps.ref, style: arrowProps.style }))));
            }),
        };
    }
    exports.createPopover = createPopover;
});
define("demos/popover-classes/basic", ["require", "exports", "react", "react-dom", "reactstrap", "demos/popover-classes/components/Popover"], function (require, exports, react_13, react_dom_5, reactstrap_6, Popover_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_13 = __importDefault(react_13);
    react_dom_5 = __importDefault(react_dom_5);
    class ParagraphWithPopover extends react_13.default.Component {
        constructor() {
            super(...arguments);
            this.popover = Popover_1.createPopover();
        }
        render() {
            const { BoundPopover } = this.popover;
            return react_13.default.createElement(react_13.default.Fragment, null,
                react_13.default.createElement("p", null,
                    "This link has a ",
                    react_13.default.createElement("a", { ref: this.popover.referenceElement, href: "#" }, "popover")),
                react_13.default.createElement(BoundPopover, { placement: "bottom" },
                    react_13.default.createElement(reactstrap_6.PopoverBody, null,
                        react_13.default.createElement("h1", null, "Woohoo"),
                        react_13.default.createElement("p", null, "This is all inside the popover."))));
        }
    }
    class App extends react_13.default.Component {
        render() {
            return react_13.default.createElement("main", { role: "main", className: "container mt-5" },
                react_13.default.createElement(reactstrap_6.Jumbotron, null,
                    react_13.default.createElement("h1", null, "Hello, Reactstrap!"),
                    react_13.default.createElement(ParagraphWithPopover, null)));
        }
    }
    const root = document.getElementById('root');
    react_dom_5.default.render(react_13.default.createElement(App, null), root);
});
define("demos/popover-classes/settings", ["require", "exports", "react", "reactstrap", "demos/popover-classes/live/index"], function (require, exports, react_14, reactstrap_7, live_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_14 = __importDefault(react_14);
    function createSettings() {
        return {
            showArrow: live_5.createLiveVar(false),
            forceOpen: live_5.createLiveVar(false),
        };
    }
    exports.createSettings = createSettings;
    function SettingsForm({ settings }) {
        return react_14.default.createElement(live_5.Listen, { to: settings }, ({ showArrow, forceOpen }) => react_14.default.createElement(reactstrap_7.Form, null,
            react_14.default.createElement(reactstrap_7.FormGroup, { check: true },
                react_14.default.createElement(reactstrap_7.Label, { check: true },
                    react_14.default.createElement(reactstrap_7.Input, { type: "checkbox", id: "showArrow", checked: showArrow, onChange: e => settings.showArrow(e.target.checked) }),
                    ' ',
                    "Show Arrow")),
            react_14.default.createElement(reactstrap_7.FormGroup, { check: true },
                react_14.default.createElement(reactstrap_7.Label, { check: true },
                    react_14.default.createElement(reactstrap_7.Input, { type: "checkbox", id: "forceOpen", checked: forceOpen, onChange: e => settings.forceOpen(e.target.checked) }),
                    ' ',
                    "Force Open"))));
    }
    exports.SettingsForm = SettingsForm;
});
define("demos/popover-classes/index", ["require", "exports", "react", "react-dom", "reactstrap", "demos/popover-classes/settings", "demos/popover-classes/live/index", "demos/popover-classes/components/Popover"], function (require, exports, react_15, react_dom_6, reactstrap_8, settings_2, live_6, Popover_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_15 = __importDefault(react_15);
    react_dom_6 = __importDefault(react_dom_6);
    class ParagraphWithPopover extends react_15.default.Component {
        constructor() {
            super(...arguments);
            this.popover = Popover_2.createPopover();
        }
        render() {
            const { BoundPopover } = this.popover;
            return react_15.default.createElement(react_15.default.Fragment, null,
                react_15.default.createElement("p", null,
                    "This link has a ",
                    react_15.default.createElement("a", { ref: this.popover.referenceElement, href: "#" }, "popover")),
                react_15.default.createElement(live_6.Listen, { to: {
                        forceOpen: this.props.settings.forceOpen,
                        showArrow: this.props.settings.showArrow,
                    } }, ({ forceOpen, showArrow }) => react_15.default.createElement(BoundPopover, { forceOpen: forceOpen, showArrow: showArrow, placement: "bottom" },
                    react_15.default.createElement(reactstrap_8.PopoverBody, null,
                        react_15.default.createElement("h1", null, "Woohoo"),
                        react_15.default.createElement("p", null, "This is all inside the popover.")))));
        }
    }
    class App extends react_15.default.Component {
        constructor() {
            super(...arguments);
            this.settings = settings_2.createSettings();
        }
        render() {
            return react_15.default.createElement("main", { role: "main", className: "container mt-5" },
                react_15.default.createElement(reactstrap_8.Jumbotron, null,
                    react_15.default.createElement("h1", null, "Hello, Reactstrap!"),
                    react_15.default.createElement(ParagraphWithPopover, { settings: this.settings })),
                react_15.default.createElement("h4", null, "Settings:"),
                react_15.default.createElement(settings_2.SettingsForm, { settings: this.settings }));
        }
    }
    const root = document.getElementById('root');
    react_dom_6.default.render(react_15.default.createElement(App, null), root);
});
define("demos/prosemirror-hello-world/Editor", ["require", "exports", "react", "prosemirror-state", "prosemirror-view", "prosemirror-history", "prosemirror-keymap", "prosemirror-model", "prosemirror-commands", "lib/live/index"], function (require, exports, react_16, prosemirror_state_1, prosemirror_view_1, prosemirror_history_1, prosemirror_keymap_1, prosemirror_model_1, prosemirror_commands_1, live_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_16 = __importStar(react_16);
    const pDOM = ['p', 0];
    const brDOM = ['br'];
    const nodes = {
        // :: NodeSpec The top level document node.
        doc: {
            content: 'text*',
        },
        paragraph: {
            content: 'inline*',
            group: 'block',
            parseDOM: [{ tag: 'p' }],
            toDOM() {
                return pDOM;
            },
        },
        text: {
            group: 'inline',
        },
        hard_break: {
            inline: true,
            group: 'inline',
            selectable: false,
            parseDOM: [{ tag: 'br' }],
            toDOM() {
                return brDOM;
            },
        },
    };
    const schema = new prosemirror_model_1.Schema({ nodes });
    const plugins = [
        prosemirror_history_1.history(),
        prosemirror_keymap_1.keymap({
            'Mod-z': prosemirror_history_1.undo,
            'Mod-y': prosemirror_history_1.redo,
            'Shift-Enter': (state, dispatch) => {
                const br = schema.nodes.hard_break;
                dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());
                return true;
            },
        }),
        prosemirror_keymap_1.keymap(prosemirror_commands_1.baseKeymap),
    ];
    function createEditorView(state, dom) {
        const view = new prosemirror_view_1.EditorView({ mount: dom }, {
            state,
            dispatchTransaction(transaction) {
                const newState = view.state.apply(transaction);
                view.updateState(newState);
                console.log(newState.doc.toJSON());
            }
        });
        return view;
    }
    function Editor() {
        const state = live_7.useOnce(() => prosemirror_state_1.EditorState.create({ schema, plugins }));
        const view = react_16.useRef();
        const domCallback = react_16.useCallback((dom) => {
            if (!dom) {
                if (view.current) {
                    view.current.destroy();
                }
            }
            else {
                view.current = createEditorView(state, dom);
            }
        }, []);
        return react_16.default.createElement("div", { className: "editor form-control", ref: domCallback });
    }
    exports.Editor = Editor;
});
define("demos/prosemirror-hello-world/index", ["require", "exports", "react", "react-dom", "demos/prosemirror-hello-world/Editor"], function (require, exports, react_17, react_dom_7, Editor_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_17 = __importDefault(react_17);
    react_dom_7 = __importDefault(react_dom_7);
    function App() {
        return react_17.default.createElement("main", { role: "main", className: "container mt-5" },
            react_17.default.createElement("h1", null, "Hello, Reactstrap!"),
            react_17.default.createElement(Editor_1.Editor, null));
    }
    const root = document.getElementById('root');
    react_dom_7.default.render(react_17.default.createElement(App, null), root);
});
define("demos/react-hello-world/index", ["require", "exports", "react", "react-dom"], function (require, exports, react_18, react_dom_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_18 = __importDefault(react_18);
    react_dom_8 = __importDefault(react_dom_8);
    function App() {
        return react_18.default.createElement("h1", null, "React!");
    }
    const root = document.getElementById('root');
    react_dom_8.default.render(react_18.default.createElement(App, null), root);
});
define("demos/reactstrap-hello-world/index", ["require", "exports", "react", "react-dom", "reactstrap"], function (require, exports, react_19, react_dom_9, reactstrap_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_19 = __importDefault(react_19);
    react_dom_9 = __importDefault(react_dom_9);
    function App() {
        return react_19.default.createElement("main", { role: "main", className: "container mt-5" },
            react_19.default.createElement("h1", null, "Hello, Reactstrap!"),
            react_19.default.createElement(reactstrap_9.Alert, { color: "primary" }, "This is a primary alert \u2014 check it out!"));
    }
    const root = document.getElementById('root');
    react_dom_9.default.render(react_19.default.createElement(App, null), root);
});
define("lib/DOMHooks", ["require", "exports", "react", "ResizeSensor"], function (require, exports, react_20, ResizeSensor_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_20 = __importDefault(react_20);
    ResizeSensor_1 = __importDefault(ResizeSensor_1);
    function useDevicePixelRatio() {
        const [dpr, setDPR] = react_20.default.useState(window.devicePixelRatio);
        react_20.default.useEffect(() => {
            const onResize = () => {
                setDPR(window.devicePixelRatio);
            };
            window.addEventListener('resize', onResize);
            return () => {
                window.removeEventListener('resize', onResize);
            };
        }, []);
        return dpr;
    }
    exports.useDevicePixelRatio = useDevicePixelRatio;
    function useSize(ref) {
        const [width, setWidth] = react_20.default.useState(0);
        const [height, setHeight] = react_20.default.useState(0);
        react_20.default.useLayoutEffect(() => {
            if (!ref.current)
                return;
            function update() {
                if (!ref.current)
                    return;
                const newRect = ref.current.getBoundingClientRect();
                setWidth(newRect.width);
                setHeight(newRect.height);
            }
            update();
            // TODO: bind this in a way that it doesn't get recreated every time,
            // and test/demo it properly
            const sensor = new ResizeSensor_1.default(ref.current, update);
            return () => sensor.detach();
        });
        return { width, height };
    }
    exports.useSize = useSize;
});
define("demos/size-hook/index", ["require", "exports", "react", "react-dom", "lib/DOMHooks"], function (require, exports, react_21, react_dom_10, DOMHooks) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_21 = __importDefault(react_21);
    react_dom_10 = __importDefault(react_dom_10);
    DOMHooks = __importStar(DOMHooks);
    function App() {
        const ref = react_21.default.useRef(null);
        const { width, height } = DOMHooks.useSize(ref);
        const dpr = DOMHooks.useDevicePixelRatio();
        return react_21.default.createElement("div", { ref: ref, style: {
                background: 'blue',
                height: '100vh',
            } },
            react_21.default.createElement("div", { style: { position: 'absolute', left: 0, top: 0, width: '50%', height: '50%', background: 'red' } }),
            react_21.default.createElement("div", { style: { position: 'absolute', right: 0, bottom: 0, width: '50%', height: '50%', background: 'purple' } }),
            react_21.default.createElement("div", { style: {
                    position: 'absolute',
                    left: 0, right: 0, top: 0, bottom: 0,
                    display: 'flex',
                } },
                react_21.default.createElement("div", { style: {
                        fontSize: 36,
                        color: 'white',
                        margin: 'auto',
                    } },
                    react_21.default.createElement("div", null,
                        "width: ",
                        width),
                    react_21.default.createElement("div", null,
                        "height: ",
                        height),
                    react_21.default.createElement("div", null,
                        "devicePixelRatio: ",
                        dpr))),
            react_21.default.createElement("div", { style: {
                    position: 'absolute',
                    left: 10,
                    right: 10,
                    bottom: 10,
                    background: '#ddd',
                    padding: 10,
                } }, "This demo demonstrates a full-window div whose size is efficiently watched.  Try resizing the window, and also zooming (Command-Minus, Command-Equals on a Mac)."));
    }
    const root = document.getElementById('root');
    react_dom_10.default.render(react_21.default.createElement(App, null), root);
});
define("demos/surface/index", ["require", "exports", "react", "react-dom", "lib/DOMHooks"], function (require, exports, react_22, react_dom_11, DOMHooks) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    react_22 = __importDefault(react_22);
    react_dom_11 = __importDefault(react_dom_11);
    DOMHooks = __importStar(DOMHooks);
    function App() {
        return react_22.default.createElement("div", { style: {
                height: '100vh',
                display: 'flex',
            } },
            react_22.default.createElement("div", { style: {
                    background: '#ddd',
                    flex: 1,
                    margin: '20px',
                    position: 'relative',
                } },
                react_22.default.createElement(Surface, null)));
    }
    function Surface() {
        const ref = react_22.default.useRef(null);
        const { width, height } = DOMHooks.useSize(ref);
        const handleMouseDown = react_22.default.useCallback((e) => {
            if (!ref.current)
                return;
            const rect = ref.current.getBoundingClientRect();
            console.log(e.clientX, e.clientY, rect.left, rect.top);
        }, []);
        react_22.default.useLayoutEffect(() => {
            if (ref.current && getComputedStyle(ref.current.parentElement).position !== 'relative') {
                throw new Error('Surface parent element must have position: relative');
            }
        }, []);
        return react_22.default.createElement("div", { ref: ref, style: {
                position: 'absolute',
                top: 0,
                left: 0,
                bottom: 0,
                right: 0,
            }, onMouseDown: handleMouseDown });
    }
    const root = document.getElementById('root');
    react_dom_11.default.render(react_22.default.createElement(App, null), root);
});
/**
 * Copyright Marc J. Schmidt. See the LICENSE file at the top-level
 * directory of this distribution and at
 * https://github.com/marcj/css-element-queries/blob/master/LICENSE.
 */
(function (root, factory) {
    if (typeof define === "function" && define.amd) {
        define('ResizeSensor', factory);
    }
    else if (typeof exports === "object") {
        module.exports = factory();
    }
    else {
        root.ResizeSensor = factory();
    }
}(typeof window !== 'undefined' ? window : this, function () {
    // Make sure it does not throw in a SSR (Server Side Rendering) situation
    if (typeof window === "undefined") {
        return null;
    }
    // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.
    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and
    // would generate too many unnecessary events.
    var requestAnimationFrame = window.requestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        function (fn) {
            return window.setTimeout(fn, 20);
        };
    /**
     * Iterate over each of the provided element(s).
     *
     * @param {HTMLElement|HTMLElement[]} elements
     * @param {Function}                  callback
     */
    function forEachElement(elements, callback) {
        var elementsType = Object.prototype.toString.call(elements);
        var isCollectionTyped = ('[object Array]' === elementsType
            || ('[object NodeList]' === elementsType)
            || ('[object HTMLCollection]' === elementsType)
            || ('[object Object]' === elementsType)
            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery
            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools
        );
        var i = 0, j = elements.length;
        if (isCollectionTyped) {
            for (; i < j; i++) {
                callback(elements[i]);
            }
        }
        else {
            callback(elements);
        }
    }
    /**
    * Get element size
    * @param {HTMLElement} element
    * @returns {Object} {width, height}
    */
    function getElementSize(element) {
        if (!element.getBoundingClientRect) {
            return {
                width: element.offsetWidth,
                height: element.offsetHeight
            };
        }
        var rect = element.getBoundingClientRect();
        return {
            width: Math.round(rect.width),
            height: Math.round(rect.height)
        };
    }
    /**
     * Class for dimension change detection.
     *
     * @param {Element|Element[]|Elements|jQuery} element
     * @param {Function} callback
     *
     * @constructor
     */
    var ResizeSensor = function (element, callback) {
        /**
         *
         * @constructor
         */
        function EventQueue() {
            var q = [];
            this.add = function (ev) {
                q.push(ev);
            };
            var i, j;
            this.call = function (sizeInfo) {
                for (i = 0, j = q.length; i < j; i++) {
                    q[i].call(this, sizeInfo);
                }
            };
            this.remove = function (ev) {
                var newQueue = [];
                for (i = 0, j = q.length; i < j; i++) {
                    if (q[i] !== ev)
                        newQueue.push(q[i]);
                }
                q = newQueue;
            };
            this.length = function () {
                return q.length;
            };
        }
        /**
         *
         * @param {HTMLElement} element
         * @param {Function}    resized
         */
        function attachResizeEvent(element, resized) {
            if (!element)
                return;
            if (element.resizedAttached) {
                element.resizedAttached.add(resized);
                return;
            }
            element.resizedAttached = new EventQueue();
            element.resizedAttached.add(resized);
            element.resizeSensor = document.createElement('div');
            element.resizeSensor.dir = 'ltr';
            element.resizeSensor.className = 'resize-sensor';
            var style = 'pointer-events: none; position: absolute; left: 0px; top: 0px; right: 0; bottom: 0; ' +
                'overflow: hidden; z-index: -1; visibility: hidden; max-width: 100%;';
            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';
            element.resizeSensor.style.cssText = style;
            element.resizeSensor.innerHTML =
                '<div class="resize-sensor-expand" style="' + style + '">' +
                    '<div style="' + styleChild + '"></div>' +
                    '</div>' +
                    '<div class="resize-sensor-shrink" style="' + style + '">' +
                    '<div style="' + styleChild + ' width: 200%; height: 200%"></div>' +
                    '</div>';
            element.appendChild(element.resizeSensor);
            var computedStyle = window.getComputedStyle(element);
            var position = computedStyle ? computedStyle.getPropertyValue('position') : null;
            if ('absolute' !== position && 'relative' !== position && 'fixed' !== position) {
                element.style.position = 'relative';
            }
            var expand = element.resizeSensor.childNodes[0];
            var expandChild = expand.childNodes[0];
            var shrink = element.resizeSensor.childNodes[1];
            var dirty, rafId;
            var size = getElementSize(element);
            var lastWidth = size.width;
            var lastHeight = size.height;
            var initialHiddenCheck = true;
            var lastAnimationFrame = 0;
            var resetExpandShrink = function () {
                var width = element.offsetWidth;
                var height = element.offsetHeight;
                expandChild.style.width = (width + 10) + 'px';
                expandChild.style.height = (height + 10) + 'px';
                expand.scrollLeft = width + 10;
                expand.scrollTop = height + 10;
                shrink.scrollLeft = width + 10;
                shrink.scrollTop = height + 10;
            };
            var reset = function () {
                // Check if element is hidden
                if (initialHiddenCheck) {
                    var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;
                    if (invisible) {
                        // Check in next frame
                        if (!lastAnimationFrame) {
                            lastAnimationFrame = requestAnimationFrame(function () {
                                lastAnimationFrame = 0;
                                reset();
                            });
                        }
                        return;
                    }
                    else {
                        // Stop checking
                        initialHiddenCheck = false;
                    }
                }
                resetExpandShrink();
            };
            element.resizeSensor.resetSensor = reset;
            var onResized = function () {
                rafId = 0;
                if (!dirty)
                    return;
                lastWidth = size.width;
                lastHeight = size.height;
                if (element.resizedAttached) {
                    element.resizedAttached.call(size);
                }
            };
            var onScroll = function () {
                size = getElementSize(element);
                dirty = size.width !== lastWidth || size.height !== lastHeight;
                if (dirty && !rafId) {
                    rafId = requestAnimationFrame(onResized);
                }
                reset();
            };
            var addEvent = function (el, name, cb) {
                if (el.attachEvent) {
                    el.attachEvent('on' + name, cb);
                }
                else {
                    el.addEventListener(name, cb);
                }
            };
            addEvent(expand, 'scroll', onScroll);
            addEvent(shrink, 'scroll', onScroll);
            // Fix for custom Elements
            requestAnimationFrame(reset);
        }
        forEachElement(element, function (elem) {
            attachResizeEvent(elem, callback);
        });
        this.detach = function (ev) {
            ResizeSensor.detach(element, ev);
        };
        this.reset = function () {
            element.resizeSensor.resetSensor();
        };
    };
    ResizeSensor.reset = function (element) {
        forEachElement(element, function (elem) {
            elem.resizeSensor.resetSensor();
        });
    };
    ResizeSensor.detach = function (element, ev) {
        forEachElement(element, function (elem) {
            if (!elem)
                return;
            if (elem.resizedAttached && typeof ev === "function") {
                elem.resizedAttached.remove(ev);
                if (elem.resizedAttached.length())
                    return;
            }
            if (elem.resizeSensor) {
                if (elem.contains(elem.resizeSensor)) {
                    elem.removeChild(elem.resizeSensor);
                }
                delete elem.resizeSensor;
                delete elem.resizedAttached;
            }
        });
    };
    if (typeof MutationObserver !== "undefined") {
        var observer = new MutationObserver(function (mutations) {
            for (var i in mutations) {
                if (mutations.hasOwnProperty(i)) {
                    var items = mutations[i].addedNodes;
                    for (var j = 0; j < items.length; j++) {
                        if (items[j].resizeSensor) {
                            ResizeSensor.reset(items[j]);
                        }
                    }
                }
            }
        });
        document.addEventListener("DOMContentLoaded", function (event) {
            observer.observe(document.body, {
                childList: true,
                subtree: true,
            });
        });
    }
    return ResizeSensor;
}));
define("orderedmap", function (require, exports, module) {
    // ::- Persistent data structure representing an ordered mapping from
    // strings to values, with some convenient update methods.
    function OrderedMap(content) {
        this.content = content;
    }
    OrderedMap.prototype = {
        constructor: OrderedMap,
        find: function (key) {
            for (var i = 0; i < this.content.length; i += 2)
                if (this.content[i] === key)
                    return i;
            return -1;
        },
        // :: (string) → ?any
        // Retrieve the value stored under `key`, or return undefined when
        // no such key exists.
        get: function (key) {
            var found = this.find(key);
            return found == -1 ? undefined : this.content[found + 1];
        },
        // :: (string, any, ?string) → OrderedMap
        // Create a new map by replacing the value of `key` with a new
        // value, or adding a binding to the end of the map. If `newKey` is
        // given, the key of the binding will be replaced with that key.
        update: function (key, value, newKey) {
            var self = newKey && newKey != key ? this.remove(newKey) : this;
            var found = self.find(key), content = self.content.slice();
            if (found == -1) {
                content.push(newKey || key, value);
            }
            else {
                content[found + 1] = value;
                if (newKey)
                    content[found] = newKey;
            }
            return new OrderedMap(content);
        },
        // :: (string) → OrderedMap
        // Return a map with the given key removed, if it existed.
        remove: function (key) {
            var found = this.find(key);
            if (found == -1)
                return this;
            var content = this.content.slice();
            content.splice(found, 2);
            return new OrderedMap(content);
        },
        // :: (string, any) → OrderedMap
        // Add a new key to the start of the map.
        addToStart: function (key, value) {
            return new OrderedMap([key, value].concat(this.remove(key).content));
        },
        // :: (string, any) → OrderedMap
        // Add a new key to the end of the map.
        addToEnd: function (key, value) {
            var content = this.remove(key).content.slice();
            content.push(key, value);
            return new OrderedMap(content);
        },
        // :: (string, string, any) → OrderedMap
        // Add a key after the given key. If `place` is not found, the new
        // key is added to the end.
        addBefore: function (place, key, value) {
            var without = this.remove(key), content = without.content.slice();
            var found = without.find(place);
            content.splice(found == -1 ? content.length : found, 0, key, value);
            return new OrderedMap(content);
        },
        // :: ((key: string, value: any))
        // Call the given function for each key/value pair in the map, in
        // order.
        forEach: function (f) {
            for (var i = 0; i < this.content.length; i += 2)
                f(this.content[i], this.content[i + 1]);
        },
        // :: (union<Object, OrderedMap>) → OrderedMap
        // Create a new map by prepending the keys in this map that don't
        // appear in `map` before the keys in `map`.
        prepend: function (map) {
            map = OrderedMap.from(map);
            if (!map.size)
                return this;
            return new OrderedMap(map.content.concat(this.subtract(map).content));
        },
        // :: (union<Object, OrderedMap>) → OrderedMap
        // Create a new map by appending the keys in this map that don't
        // appear in `map` after the keys in `map`.
        append: function (map) {
            map = OrderedMap.from(map);
            if (!map.size)
                return this;
            return new OrderedMap(this.subtract(map).content.concat(map.content));
        },
        // :: (union<Object, OrderedMap>) → OrderedMap
        // Create a map containing all the keys in this map that don't
        // appear in `map`.
        subtract: function (map) {
            var result = this;
            map = OrderedMap.from(map);
            for (var i = 0; i < map.content.length; i += 2)
                result = result.remove(map.content[i]);
            return result;
        },
        // :: number
        // The amount of keys in this map.
        get size() {
            return this.content.length >> 1;
        }
    };
    // :: (?union<Object, OrderedMap>) → OrderedMap
    // Return a map with the given content. If null, create an empty
    // map. If given an ordered map, return that map itself. If given an
    // object, create a map from the object's properties.
    OrderedMap.from = function (value) {
        if (value instanceof OrderedMap)
            return value;
        var content = [];
        if (value)
            for (var prop in value)
                content.push(prop, value[prop]);
        return new OrderedMap(content);
    };
    module.exports = OrderedMap;
});
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.7
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define('popper.js', factory) :
            (global.Popper = factory());
}(this, (function () {
    'use strict';
    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
    var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
    var timeoutDuration = 0;
    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
        if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
            timeoutDuration = 1;
            break;
        }
    }
    function microtaskDebounce(fn) {
        var called = false;
        return function () {
            if (called) {
                return;
            }
            called = true;
            window.Promise.resolve().then(function () {
                called = false;
                fn();
            });
        };
    }
    function taskDebounce(fn) {
        var scheduled = false;
        return function () {
            if (!scheduled) {
                scheduled = true;
                setTimeout(function () {
                    scheduled = false;
                    fn();
                }, timeoutDuration);
            }
        };
    }
    var supportsMicroTasks = isBrowser && window.Promise;
    /**
    * Create a debounced version of a method, that's asynchronously deferred
    * but called in the minimum time possible.
    *
    * @method
    * @memberof Popper.Utils
    * @argument {Function} fn
    * @returns {Function}
    */
    var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
    /**
     * Check if the given variable is a function
     * @method
     * @memberof Popper.Utils
     * @argument {Any} functionToCheck - variable to check
     * @returns {Boolean} answer to: is a function?
     */
    function isFunction(functionToCheck) {
        var getType = {};
        return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
    }
    /**
     * Get CSS computed property of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Eement} element
     * @argument {String} property
     */
    function getStyleComputedProperty(element, property) {
        if (element.nodeType !== 1) {
            return [];
        }
        // NOTE: 1 DOM access here
        var window = element.ownerDocument.defaultView;
        var css = window.getComputedStyle(element, null);
        return property ? css[property] : css;
    }
    /**
     * Returns the parentNode or the host of the element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} parent
     */
    function getParentNode(element) {
        if (element.nodeName === 'HTML') {
            return element;
        }
        return element.parentNode || element.host;
    }
    /**
     * Returns the scrolling parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} scroll parent
     */
    function getScrollParent(element) {
        // Return body, `getScroll` will take care to get the correct `scrollTop` from it
        if (!element) {
            return document.body;
        }
        switch (element.nodeName) {
            case 'HTML':
            case 'BODY':
                return element.ownerDocument.body;
            case '#document':
                return element.body;
        }
        // Firefox want us to check `-x` and `-y` variations as well
        var _getStyleComputedProp = getStyleComputedProperty(element), overflow = _getStyleComputedProp.overflow, overflowX = _getStyleComputedProp.overflowX, overflowY = _getStyleComputedProp.overflowY;
        if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
            return element;
        }
        return getScrollParent(getParentNode(element));
    }
    var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
    var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
    /**
     * Determines if the browser is Internet Explorer
     * @method
     * @memberof Popper.Utils
     * @param {Number} version to check
     * @returns {Boolean} isIE
     */
    function isIE(version) {
        if (version === 11) {
            return isIE11;
        }
        if (version === 10) {
            return isIE10;
        }
        return isIE11 || isIE10;
    }
    /**
     * Returns the offset parent of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} offset parent
     */
    function getOffsetParent(element) {
        if (!element) {
            return document.documentElement;
        }
        var noOffsetParent = isIE(10) ? document.body : null;
        // NOTE: 1 DOM access here
        var offsetParent = element.offsetParent || null;
        // Skip hidden elements which don't have an offsetParent
        while (offsetParent === noOffsetParent && element.nextElementSibling) {
            offsetParent = (element = element.nextElementSibling).offsetParent;
        }
        var nodeName = offsetParent && offsetParent.nodeName;
        if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
            return element ? element.ownerDocument.documentElement : document.documentElement;
        }
        // .offsetParent will return the closest TH, TD or TABLE in case
        // no offsetParent is present, I hate this job...
        if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
            return getOffsetParent(offsetParent);
        }
        return offsetParent;
    }
    function isOffsetContainer(element) {
        var nodeName = element.nodeName;
        if (nodeName === 'BODY') {
            return false;
        }
        return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
    }
    /**
     * Finds the root node (document, shadowDOM root) of the given element
     * @method
     * @memberof Popper.Utils
     * @argument {Element} node
     * @returns {Element} root node
     */
    function getRoot(node) {
        if (node.parentNode !== null) {
            return getRoot(node.parentNode);
        }
        return node;
    }
    /**
     * Finds the offset parent common to the two provided nodes
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element1
     * @argument {Element} element2
     * @returns {Element} common offset parent
     */
    function findCommonOffsetParent(element1, element2) {
        // This check is needed to avoid errors in case one of the elements isn't defined for any reason
        if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
            return document.documentElement;
        }
        // Here we make sure to give as "start" the element that comes first in the DOM
        var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
        var start = order ? element1 : element2;
        var end = order ? element2 : element1;
        // Get common ancestor container
        var range = document.createRange();
        range.setStart(start, 0);
        range.setEnd(end, 0);
        var commonAncestorContainer = range.commonAncestorContainer;
        // Both nodes are inside #document
        if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
            if (isOffsetContainer(commonAncestorContainer)) {
                return commonAncestorContainer;
            }
            return getOffsetParent(commonAncestorContainer);
        }
        // one of the nodes is inside shadowDOM, find which one
        var element1root = getRoot(element1);
        if (element1root.host) {
            return findCommonOffsetParent(element1root.host, element2);
        }
        else {
            return findCommonOffsetParent(element1, getRoot(element2).host);
        }
    }
    /**
     * Gets the scroll value of the given element in the given side (top and left)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {String} side `top` or `left`
     * @returns {number} amount of scrolled pixels
     */
    function getScroll(element) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
        var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
        var nodeName = element.nodeName;
        if (nodeName === 'BODY' || nodeName === 'HTML') {
            var html = element.ownerDocument.documentElement;
            var scrollingElement = element.ownerDocument.scrollingElement || html;
            return scrollingElement[upperSide];
        }
        return element[upperSide];
    }
    /*
     * Sum or subtract the element scroll values (left and top) from a given rect object
     * @method
     * @memberof Popper.Utils
     * @param {Object} rect - Rect object you want to change
     * @param {HTMLElement} element - The element from the function reads the scroll values
     * @param {Boolean} subtract - set to true if you want to subtract the scroll values
     * @return {Object} rect - The modifier rect object
     */
    function includeScroll(rect, element) {
        var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var scrollTop = getScroll(element, 'top');
        var scrollLeft = getScroll(element, 'left');
        var modifier = subtract ? -1 : 1;
        rect.top += scrollTop * modifier;
        rect.bottom += scrollTop * modifier;
        rect.left += scrollLeft * modifier;
        rect.right += scrollLeft * modifier;
        return rect;
    }
    /*
     * Helper to detect borders of a given element
     * @method
     * @memberof Popper.Utils
     * @param {CSSStyleDeclaration} styles
     * Result of `getStyleComputedProperty` on the given element
     * @param {String} axis - `x` or `y`
     * @return {number} borders - The borders size of the given axis
     */
    function getBordersSize(styles, axis) {
        var sideA = axis === 'x' ? 'Left' : 'Top';
        var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
        return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
    }
    function getSize(axis, body, html, computedStyle) {
        return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
    }
    function getWindowSizes(document) {
        var body = document.body;
        var html = document.documentElement;
        var computedStyle = isIE(10) && getComputedStyle(html);
        return {
            height: getSize('Height', body, html, computedStyle),
            width: getSize('Width', body, html, computedStyle)
        };
    }
    var classCallCheck = function (instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    };
    var createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    var defineProperty = function (obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        }
        else {
            obj[key] = value;
        }
        return obj;
    };
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    /**
     * Given element offsets, generate an output similar to getBoundingClientRect
     * @method
     * @memberof Popper.Utils
     * @argument {Object} offsets
     * @returns {Object} ClientRect like output
     */
    function getClientRect(offsets) {
        return _extends({}, offsets, {
            right: offsets.left + offsets.width,
            bottom: offsets.top + offsets.height
        });
    }
    /**
     * Get bounding client rect of given element
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} element
     * @return {Object} client rect
     */
    function getBoundingClientRect(element) {
        var rect = {};
        // IE10 10 FIX: Please, don't ask, the element isn't
        // considered in DOM in some circumstances...
        // This isn't reproducible in IE10 compatibility mode of IE11
        try {
            if (isIE(10)) {
                rect = element.getBoundingClientRect();
                var scrollTop = getScroll(element, 'top');
                var scrollLeft = getScroll(element, 'left');
                rect.top += scrollTop;
                rect.left += scrollLeft;
                rect.bottom += scrollTop;
                rect.right += scrollLeft;
            }
            else {
                rect = element.getBoundingClientRect();
            }
        }
        catch (e) { }
        var result = {
            left: rect.left,
            top: rect.top,
            width: rect.right - rect.left,
            height: rect.bottom - rect.top
        };
        // subtract scrollbar size from sizes
        var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
        var width = sizes.width || element.clientWidth || result.right - result.left;
        var height = sizes.height || element.clientHeight || result.bottom - result.top;
        var horizScrollbar = element.offsetWidth - width;
        var vertScrollbar = element.offsetHeight - height;
        // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
        // we make this check conditional for performance reasons
        if (horizScrollbar || vertScrollbar) {
            var styles = getStyleComputedProperty(element);
            horizScrollbar -= getBordersSize(styles, 'x');
            vertScrollbar -= getBordersSize(styles, 'y');
            result.width -= horizScrollbar;
            result.height -= vertScrollbar;
        }
        return getClientRect(result);
    }
    function getOffsetRectRelativeToArbitraryNode(children, parent) {
        var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var isIE10 = isIE(10);
        var isHTML = parent.nodeName === 'HTML';
        var childrenRect = getBoundingClientRect(children);
        var parentRect = getBoundingClientRect(parent);
        var scrollParent = getScrollParent(children);
        var styles = getStyleComputedProperty(parent);
        var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
        var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);
        // In cases where the parent is fixed, we must ignore negative scroll in offset calc
        if (fixedPosition && isHTML) {
            parentRect.top = Math.max(parentRect.top, 0);
            parentRect.left = Math.max(parentRect.left, 0);
        }
        var offsets = getClientRect({
            top: childrenRect.top - parentRect.top - borderTopWidth,
            left: childrenRect.left - parentRect.left - borderLeftWidth,
            width: childrenRect.width,
            height: childrenRect.height
        });
        offsets.marginTop = 0;
        offsets.marginLeft = 0;
        // Subtract margins of documentElement in case it's being used as parent
        // we do this only on HTML because it's the only element that behaves
        // differently when margins are applied to it. The margins are included in
        // the box of the documentElement, in the other cases not.
        if (!isIE10 && isHTML) {
            var marginTop = parseFloat(styles.marginTop, 10);
            var marginLeft = parseFloat(styles.marginLeft, 10);
            offsets.top -= borderTopWidth - marginTop;
            offsets.bottom -= borderTopWidth - marginTop;
            offsets.left -= borderLeftWidth - marginLeft;
            offsets.right -= borderLeftWidth - marginLeft;
            // Attach marginTop and marginLeft because in some circumstances we may need them
            offsets.marginTop = marginTop;
            offsets.marginLeft = marginLeft;
        }
        if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
            offsets = includeScroll(offsets, parent);
        }
        return offsets;
    }
    function getViewportOffsetRectRelativeToArtbitraryNode(element) {
        var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var html = element.ownerDocument.documentElement;
        var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
        var width = Math.max(html.clientWidth, window.innerWidth || 0);
        var height = Math.max(html.clientHeight, window.innerHeight || 0);
        var scrollTop = !excludeScroll ? getScroll(html) : 0;
        var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;
        var offset = {
            top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
            left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
            width: width,
            height: height
        };
        return getClientRect(offset);
    }
    /**
     * Check if the given element is fixed or is inside a fixed parent
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @argument {Element} customContainer
     * @returns {Boolean} answer to "isFixed?"
     */
    function isFixed(element) {
        var nodeName = element.nodeName;
        if (nodeName === 'BODY' || nodeName === 'HTML') {
            return false;
        }
        if (getStyleComputedProperty(element, 'position') === 'fixed') {
            return true;
        }
        var parentNode = getParentNode(element);
        if (!parentNode) {
            return false;
        }
        return isFixed(parentNode);
    }
    /**
     * Finds the first parent of an element that has a transformed property defined
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Element} first transformed parent or documentElement
     */
    function getFixedPositionOffsetParent(element) {
        // This check is needed to avoid errors in case one of the elements isn't defined for any reason
        if (!element || !element.parentElement || isIE()) {
            return document.documentElement;
        }
        var el = element.parentElement;
        while (el && getStyleComputedProperty(el, 'transform') === 'none') {
            el = el.parentElement;
        }
        return el || document.documentElement;
    }
    /**
     * Computed the boundaries limits and return them
     * @method
     * @memberof Popper.Utils
     * @param {HTMLElement} popper
     * @param {HTMLElement} reference
     * @param {number} padding
     * @param {HTMLElement} boundariesElement - Element used to define the boundaries
     * @param {Boolean} fixedPosition - Is in fixed position mode
     * @returns {Object} Coordinates of the boundaries
     */
    function getBoundaries(popper, reference, padding, boundariesElement) {
        var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        // NOTE: 1 DOM access here
        var boundaries = { top: 0, left: 0 };
        var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
        // Handle viewport case
        if (boundariesElement === 'viewport') {
            boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
        }
        else {
            // Handle other cases based on DOM element used as boundaries
            var boundariesNode = void 0;
            if (boundariesElement === 'scrollParent') {
                boundariesNode = getScrollParent(getParentNode(reference));
                if (boundariesNode.nodeName === 'BODY') {
                    boundariesNode = popper.ownerDocument.documentElement;
                }
            }
            else if (boundariesElement === 'window') {
                boundariesNode = popper.ownerDocument.documentElement;
            }
            else {
                boundariesNode = boundariesElement;
            }
            var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
            // In case of HTML, we need a different computation
            if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
                var _getWindowSizes = getWindowSizes(popper.ownerDocument), height = _getWindowSizes.height, width = _getWindowSizes.width;
                boundaries.top += offsets.top - offsets.marginTop;
                boundaries.bottom = height + offsets.top;
                boundaries.left += offsets.left - offsets.marginLeft;
                boundaries.right = width + offsets.left;
            }
            else {
                // for all the other DOM elements, this one is good
                boundaries = offsets;
            }
        }
        // Add paddings
        padding = padding || 0;
        var isPaddingNumber = typeof padding === 'number';
        boundaries.left += isPaddingNumber ? padding : padding.left || 0;
        boundaries.top += isPaddingNumber ? padding : padding.top || 0;
        boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
        boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
        return boundaries;
    }
    function getArea(_ref) {
        var width = _ref.width, height = _ref.height;
        return width * height;
    }
    /**
     * Utility used to transform the `auto` placement to the placement with more
     * available space.
     * @method
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
        var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        if (placement.indexOf('auto') === -1) {
            return placement;
        }
        var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
        var rects = {
            top: {
                width: boundaries.width,
                height: refRect.top - boundaries.top
            },
            right: {
                width: boundaries.right - refRect.right,
                height: boundaries.height
            },
            bottom: {
                width: boundaries.width,
                height: boundaries.bottom - refRect.bottom
            },
            left: {
                width: refRect.left - boundaries.left,
                height: boundaries.height
            }
        };
        var sortedAreas = Object.keys(rects).map(function (key) {
            return _extends({
                key: key
            }, rects[key], {
                area: getArea(rects[key])
            });
        }).sort(function (a, b) {
            return b.area - a.area;
        });
        var filteredAreas = sortedAreas.filter(function (_ref2) {
            var width = _ref2.width, height = _ref2.height;
            return width >= popper.clientWidth && height >= popper.clientHeight;
        });
        var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
        var variation = placement.split('-')[1];
        return computedPlacement + (variation ? '-' + variation : '');
    }
    /**
     * Get offsets to the reference element
     * @method
     * @memberof Popper.Utils
     * @param {Object} state
     * @param {Element} popper - the popper element
     * @param {Element} reference - the reference element (the popper will be relative to this)
     * @param {Element} fixedPosition - is in fixed position mode
     * @returns {Object} An object containing the offsets which will be applied to the popper
     */
    function getReferenceOffsets(state, popper, reference) {
        var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
        return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
    }
    /**
     * Get the outer sizes of the given element (offset size + margins)
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element
     * @returns {Object} object containing width and height properties
     */
    function getOuterSizes(element) {
        var window = element.ownerDocument.defaultView;
        var styles = window.getComputedStyle(element);
        var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
        var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
        var result = {
            width: element.offsetWidth + y,
            height: element.offsetHeight + x
        };
        return result;
    }
    /**
     * Get the opposite placement of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement
     * @returns {String} flipped placement
     */
    function getOppositePlacement(placement) {
        var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
        return placement.replace(/left|right|bottom|top/g, function (matched) {
            return hash[matched];
        });
    }
    /**
     * Get offsets to the popper
     * @method
     * @memberof Popper.Utils
     * @param {Object} position - CSS position the Popper will get applied
     * @param {HTMLElement} popper - the popper element
     * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
     * @param {String} placement - one of the valid placement options
     * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
     */
    function getPopperOffsets(popper, referenceOffsets, placement) {
        placement = placement.split('-')[0];
        // Get popper node sizes
        var popperRect = getOuterSizes(popper);
        // Add position, width and height to our offsets object
        var popperOffsets = {
            width: popperRect.width,
            height: popperRect.height
        };
        // depending by the popper placement we have to compute its offsets slightly differently
        var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
        var mainSide = isHoriz ? 'top' : 'left';
        var secondarySide = isHoriz ? 'left' : 'top';
        var measurement = isHoriz ? 'height' : 'width';
        var secondaryMeasurement = !isHoriz ? 'height' : 'width';
        popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
        if (placement === secondarySide) {
            popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
        }
        else {
            popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
        }
        return popperOffsets;
    }
    /**
     * Mimics the `find` method of Array
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function find(arr, check) {
        // use native find if supported
        if (Array.prototype.find) {
            return arr.find(check);
        }
        // use `filter` to obtain the same behavior of `find`
        return arr.filter(check)[0];
    }
    /**
     * Return the index of the matching object
     * @method
     * @memberof Popper.Utils
     * @argument {Array} arr
     * @argument prop
     * @argument value
     * @returns index or -1
     */
    function findIndex(arr, prop, value) {
        // use native findIndex if supported
        if (Array.prototype.findIndex) {
            return arr.findIndex(function (cur) {
                return cur[prop] === value;
            });
        }
        // use `find` + `indexOf` if `findIndex` isn't supported
        var match = find(arr, function (obj) {
            return obj[prop] === value;
        });
        return arr.indexOf(match);
    }
    /**
     * Loop trough the list of modifiers and run them in order,
     * each of them will then edit the data object.
     * @method
     * @memberof Popper.Utils
     * @param {dataObject} data
     * @param {Array} modifiers
     * @param {String} ends - Optional modifier name used as stopper
     * @returns {dataObject}
     */
    function runModifiers(modifiers, data, ends) {
        var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
        modifiersToRun.forEach(function (modifier) {
            if (modifier['function']) {
                // eslint-disable-line dot-notation
                console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
            }
            var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
            if (modifier.enabled && isFunction(fn)) {
                // Add properties to offsets to make them a complete clientRect object
                // we do this before each modifier to make sure the previous one doesn't
                // mess with these values
                data.offsets.popper = getClientRect(data.offsets.popper);
                data.offsets.reference = getClientRect(data.offsets.reference);
                data = fn(data, modifier);
            }
        });
        return data;
    }
    /**
     * Updates the position of the popper, computing the new offsets and applying
     * the new style.<br />
     * Prefer `scheduleUpdate` over `update` because of performance reasons.
     * @method
     * @memberof Popper
     */
    function update() {
        // if popper is destroyed, don't perform any further update
        if (this.state.isDestroyed) {
            return;
        }
        var data = {
            instance: this,
            styles: {},
            arrowStyles: {},
            attributes: {},
            flipped: false,
            offsets: {}
        };
        // compute reference element offsets
        data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
        // compute auto placement, store placement inside the data object,
        // modifiers will be able to edit `placement` if needed
        // and refer to originalPlacement to know the original value
        data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
        // store the computed placement inside `originalPlacement`
        data.originalPlacement = data.placement;
        data.positionFixed = this.options.positionFixed;
        // compute the popper offsets
        data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
        data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';
        // run the modifiers
        data = runModifiers(this.modifiers, data);
        // the first `update` will call `onCreate` callback
        // the other ones will call `onUpdate` callback
        if (!this.state.isCreated) {
            this.state.isCreated = true;
            this.options.onCreate(data);
        }
        else {
            this.options.onUpdate(data);
        }
    }
    /**
     * Helper used to know if the given modifier is enabled.
     * @method
     * @memberof Popper.Utils
     * @returns {Boolean}
     */
    function isModifierEnabled(modifiers, modifierName) {
        return modifiers.some(function (_ref) {
            var name = _ref.name, enabled = _ref.enabled;
            return enabled && name === modifierName;
        });
    }
    /**
     * Get the prefixed supported property name
     * @method
     * @memberof Popper.Utils
     * @argument {String} property (camelCase)
     * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
     */
    function getSupportedPropertyName(property) {
        var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
        var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
        for (var i = 0; i < prefixes.length; i++) {
            var prefix = prefixes[i];
            var toCheck = prefix ? '' + prefix + upperProp : property;
            if (typeof document.body.style[toCheck] !== 'undefined') {
                return toCheck;
            }
        }
        return null;
    }
    /**
     * Destroys the popper.
     * @method
     * @memberof Popper
     */
    function destroy() {
        this.state.isDestroyed = true;
        // touch DOM only if `applyStyle` modifier is enabled
        if (isModifierEnabled(this.modifiers, 'applyStyle')) {
            this.popper.removeAttribute('x-placement');
            this.popper.style.position = '';
            this.popper.style.top = '';
            this.popper.style.left = '';
            this.popper.style.right = '';
            this.popper.style.bottom = '';
            this.popper.style.willChange = '';
            this.popper.style[getSupportedPropertyName('transform')] = '';
        }
        this.disableEventListeners();
        // remove the popper if user explicity asked for the deletion on destroy
        // do not use `remove` because IE11 doesn't support it
        if (this.options.removeOnDestroy) {
            this.popper.parentNode.removeChild(this.popper);
        }
        return this;
    }
    /**
     * Get the window associated with the element
     * @argument {Element} element
     * @returns {Window}
     */
    function getWindow(element) {
        var ownerDocument = element.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView : window;
    }
    function attachToScrollParents(scrollParent, event, callback, scrollParents) {
        var isBody = scrollParent.nodeName === 'BODY';
        var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
        target.addEventListener(event, callback, { passive: true });
        if (!isBody) {
            attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
        }
        scrollParents.push(target);
    }
    /**
     * Setup needed event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function setupEventListeners(reference, options, state, updateBound) {
        // Resize event listener on window
        state.updateBound = updateBound;
        getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });
        // Scroll event listener on scroll parents
        var scrollElement = getScrollParent(reference);
        attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
        state.scrollElement = scrollElement;
        state.eventsEnabled = true;
        return state;
    }
    /**
     * It will add resize/scroll events and start recalculating
     * position of the popper element when they are triggered.
     * @method
     * @memberof Popper
     */
    function enableEventListeners() {
        if (!this.state.eventsEnabled) {
            this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
        }
    }
    /**
     * Remove event listeners used to update the popper position
     * @method
     * @memberof Popper.Utils
     * @private
     */
    function removeEventListeners(reference, state) {
        // Remove resize event listener on window
        getWindow(reference).removeEventListener('resize', state.updateBound);
        // Remove scroll event listener on scroll parents
        state.scrollParents.forEach(function (target) {
            target.removeEventListener('scroll', state.updateBound);
        });
        // Reset state
        state.updateBound = null;
        state.scrollParents = [];
        state.scrollElement = null;
        state.eventsEnabled = false;
        return state;
    }
    /**
     * It will remove resize/scroll events and won't recalculate popper position
     * when they are triggered. It also won't trigger `onUpdate` callback anymore,
     * unless you call `update` method manually.
     * @method
     * @memberof Popper
     */
    function disableEventListeners() {
        if (this.state.eventsEnabled) {
            cancelAnimationFrame(this.scheduleUpdate);
            this.state = removeEventListeners(this.reference, this.state);
        }
    }
    /**
     * Tells if a given input is a number
     * @method
     * @memberof Popper.Utils
     * @param {*} input to check
     * @return {Boolean}
     */
    function isNumeric(n) {
        return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
    }
    /**
     * Set the style to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the style to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setStyles(element, styles) {
        Object.keys(styles).forEach(function (prop) {
            var unit = '';
            // add unit if the value is numeric and is one of the following
            if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
                unit = 'px';
            }
            element.style[prop] = styles[prop] + unit;
        });
    }
    /**
     * Set the attributes to the given popper
     * @method
     * @memberof Popper.Utils
     * @argument {Element} element - Element to apply the attributes to
     * @argument {Object} styles
     * Object with a list of properties and values which will be applied to the element
     */
    function setAttributes(element, attributes) {
        Object.keys(attributes).forEach(function (prop) {
            var value = attributes[prop];
            if (value !== false) {
                element.setAttribute(prop, attributes[prop]);
            }
            else {
                element.removeAttribute(prop);
            }
        });
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} data.styles - List of style properties - values to apply to popper element
     * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The same data object
     */
    function applyStyle(data) {
        // any property present in `data.styles` will be applied to the popper,
        // in this way we can make the 3rd party modifiers add custom styles to it
        // Be aware, modifiers could override the properties defined in the previous
        // lines of this modifier!
        setStyles(data.instance.popper, data.styles);
        // any property present in `data.attributes` will be applied to the popper,
        // they will be set as HTML attributes of the element
        setAttributes(data.instance.popper, data.attributes);
        // if arrowElement is defined and arrowStyles has some properties
        if (data.arrowElement && Object.keys(data.arrowStyles).length) {
            setStyles(data.arrowElement, data.arrowStyles);
        }
        return data;
    }
    /**
     * Set the x-placement attribute before everything else because it could be used
     * to add margins to the popper margins needs to be calculated to get the
     * correct popper offsets.
     * @method
     * @memberof Popper.modifiers
     * @param {HTMLElement} reference - The reference element used to position the popper
     * @param {HTMLElement} popper - The HTML element used as popper
     * @param {Object} options - Popper.js options
     */
    function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
        // compute reference element offsets
        var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
        // compute auto placement, store placement inside the data object,
        // modifiers will be able to edit `placement` if needed
        // and refer to originalPlacement to know the original value
        var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
        popper.setAttribute('x-placement', placement);
        // Apply `position` to popper before anything else because
        // without the position applied we can't guarantee correct computations
        setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });
        return options;
    }
    /**
     * @function
     * @memberof Popper.Utils
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Boolean} shouldRound - If the offsets should be rounded at all
     * @returns {Object} The popper's position offsets rounded
     *
     * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
     * good as it can be within reason.
     * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
     *
     * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
     * as well on High DPI screens).
     *
     * Firefox prefers no rounding for positioning and does not have blurriness on
     * high DPI screens.
     *
     * Only horizontal placement and left/right values need to be considered.
     */
    function getRoundedOffsets(data, shouldRound) {
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var round = Math.round, floor = Math.floor;
        var noRound = function noRound(v) {
            return v;
        };
        var referenceWidth = round(reference.width);
        var popperWidth = round(popper.width);
        var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
        var isVariation = data.placement.indexOf('-') !== -1;
        var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
        var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
        var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
        var verticalToInteger = !shouldRound ? noRound : round;
        return {
            left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
            top: verticalToInteger(popper.top),
            bottom: verticalToInteger(popper.bottom),
            right: horizontalToInteger(popper.right)
        };
    }
    var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function computeStyle(data, options) {
        var x = options.x, y = options.y;
        var popper = data.offsets.popper;
        // Remove this legacy support in Popper.js v2
        var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
            return modifier.name === 'applyStyle';
        }).gpuAcceleration;
        if (legacyGpuAccelerationOption !== undefined) {
            console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
        }
        var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
        var offsetParent = getOffsetParent(data.instance.popper);
        var offsetParentRect = getBoundingClientRect(offsetParent);
        // Styles
        var styles = {
            position: popper.position
        };
        var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
        var sideA = x === 'bottom' ? 'top' : 'bottom';
        var sideB = y === 'right' ? 'left' : 'right';
        // if gpuAcceleration is set to `true` and transform is supported,
        //  we use `translate3d` to apply the position to the popper we
        // automatically use the supported prefixed version if needed
        var prefixedProperty = getSupportedPropertyName('transform');
        // now, let's make a step back and look at this code closely (wtf?)
        // If the content of the popper grows once it's been positioned, it
        // may happen that the popper gets misplaced because of the new content
        // overflowing its reference element
        // To avoid this problem, we provide two options (x and y), which allow
        // the consumer to define the offset origin.
        // If we position a popper on top of a reference element, we can set
        // `x` to `top` to make the popper grow towards its top instead of
        // its bottom.
        var left = void 0, top = void 0;
        if (sideA === 'bottom') {
            // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
            // and not the bottom of the html element
            if (offsetParent.nodeName === 'HTML') {
                top = -offsetParent.clientHeight + offsets.bottom;
            }
            else {
                top = -offsetParentRect.height + offsets.bottom;
            }
        }
        else {
            top = offsets.top;
        }
        if (sideB === 'right') {
            if (offsetParent.nodeName === 'HTML') {
                left = -offsetParent.clientWidth + offsets.right;
            }
            else {
                left = -offsetParentRect.width + offsets.right;
            }
        }
        else {
            left = offsets.left;
        }
        if (gpuAcceleration && prefixedProperty) {
            styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
            styles[sideA] = 0;
            styles[sideB] = 0;
            styles.willChange = 'transform';
        }
        else {
            // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
            var invertTop = sideA === 'bottom' ? -1 : 1;
            var invertLeft = sideB === 'right' ? -1 : 1;
            styles[sideA] = top * invertTop;
            styles[sideB] = left * invertLeft;
            styles.willChange = sideA + ', ' + sideB;
        }
        // Attributes
        var attributes = {
            'x-placement': data.placement
        };
        // Update `data` attributes, styles and arrowStyles
        data.attributes = _extends({}, attributes, data.attributes);
        data.styles = _extends({}, styles, data.styles);
        data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
        return data;
    }
    /**
     * Helper used to know if the given modifier depends from another one.<br />
     * It checks if the needed modifier is listed and enabled.
     * @method
     * @memberof Popper.Utils
     * @param {Array} modifiers - list of modifiers
     * @param {String} requestingName - name of requesting modifier
     * @param {String} requestedName - name of requested modifier
     * @returns {Boolean}
     */
    function isModifierRequired(modifiers, requestingName, requestedName) {
        var requesting = find(modifiers, function (_ref) {
            var name = _ref.name;
            return name === requestingName;
        });
        var isRequired = !!requesting && modifiers.some(function (modifier) {
            return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
        });
        if (!isRequired) {
            var _requesting = '`' + requestingName + '`';
            var requested = '`' + requestedName + '`';
            console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
        }
        return isRequired;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function arrow(data, options) {
        var _data$offsets$arrow;
        // arrow depends on keepTogether in order to work
        if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
            return data;
        }
        var arrowElement = options.element;
        // if arrowElement is a string, suppose it's a CSS selector
        if (typeof arrowElement === 'string') {
            arrowElement = data.instance.popper.querySelector(arrowElement);
            // if arrowElement is not found, don't run the modifier
            if (!arrowElement) {
                return data;
            }
        }
        else {
            // if the arrowElement isn't a query selector we must check that the
            // provided DOM node is child of its popper node
            if (!data.instance.popper.contains(arrowElement)) {
                console.warn('WARNING: `arrow.element` must be child of its popper element!');
                return data;
            }
        }
        var placement = data.placement.split('-')[0];
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var isVertical = ['left', 'right'].indexOf(placement) !== -1;
        var len = isVertical ? 'height' : 'width';
        var sideCapitalized = isVertical ? 'Top' : 'Left';
        var side = sideCapitalized.toLowerCase();
        var altSide = isVertical ? 'left' : 'top';
        var opSide = isVertical ? 'bottom' : 'right';
        var arrowElementSize = getOuterSizes(arrowElement)[len];
        //
        // extends keepTogether behavior making sure the popper and its
        // reference have enough pixels in conjunction
        //
        // top/left side
        if (reference[opSide] - arrowElementSize < popper[side]) {
            data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
        }
        // bottom/right side
        if (reference[side] + arrowElementSize > popper[opSide]) {
            data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
        }
        data.offsets.popper = getClientRect(data.offsets.popper);
        // compute center of the popper
        var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
        // Compute the sideValue using the updated popper offsets
        // take popper margin in account because we don't have this info available
        var css = getStyleComputedProperty(data.instance.popper);
        var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
        var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
        var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
        // prevent arrowElement from being placed not contiguously to its popper
        sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
        data.arrowElement = arrowElement;
        data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
        return data;
    }
    /**
     * Get the opposite placement variation of the given one
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement variation
     * @returns {String} flipped placement variation
     */
    function getOppositeVariation(variation) {
        if (variation === 'end') {
            return 'start';
        }
        else if (variation === 'start') {
            return 'end';
        }
        return variation;
    }
    /**
     * List of accepted placements to use as values of the `placement` option.<br />
     * Valid placements are:
     * - `auto`
     * - `top`
     * - `right`
     * - `bottom`
     * - `left`
     *
     * Each placement can have a variation from this list:
     * - `-start`
     * - `-end`
     *
     * Variations are interpreted easily if you think of them as the left to right
     * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
     * is right.<br />
     * Vertically (`left` and `right`), `start` is top and `end` is bottom.
     *
     * Some valid examples are:
     * - `top-end` (on top of reference, right aligned)
     * - `right-start` (on right of reference, top aligned)
     * - `bottom` (on bottom, centered)
     * - `auto-end` (on the side with more space available, alignment depends by placement)
     *
     * @static
     * @type {Array}
     * @enum {String}
     * @readonly
     * @method placements
     * @memberof Popper
     */
    var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];
    // Get rid of `auto` `auto-start` and `auto-end`
    var validPlacements = placements.slice(3);
    /**
     * Given an initial placement, returns all the subsequent placements
     * clockwise (or counter-clockwise).
     *
     * @method
     * @memberof Popper.Utils
     * @argument {String} placement - A valid placement (it accepts variations)
     * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
     * @returns {Array} placements including their variations
     */
    function clockwise(placement) {
        var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var index = validPlacements.indexOf(placement);
        var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
        return counter ? arr.reverse() : arr;
    }
    var BEHAVIORS = {
        FLIP: 'flip',
        CLOCKWISE: 'clockwise',
        COUNTERCLOCKWISE: 'counterclockwise'
    };
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function flip(data, options) {
        // if `inner` modifier is enabled, we can't use the `flip` modifier
        if (isModifierEnabled(data.instance.modifiers, 'inner')) {
            return data;
        }
        if (data.flipped && data.placement === data.originalPlacement) {
            // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
            return data;
        }
        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
        var placement = data.placement.split('-')[0];
        var placementOpposite = getOppositePlacement(placement);
        var variation = data.placement.split('-')[1] || '';
        var flipOrder = [];
        switch (options.behavior) {
            case BEHAVIORS.FLIP:
                flipOrder = [placement, placementOpposite];
                break;
            case BEHAVIORS.CLOCKWISE:
                flipOrder = clockwise(placement);
                break;
            case BEHAVIORS.COUNTERCLOCKWISE:
                flipOrder = clockwise(placement, true);
                break;
            default:
                flipOrder = options.behavior;
        }
        flipOrder.forEach(function (step, index) {
            if (placement !== step || flipOrder.length === index + 1) {
                return data;
            }
            placement = data.placement.split('-')[0];
            placementOpposite = getOppositePlacement(placement);
            var popperOffsets = data.offsets.popper;
            var refOffsets = data.offsets.reference;
            // using floor because the reference offsets may contain decimals we are not going to consider here
            var floor = Math.floor;
            var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
            var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
            var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
            var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
            var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
            var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;
            // flip the variation if required
            var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
            var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);
            if (overlapsRef || overflowsBoundaries || flippedVariation) {
                // this boolean to detect any flip loop
                data.flipped = true;
                if (overlapsRef || overflowsBoundaries) {
                    placement = flipOrder[index + 1];
                }
                if (flippedVariation) {
                    variation = getOppositeVariation(variation);
                }
                data.placement = placement + (variation ? '-' + variation : '');
                // this object contains `position`, we want to preserve it along with
                // any additional property we may add in the future
                data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
                data = runModifiers(data.instance.modifiers, data, 'flip');
            }
        });
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function keepTogether(data) {
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var placement = data.placement.split('-')[0];
        var floor = Math.floor;
        var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
        var side = isVertical ? 'right' : 'bottom';
        var opSide = isVertical ? 'left' : 'top';
        var measurement = isVertical ? 'width' : 'height';
        if (popper[side] < floor(reference[opSide])) {
            data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
        }
        if (popper[opSide] > floor(reference[side])) {
            data.offsets.popper[opSide] = floor(reference[side]);
        }
        return data;
    }
    /**
     * Converts a string containing value + unit into a px value number
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} str - Value + unit string
     * @argument {String} measurement - `height` or `width`
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @returns {Number|String}
     * Value in pixels, or original string if no values were extracted
     */
    function toValue(str, measurement, popperOffsets, referenceOffsets) {
        // separate value from unit
        var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
        var value = +split[1];
        var unit = split[2];
        // If it's not a number it's an operator, I guess
        if (!value) {
            return str;
        }
        if (unit.indexOf('%') === 0) {
            var element = void 0;
            switch (unit) {
                case '%p':
                    element = popperOffsets;
                    break;
                case '%':
                case '%r':
                default:
                    element = referenceOffsets;
            }
            var rect = getClientRect(element);
            return rect[measurement] / 100 * value;
        }
        else if (unit === 'vh' || unit === 'vw') {
            // if is a vh or vw, we calculate the size based on the viewport
            var size = void 0;
            if (unit === 'vh') {
                size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            }
            else {
                size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
            }
            return size / 100 * value;
        }
        else {
            // if is an explicit pixel unit, we get rid of the unit and keep the value
            // if is an implicit unit, it's px, and we return just the value
            return value;
        }
    }
    /**
     * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
     * @function
     * @memberof {modifiers~offset}
     * @private
     * @argument {String} offset
     * @argument {Object} popperOffsets
     * @argument {Object} referenceOffsets
     * @argument {String} basePlacement
     * @returns {Array} a two cells array with x and y offsets in numbers
     */
    function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
        var offsets = [0, 0];
        // Use height if placement is left or right and index is 0 otherwise use width
        // in this way the first offset will use an axis and the second one
        // will use the other one
        var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;
        // Split the offset string to obtain a list of values and operands
        // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
        var fragments = offset.split(/(\+|\-)/).map(function (frag) {
            return frag.trim();
        });
        // Detect if the offset string contains a pair of values or a single one
        // they could be separated by comma or space
        var divider = fragments.indexOf(find(fragments, function (frag) {
            return frag.search(/,|\s/) !== -1;
        }));
        if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
            console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
        }
        // If divider is found, we divide the list of values and operands to divide
        // them by ofset X and Y.
        var splitRegex = /\s*,\s*|\s+/;
        var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
        // Convert the values with units to absolute pixels to allow our computations
        ops = ops.map(function (op, index) {
            // Most of the units rely on the orientation of the popper
            var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
            var mergeWithPrevious = false;
            return op
                // This aggregates any `+` or `-` sign that aren't considered operators
                // e.g.: 10 + +5 => [10, +, +5]
                .reduce(function (a, b) {
                if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
                    a[a.length - 1] = b;
                    mergeWithPrevious = true;
                    return a;
                }
                else if (mergeWithPrevious) {
                    a[a.length - 1] += b;
                    mergeWithPrevious = false;
                    return a;
                }
                else {
                    return a.concat(b);
                }
            }, [])
                // Here we convert the string values into number values (in px)
                .map(function (str) {
                return toValue(str, measurement, popperOffsets, referenceOffsets);
            });
        });
        // Loop trough the offsets arrays and execute the operations
        ops.forEach(function (op, index) {
            op.forEach(function (frag, index2) {
                if (isNumeric(frag)) {
                    offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
                }
            });
        });
        return offsets;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @argument {Number|String} options.offset=0
     * The offset value as described in the modifier description
     * @returns {Object} The data object, properly modified
     */
    function offset(data, _ref) {
        var offset = _ref.offset;
        var placement = data.placement, _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var basePlacement = placement.split('-')[0];
        var offsets = void 0;
        if (isNumeric(+offset)) {
            offsets = [+offset, 0];
        }
        else {
            offsets = parseOffset(offset, popper, reference, basePlacement);
        }
        if (basePlacement === 'left') {
            popper.top += offsets[0];
            popper.left -= offsets[1];
        }
        else if (basePlacement === 'right') {
            popper.top += offsets[0];
            popper.left += offsets[1];
        }
        else if (basePlacement === 'top') {
            popper.left += offsets[0];
            popper.top -= offsets[1];
        }
        else if (basePlacement === 'bottom') {
            popper.left += offsets[0];
            popper.top += offsets[1];
        }
        data.popper = popper;
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function preventOverflow(data, options) {
        var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
        // If offsetParent is the reference element, we really want to
        // go one step up and use the next offsetParent as reference to
        // avoid to make this modifier completely useless and look like broken
        if (data.instance.reference === boundariesElement) {
            boundariesElement = getOffsetParent(boundariesElement);
        }
        // NOTE: DOM access here
        // resets the popper's position so that the document size can be calculated excluding
        // the size of the popper element itself
        var transformProp = getSupportedPropertyName('transform');
        var popperStyles = data.instance.popper.style; // assignment to help minification
        var top = popperStyles.top, left = popperStyles.left, transform = popperStyles[transformProp];
        popperStyles.top = '';
        popperStyles.left = '';
        popperStyles[transformProp] = '';
        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
        // NOTE: DOM access here
        // restores the original style properties after the offsets have been computed
        popperStyles.top = top;
        popperStyles.left = left;
        popperStyles[transformProp] = transform;
        options.boundaries = boundaries;
        var order = options.priority;
        var popper = data.offsets.popper;
        var check = {
            primary: function primary(placement) {
                var value = popper[placement];
                if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
                    value = Math.max(popper[placement], boundaries[placement]);
                }
                return defineProperty({}, placement, value);
            },
            secondary: function secondary(placement) {
                var mainSide = placement === 'right' ? 'left' : 'top';
                var value = popper[mainSide];
                if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
                    value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
                }
                return defineProperty({}, mainSide, value);
            }
        };
        order.forEach(function (placement) {
            var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
            popper = _extends({}, popper, check[side](placement));
        });
        data.offsets.popper = popper;
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function shift(data) {
        var placement = data.placement;
        var basePlacement = placement.split('-')[0];
        var shiftvariation = placement.split('-')[1];
        // if shift shiftvariation is specified, run the modifier
        if (shiftvariation) {
            var _data$offsets = data.offsets, reference = _data$offsets.reference, popper = _data$offsets.popper;
            var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
            var side = isVertical ? 'left' : 'top';
            var measurement = isVertical ? 'width' : 'height';
            var shiftOffsets = {
                start: defineProperty({}, side, reference[side]),
                end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
            };
            data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
        }
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by update method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function hide(data) {
        if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
            return data;
        }
        var refRect = data.offsets.reference;
        var bound = find(data.instance.modifiers, function (modifier) {
            return modifier.name === 'preventOverflow';
        }).boundaries;
        if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === true) {
                return data;
            }
            data.hide = true;
            data.attributes['x-out-of-boundaries'] = '';
        }
        else {
            // Avoid unnecessary DOM access if visibility hasn't changed
            if (data.hide === false) {
                return data;
            }
            data.hide = false;
            data.attributes['x-out-of-boundaries'] = false;
        }
        return data;
    }
    /**
     * @function
     * @memberof Modifiers
     * @argument {Object} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {Object} The data object, properly modified
     */
    function inner(data) {
        var placement = data.placement;
        var basePlacement = placement.split('-')[0];
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
        var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
        popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
        data.placement = getOppositePlacement(placement);
        data.offsets.popper = getClientRect(popper);
        return data;
    }
    /**
     * Modifier function, each modifier can have a function of this type assigned
     * to its `fn` property.<br />
     * These functions will be called on each update, this means that you must
     * make sure they are performant enough to avoid performance bottlenecks.
     *
     * @function ModifierFn
     * @argument {dataObject} data - The data object generated by `update` method
     * @argument {Object} options - Modifiers configuration and options
     * @returns {dataObject} The data object, properly modified
     */
    /**
     * Modifiers are plugins used to alter the behavior of your poppers.<br />
     * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
     * needed by the library.
     *
     * Usually you don't want to override the `order`, `fn` and `onLoad` props.
     * All the other properties are configurations that could be tweaked.
     * @namespace modifiers
     */
    var modifiers = {
        /**
         * Modifier used to shift the popper on the start or end of its reference
         * element.<br />
         * It will read the variation of the `placement` property.<br />
         * It can be one either `-end` or `-start`.
         * @memberof modifiers
         * @inner
         */
        shift: {
            /** @prop {number} order=100 - Index used to define the order of execution */
            order: 100,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: shift
        },
        /**
         * The `offset` modifier can shift your popper on both its axis.
         *
         * It accepts the following units:
         * - `px` or unit-less, interpreted as pixels
         * - `%` or `%r`, percentage relative to the length of the reference element
         * - `%p`, percentage relative to the length of the popper element
         * - `vw`, CSS viewport width unit
         * - `vh`, CSS viewport height unit
         *
         * For length is intended the main axis relative to the placement of the popper.<br />
         * This means that if the placement is `top` or `bottom`, the length will be the
         * `width`. In case of `left` or `right`, it will be the `height`.
         *
         * You can provide a single value (as `Number` or `String`), or a pair of values
         * as `String` divided by a comma or one (or more) white spaces.<br />
         * The latter is a deprecated method because it leads to confusion and will be
         * removed in v2.<br />
         * Additionally, it accepts additions and subtractions between different units.
         * Note that multiplications and divisions aren't supported.
         *
         * Valid examples are:
         * ```
         * 10
         * '10%'
         * '10, 10'
         * '10%, 10'
         * '10 + 10%'
         * '10 - 5vh + 3%'
         * '-10px + 5vh, 5px - 6%'
         * ```
         * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
         * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
         * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
         *
         * @memberof modifiers
         * @inner
         */
        offset: {
            /** @prop {number} order=200 - Index used to define the order of execution */
            order: 200,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: offset,
            /** @prop {Number|String} offset=0
             * The offset value as described in the modifier description
             */
            offset: 0
        },
        /**
         * Modifier used to prevent the popper from being positioned outside the boundary.
         *
         * A scenario exists where the reference itself is not within the boundaries.<br />
         * We can say it has "escaped the boundaries" — or just "escaped".<br />
         * In this case we need to decide whether the popper should either:
         *
         * - detach from the reference and remain "trapped" in the boundaries, or
         * - if it should ignore the boundary and "escape with its reference"
         *
         * When `escapeWithReference` is set to`true` and reference is completely
         * outside its boundaries, the popper will overflow (or completely leave)
         * the boundaries in order to remain attached to the edge of the reference.
         *
         * @memberof modifiers
         * @inner
         */
        preventOverflow: {
            /** @prop {number} order=300 - Index used to define the order of execution */
            order: 300,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: preventOverflow,
            /**
             * @prop {Array} [priority=['left','right','top','bottom']]
             * Popper will try to prevent overflow following these priorities by default,
             * then, it could overflow on the left and on top of the `boundariesElement`
             */
            priority: ['left', 'right', 'top', 'bottom'],
            /**
             * @prop {number} padding=5
             * Amount of pixel used to define a minimum distance between the boundaries
             * and the popper. This makes sure the popper always has a little padding
             * between the edges of its container
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='scrollParent'
             * Boundaries used by the modifier. Can be `scrollParent`, `window`,
             * `viewport` or any DOM element.
             */
            boundariesElement: 'scrollParent'
        },
        /**
         * Modifier used to make sure the reference and its popper stay near each other
         * without leaving any gap between the two. Especially useful when the arrow is
         * enabled and you want to ensure that it points to its reference element.
         * It cares only about the first axis. You can still have poppers with margin
         * between the popper and its reference element.
         * @memberof modifiers
         * @inner
         */
        keepTogether: {
            /** @prop {number} order=400 - Index used to define the order of execution */
            order: 400,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: keepTogether
        },
        /**
         * This modifier is used to move the `arrowElement` of the popper to make
         * sure it is positioned between the reference element and its popper element.
         * It will read the outer size of the `arrowElement` node to detect how many
         * pixels of conjunction are needed.
         *
         * It has no effect if no `arrowElement` is provided.
         * @memberof modifiers
         * @inner
         */
        arrow: {
            /** @prop {number} order=500 - Index used to define the order of execution */
            order: 500,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: arrow,
            /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
            element: '[x-arrow]'
        },
        /**
         * Modifier used to flip the popper's placement when it starts to overlap its
         * reference element.
         *
         * Requires the `preventOverflow` modifier before it in order to work.
         *
         * **NOTE:** this modifier will interrupt the current update cycle and will
         * restart it if it detects the need to flip the placement.
         * @memberof modifiers
         * @inner
         */
        flip: {
            /** @prop {number} order=600 - Index used to define the order of execution */
            order: 600,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: flip,
            /**
             * @prop {String|Array} behavior='flip'
             * The behavior used to change the popper's placement. It can be one of
             * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
             * placements (with optional variations)
             */
            behavior: 'flip',
            /**
             * @prop {number} padding=5
             * The popper will flip if it hits the edges of the `boundariesElement`
             */
            padding: 5,
            /**
             * @prop {String|HTMLElement} boundariesElement='viewport'
             * The element which will define the boundaries of the popper position.
             * The popper will never be placed outside of the defined boundaries
             * (except if `keepTogether` is enabled)
             */
            boundariesElement: 'viewport'
        },
        /**
         * Modifier used to make the popper flow toward the inner of the reference element.
         * By default, when this modifier is disabled, the popper will be placed outside
         * the reference element.
         * @memberof modifiers
         * @inner
         */
        inner: {
            /** @prop {number} order=700 - Index used to define the order of execution */
            order: 700,
            /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
            enabled: false,
            /** @prop {ModifierFn} */
            fn: inner
        },
        /**
         * Modifier used to hide the popper when its reference element is outside of the
         * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
         * be used to hide with a CSS selector the popper when its reference is
         * out of boundaries.
         *
         * Requires the `preventOverflow` modifier before it in order to work.
         * @memberof modifiers
         * @inner
         */
        hide: {
            /** @prop {number} order=800 - Index used to define the order of execution */
            order: 800,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: hide
        },
        /**
         * Computes the style that will be applied to the popper element to gets
         * properly positioned.
         *
         * Note that this modifier will not touch the DOM, it just prepares the styles
         * so that `applyStyle` modifier can apply it. This separation is useful
         * in case you need to replace `applyStyle` with a custom implementation.
         *
         * This modifier has `850` as `order` value to maintain backward compatibility
         * with previous versions of Popper.js. Expect the modifiers ordering method
         * to change in future major versions of the library.
         *
         * @memberof modifiers
         * @inner
         */
        computeStyle: {
            /** @prop {number} order=850 - Index used to define the order of execution */
            order: 850,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: computeStyle,
            /**
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: true,
            /**
             * @prop {string} [x='bottom']
             * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
             * Change this if your popper should grow in a direction different from `bottom`
             */
            x: 'bottom',
            /**
             * @prop {string} [x='left']
             * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
             * Change this if your popper should grow in a direction different from `right`
             */
            y: 'right'
        },
        /**
         * Applies the computed styles to the popper element.
         *
         * All the DOM manipulations are limited to this modifier. This is useful in case
         * you want to integrate Popper.js inside a framework or view library and you
         * want to delegate all the DOM manipulations to it.
         *
         * Note that if you disable this modifier, you must make sure the popper element
         * has its position set to `absolute` before Popper.js can do its work!
         *
         * Just disable this modifier and define your own to achieve the desired effect.
         *
         * @memberof modifiers
         * @inner
         */
        applyStyle: {
            /** @prop {number} order=900 - Index used to define the order of execution */
            order: 900,
            /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
            enabled: true,
            /** @prop {ModifierFn} */
            fn: applyStyle,
            /** @prop {Function} */
            onLoad: applyStyleOnLoad,
            /**
             * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
             * @prop {Boolean} gpuAcceleration=true
             * If true, it uses the CSS 3D transformation to position the popper.
             * Otherwise, it will use the `top` and `left` properties
             */
            gpuAcceleration: undefined
        }
    };
    /**
     * The `dataObject` is an object containing all the information used by Popper.js.
     * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
     * @name dataObject
     * @property {Object} data.instance The Popper.js instance
     * @property {String} data.placement Placement applied to popper
     * @property {String} data.originalPlacement Placement originally defined on init
     * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
     * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
     * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
     * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
     * @property {Object} data.boundaries Offsets of the popper boundaries
     * @property {Object} data.offsets The measurements of popper, reference and arrow elements
     * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
     * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
     */
    /**
     * Default options provided to Popper.js constructor.<br />
     * These can be overridden using the `options` argument of Popper.js.<br />
     * To override an option, simply pass an object with the same
     * structure of the `options` object, as the 3rd argument. For example:
     * ```
     * new Popper(ref, pop, {
     *   modifiers: {
     *     preventOverflow: { enabled: false }
     *   }
     * })
     * ```
     * @type {Object}
     * @static
     * @memberof Popper
     */
    var Defaults = {
        /**
         * Popper's placement.
         * @prop {Popper.placements} placement='bottom'
         */
        placement: 'bottom',
        /**
         * Set this to true if you want popper to position it self in 'fixed' mode
         * @prop {Boolean} positionFixed=false
         */
        positionFixed: false,
        /**
         * Whether events (resize, scroll) are initially enabled.
         * @prop {Boolean} eventsEnabled=true
         */
        eventsEnabled: true,
        /**
         * Set to true if you want to automatically remove the popper when
         * you call the `destroy` method.
         * @prop {Boolean} removeOnDestroy=false
         */
        removeOnDestroy: false,
        /**
         * Callback called when the popper is created.<br />
         * By default, it is set to no-op.<br />
         * Access Popper.js instance with `data.instance`.
         * @prop {onCreate}
         */
        onCreate: function onCreate() { },
        /**
         * Callback called when the popper is updated. This callback is not called
         * on the initialization/creation of the popper, but only on subsequent
         * updates.<br />
         * By default, it is set to no-op.<br />
         * Access Popper.js instance with `data.instance`.
         * @prop {onUpdate}
         */
        onUpdate: function onUpdate() { },
        /**
         * List of modifiers used to modify the offsets before they are applied to the popper.
         * They provide most of the functionalities of Popper.js.
         * @prop {modifiers}
         */
        modifiers: modifiers
    };
    /**
     * @callback onCreate
     * @param {dataObject} data
     */
    /**
     * @callback onUpdate
     * @param {dataObject} data
     */
    // Utils
    // Methods
    var Popper = function () {
        /**
         * Creates a new Popper.js instance.
         * @class Popper
         * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
         * @param {HTMLElement} popper - The HTML element used as the popper
         * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
         * @return {Object} instance - The generated Popper.js instance
         */
        function Popper(reference, popper) {
            var _this = this;
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            classCallCheck(this, Popper);
            this.scheduleUpdate = function () {
                return requestAnimationFrame(_this.update);
            };
            // make update() debounced, so that it only runs at most once-per-tick
            this.update = debounce(this.update.bind(this));
            // with {} we create a new object with the options inside it
            this.options = _extends({}, Popper.Defaults, options);
            // init state
            this.state = {
                isDestroyed: false,
                isCreated: false,
                scrollParents: []
            };
            // get reference and popper elements (allow jQuery wrappers)
            this.reference = reference && reference.jquery ? reference[0] : reference;
            this.popper = popper && popper.jquery ? popper[0] : popper;
            // Deep merge modifiers options
            this.options.modifiers = {};
            Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
                _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
            });
            // Refactoring modifiers' list (Object => Array)
            this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
                return _extends({
                    name: name
                }, _this.options.modifiers[name]);
            })
                // sort the modifiers by order
                .sort(function (a, b) {
                return a.order - b.order;
            });
            // modifiers have the ability to execute arbitrary code when Popper.js get inited
            // such code is executed in the same order of its modifier
            // they could add new properties to their options configuration
            // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
            this.modifiers.forEach(function (modifierOptions) {
                if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
                    modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
                }
            });
            // fire the first update to position the popper in the right place
            this.update();
            var eventsEnabled = this.options.eventsEnabled;
            if (eventsEnabled) {
                // setup event listeners, they will take care of update the position in specific situations
                this.enableEventListeners();
            }
            this.state.eventsEnabled = eventsEnabled;
        }
        // We can't use class properties because they don't get listed in the
        // class prototype and break stuff like Sinon stubs
        createClass(Popper, [{
                key: 'update',
                value: function update$$1() {
                    return update.call(this);
                }
            }, {
                key: 'destroy',
                value: function destroy$$1() {
                    return destroy.call(this);
                }
            }, {
                key: 'enableEventListeners',
                value: function enableEventListeners$$1() {
                    return enableEventListeners.call(this);
                }
            }, {
                key: 'disableEventListeners',
                value: function disableEventListeners$$1() {
                    return disableEventListeners.call(this);
                }
                /**
                 * Schedules an update. It will run on the next UI update available.
                 * @method scheduleUpdate
                 * @memberof Popper
                 */
                /**
                 * Collection of utilities useful when writing custom modifiers.
                 * Starting from version 1.7, this method is available only if you
                 * include `popper-utils.js` before `popper.js`.
                 *
                 * **DEPRECATION**: This way to access PopperUtils is deprecated
                 * and will be removed in v2! Use the PopperUtils module directly instead.
                 * Due to the high instability of the methods contained in Utils, we can't
                 * guarantee them to follow semver. Use them at your own risk!
                 * @static
                 * @private
                 * @type {Object}
                 * @deprecated since version 1.8
                 * @member Utils
                 * @memberof Popper
                 */
            }]);
        return Popper;
    }();
    /**
     * The `referenceObject` is an object that provides an interface compatible with Popper.js
     * and lets you use it as replacement of a real DOM node.<br />
     * You can use this method to position a popper relatively to a set of coordinates
     * in case you don't have a DOM node to use as reference.
     *
     * ```
     * new Popper(referenceObject, popperNode);
     * ```
     *
     * NB: This feature isn't supported in Internet Explorer 10.
     * @name referenceObject
     * @property {Function} data.getBoundingClientRect
     * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
     * @property {number} data.clientWidth
     * An ES6 getter that will return the width of the virtual reference element.
     * @property {number} data.clientHeight
     * An ES6 getter that will return the height of the virtual reference element.
     */
    Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
    Popper.placements = placements;
    Popper.Defaults = Defaults;
    return Popper;
})));
//# sourceMappingURL=popper.js.map
(function (f) { if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
}
else if (typeof define === "function" && define.amd) {
    define('prop-types', [], f);
}
else {
    var g;
    if (typeof window !== "undefined") {
        g = window;
    }
    else if (typeof global !== "undefined") {
        g = global;
    }
    else if (typeof self !== "undefined") {
        g = self;
    }
    else {
        g = this;
    }
    g.PropTypes = f();
} })(function () {
    var define, module, exports;
    return (function e(t, n, r) { function s(o, u) { if (!n[o]) {
        if (!t[o]) {
            var a = typeof require == "function" && require;
            if (!u && a)
                return a(o, !0);
            if (i)
                return i(o, !0);
            var f = new Error("Cannot find module '" + o + "'");
            throw f.code = "MODULE_NOT_FOUND", f;
        }
        var l = n[o] = { exports: {} };
        t[o][0].call(l.exports, function (e) { var n = t[o][1][e]; return s(n ? n : e); }, l, l.exports, e, t, n, r);
    } return n[o].exports; } var i = typeof require == "function" && require; for (var o = 0; o < r.length; o++)
        s(r[o]); return s; })({ 1: [function (require, module, exports) {
                /**
                 * Copyright (c) 2013-present, Facebook, Inc.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */
                'use strict';
                var printWarning = function () { };
                if ("development" !== 'production') {
                    var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
                    var loggedTypeFailures = {};
                    var has = Function.call.bind(Object.prototype.hasOwnProperty);
                    printWarning = function (text) {
                        var message = 'Warning: ' + text;
                        if (typeof console !== 'undefined') {
                            console.error(message);
                        }
                        try {
                            // --- Welcome to debugging React ---
                            // This error was thrown as a convenience so that you can use this stack
                            // to find the callsite that caused this warning to fire.
                            throw new Error(message);
                        }
                        catch (x) { }
                    };
                }
                /**
                 * Assert that the values match with the type specs.
                 * Error messages are memorized and will only be shown once.
                 *
                 * @param {object} typeSpecs Map of name to a ReactPropType
                 * @param {object} values Runtime values that need to be type-checked
                 * @param {string} location e.g. "prop", "context", "child context"
                 * @param {string} componentName Name of the component for error messages.
                 * @param {?Function} getStack Returns the component stack.
                 * @private
                 */
                function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
                    if ("development" !== 'production') {
                        for (var typeSpecName in typeSpecs) {
                            if (has(typeSpecs, typeSpecName)) {
                                var error;
                                // Prop type validation may throw. In case they do, we don't want to
                                // fail the render phase where it didn't fail before. So we log it.
                                // After these have been cleaned up, we'll let them throw.
                                try {
                                    // This is intentionally an invariant that gets caught. It's the same
                                    // behavior as without this statement except with a better message.
                                    if (typeof typeSpecs[typeSpecName] !== 'function') {
                                        var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                                            'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                                        err.name = 'Invariant Violation';
                                        throw err;
                                    }
                                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                                }
                                catch (ex) {
                                    error = ex;
                                }
                                if (error && !(error instanceof Error)) {
                                    printWarning((componentName || 'React class') + ': type specification of ' +
                                        location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                                        'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                                        'You may have forgotten to pass an argument to the type checker ' +
                                        'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                                        'shape all require an argument).');
                                }
                                if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                                    // Only monitor this failure once because there tends to be a lot of the
                                    // same error.
                                    loggedTypeFailures[error.message] = true;
                                    var stack = getStack ? getStack() : '';
                                    printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
                                }
                            }
                        }
                    }
                }
                /**
                 * Resets warning cache when testing.
                 *
                 * @private
                 */
                checkPropTypes.resetWarningCache = function () {
                    if ("development" !== 'production') {
                        loggedTypeFailures = {};
                    }
                };
                module.exports = checkPropTypes;
            }, { "./lib/ReactPropTypesSecret": 5 }], 2: [function (require, module, exports) {
                /**
                 * Copyright (c) 2013-present, Facebook, Inc.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */
                'use strict';
                var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
                function emptyFunction() { }
                function emptyFunctionWithReset() { }
                emptyFunctionWithReset.resetWarningCache = emptyFunction;
                module.exports = function () {
                    function shim(props, propName, componentName, location, propFullName, secret) {
                        if (secret === ReactPropTypesSecret) {
                            // It is still safe when called from React.
                            return;
                        }
                        var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                            'Use PropTypes.checkPropTypes() to call them. ' +
                            'Read more at http://fb.me/use-check-prop-types');
                        err.name = 'Invariant Violation';
                        throw err;
                    }
                    ;
                    shim.isRequired = shim;
                    function getShim() {
                        return shim;
                    }
                    ;
                    // Important!
                    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
                    var ReactPropTypes = {
                        array: shim,
                        bool: shim,
                        func: shim,
                        number: shim,
                        object: shim,
                        string: shim,
                        symbol: shim,
                        any: shim,
                        arrayOf: getShim,
                        element: shim,
                        elementType: shim,
                        instanceOf: getShim,
                        node: shim,
                        objectOf: getShim,
                        oneOf: getShim,
                        oneOfType: getShim,
                        shape: getShim,
                        exact: getShim,
                        checkPropTypes: emptyFunctionWithReset,
                        resetWarningCache: emptyFunction
                    };
                    ReactPropTypes.PropTypes = ReactPropTypes;
                    return ReactPropTypes;
                };
            }, { "./lib/ReactPropTypesSecret": 5 }], 3: [function (require, module, exports) {
                /**
                 * Copyright (c) 2013-present, Facebook, Inc.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */
                'use strict';
                var ReactIs = require('react-is');
                var assign = require('object-assign');
                var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
                var checkPropTypes = require('./checkPropTypes');
                var has = Function.call.bind(Object.prototype.hasOwnProperty);
                var printWarning = function () { };
                if ("development" !== 'production') {
                    printWarning = function (text) {
                        var message = 'Warning: ' + text;
                        if (typeof console !== 'undefined') {
                            console.error(message);
                        }
                        try {
                            // --- Welcome to debugging React ---
                            // This error was thrown as a convenience so that you can use this stack
                            // to find the callsite that caused this warning to fire.
                            throw new Error(message);
                        }
                        catch (x) { }
                    };
                }
                function emptyFunctionThatReturnsNull() {
                    return null;
                }
                module.exports = function (isValidElement, throwOnDirectAccess) {
                    /* global Symbol */
                    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
                    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
                    /**
                     * Returns the iterator method function contained on the iterable object.
                     *
                     * Be sure to invoke the function with the iterable as context:
                     *
                     *     var iteratorFn = getIteratorFn(myIterable);
                     *     if (iteratorFn) {
                     *       var iterator = iteratorFn.call(myIterable);
                     *       ...
                     *     }
                     *
                     * @param {?object} maybeIterable
                     * @return {?function}
                     */
                    function getIteratorFn(maybeIterable) {
                        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
                        if (typeof iteratorFn === 'function') {
                            return iteratorFn;
                        }
                    }
                    /**
                     * Collection of methods that allow declaration and validation of props that are
                     * supplied to React components. Example usage:
                     *
                     *   var Props = require('ReactPropTypes');
                     *   var MyArticle = React.createClass({
                     *     propTypes: {
                     *       // An optional string prop named "description".
                     *       description: Props.string,
                     *
                     *       // A required enum prop named "category".
                     *       category: Props.oneOf(['News','Photos']).isRequired,
                     *
                     *       // A prop named "dialog" that requires an instance of Dialog.
                     *       dialog: Props.instanceOf(Dialog).isRequired
                     *     },
                     *     render: function() { ... }
                     *   });
                     *
                     * A more formal specification of how these methods are used:
                     *
                     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
                     *   decl := ReactPropTypes.{type}(.isRequired)?
                     *
                     * Each and every declaration produces a function with the same signature. This
                     * allows the creation of custom validation functions. For example:
                     *
                     *  var MyLink = React.createClass({
                     *    propTypes: {
                     *      // An optional string or URI prop named "href".
                     *      href: function(props, propName, componentName) {
                     *        var propValue = props[propName];
                     *        if (propValue != null && typeof propValue !== 'string' &&
                     *            !(propValue instanceof URI)) {
                     *          return new Error(
                     *            'Expected a string or an URI for ' + propName + ' in ' +
                     *            componentName
                     *          );
                     *        }
                     *      }
                     *    },
                     *    render: function() {...}
                     *  });
                     *
                     * @internal
                     */
                    var ANONYMOUS = '<<anonymous>>';
                    // Important!
                    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
                    var ReactPropTypes = {
                        array: createPrimitiveTypeChecker('array'),
                        bool: createPrimitiveTypeChecker('boolean'),
                        func: createPrimitiveTypeChecker('function'),
                        number: createPrimitiveTypeChecker('number'),
                        object: createPrimitiveTypeChecker('object'),
                        string: createPrimitiveTypeChecker('string'),
                        symbol: createPrimitiveTypeChecker('symbol'),
                        any: createAnyTypeChecker(),
                        arrayOf: createArrayOfTypeChecker,
                        element: createElementTypeChecker(),
                        elementType: createElementTypeTypeChecker(),
                        instanceOf: createInstanceTypeChecker,
                        node: createNodeChecker(),
                        objectOf: createObjectOfTypeChecker,
                        oneOf: createEnumTypeChecker,
                        oneOfType: createUnionTypeChecker,
                        shape: createShapeTypeChecker,
                        exact: createStrictShapeTypeChecker,
                    };
                    /**
                     * inlined Object.is polyfill to avoid requiring consumers ship their own
                     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
                     */
                    /*eslint-disable no-self-compare*/
                    function is(x, y) {
                        // SameValue algorithm
                        if (x === y) {
                            // Steps 1-5, 7-10
                            // Steps 6.b-6.e: +0 != -0
                            return x !== 0 || 1 / x === 1 / y;
                        }
                        else {
                            // Step 6.a: NaN == NaN
                            return x !== x && y !== y;
                        }
                    }
                    /*eslint-enable no-self-compare*/
                    /**
                     * We use an Error-like object for backward compatibility as people may call
                     * PropTypes directly and inspect their output. However, we don't use real
                     * Errors anymore. We don't inspect their stack anyway, and creating them
                     * is prohibitively expensive if they are created too often, such as what
                     * happens in oneOfType() for any type before the one that matched.
                     */
                    function PropTypeError(message) {
                        this.message = message;
                        this.stack = '';
                    }
                    // Make `instanceof Error` still work for returned errors.
                    PropTypeError.prototype = Error.prototype;
                    function createChainableTypeChecker(validate) {
                        if ("development" !== 'production') {
                            var manualPropTypeCallCache = {};
                            var manualPropTypeWarningCount = 0;
                        }
                        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                            componentName = componentName || ANONYMOUS;
                            propFullName = propFullName || propName;
                            if (secret !== ReactPropTypesSecret) {
                                if (throwOnDirectAccess) {
                                    // New behavior only for users of `prop-types` package
                                    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                                        'Use `PropTypes.checkPropTypes()` to call them. ' +
                                        'Read more at http://fb.me/use-check-prop-types');
                                    err.name = 'Invariant Violation';
                                    throw err;
                                }
                                else if ("development" !== 'production' && typeof console !== 'undefined') {
                                    // Old behavior for people using React.PropTypes
                                    var cacheKey = componentName + ':' + propName;
                                    if (!manualPropTypeCallCache[cacheKey] &&
                                        // Avoid spamming the console because they are often not actionable except for lib authors
                                        manualPropTypeWarningCount < 3) {
                                        printWarning('You are manually calling a React.PropTypes validation ' +
                                            'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
                                            'and will throw in the standalone `prop-types` package. ' +
                                            'You may be seeing this warning due to a third-party PropTypes ' +
                                            'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                                        manualPropTypeCallCache[cacheKey] = true;
                                        manualPropTypeWarningCount++;
                                    }
                                }
                            }
                            if (props[propName] == null) {
                                if (isRequired) {
                                    if (props[propName] === null) {
                                        return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                                    }
                                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                                }
                                return null;
                            }
                            else {
                                return validate(props, propName, componentName, location, propFullName);
                            }
                        }
                        var chainedCheckType = checkType.bind(null, false);
                        chainedCheckType.isRequired = checkType.bind(null, true);
                        return chainedCheckType;
                    }
                    function createPrimitiveTypeChecker(expectedType) {
                        function validate(props, propName, componentName, location, propFullName, secret) {
                            var propValue = props[propName];
                            var propType = getPropType(propValue);
                            if (propType !== expectedType) {
                                // `propValue` being instance of, say, date/regexp, pass the 'object'
                                // check, but we can offer a more precise error message here rather than
                                // 'of type `object`'.
                                var preciseType = getPreciseType(propValue);
                                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createAnyTypeChecker() {
                        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
                    }
                    function createArrayOfTypeChecker(typeChecker) {
                        function validate(props, propName, componentName, location, propFullName) {
                            if (typeof typeChecker !== 'function') {
                                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
                            }
                            var propValue = props[propName];
                            if (!Array.isArray(propValue)) {
                                var propType = getPropType(propValue);
                                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
                            }
                            for (var i = 0; i < propValue.length; i++) {
                                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                                if (error instanceof Error) {
                                    return error;
                                }
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createElementTypeChecker() {
                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            if (!isValidElement(propValue)) {
                                var propType = getPropType(propValue);
                                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createElementTypeTypeChecker() {
                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            if (!ReactIs.isValidElementType(propValue)) {
                                var propType = getPropType(propValue);
                                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createInstanceTypeChecker(expectedClass) {
                        function validate(props, propName, componentName, location, propFullName) {
                            if (!(props[propName] instanceof expectedClass)) {
                                var expectedClassName = expectedClass.name || ANONYMOUS;
                                var actualClassName = getClassName(props[propName]);
                                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createEnumTypeChecker(expectedValues) {
                        if (!Array.isArray(expectedValues)) {
                            if ("development" !== 'production') {
                                if (arguments.length > 1) {
                                    printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
                                        'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                                }
                                else {
                                    printWarning('Invalid argument supplied to oneOf, expected an array.');
                                }
                            }
                            return emptyFunctionThatReturnsNull;
                        }
                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            for (var i = 0; i < expectedValues.length; i++) {
                                if (is(propValue, expectedValues[i])) {
                                    return null;
                                }
                            }
                            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                                var type = getPreciseType(value);
                                if (type === 'symbol') {
                                    return String(value);
                                }
                                return value;
                            });
                            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createObjectOfTypeChecker(typeChecker) {
                        function validate(props, propName, componentName, location, propFullName) {
                            if (typeof typeChecker !== 'function') {
                                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
                            }
                            var propValue = props[propName];
                            var propType = getPropType(propValue);
                            if (propType !== 'object') {
                                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
                            }
                            for (var key in propValue) {
                                if (has(propValue, key)) {
                                    var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                                    if (error instanceof Error) {
                                        return error;
                                    }
                                }
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createUnionTypeChecker(arrayOfTypeCheckers) {
                        if (!Array.isArray(arrayOfTypeCheckers)) {
                            "development" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
                            return emptyFunctionThatReturnsNull;
                        }
                        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                            var checker = arrayOfTypeCheckers[i];
                            if (typeof checker !== 'function') {
                                printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
                                    'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                                return emptyFunctionThatReturnsNull;
                            }
                        }
                        function validate(props, propName, componentName, location, propFullName) {
                            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                                var checker = arrayOfTypeCheckers[i];
                                if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                                    return null;
                                }
                            }
                            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createNodeChecker() {
                        function validate(props, propName, componentName, location, propFullName) {
                            if (!isNode(props[propName])) {
                                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createShapeTypeChecker(shapeTypes) {
                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            var propType = getPropType(propValue);
                            if (propType !== 'object') {
                                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                            }
                            for (var key in shapeTypes) {
                                var checker = shapeTypes[key];
                                if (!checker) {
                                    continue;
                                }
                                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                                if (error) {
                                    return error;
                                }
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function createStrictShapeTypeChecker(shapeTypes) {
                        function validate(props, propName, componentName, location, propFullName) {
                            var propValue = props[propName];
                            var propType = getPropType(propValue);
                            if (propType !== 'object') {
                                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                            }
                            // We need to check all keys in case some are required but missing from
                            // props.
                            var allKeys = assign({}, props[propName], shapeTypes);
                            for (var key in allKeys) {
                                var checker = shapeTypes[key];
                                if (!checker) {
                                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                                        '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                                        '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                                }
                                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                                if (error) {
                                    return error;
                                }
                            }
                            return null;
                        }
                        return createChainableTypeChecker(validate);
                    }
                    function isNode(propValue) {
                        switch (typeof propValue) {
                            case 'number':
                            case 'string':
                            case 'undefined':
                                return true;
                            case 'boolean':
                                return !propValue;
                            case 'object':
                                if (Array.isArray(propValue)) {
                                    return propValue.every(isNode);
                                }
                                if (propValue === null || isValidElement(propValue)) {
                                    return true;
                                }
                                var iteratorFn = getIteratorFn(propValue);
                                if (iteratorFn) {
                                    var iterator = iteratorFn.call(propValue);
                                    var step;
                                    if (iteratorFn !== propValue.entries) {
                                        while (!(step = iterator.next()).done) {
                                            if (!isNode(step.value)) {
                                                return false;
                                            }
                                        }
                                    }
                                    else {
                                        // Iterator will provide entry [k,v] tuples rather than values.
                                        while (!(step = iterator.next()).done) {
                                            var entry = step.value;
                                            if (entry) {
                                                if (!isNode(entry[1])) {
                                                    return false;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    return false;
                                }
                                return true;
                            default:
                                return false;
                        }
                    }
                    function isSymbol(propType, propValue) {
                        // Native Symbol.
                        if (propType === 'symbol') {
                            return true;
                        }
                        // falsy value can't be a Symbol
                        if (!propValue) {
                            return false;
                        }
                        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
                        if (propValue['@@toStringTag'] === 'Symbol') {
                            return true;
                        }
                        // Fallback for non-spec compliant Symbols which are polyfilled.
                        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
                            return true;
                        }
                        return false;
                    }
                    // Equivalent of `typeof` but with special handling for array and regexp.
                    function getPropType(propValue) {
                        var propType = typeof propValue;
                        if (Array.isArray(propValue)) {
                            return 'array';
                        }
                        if (propValue instanceof RegExp) {
                            // Old webkits (at least until Android 4.0) return 'function' rather than
                            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
                            // passes PropTypes.object.
                            return 'object';
                        }
                        if (isSymbol(propType, propValue)) {
                            return 'symbol';
                        }
                        return propType;
                    }
                    // This handles more types than `getPropType`. Only used for error messages.
                    // See `createPrimitiveTypeChecker`.
                    function getPreciseType(propValue) {
                        if (typeof propValue === 'undefined' || propValue === null) {
                            return '' + propValue;
                        }
                        var propType = getPropType(propValue);
                        if (propType === 'object') {
                            if (propValue instanceof Date) {
                                return 'date';
                            }
                            else if (propValue instanceof RegExp) {
                                return 'regexp';
                            }
                        }
                        return propType;
                    }
                    // Returns a string that is postfixed to a warning about an invalid type.
                    // For example, "undefined" or "of type array"
                    function getPostfixForTypeWarning(value) {
                        var type = getPreciseType(value);
                        switch (type) {
                            case 'array':
                            case 'object':
                                return 'an ' + type;
                            case 'boolean':
                            case 'date':
                            case 'regexp':
                                return 'a ' + type;
                            default:
                                return type;
                        }
                    }
                    // Returns class name of the object, if any.
                    function getClassName(propValue) {
                        if (!propValue.constructor || !propValue.constructor.name) {
                            return ANONYMOUS;
                        }
                        return propValue.constructor.name;
                    }
                    ReactPropTypes.checkPropTypes = checkPropTypes;
                    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
                    ReactPropTypes.PropTypes = ReactPropTypes;
                    return ReactPropTypes;
                };
            }, { "./checkPropTypes": 1, "./lib/ReactPropTypesSecret": 5, "object-assign": 6, "react-is": 10 }], 4: [function (require, module, exports) {
                /**
                 * Copyright (c) 2013-present, Facebook, Inc.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */
                if ("development" !== 'production') {
                    var ReactIs = require('react-is');
                    // By explicitly using `prop-types` you are opting into new development behavior.
                    // http://fb.me/prop-types-in-prod
                    var throwOnDirectAccess = true;
                    module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);
                }
                else {
                    // By explicitly using `prop-types` you are opting into new production behavior.
                    // http://fb.me/prop-types-in-prod
                    module.exports = require('./factoryWithThrowingShims')();
                }
            }, { "./factoryWithThrowingShims": 2, "./factoryWithTypeCheckers": 3, "react-is": 10 }], 5: [function (require, module, exports) {
                /**
                 * Copyright (c) 2013-present, Facebook, Inc.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */
                'use strict';
                var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
                module.exports = ReactPropTypesSecret;
            }, {}], 6: [function (require, module, exports) {
                /*
                object-assign
                (c) Sindre Sorhus
                @license MIT
                */
                'use strict';
                /* eslint-disable no-unused-vars */
                var getOwnPropertySymbols = Object.getOwnPropertySymbols;
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var propIsEnumerable = Object.prototype.propertyIsEnumerable;
                function toObject(val) {
                    if (val === null || val === undefined) {
                        throw new TypeError('Object.assign cannot be called with null or undefined');
                    }
                    return Object(val);
                }
                function shouldUseNative() {
                    try {
                        if (!Object.assign) {
                            return false;
                        }
                        // Detect buggy property enumeration order in older V8 versions.
                        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
                        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
                        test1[5] = 'de';
                        if (Object.getOwnPropertyNames(test1)[0] === '5') {
                            return false;
                        }
                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                        var test2 = {};
                        for (var i = 0; i < 10; i++) {
                            test2['_' + String.fromCharCode(i)] = i;
                        }
                        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                            return test2[n];
                        });
                        if (order2.join('') !== '0123456789') {
                            return false;
                        }
                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                        var test3 = {};
                        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                            test3[letter] = letter;
                        });
                        if (Object.keys(Object.assign({}, test3)).join('') !==
                            'abcdefghijklmnopqrst') {
                            return false;
                        }
                        return true;
                    }
                    catch (err) {
                        // We don't expect any of the above to throw, but better to be safe.
                        return false;
                    }
                }
                module.exports = shouldUseNative() ? Object.assign : function (target, source) {
                    var from;
                    var to = toObject(target);
                    var symbols;
                    for (var s = 1; s < arguments.length; s++) {
                        from = Object(arguments[s]);
                        for (var key in from) {
                            if (hasOwnProperty.call(from, key)) {
                                to[key] = from[key];
                            }
                        }
                        if (getOwnPropertySymbols) {
                            symbols = getOwnPropertySymbols(from);
                            for (var i = 0; i < symbols.length; i++) {
                                if (propIsEnumerable.call(from, symbols[i])) {
                                    to[symbols[i]] = from[symbols[i]];
                                }
                            }
                        }
                    }
                    return to;
                };
            }, {}], 7: [function (require, module, exports) {
                // shim for using process in browser
                var process = module.exports = {};
                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.
                var cachedSetTimeout;
                var cachedClearTimeout;
                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function () {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        }
                        else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    }
                    catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        }
                        else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    }
                    catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                }());
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    }
                    catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        }
                        catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    }
                    catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        }
                        catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;
                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    }
                    else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }
                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;
                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) {
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }
                process.nextTick = function (fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for (var i = 1; i < arguments.length; i++) {
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };
                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function () {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ''; // empty string to avoid regexp issues
                process.versions = {};
                function noop() { }
                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;
                process.listeners = function (name) { return []; };
                process.binding = function (name) {
                    throw new Error('process.binding is not supported');
                };
                process.cwd = function () { return '/'; };
                process.chdir = function (dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function () { return 0; };
            }, {}], 8: [function (require, module, exports) {
                (function (process) {
                    /** @license React v16.8.1
                     * react-is.development.js
                     *
                     * Copyright (c) Facebook, Inc. and its affiliates.
                     *
                     * This source code is licensed under the MIT license found in the
                     * LICENSE file in the root directory of this source tree.
                     */
                    'use strict';
                    if (process.env.NODE_ENV !== "production") {
                        (function () {
                            'use strict';
                            Object.defineProperty(exports, '__esModule', { value: true });
                            // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
                            // nor polyfill, then a plain number is used for performance.
                            var hasSymbol = typeof Symbol === 'function' && Symbol.for;
                            var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
                            var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
                            var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
                            var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
                            var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
                            var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
                            var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
                            var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
                            var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
                            var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
                            var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
                            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
                            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
                            function isValidElementType(type) {
                                return typeof type === 'string' || typeof type === 'function' ||
                                    // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                                    type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
                            }
                            /**
                             * Forked from fbjs/warning:
                             * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
                             *
                             * Only change is we use console.warn instead of console.error,
                             * and do nothing when 'console' is not supported.
                             * This really simplifies the code.
                             * ---
                             * Similar to invariant but only logs a warning if the condition is not met.
                             * This can be used to log issues in development environments in critical
                             * paths. Removing the logging code for production environments will keep the
                             * same logic and follow the same code paths.
                             */
                            var lowPriorityWarning = function () { };
                            {
                                var printWarning = function (format) {
                                    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                                        args[_key - 1] = arguments[_key];
                                    }
                                    var argIndex = 0;
                                    var message = 'Warning: ' + format.replace(/%s/g, function () {
                                        return args[argIndex++];
                                    });
                                    if (typeof console !== 'undefined') {
                                        console.warn(message);
                                    }
                                    try {
                                        // --- Welcome to debugging React ---
                                        // This error was thrown as a convenience so that you can use this stack
                                        // to find the callsite that caused this warning to fire.
                                        throw new Error(message);
                                    }
                                    catch (x) { }
                                };
                                lowPriorityWarning = function (condition, format) {
                                    if (format === undefined) {
                                        throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
                                    }
                                    if (!condition) {
                                        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                                            args[_key2 - 2] = arguments[_key2];
                                        }
                                        printWarning.apply(undefined, [format].concat(args));
                                    }
                                };
                            }
                            var lowPriorityWarning$1 = lowPriorityWarning;
                            function typeOf(object) {
                                if (typeof object === 'object' && object !== null) {
                                    var $$typeof = object.$$typeof;
                                    switch ($$typeof) {
                                        case REACT_ELEMENT_TYPE:
                                            var type = object.type;
                                            switch (type) {
                                                case REACT_ASYNC_MODE_TYPE:
                                                case REACT_CONCURRENT_MODE_TYPE:
                                                case REACT_FRAGMENT_TYPE:
                                                case REACT_PROFILER_TYPE:
                                                case REACT_STRICT_MODE_TYPE:
                                                case REACT_SUSPENSE_TYPE:
                                                    return type;
                                                default:
                                                    var $$typeofType = type && type.$$typeof;
                                                    switch ($$typeofType) {
                                                        case REACT_CONTEXT_TYPE:
                                                        case REACT_FORWARD_REF_TYPE:
                                                        case REACT_PROVIDER_TYPE:
                                                            return $$typeofType;
                                                        default:
                                                            return $$typeof;
                                                    }
                                            }
                                        case REACT_LAZY_TYPE:
                                        case REACT_MEMO_TYPE:
                                        case REACT_PORTAL_TYPE:
                                            return $$typeof;
                                    }
                                }
                                return undefined;
                            }
                            // AsyncMode is deprecated along with isAsyncMode
                            var AsyncMode = REACT_ASYNC_MODE_TYPE;
                            var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
                            var ContextConsumer = REACT_CONTEXT_TYPE;
                            var ContextProvider = REACT_PROVIDER_TYPE;
                            var Element = REACT_ELEMENT_TYPE;
                            var ForwardRef = REACT_FORWARD_REF_TYPE;
                            var Fragment = REACT_FRAGMENT_TYPE;
                            var Lazy = REACT_LAZY_TYPE;
                            var Memo = REACT_MEMO_TYPE;
                            var Portal = REACT_PORTAL_TYPE;
                            var Profiler = REACT_PROFILER_TYPE;
                            var StrictMode = REACT_STRICT_MODE_TYPE;
                            var Suspense = REACT_SUSPENSE_TYPE;
                            var hasWarnedAboutDeprecatedIsAsyncMode = false;
                            // AsyncMode should be deprecated
                            function isAsyncMode(object) {
                                {
                                    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                                        hasWarnedAboutDeprecatedIsAsyncMode = true;
                                        lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
                                    }
                                }
                                return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
                            }
                            function isConcurrentMode(object) {
                                return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
                            }
                            function isContextConsumer(object) {
                                return typeOf(object) === REACT_CONTEXT_TYPE;
                            }
                            function isContextProvider(object) {
                                return typeOf(object) === REACT_PROVIDER_TYPE;
                            }
                            function isElement(object) {
                                return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                            }
                            function isForwardRef(object) {
                                return typeOf(object) === REACT_FORWARD_REF_TYPE;
                            }
                            function isFragment(object) {
                                return typeOf(object) === REACT_FRAGMENT_TYPE;
                            }
                            function isLazy(object) {
                                return typeOf(object) === REACT_LAZY_TYPE;
                            }
                            function isMemo(object) {
                                return typeOf(object) === REACT_MEMO_TYPE;
                            }
                            function isPortal(object) {
                                return typeOf(object) === REACT_PORTAL_TYPE;
                            }
                            function isProfiler(object) {
                                return typeOf(object) === REACT_PROFILER_TYPE;
                            }
                            function isStrictMode(object) {
                                return typeOf(object) === REACT_STRICT_MODE_TYPE;
                            }
                            function isSuspense(object) {
                                return typeOf(object) === REACT_SUSPENSE_TYPE;
                            }
                            exports.typeOf = typeOf;
                            exports.AsyncMode = AsyncMode;
                            exports.ConcurrentMode = ConcurrentMode;
                            exports.ContextConsumer = ContextConsumer;
                            exports.ContextProvider = ContextProvider;
                            exports.Element = Element;
                            exports.ForwardRef = ForwardRef;
                            exports.Fragment = Fragment;
                            exports.Lazy = Lazy;
                            exports.Memo = Memo;
                            exports.Portal = Portal;
                            exports.Profiler = Profiler;
                            exports.StrictMode = StrictMode;
                            exports.Suspense = Suspense;
                            exports.isValidElementType = isValidElementType;
                            exports.isAsyncMode = isAsyncMode;
                            exports.isConcurrentMode = isConcurrentMode;
                            exports.isContextConsumer = isContextConsumer;
                            exports.isContextProvider = isContextProvider;
                            exports.isElement = isElement;
                            exports.isForwardRef = isForwardRef;
                            exports.isFragment = isFragment;
                            exports.isLazy = isLazy;
                            exports.isMemo = isMemo;
                            exports.isPortal = isPortal;
                            exports.isProfiler = isProfiler;
                            exports.isStrictMode = isStrictMode;
                            exports.isSuspense = isSuspense;
                        })();
                    }
                }).call(this, require('_process'));
            }, { "_process": 7 }], 9: [function (require, module, exports) {
                /** @license React v16.8.1
                 * react-is.production.min.js
                 *
                 * Copyright (c) Facebook, Inc. and its affiliates.
                 *
                 * This source code is licensed under the MIT license found in the
                 * LICENSE file in the root directory of this source tree.
                 */
                'use strict';
                Object.defineProperty(exports, "__esModule", { value: !0 });
                var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.memo") :
                    60115, r = b ? Symbol.for("react.lazy") : 60116;
                function t(a) { if ("object" === typeof a && null !== a) {
                    var u = a.$$typeof;
                    switch (u) {
                        case c: switch (a = a.type, a) {
                            case l:
                            case m:
                            case e:
                            case g:
                            case f:
                            case p: return a;
                            default: switch (a = a && a.$$typeof, a) {
                                case k:
                                case n:
                                case h: return a;
                                default: return u;
                            }
                        }
                        case r:
                        case q:
                        case d: return u;
                    }
                } }
                function v(a) { return t(a) === m; }
                exports.typeOf = t;
                exports.AsyncMode = l;
                exports.ConcurrentMode = m;
                exports.ContextConsumer = k;
                exports.ContextProvider = h;
                exports.Element = c;
                exports.ForwardRef = n;
                exports.Fragment = e;
                exports.Lazy = r;
                exports.Memo = q;
                exports.Portal = d;
                exports.Profiler = g;
                exports.StrictMode = f;
                exports.Suspense = p;
                exports.isValidElementType = function (a) { return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === typeof a && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n); };
                exports.isAsyncMode = function (a) { return v(a) || t(a) === l; };
                exports.isConcurrentMode = v;
                exports.isContextConsumer = function (a) { return t(a) === k; };
                exports.isContextProvider = function (a) { return t(a) === h; };
                exports.isElement = function (a) { return "object" === typeof a && null !== a && a.$$typeof === c; };
                exports.isForwardRef = function (a) { return t(a) === n; };
                exports.isFragment = function (a) { return t(a) === e; };
                exports.isLazy = function (a) { return t(a) === r; };
                exports.isMemo = function (a) { return t(a) === q; };
                exports.isPortal = function (a) { return t(a) === d; };
                exports.isProfiler = function (a) { return t(a) === g; };
                exports.isStrictMode = function (a) { return t(a) === f; };
                exports.isSuspense = function (a) { return t(a) === p; };
            }, {}], 10: [function (require, module, exports) {
                (function (process) {
                    'use strict';
                    if (process.env.NODE_ENV === 'production') {
                        module.exports = require('./cjs/react-is.production.min.js');
                    }
                    else {
                        module.exports = require('./cjs/react-is.development.js');
                    }
                }).call(this, require('_process'));
            }, { "./cjs/react-is.development.js": 8, "./cjs/react-is.production.min.js": 9, "_process": 7 }] }, {}, [4])(4);
});
define("prosemirror-commands", function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var prosemirrorTransform = require('prosemirror-transform');
    var prosemirrorModel = require('prosemirror-model');
    var prosemirrorState = require('prosemirror-state');
    // :: (EditorState, ?(tr: Transaction)) → bool
    // Delete the selection, if there is one.
    function deleteSelection(state, dispatch) {
        if (state.selection.empty) {
            return false;
        }
        if (dispatch) {
            dispatch(state.tr.deleteSelection().scrollIntoView());
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // If the selection is empty and at the start of a textblock, try to
    // reduce the distance between that block and the one before it—if
    // there's a block directly before it that can be joined, join them.
    // If not, try to move the selected block closer to the next one in
    // the document structure by lifting it out of its parent or moving it
    // into a parent of the previous block. Will use the view for accurate
    // (bidi-aware) start-of-textblock detection if given.
    function joinBackward(state, dispatch, view) {
        var ref = state.selection;
        var $cursor = ref.$cursor;
        if (!$cursor || (view ? !view.endOfTextblock("backward", state)
            : $cursor.parentOffset > 0)) {
            return false;
        }
        var $cut = findCutBefore($cursor);
        // If there is no node before this, try to lift
        if (!$cut) {
            var range = $cursor.blockRange(), target = range && prosemirrorTransform.liftTarget(range);
            if (target == null) {
                return false;
            }
            if (dispatch) {
                dispatch(state.tr.lift(range, target).scrollIntoView());
            }
            return true;
        }
        var before = $cut.nodeBefore;
        // Apply the joining algorithm
        if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch)) {
            return true;
        }
        // If the node below has no content and the node above is
        // selectable, delete the node below and select the one above.
        if ($cursor.parent.content.size == 0 &&
            (textblockAt(before, "end") || prosemirrorState.NodeSelection.isSelectable(before))) {
            if (dispatch) {
                var tr = state.tr.deleteRange($cursor.before(), $cursor.after());
                tr.setSelection(textblockAt(before, "end") ? prosemirrorState.Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)
                    : prosemirrorState.NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
                dispatch(tr.scrollIntoView());
            }
            return true;
        }
        // If the node before is an atom, delete it
        if (before.isAtom && $cut.depth == $cursor.depth - 1) {
            if (dispatch) {
                dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
            }
            return true;
        }
        return false;
    }
    function textblockAt(node, side) {
        for (; node; node = (side == "start" ? node.firstChild : node.lastChild)) {
            if (node.isTextblock) {
                return true;
            }
        }
        return false;
    }
    // :: (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // When the selection is empty and at the start of a textblock, select
    // the node before that textblock, if possible. This is intended to be
    // bound to keys like backspace, after
    // [`joinBackward`](#commands.joinBackward) or other deleting
    // commands, as a fall-back behavior when the schema doesn't allow
    // deletion at the selected point.
    function selectNodeBackward(state, dispatch, view) {
        var ref = state.selection;
        var $cursor = ref.$cursor;
        if (!$cursor || (view ? !view.endOfTextblock("backward", state)
            : $cursor.parentOffset > 0)) {
            return false;
        }
        var $cut = findCutBefore($cursor), node = $cut && $cut.nodeBefore;
        if (!node || !prosemirrorState.NodeSelection.isSelectable(node)) {
            return false;
        }
        if (dispatch) {
            dispatch(state.tr.setSelection(prosemirrorState.NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());
        }
        return true;
    }
    function findCutBefore($pos) {
        if (!$pos.parent.type.spec.isolating) {
            for (var i = $pos.depth - 1; i >= 0; i--) {
                if ($pos.index(i) > 0) {
                    return $pos.doc.resolve($pos.before(i + 1));
                }
                if ($pos.node(i).type.spec.isolating) {
                    break;
                }
            }
        }
        return null;
    }
    // :: (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // If the selection is empty and the cursor is at the end of a
    // textblock, try to reduce or remove the boundary between that block
    // and the one after it, either by joining them or by moving the other
    // block closer to this one in the tree structure. Will use the view
    // for accurate start-of-textblock detection if given.
    function joinForward(state, dispatch, view) {
        var ref = state.selection;
        var $cursor = ref.$cursor;
        if (!$cursor || (view ? !view.endOfTextblock("forward", state)
            : $cursor.parentOffset < $cursor.parent.content.size)) {
            return false;
        }
        var $cut = findCutAfter($cursor);
        // If there is no node after this, there's nothing to do
        if (!$cut) {
            return false;
        }
        var after = $cut.nodeAfter;
        // Try the joining algorithm
        if (deleteBarrier(state, $cut, dispatch)) {
            return true;
        }
        // If the node above has no content and the node below is
        // selectable, delete the node above and select the one below.
        if ($cursor.parent.content.size == 0 &&
            (textblockAt(after, "start") || prosemirrorState.NodeSelection.isSelectable(after))) {
            if (dispatch) {
                var tr = state.tr.deleteRange($cursor.before(), $cursor.after());
                tr.setSelection(textblockAt(after, "start") ? prosemirrorState.Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)
                    : prosemirrorState.NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
                dispatch(tr.scrollIntoView());
            }
            return true;
        }
        // If the next node is an atom, delete it
        if (after.isAtom && $cut.depth == $cursor.depth - 1) {
            if (dispatch) {
                dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
            }
            return true;
        }
        return false;
    }
    // :: (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // When the selection is empty and at the end of a textblock, select
    // the node coming after that textblock, if possible. This is intended
    // to be bound to keys like delete, after
    // [`joinForward`](#commands.joinForward) and similar deleting
    // commands, to provide a fall-back behavior when the schema doesn't
    // allow deletion at the selected point.
    function selectNodeForward(state, dispatch, view) {
        var ref = state.selection;
        var $cursor = ref.$cursor;
        if (!$cursor || (view ? !view.endOfTextblock("forward", state)
            : $cursor.parentOffset < $cursor.parent.content.size)) {
            return false;
        }
        var $cut = findCutAfter($cursor), node = $cut && $cut.nodeAfter;
        if (!node || !prosemirrorState.NodeSelection.isSelectable(node)) {
            return false;
        }
        if (dispatch) {
            dispatch(state.tr.setSelection(prosemirrorState.NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
        }
        return true;
    }
    function findCutAfter($pos) {
        if (!$pos.parent.type.spec.isolating) {
            for (var i = $pos.depth - 1; i >= 0; i--) {
                var parent = $pos.node(i);
                if ($pos.index(i) + 1 < parent.childCount) {
                    return $pos.doc.resolve($pos.after(i + 1));
                }
                if (parent.type.spec.isolating) {
                    break;
                }
            }
        }
        return null;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // Join the selected block or, if there is a text selection, the
    // closest ancestor block of the selection that can be joined, with
    // the sibling above it.
    function joinUp(state, dispatch) {
        var sel = state.selection, nodeSel = sel instanceof prosemirrorState.NodeSelection, point;
        if (nodeSel) {
            if (sel.node.isTextblock || !prosemirrorTransform.canJoin(state.doc, sel.from)) {
                return false;
            }
            point = sel.from;
        }
        else {
            point = prosemirrorTransform.joinPoint(state.doc, sel.from, -1);
            if (point == null) {
                return false;
            }
        }
        if (dispatch) {
            var tr = state.tr.join(point);
            if (nodeSel) {
                tr.setSelection(prosemirrorState.NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));
            }
            dispatch(tr.scrollIntoView());
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // Join the selected block, or the closest ancestor of the selection
    // that can be joined, with the sibling after it.
    function joinDown(state, dispatch) {
        var sel = state.selection, point;
        if (sel instanceof prosemirrorState.NodeSelection) {
            if (sel.node.isTextblock || !prosemirrorTransform.canJoin(state.doc, sel.to)) {
                return false;
            }
            point = sel.to;
        }
        else {
            point = prosemirrorTransform.joinPoint(state.doc, sel.to, 1);
            if (point == null) {
                return false;
            }
        }
        if (dispatch) {
            dispatch(state.tr.join(point).scrollIntoView());
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // Lift the selected block, or the closest ancestor block of the
    // selection that can be lifted, out of its parent node.
    function lift(state, dispatch) {
        var ref = state.selection;
        var $from = ref.$from;
        var $to = ref.$to;
        var range = $from.blockRange($to), target = range && prosemirrorTransform.liftTarget(range);
        if (target == null) {
            return false;
        }
        if (dispatch) {
            dispatch(state.tr.lift(range, target).scrollIntoView());
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // If the selection is in a node whose type has a truthy
    // [`code`](#model.NodeSpec.code) property in its spec, replace the
    // selection with a newline character.
    function newlineInCode(state, dispatch) {
        var ref = state.selection;
        var $head = ref.$head;
        var $anchor = ref.$anchor;
        if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) {
            return false;
        }
        if (dispatch) {
            dispatch(state.tr.insertText("\n").scrollIntoView());
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // When the selection is in a node with a truthy
    // [`code`](#model.NodeSpec.code) property in its spec, create a
    // default block after the code block, and move the cursor there.
    function exitCode(state, dispatch) {
        var ref = state.selection;
        var $head = ref.$head;
        var $anchor = ref.$anchor;
        if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) {
            return false;
        }
        var above = $head.node(-1), after = $head.indexAfter(-1), type = above.contentMatchAt(after).defaultType;
        if (!above.canReplaceWith(after, after, type)) {
            return false;
        }
        if (dispatch) {
            var pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
            tr.setSelection(prosemirrorState.Selection.near(tr.doc.resolve(pos), 1));
            dispatch(tr.scrollIntoView());
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // If a block node is selected, create an empty paragraph before (if
    // it is its parent's first child) or after it.
    function createParagraphNear(state, dispatch) {
        var ref = state.selection;
        var $from = ref.$from;
        var $to = ref.$to;
        if ($from.parent.inlineContent || $to.parent.inlineContent) {
            return false;
        }
        var type = $from.parent.contentMatchAt($to.indexAfter()).defaultType;
        if (!type || !type.isTextblock) {
            return false;
        }
        if (dispatch) {
            var side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
            var tr = state.tr.insert(side, type.createAndFill());
            tr.setSelection(prosemirrorState.TextSelection.create(tr.doc, side + 1));
            dispatch(tr.scrollIntoView());
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // If the cursor is in an empty textblock that can be lifted, lift the
    // block.
    function liftEmptyBlock(state, dispatch) {
        var ref = state.selection;
        var $cursor = ref.$cursor;
        if (!$cursor || $cursor.parent.content.size) {
            return false;
        }
        if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
            var before = $cursor.before();
            if (prosemirrorTransform.canSplit(state.doc, before)) {
                if (dispatch) {
                    dispatch(state.tr.split(before).scrollIntoView());
                }
                return true;
            }
        }
        var range = $cursor.blockRange(), target = range && prosemirrorTransform.liftTarget(range);
        if (target == null) {
            return false;
        }
        if (dispatch) {
            dispatch(state.tr.lift(range, target).scrollIntoView());
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // Split the parent block of the selection. If the selection is a text
    // selection, also delete its content.
    function splitBlock(state, dispatch) {
        var ref = state.selection;
        var $from = ref.$from;
        var $to = ref.$to;
        if (state.selection instanceof prosemirrorState.NodeSelection && state.selection.node.isBlock) {
            if (!$from.parentOffset || !prosemirrorTransform.canSplit(state.doc, $from.pos)) {
                return false;
            }
            if (dispatch) {
                dispatch(state.tr.split($from.pos).scrollIntoView());
            }
            return true;
        }
        if (!$from.parent.isBlock) {
            return false;
        }
        if (dispatch) {
            var atEnd = $to.parentOffset == $to.parent.content.size;
            var tr = state.tr;
            if (state.selection instanceof prosemirrorState.TextSelection) {
                tr.deleteSelection();
            }
            var deflt = $from.depth == 0 ? null : $from.node(-1).contentMatchAt($from.indexAfter(-1)).defaultType;
            var types = atEnd && deflt ? [{ type: deflt }] : null;
            var can = prosemirrorTransform.canSplit(tr.doc, $from.pos, 1, types);
            if (!types && !can && prosemirrorTransform.canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt && [{ type: deflt }])) {
                types = [{ type: deflt }];
                can = true;
            }
            if (can) {
                tr.split(tr.mapping.map($from.pos), 1, types);
                if (!atEnd && !$from.parentOffset && $from.parent.type != deflt &&
                    $from.node(-1).canReplace($from.index(-1), $from.indexAfter(-1), prosemirrorModel.Fragment.from(deflt.create(), $from.parent))) {
                    tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
                }
            }
            dispatch(tr.scrollIntoView());
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // Acts like [`splitBlock`](#commands.splitBlock), but without
    // resetting the set of active marks at the cursor.
    function splitBlockKeepMarks(state, dispatch) {
        return splitBlock(state, dispatch && (function (tr) {
            var marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());
            if (marks) {
                tr.ensureMarks(marks);
            }
            dispatch(tr);
        }));
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // Move the selection to the node wrapping the current selection, if
    // any. (Will not select the document node.)
    function selectParentNode(state, dispatch) {
        var ref = state.selection;
        var $from = ref.$from;
        var to = ref.to;
        var pos;
        var same = $from.sharedDepth(to);
        if (same == 0) {
            return false;
        }
        pos = $from.before(same);
        if (dispatch) {
            dispatch(state.tr.setSelection(prosemirrorState.NodeSelection.create(state.doc, pos)));
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // Select the whole document.
    function selectAll(state, dispatch) {
        if (dispatch) {
            dispatch(state.tr.setSelection(new prosemirrorState.AllSelection(state.doc)));
        }
        return true;
    }
    function joinMaybeClear(state, $pos, dispatch) {
        var before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();
        if (!before || !after || !before.type.compatibleContent(after.type)) {
            return false;
        }
        if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
            if (dispatch) {
                dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
            }
            return true;
        }
        if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || prosemirrorTransform.canJoin(state.doc, $pos.pos))) {
            return false;
        }
        if (dispatch) {
            dispatch(state.tr
                .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))
                .join($pos.pos)
                .scrollIntoView());
        }
        return true;
    }
    function deleteBarrier(state, $cut, dispatch) {
        var before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
        if (before.type.spec.isolating || after.type.spec.isolating) {
            return false;
        }
        if (joinMaybeClear(state, $cut, dispatch)) {
            return true;
        }
        if ($cut.parent.canReplace($cut.index(), $cut.index() + 1) &&
            (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&
            match.matchType(conn[0] || after.type).validEnd) {
            if (dispatch) {
                var end = $cut.pos + after.nodeSize, wrap = prosemirrorModel.Fragment.empty;
                for (var i = conn.length - 1; i >= 0; i--) {
                    wrap = prosemirrorModel.Fragment.from(conn[i].create(null, wrap));
                }
                wrap = prosemirrorModel.Fragment.from(before.copy(wrap));
                var tr = state.tr.step(new prosemirrorTransform.ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new prosemirrorModel.Slice(wrap, 1, 0), conn.length, true));
                var joinAt = end + 2 * conn.length;
                if (prosemirrorTransform.canJoin(tr.doc, joinAt)) {
                    tr.join(joinAt);
                }
                dispatch(tr.scrollIntoView());
            }
            return true;
        }
        var selAfter = prosemirrorState.Selection.findFrom($cut, 1);
        var range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && prosemirrorTransform.liftTarget(range);
        if (target != null && target >= $cut.depth) {
            if (dispatch) {
                dispatch(state.tr.lift(range, target).scrollIntoView());
            }
            return true;
        }
        return false;
    }
    // Parameterized commands
    // :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool
    // Wrap the selection in a node of the given type with the given
    // attributes.
    function wrapIn(nodeType, attrs) {
        return function (state, dispatch) {
            var ref = state.selection;
            var $from = ref.$from;
            var $to = ref.$to;
            var range = $from.blockRange($to), wrapping = range && prosemirrorTransform.findWrapping(range, nodeType, attrs);
            if (!wrapping) {
                return false;
            }
            if (dispatch) {
                dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
            }
            return true;
        };
    }
    // :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool
    // Returns a command that tries to set the selected textblocks to the
    // given node type with the given attributes.
    function setBlockType(nodeType, attrs) {
        return function (state, dispatch) {
            var ref = state.selection;
            var from = ref.from;
            var to = ref.to;
            var applicable = false;
            state.doc.nodesBetween(from, to, function (node, pos) {
                if (applicable) {
                    return false;
                }
                if (!node.isTextblock || node.hasMarkup(nodeType, attrs)) {
                    return;
                }
                if (node.type == nodeType) {
                    applicable = true;
                }
                else {
                    var $pos = state.doc.resolve(pos), index = $pos.index();
                    applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
                }
            });
            if (!applicable) {
                return false;
            }
            if (dispatch) {
                dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView());
            }
            return true;
        };
    }
    function markApplies(doc, ranges, type) {
        var loop = function (i) {
            var ref = ranges[i];
            var $from = ref.$from;
            var $to = ref.$to;
            var can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false;
            doc.nodesBetween($from.pos, $to.pos, function (node) {
                if (can) {
                    return false;
                }
                can = node.inlineContent && node.type.allowsMarkType(type);
            });
            if (can) {
                return { v: true };
            }
        };
        for (var i = 0; i < ranges.length; i++) {
            var returned = loop(i);
            if (returned)
                return returned.v;
        }
        return false;
    }
    // :: (MarkType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool
    // Create a command function that toggles the given mark with the
    // given attributes. Will return `false` when the current selection
    // doesn't support that mark. This will remove the mark if any marks
    // of that type exist in the selection, or add it otherwise. If the
    // selection is empty, this applies to the [stored
    // marks](#state.EditorState.storedMarks) instead of a range of the
    // document.
    function toggleMark(markType, attrs) {
        return function (state, dispatch) {
            var ref = state.selection;
            var empty = ref.empty;
            var $cursor = ref.$cursor;
            var ranges = ref.ranges;
            if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType)) {
                return false;
            }
            if (dispatch) {
                if ($cursor) {
                    if (markType.isInSet(state.storedMarks || $cursor.marks())) {
                        dispatch(state.tr.removeStoredMark(markType));
                    }
                    else {
                        dispatch(state.tr.addStoredMark(markType.create(attrs)));
                    }
                }
                else {
                    var has = false, tr = state.tr;
                    for (var i = 0; !has && i < ranges.length; i++) {
                        var ref$1 = ranges[i];
                        var $from = ref$1.$from;
                        var $to = ref$1.$to;
                        has = state.doc.rangeHasMark($from.pos, $to.pos, markType);
                    }
                    for (var i$1 = 0; i$1 < ranges.length; i$1++) {
                        var ref$2 = ranges[i$1];
                        var $from$1 = ref$2.$from;
                        var $to$1 = ref$2.$to;
                        if (has) {
                            tr.removeMark($from$1.pos, $to$1.pos, markType);
                        }
                        else {
                            tr.addMark($from$1.pos, $to$1.pos, markType.create(attrs));
                        }
                    }
                    dispatch(tr.scrollIntoView());
                }
            }
            return true;
        };
    }
    function wrapDispatchForJoin(dispatch, isJoinable) {
        return function (tr) {
            if (!tr.isGeneric) {
                return dispatch(tr);
            }
            var ranges = [];
            for (var i = 0; i < tr.mapping.maps.length; i++) {
                var map = tr.mapping.maps[i];
                for (var j = 0; j < ranges.length; j++) {
                    ranges[j] = map.map(ranges[j]);
                }
                map.forEach(function (_s, _e, from, to) { return ranges.push(from, to); });
            }
            // Figure out which joinable points exist inside those ranges,
            // by checking all node boundaries in their parent nodes.
            var joinable = [];
            for (var i$1 = 0; i$1 < ranges.length; i$1 += 2) {
                var from = ranges[i$1], to = ranges[i$1 + 1];
                var $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth);
                for (var index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {
                    var after = parent.maybeChild(index);
                    if (!after) {
                        break;
                    }
                    if (index && joinable.indexOf(pos) == -1) {
                        var before = parent.child(index - 1);
                        if (before.type == after.type && isJoinable(before, after)) {
                            joinable.push(pos);
                        }
                    }
                    pos += after.nodeSize;
                }
            }
            // Join the joinable points
            joinable.sort(function (a, b) { return a - b; });
            for (var i$2 = joinable.length - 1; i$2 >= 0; i$2--) {
                if (prosemirrorTransform.canJoin(tr.doc, joinable[i$2])) {
                    tr.join(joinable[i$2]);
                }
            }
            dispatch(tr);
        };
    }
    // :: ((state: EditorState, ?(tr: Transaction)) → bool, union<(before: Node, after: Node) → bool, [string]>) → (state: EditorState, ?(tr: Transaction)) → bool
    // Wrap a command so that, when it produces a transform that causes
    // two joinable nodes to end up next to each other, those are joined.
    // Nodes are considered joinable when they are of the same type and
    // when the `isJoinable` predicate returns true for them or, if an
    // array of strings was passed, if their node type name is in that
    // array.
    function autoJoin(command, isJoinable) {
        if (Array.isArray(isJoinable)) {
            var types = isJoinable;
            isJoinable = function (node) { return types.indexOf(node.type.name) > -1; };
        }
        return function (state, dispatch) { return command(state, dispatch && wrapDispatchForJoin(dispatch, isJoinable)); };
    }
    // :: (...[(EditorState, ?(tr: Transaction), ?EditorView) → bool]) → (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // Combine a number of command functions into a single function (which
    // calls them one by one until one returns true).
    function chainCommands() {
        var commands = [], len = arguments.length;
        while (len--)
            commands[len] = arguments[len];
        return function (state, dispatch, view) {
            for (var i = 0; i < commands.length; i++) {
                if (commands[i](state, dispatch, view)) {
                    return true;
                }
            }
            return false;
        };
    }
    var backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
    var del = chainCommands(deleteSelection, joinForward, selectNodeForward);
    // :: Object
    // A basic keymap containing bindings not specific to any schema.
    // Binds the following keys (when multiple commands are listed, they
    // are chained with [`chainCommands`](#commands.chainCommands)):
    //
    // * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`
    // * **Mod-Enter** to `exitCode`
    // * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`
    // * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    // * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    // * **Mod-a** to `selectAll`
    var pcBaseKeymap = {
        "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
        "Mod-Enter": exitCode,
        "Backspace": backspace,
        "Mod-Backspace": backspace,
        "Delete": del,
        "Mod-Delete": del,
        "Mod-a": selectAll
    };
    // :: Object
    // A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,
    // **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and
    // **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like
    // Ctrl-Delete.
    var macBaseKeymap = {
        "Ctrl-h": pcBaseKeymap["Backspace"],
        "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
        "Ctrl-d": pcBaseKeymap["Delete"],
        "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
        "Alt-Delete": pcBaseKeymap["Mod-Delete"],
        "Alt-d": pcBaseKeymap["Mod-Delete"]
    };
    for (var key in pcBaseKeymap) {
        macBaseKeymap[key] = pcBaseKeymap[key];
    }
    // declare global: os, navigator
    var mac = typeof navigator != "undefined" ? /Mac/.test(navigator.platform)
        : typeof os != "undefined" ? os.platform() == "darwin" : false;
    // :: Object
    // Depending on the detected platform, this will hold
    // [`pcBasekeymap`](#commands.pcBaseKeymap) or
    // [`macBaseKeymap`](#commands.macBaseKeymap).
    var baseKeymap = mac ? macBaseKeymap : pcBaseKeymap;
    exports.deleteSelection = deleteSelection;
    exports.joinBackward = joinBackward;
    exports.selectNodeBackward = selectNodeBackward;
    exports.joinForward = joinForward;
    exports.selectNodeForward = selectNodeForward;
    exports.joinUp = joinUp;
    exports.joinDown = joinDown;
    exports.lift = lift;
    exports.newlineInCode = newlineInCode;
    exports.exitCode = exitCode;
    exports.createParagraphNear = createParagraphNear;
    exports.liftEmptyBlock = liftEmptyBlock;
    exports.splitBlock = splitBlock;
    exports.splitBlockKeepMarks = splitBlockKeepMarks;
    exports.selectParentNode = selectParentNode;
    exports.selectAll = selectAll;
    exports.wrapIn = wrapIn;
    exports.setBlockType = setBlockType;
    exports.toggleMark = toggleMark;
    exports.autoJoin = autoJoin;
    exports.chainCommands = chainCommands;
    exports.pcBaseKeymap = pcBaseKeymap;
    exports.macBaseKeymap = macBaseKeymap;
    exports.baseKeymap = baseKeymap;
    //# sourceMappingURL=commands.js.map
});
define("rope-sequence", function (require, exports, module) {
    var GOOD_LEAF_SIZE = 200;
    // :: class<T> A rope sequence is a persistent sequence data structure
    // that supports appending, prepending, and slicing without doing a
    // full copy. It is represented as a mostly-balanced tree.
    var RopeSequence = function RopeSequence() { };
    RopeSequence.prototype.append = function append(other) {
        if (!other.length) {
            return this;
        }
        other = RopeSequence.from(other);
        return (!this.length && other) ||
            (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||
            (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||
            this.appendInner(other);
    };
    // :: (union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Prepend an array or other rope to this one, returning a new rope.
    RopeSequence.prototype.prepend = function prepend(other) {
        if (!other.length) {
            return this;
        }
        return RopeSequence.from(other).append(this);
    };
    RopeSequence.prototype.appendInner = function appendInner(other) {
        return new Append(this, other);
    };
    // :: (?number, ?number) → RopeSequence<T>
    // Create a rope repesenting a sub-sequence of this rope.
    RopeSequence.prototype.slice = function slice(from, to) {
        if (from === void 0)
            from = 0;
        if (to === void 0)
            to = this.length;
        if (from >= to) {
            return RopeSequence.empty;
        }
        return this.sliceInner(Math.max(0, from), Math.min(this.length, to));
    };
    // :: (number) → T
    // Retrieve the element at the given position from this rope.
    RopeSequence.prototype.get = function get(i) {
        if (i < 0 || i >= this.length) {
            return undefined;
        }
        return this.getInner(i);
    };
    // :: ((element: T, index: number) → ?bool, ?number, ?number)
    // Call the given function for each element between the given
    // indices. This tends to be more efficient than looping over the
    // indices and calling `get`, because it doesn't have to descend the
    // tree for every element.
    RopeSequence.prototype.forEach = function forEach(f, from, to) {
        if (from === void 0)
            from = 0;
        if (to === void 0)
            to = this.length;
        if (from <= to) {
            this.forEachInner(f, from, to, 0);
        }
        else {
            this.forEachInvertedInner(f, from, to, 0);
        }
    };
    // :: ((element: T, index: number) → U, ?number, ?number) → [U]
    // Map the given functions over the elements of the rope, producing
    // a flat array.
    RopeSequence.prototype.map = function map(f, from, to) {
        if (from === void 0)
            from = 0;
        if (to === void 0)
            to = this.length;
        var result = [];
        this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);
        return result;
    };
    // :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Create a rope representing the given array, or return the rope
    // itself if a rope was given.
    RopeSequence.from = function from(values) {
        if (values instanceof RopeSequence) {
            return values;
        }
        return values && values.length ? new Leaf(values) : RopeSequence.empty;
    };
    var Leaf = (function (RopeSequence) {
        function Leaf(values) {
            RopeSequence.call(this);
            this.values = values;
        }
        if (RopeSequence)
            Leaf.__proto__ = RopeSequence;
        Leaf.prototype = Object.create(RopeSequence && RopeSequence.prototype);
        Leaf.prototype.constructor = Leaf;
        var prototypeAccessors = { length: {}, depth: {} };
        Leaf.prototype.flatten = function flatten() {
            return this.values;
        };
        Leaf.prototype.sliceInner = function sliceInner(from, to) {
            if (from == 0 && to == this.length) {
                return this;
            }
            return new Leaf(this.values.slice(from, to));
        };
        Leaf.prototype.getInner = function getInner(i) {
            return this.values[i];
        };
        Leaf.prototype.forEachInner = function forEachInner(f, from, to, start) {
            var this$1 = this;
            for (var i = from; i < to; i++) {
                if (f(this$1.values[i], start + i) === false) {
                    return false;
                }
            }
        };
        Leaf.prototype.forEachInvertedInner = function forEachInvertedInner(f, from, to, start) {
            var this$1 = this;
            for (var i = from - 1; i >= to; i--) {
                if (f(this$1.values[i], start + i) === false) {
                    return false;
                }
            }
        };
        Leaf.prototype.leafAppend = function leafAppend(other) {
            if (this.length + other.length <= GOOD_LEAF_SIZE) {
                return new Leaf(this.values.concat(other.flatten()));
            }
        };
        Leaf.prototype.leafPrepend = function leafPrepend(other) {
            if (this.length + other.length <= GOOD_LEAF_SIZE) {
                return new Leaf(other.flatten().concat(this.values));
            }
        };
        prototypeAccessors.length.get = function () { return this.values.length; };
        prototypeAccessors.depth.get = function () { return 0; };
        Object.defineProperties(Leaf.prototype, prototypeAccessors);
        return Leaf;
    }(RopeSequence));
    // :: RopeSequence
    // The empty rope sequence.
    RopeSequence.empty = new Leaf([]);
    var Append = (function (RopeSequence) {
        function Append(left, right) {
            RopeSequence.call(this);
            this.left = left;
            this.right = right;
            this.length = left.length + right.length;
            this.depth = Math.max(left.depth, right.depth) + 1;
        }
        if (RopeSequence)
            Append.__proto__ = RopeSequence;
        Append.prototype = Object.create(RopeSequence && RopeSequence.prototype);
        Append.prototype.constructor = Append;
        Append.prototype.flatten = function flatten() {
            return this.left.flatten().concat(this.right.flatten());
        };
        Append.prototype.getInner = function getInner(i) {
            return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length);
        };
        Append.prototype.forEachInner = function forEachInner(f, from, to, start) {
            var leftLen = this.left.length;
            if (from < leftLen &&
                this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false) {
                return false;
            }
            if (to > leftLen &&
                this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false) {
                return false;
            }
        };
        Append.prototype.forEachInvertedInner = function forEachInvertedInner(f, from, to, start) {
            var leftLen = this.left.length;
            if (from > leftLen &&
                this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false) {
                return false;
            }
            if (to < leftLen &&
                this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false) {
                return false;
            }
        };
        Append.prototype.sliceInner = function sliceInner(from, to) {
            if (from == 0 && to == this.length) {
                return this;
            }
            var leftLen = this.left.length;
            if (to <= leftLen) {
                return this.left.slice(from, to);
            }
            if (from >= leftLen) {
                return this.right.slice(from - leftLen, to - leftLen);
            }
            return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen));
        };
        Append.prototype.leafAppend = function leafAppend(other) {
            var inner = this.right.leafAppend(other);
            if (inner) {
                return new Append(this.left, inner);
            }
        };
        Append.prototype.leafPrepend = function leafPrepend(other) {
            var inner = this.left.leafPrepend(other);
            if (inner) {
                return new Append(inner, this.right);
            }
        };
        Append.prototype.appendInner = function appendInner(other) {
            if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1) {
                return new Append(this.left, new Append(this.right, other));
            }
            return new Append(this, other);
        };
        return Append;
    }(RopeSequence));
    module.exports = RopeSequence;
});
define("prosemirror-history", function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function _interopDefault(ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
    var RopeSequence = _interopDefault(require('rope-sequence'));
    var prosemirrorTransform = require('prosemirror-transform');
    var prosemirrorState = require('prosemirror-state');
    // ProseMirror's history isn't simply a way to roll back to a previous
    // state, because ProseMirror supports applying changes without adding
    // them to the history (for example during collaboration).
    //
    // To this end, each 'Branch' (one for the undo history and one for
    // the redo history) keeps an array of 'Items', which can optionally
    // hold a step (an actual undoable change), and always hold a position
    // map (which is needed to move changes below them to apply to the
    // current document).
    //
    // An item that has both a step and a selection bookmark is the start
    // of an 'event' — a group of changes that will be undone or redone at
    // once. (It stores only the bookmark, since that way we don't have to
    // provide a document until the selection is actually applied, which
    // is useful when compressing.)
    // Used to schedule history compression
    var max_empty_items = 500;
    var Branch = function Branch(items, eventCount) {
        this.items = items;
        this.eventCount = eventCount;
    };
    // : (EditorState, bool) → ?{transform: Transform, selection: ?SelectionBookmark, remaining: Branch}
    // Pop the latest event off the branch's history and apply it
    // to a document transform.
    Branch.prototype.popEvent = function popEvent(state, preserveItems) {
        var this$1 = this;
        if (this.eventCount == 0) {
            return null;
        }
        var end = this.items.length;
        for (;; end--) {
            var next = this$1.items.get(end - 1);
            if (next.selection) {
                --end;
                break;
            }
        }
        var remap, mapFrom;
        if (preserveItems) {
            remap = this.remapping(end, this.items.length);
            mapFrom = remap.maps.length;
        }
        var transform = state.tr;
        var selection, remaining;
        var addAfter = [], addBefore = [];
        this.items.forEach(function (item, i) {
            if (!item.step) {
                if (!remap) {
                    remap = this$1.remapping(end, i + 1);
                    mapFrom = remap.maps.length;
                }
                mapFrom--;
                addBefore.push(item);
                return;
            }
            if (remap) {
                addBefore.push(new Item(item.map));
                var step = item.step.map(remap.slice(mapFrom)), map;
                if (step && transform.maybeStep(step).doc) {
                    map = transform.mapping.maps[transform.mapping.maps.length - 1];
                    addAfter.push(new Item(map, null, null, addAfter.length + addBefore.length));
                }
                mapFrom--;
                if (map) {
                    remap.appendMap(map, mapFrom);
                }
            }
            else {
                transform.maybeStep(item.step);
            }
            if (item.selection) {
                selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
                remaining = new Branch(this$1.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this$1.eventCount - 1);
                return false;
            }
        }, this.items.length, 0);
        return { remaining: remaining, transform: transform, selection: selection };
    };
    // : (Transform, ?SelectionBookmark, Object) → Branch
    // Create a new branch with the given transform added.
    Branch.prototype.addTransform = function addTransform(transform, selection, histOptions, preserveItems) {
        var newItems = [], eventCount = this.eventCount;
        var oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
        for (var i = 0; i < transform.steps.length; i++) {
            var step = transform.steps[i].invert(transform.docs[i]);
            var item = new Item(transform.mapping.maps[i], step, selection), merged = (void 0);
            if (merged = lastItem && lastItem.merge(item)) {
                item = merged;
                if (i) {
                    newItems.pop();
                }
                else {
                    oldItems = oldItems.slice(0, oldItems.length - 1);
                }
            }
            newItems.push(item);
            if (selection) {
                eventCount++;
                selection = null;
            }
            if (!preserveItems) {
                lastItem = item;
            }
        }
        var overflow = eventCount - histOptions.depth;
        if (overflow > DEPTH_OVERFLOW) {
            oldItems = cutOffEvents(oldItems, overflow);
            eventCount -= overflow;
        }
        return new Branch(oldItems.append(newItems), eventCount);
    };
    Branch.prototype.remapping = function remapping(from, to) {
        var maps = new prosemirrorTransform.Mapping;
        this.items.forEach(function (item, i) {
            var mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from
                ? mirrorPos = maps.maps.length - item.mirrorOffset : null;
            maps.appendMap(item.map, mirrorPos);
        }, from, to);
        return maps;
    };
    Branch.prototype.addMaps = function addMaps(array) {
        if (this.eventCount == 0) {
            return this;
        }
        return new Branch(this.items.append(array.map(function (map) { return new Item(map); })), this.eventCount);
    };
    // : (Transform, number)
    // When the collab module receives remote changes, the history has
    // to know about those, so that it can adjust the steps that were
    // rebased on top of the remote changes, and include the position
    // maps for the remote changes in its array of items.
    Branch.prototype.rebased = function rebased(rebasedTransform, rebasedCount) {
        if (!this.eventCount) {
            return this;
        }
        var rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);
        var mapping = rebasedTransform.mapping;
        var newUntil = rebasedTransform.steps.length;
        var eventCount = this.eventCount;
        this.items.forEach(function (item) { if (item.selection) {
            eventCount--;
        } }, start);
        var iRebased = rebasedCount;
        this.items.forEach(function (item) {
            var pos = mapping.getMirror(--iRebased);
            if (pos == null) {
                return;
            }
            newUntil = Math.min(newUntil, pos);
            var map = mapping.maps[pos];
            if (item.step) {
                var step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
                var selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
                if (selection) {
                    eventCount++;
                }
                rebasedItems.push(new Item(map, step, selection));
            }
            else {
                rebasedItems.push(new Item(map));
            }
        }, start);
        var newMaps = [];
        for (var i = rebasedCount; i < newUntil; i++) {
            newMaps.push(new Item(mapping.maps[i]));
        }
        var items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
        var branch = new Branch(items, eventCount);
        if (branch.emptyItemCount() > max_empty_items) {
            branch = branch.compress(this.items.length - rebasedItems.length);
        }
        return branch;
    };
    Branch.prototype.emptyItemCount = function emptyItemCount() {
        var count = 0;
        this.items.forEach(function (item) { if (!item.step) {
            count++;
        } });
        return count;
    };
    // Compressing a branch means rewriting it to push the air (map-only
    // items) out. During collaboration, these naturally accumulate
    // because each remote change adds one. The `upto` argument is used
    // to ensure that only the items below a given level are compressed,
    // because `rebased` relies on a clean, untouched set of items in
    // order to associate old items with rebased steps.
    Branch.prototype.compress = function compress(upto) {
        if (upto === void 0)
            upto = this.items.length;
        var remap = this.remapping(0, upto), mapFrom = remap.maps.length;
        var items = [], events = 0;
        this.items.forEach(function (item, i) {
            if (i >= upto) {
                items.push(item);
                if (item.selection) {
                    events++;
                }
            }
            else if (item.step) {
                var step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();
                mapFrom--;
                if (map) {
                    remap.appendMap(map, mapFrom);
                }
                if (step) {
                    var selection = item.selection && item.selection.map(remap.slice(mapFrom));
                    if (selection) {
                        events++;
                    }
                    var newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1;
                    if (merged = items.length && items[last].merge(newItem)) {
                        items[last] = merged;
                    }
                    else {
                        items.push(newItem);
                    }
                }
            }
            else if (item.map) {
                mapFrom--;
            }
        }, this.items.length, 0);
        return new Branch(RopeSequence.from(items.reverse()), events);
    };
    Branch.empty = new Branch(RopeSequence.empty, 0);
    function cutOffEvents(items, n) {
        var cutPoint;
        items.forEach(function (item, i) {
            if (item.selection && (n-- == 0)) {
                cutPoint = i;
                return false;
            }
        });
        return items.slice(cutPoint);
    }
    var Item = function Item(map, step, selection, mirrorOffset) {
        this.map = map;
        this.step = step;
        this.selection = selection;
        this.mirrorOffset = mirrorOffset;
    };
    Item.prototype.merge = function merge(other) {
        if (this.step && other.step && !other.selection) {
            var step = other.step.merge(this.step);
            if (step) {
                return new Item(step.getMap().invert(), step, this.selection);
            }
        }
    };
    // The value of the state field that tracks undo/redo history for that
    // state. Will be stored in the plugin state when the history plugin
    // is active.
    var HistoryState = function HistoryState(done, undone, prevRanges, prevTime) {
        this.done = done;
        this.undone = undone;
        this.prevRanges = prevRanges;
        this.prevTime = prevTime;
    };
    var DEPTH_OVERFLOW = 20;
    // : (HistoryState, EditorState, Transaction, Object)
    // Record a transformation in undo history.
    function applyTransaction(history, state, tr, options) {
        var historyTr = tr.getMeta(historyKey), rebased;
        if (historyTr) {
            return historyTr.historyState;
        }
        if (tr.getMeta(closeHistoryKey)) {
            history = new HistoryState(history.done, history.undone, null, 0);
        }
        var appended = tr.getMeta("appendedTransaction");
        if (tr.steps.length == 0) {
            return history;
        }
        else if (appended && appended.getMeta(historyKey)) {
            if (appended.getMeta(historyKey).redo) {
                return new HistoryState(history.done.addTransform(tr, null, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime);
            }
            else {
                return new HistoryState(history.done, history.undone.addTransform(tr, null, options, mustPreserveItems(state)), null, history.prevTime);
            }
        }
        else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
            // Group transforms that occur in quick succession into one event.
            var newGroup = history.prevTime < (tr.time || 0) - options.newGroupDelay ||
                !appended && !isAdjacentTo(tr, history.prevRanges);
            var prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);
            return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : null, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time);
        }
        else if (rebased = tr.getMeta("rebased")) {
            // Used by the collab module to tell the history that some of its
            // content has been rebased.
            return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
        }
        else {
            return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
        }
    }
    function isAdjacentTo(transform, prevRanges) {
        if (!prevRanges) {
            return false;
        }
        if (!transform.docChanged) {
            return true;
        }
        var adjacent = false;
        transform.mapping.maps[0].forEach(function (start, end) {
            for (var i = 0; i < prevRanges.length; i += 2) {
                if (start <= prevRanges[i + 1] && end >= prevRanges[i]) {
                    adjacent = true;
                }
            }
        });
        return adjacent;
    }
    function rangesFor(map) {
        var result = [];
        map.forEach(function (_from, _to, from, to) { return result.push(from, to); });
        return result;
    }
    function mapRanges(ranges, mapping) {
        if (!ranges) {
            return null;
        }
        var result = [];
        for (var i = 0; i < ranges.length; i += 2) {
            var from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);
            if (from <= to) {
                result.push(from, to);
            }
        }
        return result;
    }
    // : (HistoryState, EditorState, (tr: Transaction), bool)
    // Apply the latest event from one branch to the document and shift the event
    // onto the other branch.
    function histTransaction(history, state, dispatch, redo) {
        var preserveItems = mustPreserveItems(state), histOptions = historyKey.get(state).spec.config;
        var pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);
        if (!pop) {
            return;
        }
        var selection = pop.selection.resolve(pop.transform.doc);
        var added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
        var newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0);
        dispatch(pop.transform.setSelection(selection).setMeta(historyKey, { redo: redo, historyState: newHist }).scrollIntoView());
    }
    var cachedPreserveItems = false;
    var cachedPreserveItemsPlugins = null;
    // Check whether any plugin in the given state has a
    // `historyPreserveItems` property in its spec, in which case we must
    // preserve steps exactly as they came in, so that they can be
    // rebased.
    function mustPreserveItems(state) {
        var plugins = state.plugins;
        if (cachedPreserveItemsPlugins != plugins) {
            cachedPreserveItems = false;
            cachedPreserveItemsPlugins = plugins;
            for (var i = 0; i < plugins.length; i++) {
                if (plugins[i].spec.historyPreserveItems) {
                    cachedPreserveItems = true;
                    break;
                }
            }
        }
        return cachedPreserveItems;
    }
    // :: (Transaction) → Transaction
    // Set a flag on the given transaction that will prevent further steps
    // from being appended to an existing history event (so that they
    // require a separate undo command to undo).
    function closeHistory(tr) {
        return tr.setMeta(closeHistoryKey, true);
    }
    var historyKey = new prosemirrorState.PluginKey("history");
    var closeHistoryKey = new prosemirrorState.PluginKey("closeHistory");
    // :: (?Object) → Plugin
    // Returns a plugin that enables the undo history for an editor. The
    // plugin will track undo and redo stacks, which can be used with the
    // [`undo`](#history.undo) and [`redo`](#history.redo) commands.
    //
    // You can set an `"addToHistory"` [metadata
    // property](#state.Transaction.setMeta) of `false` on a transaction
    // to prevent it from being rolled back by undo.
    //
    //   config::-
    //   Supports the following configuration options:
    //
    //     depth:: ?number
    //     The amount of history events that are collected before the
    //     oldest events are discarded. Defaults to 100.
    //
    //     newGroupDelay:: ?number
    //     The delay between changes after which a new group should be
    //     started. Defaults to 500 (milliseconds). Note that when changes
    //     aren't adjacent, a new group is always started.
    function history(config) {
        config = { depth: config && config.depth || 100,
            newGroupDelay: config && config.newGroupDelay || 500 };
        return new prosemirrorState.Plugin({
            key: historyKey,
            state: {
                init: function init() {
                    return new HistoryState(Branch.empty, Branch.empty, null, 0);
                },
                apply: function apply(tr, hist, state) {
                    return applyTransaction(hist, state, tr, config);
                }
            },
            config: config
        });
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // A command function that undoes the last change, if any.
    function undo(state, dispatch) {
        var hist = historyKey.getState(state);
        if (!hist || hist.done.eventCount == 0) {
            return false;
        }
        if (dispatch) {
            histTransaction(hist, state, dispatch, false);
        }
        return true;
    }
    // :: (EditorState, ?(tr: Transaction)) → bool
    // A command function that redoes the last undone change, if any.
    function redo(state, dispatch) {
        var hist = historyKey.getState(state);
        if (!hist || hist.undone.eventCount == 0) {
            return false;
        }
        if (dispatch) {
            histTransaction(hist, state, dispatch, true);
        }
        return true;
    }
    // :: (EditorState) → number
    // The amount of undoable events available in a given state.
    function undoDepth(state) {
        var hist = historyKey.getState(state);
        return hist ? hist.done.eventCount : 0;
    }
    // :: (EditorState) → number
    // The amount of redoable events available in a given editor state.
    function redoDepth(state) {
        var hist = historyKey.getState(state);
        return hist ? hist.undone.eventCount : 0;
    }
    exports.HistoryState = HistoryState;
    exports.closeHistory = closeHistory;
    exports.history = history;
    exports.undo = undo;
    exports.redo = redo;
    exports.undoDepth = undoDepth;
    exports.redoDepth = redoDepth;
    //# sourceMappingURL=history.js.map
});
define("w3c-keyname", function (require, exports, module) {
    var base = {
        8: "Backspace",
        9: "Tab",
        10: "Enter",
        12: "NumLock",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        44: "PrintScreen",
        45: "Insert",
        46: "Delete",
        59: ";",
        61: "=",
        91: "Meta",
        92: "Meta",
        106: "*",
        107: "+",
        108: ",",
        109: "-",
        110: ".",
        111: "/",
        144: "NumLock",
        145: "ScrollLock",
        160: "Shift",
        161: "Shift",
        162: "Control",
        163: "Control",
        164: "Alt",
        165: "Alt",
        173: "-",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'",
        229: "q"
    };
    var shift = {
        48: ")",
        49: "!",
        50: "@",
        51: "#",
        52: "$",
        53: "%",
        54: "^",
        55: "&",
        56: "*",
        57: "(",
        59: ";",
        61: "+",
        173: "_",
        186: ":",
        187: "+",
        188: "<",
        189: "_",
        190: ">",
        191: "?",
        192: "~",
        219: "{",
        220: "|",
        221: "}",
        222: "\"",
        229: "Q"
    };
    var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var safari = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
    var gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var brokenModifierNames = chrome && (mac || +chrome[1] < 57) || gecko && mac;
    // Fill in the digit keys
    for (var i = 0; i < 10; i++)
        base[48 + i] = base[96 + i] = String(i);
    // The function keys
    for (var i = 1; i <= 24; i++)
        base[i + 111] = "F" + i;
    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
        base[i] = String.fromCharCode(i + 32);
        shift[i] = String.fromCharCode(i);
    }
    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base)
        if (!shift.hasOwnProperty(code))
            shift[code] = base[code];
    function keyName(event) {
        // Don't trust event.key in Chrome when there are modifiers until
        // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
        var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
            safari && event.shiftKey && event.key && event.key.length == 1;
        var name = (!ignoreKey && event.key) ||
            (event.shiftKey ? shift : base)[event.keyCode] ||
            event.key || "Unidentified";
        // Edge sometimes produces wrong names (Issue #3)
        if (name == "Esc")
            name = "Escape";
        if (name == "Del")
            name = "Delete";
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
        if (name == "Left")
            name = "ArrowLeft";
        if (name == "Up")
            name = "ArrowUp";
        if (name == "Right")
            name = "ArrowRight";
        if (name == "Down")
            name = "ArrowDown";
        return name;
    }
    module.exports = keyName;
    keyName.base = base;
    keyName.shift = shift;
});
define("prosemirror-keymap", function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function _interopDefault(ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
    var keyName = _interopDefault(require('w3c-keyname'));
    var prosemirrorState = require('prosemirror-state');
    // declare global: navigator
    var mac = typeof navigator != "undefined" ? /Mac/.test(navigator.platform) : false;
    function normalizeKeyName(name) {
        var parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
        if (result == "Space") {
            result = " ";
        }
        var alt, ctrl, shift, meta;
        for (var i = 0; i < parts.length - 1; i++) {
            var mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod)) {
                meta = true;
            }
            else if (/^a(lt)?$/i.test(mod)) {
                alt = true;
            }
            else if (/^(c|ctrl|control)$/i.test(mod)) {
                ctrl = true;
            }
            else if (/^s(hift)?$/i.test(mod)) {
                shift = true;
            }
            else if (/^mod$/i.test(mod)) {
                if (mac) {
                    meta = true;
                }
                else {
                    ctrl = true;
                }
            }
            else {
                throw new Error("Unrecognized modifier name: " + mod);
            }
        }
        if (alt) {
            result = "Alt-" + result;
        }
        if (ctrl) {
            result = "Ctrl-" + result;
        }
        if (meta) {
            result = "Meta-" + result;
        }
        if (shift) {
            result = "Shift-" + result;
        }
        return result;
    }
    function normalize(map) {
        var copy = Object.create(null);
        for (var prop in map) {
            copy[normalizeKeyName(prop)] = map[prop];
        }
        return copy;
    }
    function modifiers(name, event, shift) {
        if (event.altKey) {
            name = "Alt-" + name;
        }
        if (event.ctrlKey) {
            name = "Ctrl-" + name;
        }
        if (event.metaKey) {
            name = "Meta-" + name;
        }
        if (shift !== false && event.shiftKey) {
            name = "Shift-" + name;
        }
        return name;
    }
    // :: (Object) → Plugin
    // Create a keymap plugin for the given set of bindings.
    //
    // Bindings should map key names to [command](#commands)-style
    // functions, which will be called with `(EditorState, dispatch,
    // EditorView)` arguments, and should return true when they've handled
    // the key. Note that the view argument isn't part of the command
    // protocol, but can be used as an escape hatch if a binding needs to
    // directly interact with the UI.
    //
    // Key names may be strings like `"Shift-Ctrl-Enter"`—a key
    // identifier prefixed with zero or more modifiers. Key identifiers
    // are based on the strings that can appear in
    // [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).
    // Use lowercase letters to refer to letter keys (or uppercase letters
    // if you want shift to be held). You may use `"Space"` as an alias
    // for the `" "` name.
    //
    // Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or
    // `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or
    // `Meta-`) are recognized. For characters that are created by holding
    // shift, the `Shift-` prefix is implied, and should not be added
    // explicitly.
    //
    // You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on
    // other platforms.
    //
    // You can add multiple keymap plugins to an editor. The order in
    // which they appear determines their precedence (the ones early in
    // the array get to dispatch first).
    function keymap(bindings) {
        return new prosemirrorState.Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
    }
    // :: (Object) → (view: EditorView, event: dom.Event) → bool
    // Given a set of bindings (using the same format as
    // [`keymap`](#keymap.keymap), return a [keydown
    // handler](#view.EditorProps.handleKeyDown) handles them.
    function keydownHandler(bindings) {
        var map = normalize(bindings);
        return function (view, event) {
            var name = keyName(event), isChar = name.length == 1 && name != " ", baseName;
            var direct = map[modifiers(name, event, !isChar)];
            if (direct && direct(view.state, view.dispatch, view)) {
                return true;
            }
            if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&
                (baseName = keyName.base[event.keyCode]) && baseName != name) {
                var fromCode = map[modifiers(baseName, event, true)];
                if (fromCode && fromCode(view.state, view.dispatch, view)) {
                    return true;
                }
            }
            return false;
        };
    }
    exports.keymap = keymap;
    exports.keydownHandler = keydownHandler;
    //# sourceMappingURL=keymap.js.map
});
define("prosemirror-model", function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function _interopDefault(ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
    var OrderedMap = _interopDefault(require('orderedmap'));
    function findDiffStart(a, b, pos) {
        for (var i = 0;; i++) {
            if (i == a.childCount || i == b.childCount) {
                return a.childCount == b.childCount ? null : pos;
            }
            var childA = a.child(i), childB = b.child(i);
            if (childA == childB) {
                pos += childA.nodeSize;
                continue;
            }
            if (!childA.sameMarkup(childB)) {
                return pos;
            }
            if (childA.isText && childA.text != childB.text) {
                for (var j = 0; childA.text[j] == childB.text[j]; j++) {
                    pos++;
                }
                return pos;
            }
            if (childA.content.size || childB.content.size) {
                var inner = findDiffStart(childA.content, childB.content, pos + 1);
                if (inner != null) {
                    return inner;
                }
            }
            pos += childA.nodeSize;
        }
    }
    function findDiffEnd(a, b, posA, posB) {
        for (var iA = a.childCount, iB = b.childCount;;) {
            if (iA == 0 || iB == 0) {
                return iA == iB ? null : { a: posA, b: posB };
            }
            var childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;
            if (childA == childB) {
                posA -= size;
                posB -= size;
                continue;
            }
            if (!childA.sameMarkup(childB)) {
                return { a: posA, b: posB };
            }
            if (childA.isText && childA.text != childB.text) {
                var same = 0, minSize = Math.min(childA.text.length, childB.text.length);
                while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
                    same++;
                    posA--;
                    posB--;
                }
                return { a: posA, b: posB };
            }
            if (childA.content.size || childB.content.size) {
                var inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
                if (inner) {
                    return inner;
                }
            }
            posA -= size;
            posB -= size;
        }
    }
    // ::- A fragment represents a node's collection of child nodes.
    //
    // Like nodes, fragments are persistent data structures, and you
    // should not mutate them or their content. Rather, you create new
    // instances whenever needed. The API tries to make this easy.
    var Fragment = function Fragment(content, size) {
        var this$1 = this;
        this.content = content;
        // :: number
        // The size of the fragment, which is the total of the size of its
        // content nodes.
        this.size = size || 0;
        if (size == null) {
            for (var i = 0; i < content.length; i++) {
                this$1.size += content[i].nodeSize;
            }
        }
    };
    var prototypeAccessors$1 = { firstChild: {}, lastChild: {}, childCount: {} };
    // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)
    // Invoke a callback for all descendant nodes between the given two
    // positions (relative to start of this fragment). Doesn't descend
    // into a node when the callback returns `false`.
    Fragment.prototype.nodesBetween = function nodesBetween(from, to, f, nodeStart, parent) {
        var this$1 = this;
        if (nodeStart === void 0)
            nodeStart = 0;
        for (var i = 0, pos = 0; pos < to; i++) {
            var child = this$1.content[i], end = pos + child.nodeSize;
            if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {
                var start = pos + 1;
                child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);
            }
            pos = end;
        }
    };
    // :: ((node: Node, pos: number, parent: Node) → ?bool)
    // Call the given callback for every descendant node. The callback
    // may return `false` to prevent traversal of a given node's children.
    Fragment.prototype.descendants = function descendants(f) {
        this.nodesBetween(0, this.size, f);
    };
    // : (number, number, ?string, ?string) → string
    Fragment.prototype.textBetween = function textBetween(from, to, blockSeparator, leafText) {
        var text = "", separated = true;
        this.nodesBetween(from, to, function (node, pos) {
            if (node.isText) {
                text += node.text.slice(Math.max(from, pos) - pos, to - pos);
                separated = !blockSeparator;
            }
            else if (node.isLeaf && leafText) {
                text += leafText;
                separated = !blockSeparator;
            }
            else if (!separated && node.isBlock) {
                text += blockSeparator;
                separated = true;
            }
        }, 0);
        return text;
    };
    // :: (Fragment) → Fragment
    // Create a new fragment containing the combined content of this
    // fragment and the other.
    Fragment.prototype.append = function append(other) {
        if (!other.size) {
            return this;
        }
        if (!this.size) {
            return other;
        }
        var last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;
        if (last.isText && last.sameMarkup(first)) {
            content[content.length - 1] = last.withText(last.text + first.text);
            i = 1;
        }
        for (; i < other.content.length; i++) {
            content.push(other.content[i]);
        }
        return new Fragment(content, this.size + other.size);
    };
    // :: (number, ?number) → Fragment
    // Cut out the sub-fragment between the two given positions.
    Fragment.prototype.cut = function cut(from, to) {
        var this$1 = this;
        if (to == null) {
            to = this.size;
        }
        if (from == 0 && to == this.size) {
            return this;
        }
        var result = [], size = 0;
        if (to > from) {
            for (var i = 0, pos = 0; pos < to; i++) {
                var child = this$1.content[i], end = pos + child.nodeSize;
                if (end > from) {
                    if (pos < from || end > to) {
                        if (child.isText) {
                            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));
                        }
                        else {
                            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));
                        }
                    }
                    result.push(child);
                    size += child.nodeSize;
                }
                pos = end;
            }
        }
        return new Fragment(result, size);
    };
    Fragment.prototype.cutByIndex = function cutByIndex(from, to) {
        if (from == to) {
            return Fragment.empty;
        }
        if (from == 0 && to == this.content.length) {
            return this;
        }
        return new Fragment(this.content.slice(from, to));
    };
    // :: (number, Node) → Fragment
    // Create a new fragment in which the node at the given index is
    // replaced by the given node.
    Fragment.prototype.replaceChild = function replaceChild(index, node) {
        var current = this.content[index];
        if (current == node) {
            return this;
        }
        var copy = this.content.slice();
        var size = this.size + node.nodeSize - current.nodeSize;
        copy[index] = node;
        return new Fragment(copy, size);
    };
    // : (Node) → Fragment
    // Create a new fragment by prepending the given node to this
    // fragment.
    Fragment.prototype.addToStart = function addToStart(node) {
        return new Fragment([node].concat(this.content), this.size + node.nodeSize);
    };
    // : (Node) → Fragment
    // Create a new fragment by appending the given node to this
    // fragment.
    Fragment.prototype.addToEnd = function addToEnd(node) {
        return new Fragment(this.content.concat(node), this.size + node.nodeSize);
    };
    // :: (Fragment) → bool
    // Compare this fragment to another one.
    Fragment.prototype.eq = function eq(other) {
        var this$1 = this;
        if (this.content.length != other.content.length) {
            return false;
        }
        for (var i = 0; i < this.content.length; i++) {
            if (!this$1.content[i].eq(other.content[i])) {
                return false;
            }
        }
        return true;
    };
    // :: ?Node
    // The first child of the fragment, or `null` if it is empty.
    prototypeAccessors$1.firstChild.get = function () { return this.content.length ? this.content[0] : null; };
    // :: ?Node
    // The last child of the fragment, or `null` if it is empty.
    prototypeAccessors$1.lastChild.get = function () { return this.content.length ? this.content[this.content.length - 1] : null; };
    // :: number
    // The number of child nodes in this fragment.
    prototypeAccessors$1.childCount.get = function () { return this.content.length; };
    // :: (number) → Node
    // Get the child node at the given index. Raise an error when the
    // index is out of range.
    Fragment.prototype.child = function child(index) {
        var found = this.content[index];
        if (!found) {
            throw new RangeError("Index " + index + " out of range for " + this);
        }
        return found;
    };
    // :: (number) → ?Node
    // Get the child node at the given index, if it exists.
    Fragment.prototype.maybeChild = function maybeChild(index) {
        return this.content[index];
    };
    // :: ((node: Node, offset: number, index: number))
    // Call `f` for every child node, passing the node, its offset
    // into this parent node, and its index.
    Fragment.prototype.forEach = function forEach(f) {
        var this$1 = this;
        for (var i = 0, p = 0; i < this.content.length; i++) {
            var child = this$1.content[i];
            f(child, p, i);
            p += child.nodeSize;
        }
    };
    // :: (Fragment) → ?number
    // Find the first position at which this fragment and another
    // fragment differ, or `null` if they are the same.
    Fragment.prototype.findDiffStart = function findDiffStart$1(other, pos) {
        if (pos === void 0)
            pos = 0;
        return findDiffStart(this, other, pos);
    };
    // :: (Fragment) → ?{a: number, b: number}
    // Find the first position, searching from the end, at which this
    // fragment and the given fragment differ, or `null` if they are the
    // same. Since this position will not be the same in both nodes, an
    // object with two separate positions is returned.
    Fragment.prototype.findDiffEnd = function findDiffEnd$1(other, pos, otherPos) {
        if (pos === void 0)
            pos = this.size;
        if (otherPos === void 0)
            otherPos = other.size;
        return findDiffEnd(this, other, pos, otherPos);
    };
    // : (number, ?number) → {index: number, offset: number}
    // Find the index and inner offset corresponding to a given relative
    // position in this fragment. The result object will be reused
    // (overwritten) the next time the function is called. (Not public.)
    Fragment.prototype.findIndex = function findIndex(pos, round) {
        var this$1 = this;
        if (round === void 0)
            round = -1;
        if (pos == 0) {
            return retIndex(0, pos);
        }
        if (pos == this.size) {
            return retIndex(this.content.length, pos);
        }
        if (pos > this.size || pos < 0) {
            throw new RangeError(("Position " + pos + " outside of fragment (" + (this) + ")"));
        }
        for (var i = 0, curPos = 0;; i++) {
            var cur = this$1.child(i), end = curPos + cur.nodeSize;
            if (end >= pos) {
                if (end == pos || round > 0) {
                    return retIndex(i + 1, end);
                }
                return retIndex(i, curPos);
            }
            curPos = end;
        }
    };
    // :: () → string
    // Return a debugging string that describes this fragment.
    Fragment.prototype.toString = function toString() { return "<" + this.toStringInner() + ">"; };
    Fragment.prototype.toStringInner = function toStringInner() { return this.content.join(", "); };
    // :: () → ?Object
    // Create a JSON-serializeable representation of this fragment.
    Fragment.prototype.toJSON = function toJSON() {
        return this.content.length ? this.content.map(function (n) { return n.toJSON(); }) : null;
    };
    // :: (Schema, ?Object) → Fragment
    // Deserialize a fragment from its JSON representation.
    Fragment.fromJSON = function fromJSON(schema, value) {
        if (!value) {
            return Fragment.empty;
        }
        if (!Array.isArray(value)) {
            throw new RangeError("Invalid input for Fragment.fromJSON");
        }
        return new Fragment(value.map(schema.nodeFromJSON));
    };
    // :: ([Node]) → Fragment
    // Build a fragment from an array of nodes. Ensures that adjacent
    // text nodes with the same marks are joined together.
    Fragment.fromArray = function fromArray(array) {
        if (!array.length) {
            return Fragment.empty;
        }
        var joined, size = 0;
        for (var i = 0; i < array.length; i++) {
            var node = array[i];
            size += node.nodeSize;
            if (i && node.isText && array[i - 1].sameMarkup(node)) {
                if (!joined) {
                    joined = array.slice(0, i);
                }
                joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text);
            }
            else if (joined) {
                joined.push(node);
            }
        }
        return new Fragment(joined || array, size);
    };
    // :: (?union<Fragment, Node, [Node]>) → Fragment
    // Create a fragment from something that can be interpreted as a set
    // of nodes. For `null`, it returns the empty fragment. For a
    // fragment, the fragment itself. For a node or array of nodes, a
    // fragment containing those nodes.
    Fragment.from = function from(nodes) {
        if (!nodes) {
            return Fragment.empty;
        }
        if (nodes instanceof Fragment) {
            return nodes;
        }
        if (Array.isArray(nodes)) {
            return this.fromArray(nodes);
        }
        return new Fragment([nodes], nodes.nodeSize);
    };
    Object.defineProperties(Fragment.prototype, prototypeAccessors$1);
    var found = { index: 0, offset: 0 };
    function retIndex(index, offset) {
        found.index = index;
        found.offset = offset;
        return found;
    }
    // :: Fragment
    // An empty fragment. Intended to be reused whenever a node doesn't
    // contain anything (rather than allocating a new empty fragment for
    // each leaf node).
    Fragment.empty = new Fragment([], 0);
    function compareDeep(a, b) {
        if (a === b) {
            return true;
        }
        if (!(a && typeof a == "object") ||
            !(b && typeof b == "object")) {
            return false;
        }
        var array = Array.isArray(a);
        if (Array.isArray(b) != array) {
            return false;
        }
        if (array) {
            if (a.length != b.length) {
                return false;
            }
            for (var i = 0; i < a.length; i++) {
                if (!compareDeep(a[i], b[i])) {
                    return false;
                }
            }
        }
        else {
            for (var p in a) {
                if (!(p in b) || !compareDeep(a[p], b[p])) {
                    return false;
                }
            }
            for (var p$1 in b) {
                if (!(p$1 in a)) {
                    return false;
                }
            }
        }
        return true;
    }
    // ::- A mark is a piece of information that can be attached to a node,
    // such as it being emphasized, in code font, or a link. It has a type
    // and optionally a set of attributes that provide further information
    // (such as the target of the link). Marks are created through a
    // `Schema`, which controls which types exist and which
    // attributes they have.
    var Mark = function Mark(type, attrs) {
        // :: MarkType
        // The type of this mark.
        this.type = type;
        // :: Object
        // The attributes associated with this mark.
        this.attrs = attrs;
    };
    // :: ([Mark]) → [Mark]
    // Given a set of marks, create a new set which contains this one as
    // well, in the right position. If this mark is already in the set,
    // the set itself is returned. If any marks that are set to be
    // [exclusive](#model.MarkSpec.excludes) with this mark are present,
    // those are replaced by this one.
    Mark.prototype.addToSet = function addToSet(set) {
        var this$1 = this;
        var copy, placed = false;
        for (var i = 0; i < set.length; i++) {
            var other = set[i];
            if (this$1.eq(other)) {
                return set;
            }
            if (this$1.type.excludes(other.type)) {
                if (!copy) {
                    copy = set.slice(0, i);
                }
            }
            else if (other.type.excludes(this$1.type)) {
                return set;
            }
            else {
                if (!placed && other.type.rank > this$1.type.rank) {
                    if (!copy) {
                        copy = set.slice(0, i);
                    }
                    copy.push(this$1);
                    placed = true;
                }
                if (copy) {
                    copy.push(other);
                }
            }
        }
        if (!copy) {
            copy = set.slice();
        }
        if (!placed) {
            copy.push(this);
        }
        return copy;
    };
    // :: ([Mark]) → [Mark]
    // Remove this mark from the given set, returning a new set. If this
    // mark is not in the set, the set itself is returned.
    Mark.prototype.removeFromSet = function removeFromSet(set) {
        var this$1 = this;
        for (var i = 0; i < set.length; i++) {
            if (this$1.eq(set[i])) {
                return set.slice(0, i).concat(set.slice(i + 1));
            }
        }
        return set;
    };
    // :: ([Mark]) → bool
    // Test whether this mark is in the given set of marks.
    Mark.prototype.isInSet = function isInSet(set) {
        var this$1 = this;
        for (var i = 0; i < set.length; i++) {
            if (this$1.eq(set[i])) {
                return true;
            }
        }
        return false;
    };
    // :: (Mark) → bool
    // Test whether this mark has the same type and attributes as
    // another mark.
    Mark.prototype.eq = function eq(other) {
        return this == other ||
            (this.type == other.type && compareDeep(this.attrs, other.attrs));
    };
    // :: () → Object
    // Convert this mark to a JSON-serializeable representation.
    Mark.prototype.toJSON = function toJSON() {
        var this$1 = this;
        var obj = { type: this.type.name };
        for (var _ in this$1.attrs) {
            obj.attrs = this$1.attrs;
            break;
        }
        return obj;
    };
    // :: (Schema, Object) → Mark
    Mark.fromJSON = function fromJSON(schema, json) {
        if (!json) {
            throw new RangeError("Invalid input for Mark.fromJSON");
        }
        var type = schema.marks[json.type];
        if (!type) {
            throw new RangeError(("There is no mark type " + (json.type) + " in this schema"));
        }
        return type.create(json.attrs);
    };
    // :: ([Mark], [Mark]) → bool
    // Test whether two sets of marks are identical.
    Mark.sameSet = function sameSet(a, b) {
        if (a == b) {
            return true;
        }
        if (a.length != b.length) {
            return false;
        }
        for (var i = 0; i < a.length; i++) {
            if (!a[i].eq(b[i])) {
                return false;
            }
        }
        return true;
    };
    // :: (?union<Mark, [Mark]>) → [Mark]
    // Create a properly sorted mark set from null, a single mark, or an
    // unsorted array of marks.
    Mark.setFrom = function setFrom(marks) {
        if (!marks || marks.length == 0) {
            return Mark.none;
        }
        if (marks instanceof Mark) {
            return [marks];
        }
        var copy = marks.slice();
        copy.sort(function (a, b) { return a.type.rank - b.type.rank; });
        return copy;
    };
    // :: [Mark] The empty set of marks.
    Mark.none = [];
    // ReplaceError:: class extends Error
    // Error type raised by [`Node.replace`](#model.Node.replace) when
    // given an invalid replacement.
    function ReplaceError(message) {
        var err = Error.call(this, message);
        err.__proto__ = ReplaceError.prototype;
        return err;
    }
    ReplaceError.prototype = Object.create(Error.prototype);
    ReplaceError.prototype.constructor = ReplaceError;
    ReplaceError.prototype.name = "ReplaceError";
    // ::- A slice represents a piece cut out of a larger document. It
    // stores not only a fragment, but also the depth up to which nodes on
    // both side are ‘open’ (cut through).
    var Slice = function Slice(content, openStart, openEnd) {
        // :: Fragment The slice's content.
        this.content = content;
        // :: number The open depth at the start.
        this.openStart = openStart;
        // :: number The open depth at the end.
        this.openEnd = openEnd;
    };
    var prototypeAccessors$2 = { size: {} };
    // :: number
    // The size this slice would add when inserted into a document.
    prototypeAccessors$2.size.get = function () {
        return this.content.size - this.openStart - this.openEnd;
    };
    Slice.prototype.insertAt = function insertAt(pos, fragment) {
        var content = insertInto(this.content, pos + this.openStart, fragment, null);
        return content && new Slice(content, this.openStart, this.openEnd);
    };
    Slice.prototype.removeBetween = function removeBetween(from, to) {
        return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);
    };
    // :: (Slice) → bool
    // Tests whether this slice is equal to another slice.
    Slice.prototype.eq = function eq(other) {
        return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
    };
    Slice.prototype.toString = function toString() {
        return this.content + "(" + this.openStart + "," + this.openEnd + ")";
    };
    // :: () → ?Object
    // Convert a slice to a JSON-serializable representation.
    Slice.prototype.toJSON = function toJSON() {
        if (!this.content.size) {
            return null;
        }
        var json = { content: this.content.toJSON() };
        if (this.openStart > 0) {
            json.openStart = this.openStart;
        }
        if (this.openEnd > 0) {
            json.openEnd = this.openEnd;
        }
        return json;
    };
    // :: (Schema, ?Object) → Slice
    // Deserialize a slice from its JSON representation.
    Slice.fromJSON = function fromJSON(schema, json) {
        if (!json) {
            return Slice.empty;
        }
        var openStart = json.openStart || 0, openEnd = json.openEnd || 0;
        if (typeof openStart != "number" || typeof openEnd != "number") {
            throw new RangeError("Invalid input for Slice.fromJSON");
        }
        return new Slice(Fragment.fromJSON(schema, json.content), json.openStart || 0, json.openEnd || 0);
    };
    // :: (Fragment, ?bool) → Slice
    // Create a slice from a fragment by taking the maximum possible
    // open value on both side of the fragment.
    Slice.maxOpen = function maxOpen(fragment, openIsolating) {
        if (openIsolating === void 0)
            openIsolating = true;
        var openStart = 0, openEnd = 0;
        for (var n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) {
            openStart++;
        }
        for (var n$1 = fragment.lastChild; n$1 && !n$1.isLeaf && (openIsolating || !n$1.type.spec.isolating); n$1 = n$1.lastChild) {
            openEnd++;
        }
        return new Slice(fragment, openStart, openEnd);
    };
    Object.defineProperties(Slice.prototype, prototypeAccessors$2);
    function removeRange(content, from, to) {
        var ref = content.findIndex(from);
        var index = ref.index;
        var offset = ref.offset;
        var child = content.maybeChild(index);
        var ref$1 = content.findIndex(to);
        var indexTo = ref$1.index;
        var offsetTo = ref$1.offset;
        if (offset == from || child.isText) {
            if (offsetTo != to && !content.child(indexTo).isText) {
                throw new RangeError("Removing non-flat range");
            }
            return content.cut(0, from).append(content.cut(to));
        }
        if (index != indexTo) {
            throw new RangeError("Removing non-flat range");
        }
        return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));
    }
    function insertInto(content, dist, insert, parent) {
        var ref = content.findIndex(dist);
        var index = ref.index;
        var offset = ref.offset;
        var child = content.maybeChild(index);
        if (offset == dist || child.isText) {
            if (parent && !parent.canReplace(index, index, insert)) {
                return null;
            }
            return content.cut(0, dist).append(insert).append(content.cut(dist));
        }
        var inner = insertInto(child.content, dist - offset - 1, insert);
        return inner && content.replaceChild(index, child.copy(inner));
    }
    // :: Slice
    // The empty slice.
    Slice.empty = new Slice(Fragment.empty, 0, 0);
    function replace($from, $to, slice) {
        if (slice.openStart > $from.depth) {
            throw new ReplaceError("Inserted content deeper than insertion position");
        }
        if ($from.depth - slice.openStart != $to.depth - slice.openEnd) {
            throw new ReplaceError("Inconsistent open depths");
        }
        return replaceOuter($from, $to, slice, 0);
    }
    function replaceOuter($from, $to, slice, depth) {
        var index = $from.index(depth), node = $from.node(depth);
        if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {
            var inner = replaceOuter($from, $to, slice, depth + 1);
            return node.copy(node.content.replaceChild(index, inner));
        }
        else if (!slice.content.size) {
            return close(node, replaceTwoWay($from, $to, depth));
        }
        else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case
            var parent = $from.parent, content = parent.content;
            return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));
        }
        else {
            var ref = prepareSliceForReplace(slice, $from);
            var start = ref.start;
            var end = ref.end;
            return close(node, replaceThreeWay($from, start, end, $to, depth));
        }
    }
    function checkJoin(main, sub) {
        if (!sub.type.compatibleContent(main.type)) {
            throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
        }
    }
    function joinable($before, $after, depth) {
        var node = $before.node(depth);
        checkJoin(node, $after.node(depth));
        return node;
    }
    function addNode(child, target) {
        var last = target.length - 1;
        if (last >= 0 && child.isText && child.sameMarkup(target[last])) {
            target[last] = child.withText(target[last].text + child.text);
        }
        else {
            target.push(child);
        }
    }
    function addRange($start, $end, depth, target) {
        var node = ($end || $start).node(depth);
        var startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;
        if ($start) {
            startIndex = $start.index(depth);
            if ($start.depth > depth) {
                startIndex++;
            }
            else if ($start.textOffset) {
                addNode($start.nodeAfter, target);
                startIndex++;
            }
        }
        for (var i = startIndex; i < endIndex; i++) {
            addNode(node.child(i), target);
        }
        if ($end && $end.depth == depth && $end.textOffset) {
            addNode($end.nodeBefore, target);
        }
    }
    function close(node, content) {
        if (!node.type.validContent(content)) {
            throw new ReplaceError("Invalid content for node " + node.type.name);
        }
        return node.copy(content);
    }
    function replaceThreeWay($from, $start, $end, $to, depth) {
        var openStart = $from.depth > depth && joinable($from, $start, depth + 1);
        var openEnd = $to.depth > depth && joinable($end, $to, depth + 1);
        var content = [];
        addRange(null, $from, depth, content);
        if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
            checkJoin(openStart, openEnd);
            addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
        }
        else {
            if (openStart) {
                addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);
            }
            addRange($start, $end, depth, content);
            if (openEnd) {
                addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
            }
        }
        addRange($to, null, depth, content);
        return new Fragment(content);
    }
    function replaceTwoWay($from, $to, depth) {
        var content = [];
        addRange(null, $from, depth, content);
        if ($from.depth > depth) {
            var type = joinable($from, $to, depth + 1);
            addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
        }
        addRange($to, null, depth, content);
        return new Fragment(content);
    }
    function prepareSliceForReplace(slice, $along) {
        var extra = $along.depth - slice.openStart, parent = $along.node(extra);
        var node = parent.copy(slice.content);
        for (var i = extra - 1; i >= 0; i--) {
            node = $along.node(i).copy(Fragment.from(node));
        }
        return { start: node.resolveNoCache(slice.openStart + extra),
            end: node.resolveNoCache(node.content.size - slice.openEnd - extra) };
    }
    // ::- You can [_resolve_](#model.Node.resolve) a position to get more
    // information about it. Objects of this class represent such a
    // resolved position, providing various pieces of context information,
    // and some helper methods.
    //
    // Throughout this interface, methods that take an optional `depth`
    // parameter will interpret undefined as `this.depth` and negative
    // numbers as `this.depth + value`.
    var ResolvedPos = function ResolvedPos(pos, path, parentOffset) {
        // :: number The position that was resolved.
        this.pos = pos;
        this.path = path;
        // :: number
        // The number of levels the parent node is from the root. If this
        // position points directly into the root node, it is 0. If it
        // points into a top-level paragraph, 1, and so on.
        this.depth = path.length / 3 - 1;
        // :: number The offset this position has into its parent node.
        this.parentOffset = parentOffset;
    };
    var prototypeAccessors$3 = { parent: {}, doc: {}, textOffset: {}, nodeAfter: {}, nodeBefore: {} };
    ResolvedPos.prototype.resolveDepth = function resolveDepth(val) {
        if (val == null) {
            return this.depth;
        }
        if (val < 0) {
            return this.depth + val;
        }
        return val;
    };
    // :: Node
    // The parent node that the position points into. Note that even if
    // a position points into a text node, that node is not considered
    // the parent—text nodes are ‘flat’ in this model, and have no content.
    prototypeAccessors$3.parent.get = function () { return this.node(this.depth); };
    // :: Node
    // The root node in which the position was resolved.
    prototypeAccessors$3.doc.get = function () { return this.node(0); };
    // :: (?number) → Node
    // The ancestor node at the given level. `p.node(p.depth)` is the
    // same as `p.parent`.
    ResolvedPos.prototype.node = function node(depth) { return this.path[this.resolveDepth(depth) * 3]; };
    // :: (?number) → number
    // The index into the ancestor at the given level. If this points at
    // the 3rd node in the 2nd paragraph on the top level, for example,
    // `p.index(0)` is 2 and `p.index(1)` is 3.
    ResolvedPos.prototype.index = function index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1]; };
    // :: (?number) → number
    // The index pointing after this position into the ancestor at the
    // given level.
    ResolvedPos.prototype.indexAfter = function indexAfter(depth) {
        depth = this.resolveDepth(depth);
        return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
    };
    // :: (?number) → number
    // The (absolute) position at the start of the node at the given
    // level.
    ResolvedPos.prototype.start = function start(depth) {
        depth = this.resolveDepth(depth);
        return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
    };
    // :: (?number) → number
    // The (absolute) position at the end of the node at the given
    // level.
    ResolvedPos.prototype.end = function end(depth) {
        depth = this.resolveDepth(depth);
        return this.start(depth) + this.node(depth).content.size;
    };
    // :: (?number) → number
    // The (absolute) position directly before the wrapping node at the
    // given level, or, when `level` is `this.depth + 1`, the original
    // position.
    ResolvedPos.prototype.before = function before(depth) {
        depth = this.resolveDepth(depth);
        if (!depth) {
            throw new RangeError("There is no position before the top-level node");
        }
        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
    };
    // :: (?number) → number
    // The (absolute) position directly after the wrapping node at the
    // given level, or the original position when `level` is `this.depth + 1`.
    ResolvedPos.prototype.after = function after(depth) {
        depth = this.resolveDepth(depth);
        if (!depth) {
            throw new RangeError("There is no position after the top-level node");
        }
        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
    };
    // :: number
    // When this position points into a text node, this returns the
    // distance between the position and the start of the text node.
    // Will be zero for positions that point between nodes.
    prototypeAccessors$3.textOffset.get = function () { return this.pos - this.path[this.path.length - 1]; };
    // :: ?Node
    // Get the node directly after the position, if any. If the position
    // points into a text node, only the part of that node after the
    // position is returned.
    prototypeAccessors$3.nodeAfter.get = function () {
        var parent = this.parent, index = this.index(this.depth);
        if (index == parent.childCount) {
            return null;
        }
        var dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);
        return dOff ? parent.child(index).cut(dOff) : child;
    };
    // :: ?Node
    // Get the node directly before the position, if any. If the
    // position points into a text node, only the part of that node
    // before the position is returned.
    prototypeAccessors$3.nodeBefore.get = function () {
        var index = this.index(this.depth);
        var dOff = this.pos - this.path[this.path.length - 1];
        if (dOff) {
            return this.parent.child(index).cut(0, dOff);
        }
        return index == 0 ? null : this.parent.child(index - 1);
    };
    // :: () → [Mark]
    // Get the marks at this position, factoring in the surrounding
    // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the
    // position is at the start of a non-empty node, the marks of the
    // node after it (if any) are returned.
    ResolvedPos.prototype.marks = function marks() {
        var parent = this.parent, index = this.index();
        // In an empty parent, return the empty array
        if (parent.content.size == 0) {
            return Mark.none;
        }
        // When inside a text node, just return the text node's marks
        if (this.textOffset) {
            return parent.child(index).marks;
        }
        var main = parent.maybeChild(index - 1), other = parent.maybeChild(index);
        // If the `after` flag is true of there is no node before, make
        // the node after this position the main reference.
        if (!main) {
            var tmp = main;
            main = other;
            other = tmp;
        }
        // Use all marks in the main node, except those that have
        // `inclusive` set to false and are not present in the other node.
        var marks = main.marks;
        for (var i = 0; i < marks.length; i++) {
            if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks))) {
                marks = marks[i--].removeFromSet(marks);
            }
        }
        return marks;
    };
    // :: (ResolvedPos) → ?[Mark]
    // Get the marks after the current position, if any, except those
    // that are non-inclusive and not present at position `$end`. This
    // is mostly useful for getting the set of marks to preserve after a
    // deletion. Will return `null` if this position is at the end of
    // its parent node or its parent node isn't a textblock (in which
    // case no marks should be preserved).
    ResolvedPos.prototype.marksAcross = function marksAcross($end) {
        var after = this.parent.maybeChild(this.index());
        if (!after || !after.isInline) {
            return null;
        }
        var marks = after.marks, next = $end.parent.maybeChild($end.index());
        for (var i = 0; i < marks.length; i++) {
            if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks))) {
                marks = marks[i--].removeFromSet(marks);
            }
        }
        return marks;
    };
    // :: (number) → number
    // The depth up to which this position and the given (non-resolved)
    // position share the same parent nodes.
    ResolvedPos.prototype.sharedDepth = function sharedDepth(pos) {
        var this$1 = this;
        for (var depth = this.depth; depth > 0; depth--) {
            if (this$1.start(depth) <= pos && this$1.end(depth) >= pos) {
                return depth;
            }
        }
        return 0;
    };
    // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange
    // Returns a range based on the place where this position and the
    // given position diverge around block content. If both point into
    // the same textblock, for example, a range around that textblock
    // will be returned. If they point into different blocks, the range
    // around those blocks in their shared ancestor is returned. You can
    // pass in an optional predicate that will be called with a parent
    // node to see if a range into that parent is acceptable.
    ResolvedPos.prototype.blockRange = function blockRange(other, pred) {
        var this$1 = this;
        if (other === void 0)
            other = this;
        if (other.pos < this.pos) {
            return other.blockRange(this);
        }
        for (var d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--) {
            if (other.pos <= this$1.end(d) && (!pred || pred(this$1.node(d)))) {
                return new NodeRange(this$1, other, d);
            }
        }
    };
    // :: (ResolvedPos) → bool
    // Query whether the given position shares the same parent node.
    ResolvedPos.prototype.sameParent = function sameParent(other) {
        return this.pos - this.parentOffset == other.pos - other.parentOffset;
    };
    // :: (ResolvedPos) → ResolvedPos
    // Return the greater of this and the given position.
    ResolvedPos.prototype.max = function max(other) {
        return other.pos > this.pos ? other : this;
    };
    // :: (ResolvedPos) → ResolvedPos
    // Return the smaller of this and the given position.
    ResolvedPos.prototype.min = function min(other) {
        return other.pos < this.pos ? other : this;
    };
    ResolvedPos.prototype.toString = function toString() {
        var this$1 = this;
        var str = "";
        for (var i = 1; i <= this.depth; i++) {
            str += (str ? "/" : "") + this$1.node(i).type.name + "_" + this$1.index(i - 1);
        }
        return str + ":" + this.parentOffset;
    };
    ResolvedPos.resolve = function resolve(doc, pos) {
        if (!(pos >= 0 && pos <= doc.content.size)) {
            throw new RangeError("Position " + pos + " out of range");
        }
        var path = [];
        var start = 0, parentOffset = pos;
        for (var node = doc;;) {
            var ref = node.content.findIndex(parentOffset);
            var index = ref.index;
            var offset = ref.offset;
            var rem = parentOffset - offset;
            path.push(node, index, start + offset);
            if (!rem) {
                break;
            }
            node = node.child(index);
            if (node.isText) {
                break;
            }
            parentOffset = rem - 1;
            start += offset + 1;
        }
        return new ResolvedPos(pos, path, parentOffset);
    };
    ResolvedPos.resolveCached = function resolveCached(doc, pos) {
        for (var i = 0; i < resolveCache.length; i++) {
            var cached = resolveCache[i];
            if (cached.pos == pos && cached.doc == doc) {
                return cached;
            }
        }
        var result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);
        resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
        return result;
    };
    Object.defineProperties(ResolvedPos.prototype, prototypeAccessors$3);
    var resolveCache = [];
    var resolveCachePos = 0;
    var resolveCacheSize = 12;
    // ::- Represents a flat range of content, i.e. one that starts and
    // ends in the same node.
    var NodeRange = function NodeRange($from, $to, depth) {
        // :: ResolvedPos A resolved position along the start of the
        // content. May have a `depth` greater than this object's `depth`
        // property, since these are the positions that were used to
        // compute the range, not re-resolved positions directly at its
        // boundaries.
        this.$from = $from;
        // :: ResolvedPos A position along the end of the content. See
        // caveat for [`$from`](#model.NodeRange.$from).
        this.$to = $to;
        // :: number The depth of the node that this range points into.
        this.depth = depth;
    };
    var prototypeAccessors$1$1 = { start: {}, end: {}, parent: {}, startIndex: {}, endIndex: {} };
    // :: number The position at the start of the range.
    prototypeAccessors$1$1.start.get = function () { return this.$from.before(this.depth + 1); };
    // :: number The position at the end of the range.
    prototypeAccessors$1$1.end.get = function () { return this.$to.after(this.depth + 1); };
    // :: Node The parent node that the range points into.
    prototypeAccessors$1$1.parent.get = function () { return this.$from.node(this.depth); };
    // :: number The start index of the range in the parent node.
    prototypeAccessors$1$1.startIndex.get = function () { return this.$from.index(this.depth); };
    // :: number The end index of the range in the parent node.
    prototypeAccessors$1$1.endIndex.get = function () { return this.$to.indexAfter(this.depth); };
    Object.defineProperties(NodeRange.prototype, prototypeAccessors$1$1);
    var emptyAttrs = Object.create(null);
    // ::- This class represents a node in the tree that makes up a
    // ProseMirror document. So a document is an instance of `Node`, with
    // children that are also instances of `Node`.
    //
    // Nodes are persistent data structures. Instead of changing them, you
    // create new ones with the content you want. Old ones keep pointing
    // at the old document shape. This is made cheaper by sharing
    // structure between the old and new data as much as possible, which a
    // tree shape like this (without back pointers) makes easy.
    //
    // **Do not** directly mutate the properties of a `Node` object. See
    // [the guide](/docs/guide/#doc) for more information.
    var Node = function Node(type, attrs, content, marks) {
        // :: NodeType
        // The type of node that this is.
        this.type = type;
        // :: Object
        // An object mapping attribute names to values. The kind of
        // attributes allowed and required are
        // [determined](#model.NodeSpec.attrs) by the node type.
        this.attrs = attrs;
        // :: Fragment
        // A container holding the node's children.
        this.content = content || Fragment.empty;
        // :: [Mark]
        // The marks (things like whether it is emphasized or part of a
        // link) applied to this node.
        this.marks = marks || Mark.none;
    };
    var prototypeAccessors = { nodeSize: {}, childCount: {}, textContent: {}, firstChild: {}, lastChild: {}, isBlock: {}, isTextblock: {}, inlineContent: {}, isInline: {}, isText: {}, isLeaf: {}, isAtom: {} };
    // text:: ?string
    // For text nodes, this contains the node's text content.
    // :: number
    // The size of this node, as defined by the integer-based [indexing
    // scheme](/docs/guide/#doc.indexing). For text nodes, this is the
    // amount of characters. For other leaf nodes, it is one. For
    // non-leaf nodes, it is the size of the content plus two (the start
    // and end token).
    prototypeAccessors.nodeSize.get = function () { return this.isLeaf ? 1 : 2 + this.content.size; };
    // :: number
    // The number of children that the node has.
    prototypeAccessors.childCount.get = function () { return this.content.childCount; };
    // :: (number) → Node
    // Get the child node at the given index. Raises an error when the
    // index is out of range.
    Node.prototype.child = function child(index) { return this.content.child(index); };
    // :: (number) → ?Node
    // Get the child node at the given index, if it exists.
    Node.prototype.maybeChild = function maybeChild(index) { return this.content.maybeChild(index); };
    // :: ((node: Node, offset: number, index: number))
    // Call `f` for every child node, passing the node, its offset
    // into this parent node, and its index.
    Node.prototype.forEach = function forEach(f) { this.content.forEach(f); };
    // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)
    // Invoke a callback for all descendant nodes recursively between
    // the given two positions that are relative to start of this node's
    // content. The callback is invoked with the node, its
    // parent-relative position, its parent node, and its child index.
    // When the callback returns false for a given node, that node's
    // children will not be recursed over. The last parameter can be
    // used to specify a starting position to count from.
    Node.prototype.nodesBetween = function nodesBetween(from, to, f, startPos) {
        if (startPos === void 0)
            startPos = 0;
        this.content.nodesBetween(from, to, f, startPos, this);
    };
    // :: ((node: Node, pos: number, parent: Node) → ?bool)
    // Call the given callback for every descendant node. Doesn't
    // descend into a node when the callback returns `false`.
    Node.prototype.descendants = function descendants(f) {
        this.nodesBetween(0, this.content.size, f);
    };
    // :: string
    // Concatenates all the text nodes found in this fragment and its
    // children.
    prototypeAccessors.textContent.get = function () { return this.textBetween(0, this.content.size, ""); };
    // :: (number, number, ?string, ?string) → string
    // Get all text between positions `from` and `to`. When
    // `blockSeparator` is given, it will be inserted whenever a new
    // block node is started. When `leafText` is given, it'll be
    // inserted for every non-text leaf node encountered.
    Node.prototype.textBetween = function textBetween(from, to, blockSeparator, leafText) {
        return this.content.textBetween(from, to, blockSeparator, leafText);
    };
    // :: ?Node
    // Returns this node's first child, or `null` if there are no
    // children.
    prototypeAccessors.firstChild.get = function () { return this.content.firstChild; };
    // :: ?Node
    // Returns this node's last child, or `null` if there are no
    // children.
    prototypeAccessors.lastChild.get = function () { return this.content.lastChild; };
    // :: (Node) → bool
    // Test whether two nodes represent the same piece of document.
    Node.prototype.eq = function eq(other) {
        return this == other || (this.sameMarkup(other) && this.content.eq(other.content));
    };
    // :: (Node) → bool
    // Compare the markup (type, attributes, and marks) of this node to
    // those of another. Returns `true` if both have the same markup.
    Node.prototype.sameMarkup = function sameMarkup(other) {
        return this.hasMarkup(other.type, other.attrs, other.marks);
    };
    // :: (NodeType, ?Object, ?[Mark]) → bool
    // Check whether this node's markup correspond to the given type,
    // attributes, and marks.
    Node.prototype.hasMarkup = function hasMarkup(type, attrs, marks) {
        return this.type == type &&
            compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&
            Mark.sameSet(this.marks, marks || Mark.none);
    };
    // :: (?Fragment) → Node
    // Create a new node with the same markup as this node, containing
    // the given content (or empty, if no content is given).
    Node.prototype.copy = function copy(content) {
        if (content === void 0)
            content = null;
        if (content == this.content) {
            return this;
        }
        return new this.constructor(this.type, this.attrs, content, this.marks);
    };
    // :: ([Mark]) → Node
    // Create a copy of this node, with the given set of marks instead
    // of the node's own marks.
    Node.prototype.mark = function mark(marks) {
        return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks);
    };
    // :: (number, ?number) → Node
    // Create a copy of this node with only the content between the
    // given positions. If `to` is not given, it defaults to the end of
    // the node.
    Node.prototype.cut = function cut(from, to) {
        if (from == 0 && to == this.content.size) {
            return this;
        }
        return this.copy(this.content.cut(from, to));
    };
    // :: (number, ?number) → Slice
    // Cut out the part of the document between the given positions, and
    // return it as a `Slice` object.
    Node.prototype.slice = function slice(from, to, includeParents) {
        if (to === void 0)
            to = this.content.size;
        if (includeParents === void 0)
            includeParents = false;
        if (from == to) {
            return Slice.empty;
        }
        var $from = this.resolve(from), $to = this.resolve(to);
        var depth = includeParents ? 0 : $from.sharedDepth(to);
        var start = $from.start(depth), node = $from.node(depth);
        var content = node.content.cut($from.pos - start, $to.pos - start);
        return new Slice(content, $from.depth - depth, $to.depth - depth);
    };
    // :: (number, number, Slice) → Node
    // Replace the part of the document between the given positions with
    // the given slice. The slice must 'fit', meaning its open sides
    // must be able to connect to the surrounding content, and its
    // content nodes must be valid children for the node they are placed
    // into. If any of this is violated, an error of type
    // [`ReplaceError`](#model.ReplaceError) is thrown.
    Node.prototype.replace = function replace$1(from, to, slice) {
        return replace(this.resolve(from), this.resolve(to), slice);
    };
    // :: (number) → ?Node
    // Find the node directly after the given position.
    Node.prototype.nodeAt = function nodeAt(pos) {
        for (var node = this;;) {
            var ref = node.content.findIndex(pos);
            var index = ref.index;
            var offset = ref.offset;
            node = node.maybeChild(index);
            if (!node) {
                return null;
            }
            if (offset == pos || node.isText) {
                return node;
            }
            pos -= offset + 1;
        }
    };
    // :: (number) → {node: ?Node, index: number, offset: number}
    // Find the (direct) child node after the given offset, if any,
    // and return it along with its index and offset relative to this
    // node.
    Node.prototype.childAfter = function childAfter(pos) {
        var ref = this.content.findIndex(pos);
        var index = ref.index;
        var offset = ref.offset;
        return { node: this.content.maybeChild(index), index: index, offset: offset };
    };
    // :: (number) → {node: ?Node, index: number, offset: number}
    // Find the (direct) child node before the given offset, if any,
    // and return it along with its index and offset relative to this
    // node.
    Node.prototype.childBefore = function childBefore(pos) {
        if (pos == 0) {
            return { node: null, index: 0, offset: 0 };
        }
        var ref = this.content.findIndex(pos);
        var index = ref.index;
        var offset = ref.offset;
        if (offset < pos) {
            return { node: this.content.child(index), index: index, offset: offset };
        }
        var node = this.content.child(index - 1);
        return { node: node, index: index - 1, offset: offset - node.nodeSize };
    };
    // :: (number) → ResolvedPos
    // Resolve the given position in the document, returning an
    // [object](#model.ResolvedPos) with information about its context.
    Node.prototype.resolve = function resolve(pos) { return ResolvedPos.resolveCached(this, pos); };
    Node.prototype.resolveNoCache = function resolveNoCache(pos) { return ResolvedPos.resolve(this, pos); };
    // :: (number, number, MarkType) → bool
    // Test whether a mark of the given type occurs in this document
    // between the two given positions.
    Node.prototype.rangeHasMark = function rangeHasMark(from, to, type) {
        var found = false;
        if (to > from) {
            this.nodesBetween(from, to, function (node) {
                if (type.isInSet(node.marks)) {
                    found = true;
                }
                return !found;
            });
        }
        return found;
    };
    // :: bool
    // True when this is a block (non-inline node)
    prototypeAccessors.isBlock.get = function () { return this.type.isBlock; };
    // :: bool
    // True when this is a textblock node, a block node with inline
    // content.
    prototypeAccessors.isTextblock.get = function () { return this.type.isTextblock; };
    // :: bool
    // True when this node allows inline content.
    prototypeAccessors.inlineContent.get = function () { return this.type.inlineContent; };
    // :: bool
    // True when this is an inline node (a text node or a node that can
    // appear among text).
    prototypeAccessors.isInline.get = function () { return this.type.isInline; };
    // :: bool
    // True when this is a text node.
    prototypeAccessors.isText.get = function () { return this.type.isText; };
    // :: bool
    // True when this is a leaf node.
    prototypeAccessors.isLeaf.get = function () { return this.type.isLeaf; };
    // :: bool
    // True when this is an atom, i.e. when it does not have directly
    // editable content. This is usually the same as `isLeaf`, but can
    // be configured with the [`atom` property](#model.NodeSpec.atom) on
    // a node's spec (typically used when the node is displayed as an
    // uneditable [node view](#view.NodeView)).
    prototypeAccessors.isAtom.get = function () { return this.type.isAtom; };
    // :: () → string
    // Return a string representation of this node for debugging
    // purposes.
    Node.prototype.toString = function toString() {
        if (this.type.spec.toDebugString) {
            return this.type.spec.toDebugString(this);
        }
        var name = this.type.name;
        if (this.content.size) {
            name += "(" + this.content.toStringInner() + ")";
        }
        return wrapMarks(this.marks, name);
    };
    // :: (number) → ContentMatch
    // Get the content match in this node at the given index.
    Node.prototype.contentMatchAt = function contentMatchAt(index) {
        var match = this.type.contentMatch.matchFragment(this.content, 0, index);
        if (!match) {
            throw new Error("Called contentMatchAt on a node with invalid content");
        }
        return match;
    };
    // :: (number, number, ?Fragment, ?number, ?number) → bool
    // Test whether replacing the range between `from` and `to` (by
    // child index) with the given replacement fragment (which defaults
    // to the empty fragment) would leave the node's content valid. You
    // can optionally pass `start` and `end` indices into the
    // replacement fragment.
    Node.prototype.canReplace = function canReplace(from, to, replacement, start, end) {
        var this$1 = this;
        if (replacement === void 0)
            replacement = Fragment.empty;
        if (start === void 0)
            start = 0;
        if (end === void 0)
            end = replacement.childCount;
        var one = this.contentMatchAt(from).matchFragment(replacement, start, end);
        var two = one && one.matchFragment(this.content, to);
        if (!two || !two.validEnd) {
            return false;
        }
        for (var i = start; i < end; i++) {
            if (!this$1.type.allowsMarks(replacement.child(i).marks)) {
                return false;
            }
        }
        return true;
    };
    // :: (number, number, NodeType, ?[Mark]) → bool
    // Test whether replacing the range `from` to `to` (by index) with a
    // node of the given type would leave the node's content valid.
    Node.prototype.canReplaceWith = function canReplaceWith(from, to, type, marks) {
        if (marks && !this.type.allowsMarks(marks)) {
            return false;
        }
        var start = this.contentMatchAt(from).matchType(type);
        var end = start && start.matchFragment(this.content, to);
        return end ? end.validEnd : false;
    };
    // :: (Node) → bool
    // Test whether the given node's content could be appended to this
    // node. If that node is empty, this will only return true if there
    // is at least one node type that can appear in both nodes (to avoid
    // merging completely incompatible nodes).
    Node.prototype.canAppend = function canAppend(other) {
        if (other.content.size) {
            return this.canReplace(this.childCount, this.childCount, other.content);
        }
        else {
            return this.type.compatibleContent(other.type);
        }
    };
    // Unused. Left for backwards compatibility.
    Node.prototype.defaultContentType = function defaultContentType(at) {
        return this.contentMatchAt(at).defaultType;
    };
    // :: ()
    // Check whether this node and its descendants conform to the
    // schema, and raise error when they do not.
    Node.prototype.check = function check() {
        if (!this.type.validContent(this.content)) {
            throw new RangeError(("Invalid content for node " + (this.type.name) + ": " + (this.content.toString().slice(0, 50))));
        }
        this.content.forEach(function (node) { return node.check(); });
    };
    // :: () → Object
    // Return a JSON-serializeable representation of this node.
    Node.prototype.toJSON = function toJSON() {
        var this$1 = this;
        var obj = { type: this.type.name };
        for (var _ in this$1.attrs) {
            obj.attrs = this$1.attrs;
            break;
        }
        if (this.content.size) {
            obj.content = this.content.toJSON();
        }
        if (this.marks.length) {
            obj.marks = this.marks.map(function (n) { return n.toJSON(); });
        }
        return obj;
    };
    // :: (Schema, Object) → Node
    // Deserialize a node from its JSON representation.
    Node.fromJSON = function fromJSON(schema, json) {
        if (!json) {
            throw new RangeError("Invalid input for Node.fromJSON");
        }
        var marks = null;
        if (json.marks) {
            if (!Array.isArray(json.marks)) {
                throw new RangeError("Invalid mark data for Node.fromJSON");
            }
            marks = json.marks.map(schema.markFromJSON);
        }
        if (json.type == "text") {
            if (typeof json.text != "string") {
                throw new RangeError("Invalid text node in JSON");
            }
            return schema.text(json.text, marks);
        }
        var content = Fragment.fromJSON(schema, json.content);
        return schema.nodeType(json.type).create(json.attrs, content, marks);
    };
    Object.defineProperties(Node.prototype, prototypeAccessors);
    var TextNode = (function (Node) {
        function TextNode(type, attrs, content, marks) {
            Node.call(this, type, attrs, null, marks);
            if (!content) {
                throw new RangeError("Empty text nodes are not allowed");
            }
            this.text = content;
        }
        if (Node)
            TextNode.__proto__ = Node;
        TextNode.prototype = Object.create(Node && Node.prototype);
        TextNode.prototype.constructor = TextNode;
        var prototypeAccessors$1 = { textContent: {}, nodeSize: {} };
        TextNode.prototype.toString = function toString() {
            if (this.type.spec.toDebugString) {
                return this.type.spec.toDebugString(this);
            }
            return wrapMarks(this.marks, JSON.stringify(this.text));
        };
        prototypeAccessors$1.textContent.get = function () { return this.text; };
        TextNode.prototype.textBetween = function textBetween(from, to) { return this.text.slice(from, to); };
        prototypeAccessors$1.nodeSize.get = function () { return this.text.length; };
        TextNode.prototype.mark = function mark(marks) {
            return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);
        };
        TextNode.prototype.withText = function withText(text) {
            if (text == this.text) {
                return this;
            }
            return new TextNode(this.type, this.attrs, text, this.marks);
        };
        TextNode.prototype.cut = function cut(from, to) {
            if (from === void 0)
                from = 0;
            if (to === void 0)
                to = this.text.length;
            if (from == 0 && to == this.text.length) {
                return this;
            }
            return this.withText(this.text.slice(from, to));
        };
        TextNode.prototype.eq = function eq(other) {
            return this.sameMarkup(other) && this.text == other.text;
        };
        TextNode.prototype.toJSON = function toJSON() {
            var base = Node.prototype.toJSON.call(this);
            base.text = this.text;
            return base;
        };
        Object.defineProperties(TextNode.prototype, prototypeAccessors$1);
        return TextNode;
    }(Node));
    function wrapMarks(marks, str) {
        for (var i = marks.length - 1; i >= 0; i--) {
            str = marks[i].type.name + "(" + str + ")";
        }
        return str;
    }
    // ::- Instances of this class represent a match state of a node
    // type's [content expression](#model.NodeSpec.content), and can be
    // used to find out whether further content matches here, and whether
    // a given position is a valid end of the node.
    var ContentMatch = function ContentMatch(validEnd) {
        // :: bool
        // True when this match state represents a valid end of the node.
        this.validEnd = validEnd;
        this.next = [];
        this.wrapCache = [];
    };
    var prototypeAccessors$5 = { inlineContent: {}, defaultType: {}, edgeCount: {} };
    ContentMatch.parse = function parse(string, nodeTypes) {
        var stream = new TokenStream(string, nodeTypes);
        if (stream.next == null) {
            return ContentMatch.empty;
        }
        var expr = parseExpr(stream);
        if (stream.next) {
            stream.err("Unexpected trailing text");
        }
        var match = dfa(nfa(expr));
        checkForDeadEnds(match, stream);
        return match;
    };
    // :: (NodeType) → ?ContentMatch
    // Match a node type, returning a match after that node if
    // successful.
    ContentMatch.prototype.matchType = function matchType(type) {
        var this$1 = this;
        for (var i = 0; i < this.next.length; i += 2) {
            if (this$1.next[i] == type) {
                return this$1.next[i + 1];
            }
        }
        return null;
    };
    // :: (Fragment, ?number, ?number) → ?ContentMatch
    // Try to match a fragment. Returns the resulting match when
    // successful.
    ContentMatch.prototype.matchFragment = function matchFragment(frag, start, end) {
        if (start === void 0)
            start = 0;
        if (end === void 0)
            end = frag.childCount;
        var cur = this;
        for (var i = start; cur && i < end; i++) {
            cur = cur.matchType(frag.child(i).type);
        }
        return cur;
    };
    prototypeAccessors$5.inlineContent.get = function () {
        var first = this.next[0];
        return first ? first.isInline : false;
    };
    // :: ?NodeType
    // Get the first matching node type at this match position that can
    // be generated.
    prototypeAccessors$5.defaultType.get = function () {
        var this$1 = this;
        for (var i = 0; i < this.next.length; i += 2) {
            var type = this$1.next[i];
            if (!(type.isText || type.hasRequiredAttrs())) {
                return type;
            }
        }
    };
    ContentMatch.prototype.compatible = function compatible(other) {
        var this$1 = this;
        for (var i = 0; i < this.next.length; i += 2) {
            for (var j = 0; j < other.next.length; j += 2) {
                if (this$1.next[i] == other.next[j]) {
                    return true;
                }
            }
        }
        return false;
    };
    // :: (Fragment, bool, ?number) → ?Fragment
    // Try to match the given fragment, and if that fails, see if it can
    // be made to match by inserting nodes in front of it. When
    // successful, return a fragment of inserted nodes (which may be
    // empty if nothing had to be inserted). When `toEnd` is true, only
    // return a fragment if the resulting match goes to the end of the
    // content expression.
    ContentMatch.prototype.fillBefore = function fillBefore(after, toEnd, startIndex) {
        if (toEnd === void 0)
            toEnd = false;
        if (startIndex === void 0)
            startIndex = 0;
        var seen = [this];
        function search(match, types) {
            var finished = match.matchFragment(after, startIndex);
            if (finished && (!toEnd || finished.validEnd)) {
                return Fragment.from(types.map(function (tp) { return tp.createAndFill(); }));
            }
            for (var i = 0; i < match.next.length; i += 2) {
                var type = match.next[i], next = match.next[i + 1];
                if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
                    seen.push(next);
                    var found = search(next, types.concat(type));
                    if (found) {
                        return found;
                    }
                }
            }
        }
        return search(this, []);
    };
    // :: (NodeType) → ?[NodeType]
    // Find a set of wrapping node types that would allow a node of the
    // given type to appear at this position. The result may be empty
    // (when it fits directly) and will be null when no such wrapping
    // exists.
    ContentMatch.prototype.findWrapping = function findWrapping(target) {
        var this$1 = this;
        for (var i = 0; i < this.wrapCache.length; i += 2) {
            if (this$1.wrapCache[i] == target) {
                return this$1.wrapCache[i + 1];
            }
        }
        var computed = this.computeWrapping(target);
        this.wrapCache.push(target, computed);
        return computed;
    };
    ContentMatch.prototype.computeWrapping = function computeWrapping(target) {
        var seen = Object.create(null), active = [{ match: this, type: null, via: null }];
        while (active.length) {
            var current = active.shift(), match = current.match;
            if (match.matchType(target)) {
                var result = [];
                for (var obj = current; obj.type; obj = obj.via) {
                    result.push(obj.type);
                }
                return result.reverse();
            }
            for (var i = 0; i < match.next.length; i += 2) {
                var type = match.next[i];
                if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {
                    active.push({ match: type.contentMatch, type: type, via: current });
                    seen[type.name] = true;
                }
            }
        }
    };
    // :: number
    // The number of outgoing edges this node has in the finite
    // automaton that describes the content expression.
    prototypeAccessors$5.edgeCount.get = function () {
        return this.next.length >> 1;
    };
    // :: (number) → {type: NodeType, next: ContentMatch}
    // Get the _n_th outgoing edge from this node in the finite
    // automaton that describes the content expression.
    ContentMatch.prototype.edge = function edge(n) {
        var i = n << 1;
        if (i > this.next.length) {
            throw new RangeError(("There's no " + n + "th edge in this content match"));
        }
        return { type: this.next[i], next: this.next[i + 1] };
    };
    ContentMatch.prototype.toString = function toString() {
        var seen = [];
        function scan(m) {
            seen.push(m);
            for (var i = 1; i < m.next.length; i += 2) {
                if (seen.indexOf(m.next[i]) == -1) {
                    scan(m.next[i]);
                }
            }
        }
        scan(this);
        return seen.map(function (m, i) {
            var out = i + (m.validEnd ? "*" : " ") + " ";
            for (var i$1 = 0; i$1 < m.next.length; i$1 += 2) {
                out += (i$1 ? ", " : "") + m.next[i$1].name + "->" + seen.indexOf(m.next[i$1 + 1]);
            }
            return out;
        }).join("\n");
    };
    Object.defineProperties(ContentMatch.prototype, prototypeAccessors$5);
    ContentMatch.empty = new ContentMatch(true);
    var TokenStream = function TokenStream(string, nodeTypes) {
        this.string = string;
        this.nodeTypes = nodeTypes;
        this.inline = null;
        this.pos = 0;
        this.tokens = string.split(/\s*(?=\b|\W|$)/);
        if (this.tokens[this.tokens.length - 1] == "") {
            this.tokens.pop();
        }
        if (this.tokens[0] == "") {
            this.tokens.unshift();
        }
    };
    var prototypeAccessors$1$3 = { next: {} };
    prototypeAccessors$1$3.next.get = function () { return this.tokens[this.pos]; };
    TokenStream.prototype.eat = function eat(tok) { return this.next == tok && (this.pos++ || true); };
    TokenStream.prototype.err = function err(str) { throw new SyntaxError(str + " (in content expression '" + this.string + "')"); };
    Object.defineProperties(TokenStream.prototype, prototypeAccessors$1$3);
    function parseExpr(stream) {
        var exprs = [];
        do {
            exprs.push(parseExprSeq(stream));
        } while (stream.eat("|"));
        return exprs.length == 1 ? exprs[0] : { type: "choice", exprs: exprs };
    }
    function parseExprSeq(stream) {
        var exprs = [];
        do {
            exprs.push(parseExprSubscript(stream));
        } while (stream.next && stream.next != ")" && stream.next != "|");
        return exprs.length == 1 ? exprs[0] : { type: "seq", exprs: exprs };
    }
    function parseExprSubscript(stream) {
        var expr = parseExprAtom(stream);
        for (;;) {
            if (stream.eat("+")) {
                expr = { type: "plus", expr: expr };
            }
            else if (stream.eat("*")) {
                expr = { type: "star", expr: expr };
            }
            else if (stream.eat("?")) {
                expr = { type: "opt", expr: expr };
            }
            else if (stream.eat("{")) {
                expr = parseExprRange(stream, expr);
            }
            else {
                break;
            }
        }
        return expr;
    }
    function parseNum(stream) {
        if (/\D/.test(stream.next)) {
            stream.err("Expected number, got '" + stream.next + "'");
        }
        var result = Number(stream.next);
        stream.pos++;
        return result;
    }
    function parseExprRange(stream, expr) {
        var min = parseNum(stream), max = min;
        if (stream.eat(",")) {
            if (stream.next != "}") {
                max = parseNum(stream);
            }
            else {
                max = -1;
            }
        }
        if (!stream.eat("}")) {
            stream.err("Unclosed braced range");
        }
        return { type: "range", min: min, max: max, expr: expr };
    }
    function resolveName(stream, name) {
        var types = stream.nodeTypes, type = types[name];
        if (type) {
            return [type];
        }
        var result = [];
        for (var typeName in types) {
            var type$1 = types[typeName];
            if (type$1.groups.indexOf(name) > -1) {
                result.push(type$1);
            }
        }
        if (result.length == 0) {
            stream.err("No node type or group '" + name + "' found");
        }
        return result;
    }
    function parseExprAtom(stream) {
        if (stream.eat("(")) {
            var expr = parseExpr(stream);
            if (!stream.eat(")")) {
                stream.err("Missing closing paren");
            }
            return expr;
        }
        else if (!/\W/.test(stream.next)) {
            var exprs = resolveName(stream, stream.next).map(function (type) {
                if (stream.inline == null) {
                    stream.inline = type.isInline;
                }
                else if (stream.inline != type.isInline) {
                    stream.err("Mixing inline and block content");
                }
                return { type: "name", value: type };
            });
            stream.pos++;
            return exprs.length == 1 ? exprs[0] : { type: "choice", exprs: exprs };
        }
        else {
            stream.err("Unexpected token '" + stream.next + "'");
        }
    }
    // The code below helps compile a regular-expression-like language
    // into a deterministic finite automaton. For a good introduction to
    // these concepts, see https://swtch.com/~rsc/regexp/regexp1.html
    // : (Object) → [[{term: ?any, to: number}]]
    // Construct an NFA from an expression as returned by the parser. The
    // NFA is represented as an array of states, which are themselves
    // arrays of edges, which are `{term, to}` objects. The first state is
    // the entry state and the last node is the success state.
    //
    // Note that unlike typical NFAs, the edge ordering in this one is
    // significant, in that it is used to contruct filler content when
    // necessary.
    function nfa(expr) {
        var nfa = [[]];
        connect(compile(expr, 0), node());
        return nfa;
        function node() { return nfa.push([]) - 1; }
        function edge(from, to, term) {
            var edge = { term: term, to: to };
            nfa[from].push(edge);
            return edge;
        }
        function connect(edges, to) { edges.forEach(function (edge) { return edge.to = to; }); }
        function compile(expr, from) {
            if (expr.type == "choice") {
                return expr.exprs.reduce(function (out, expr) { return out.concat(compile(expr, from)); }, []);
            }
            else if (expr.type == "seq") {
                for (var i = 0;; i++) {
                    var next = compile(expr.exprs[i], from);
                    if (i == expr.exprs.length - 1) {
                        return next;
                    }
                    connect(next, from = node());
                }
            }
            else if (expr.type == "star") {
                var loop = node();
                edge(from, loop);
                connect(compile(expr.expr, loop), loop);
                return [edge(loop)];
            }
            else if (expr.type == "plus") {
                var loop$1 = node();
                connect(compile(expr.expr, from), loop$1);
                connect(compile(expr.expr, loop$1), loop$1);
                return [edge(loop$1)];
            }
            else if (expr.type == "opt") {
                return [edge(from)].concat(compile(expr.expr, from));
            }
            else if (expr.type == "range") {
                var cur = from;
                for (var i$1 = 0; i$1 < expr.min; i$1++) {
                    var next$1 = node();
                    connect(compile(expr.expr, cur), next$1);
                    cur = next$1;
                }
                if (expr.max == -1) {
                    connect(compile(expr.expr, cur), cur);
                }
                else {
                    for (var i$2 = expr.min; i$2 < expr.max; i$2++) {
                        var next$2 = node();
                        edge(cur, next$2);
                        connect(compile(expr.expr, cur), next$2);
                        cur = next$2;
                    }
                }
                return [edge(cur)];
            }
            else if (expr.type == "name") {
                return [edge(from, null, expr.value)];
            }
        }
    }
    function cmp(a, b) { return a - b; }
    // Get the set of nodes reachable by null edges from `node`. Omit
    // nodes with only a single null-out-edge, since they may lead to
    // needless duplicated nodes.
    function nullFrom(nfa, node) {
        var result = [];
        scan(node);
        return result.sort(cmp);
        function scan(node) {
            var edges = nfa[node];
            if (edges.length == 1 && !edges[0].term) {
                return scan(edges[0].to);
            }
            result.push(node);
            for (var i = 0; i < edges.length; i++) {
                var ref = edges[i];
                var term = ref.term;
                var to = ref.to;
                if (!term && result.indexOf(to) == -1) {
                    scan(to);
                }
            }
        }
    }
    // : ([[{term: ?any, to: number}]]) → ContentMatch
    // Compiles an NFA as produced by `nfa` into a DFA, modeled as a set
    // of state objects (`ContentMatch` instances) with transitions
    // between them.
    function dfa(nfa) {
        var labeled = Object.create(null);
        return explore(nullFrom(nfa, 0));
        function explore(states) {
            var out = [];
            states.forEach(function (node) {
                nfa[node].forEach(function (ref) {
                    var term = ref.term;
                    var to = ref.to;
                    if (!term) {
                        return;
                    }
                    var known = out.indexOf(term), set = known > -1 && out[known + 1];
                    nullFrom(nfa, to).forEach(function (node) {
                        if (!set) {
                            out.push(term, set = []);
                        }
                        if (set.indexOf(node) == -1) {
                            set.push(node);
                        }
                    });
                });
            });
            var state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);
            for (var i = 0; i < out.length; i += 2) {
                var states$1 = out[i + 1].sort(cmp);
                state.next.push(out[i], labeled[states$1.join(",")] || explore(states$1));
            }
            return state;
        }
    }
    function checkForDeadEnds(match, stream) {
        for (var i = 0, work = [match]; i < work.length; i++) {
            var state = work[i], dead = !state.validEnd, nodes = [];
            for (var j = 0; j < state.next.length; j += 2) {
                var node = state.next[j], next = state.next[j + 1];
                nodes.push(node.name);
                if (dead && !(node.isText || node.hasRequiredAttrs())) {
                    dead = false;
                }
                if (work.indexOf(next) == -1) {
                    work.push(next);
                }
            }
            if (dead) {
                stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position");
            }
        }
    }
    // For node types where all attrs have a default value (or which don't
    // have any attributes), build up a single reusable default attribute
    // object, and use it for all nodes that don't specify specific
    // attributes.
    function defaultAttrs(attrs) {
        var defaults = Object.create(null);
        for (var attrName in attrs) {
            var attr = attrs[attrName];
            if (!attr.hasDefault) {
                return null;
            }
            defaults[attrName] = attr.default;
        }
        return defaults;
    }
    function computeAttrs(attrs, value) {
        var built = Object.create(null);
        for (var name in attrs) {
            var given = value && value[name];
            if (given === undefined) {
                var attr = attrs[name];
                if (attr.hasDefault) {
                    given = attr.default;
                }
                else {
                    throw new RangeError("No value supplied for attribute " + name);
                }
            }
            built[name] = given;
        }
        return built;
    }
    function initAttrs(attrs) {
        var result = Object.create(null);
        if (attrs) {
            for (var name in attrs) {
                result[name] = new Attribute(attrs[name]);
            }
        }
        return result;
    }
    // ::- Node types are objects allocated once per `Schema` and used to
    // [tag](#model.Node.type) `Node` instances. They contain information
    // about the node type, such as its name and what kind of node it
    // represents.
    var NodeType = function NodeType(name, schema, spec) {
        // :: string
        // The name the node type has in this schema.
        this.name = name;
        // :: Schema
        // A link back to the `Schema` the node type belongs to.
        this.schema = schema;
        // :: NodeSpec
        // The spec that this type is based on
        this.spec = spec;
        this.groups = spec.group ? spec.group.split(" ") : [];
        this.attrs = initAttrs(spec.attrs);
        this.defaultAttrs = defaultAttrs(this.attrs);
        // :: ContentMatch
        // The starting match of the node type's content expression.
        this.contentMatch = null;
        // : ?[MarkType]
        // The set of marks allowed in this node. `null` means all marks
        // are allowed.
        this.markSet = null;
        // :: bool
        // True if this node type has inline content.
        this.inlineContent = null;
        // :: bool
        // True if this is a block type
        this.isBlock = !(spec.inline || name == "text");
        // :: bool
        // True if this is the text node type.
        this.isText = name == "text";
    };
    var prototypeAccessors$4 = { isInline: {}, isTextblock: {}, isLeaf: {}, isAtom: {} };
    // :: bool
    // True if this is an inline type.
    prototypeAccessors$4.isInline.get = function () { return !this.isBlock; };
    // :: bool
    // True if this is a textblock type, a block that contains inline
    // content.
    prototypeAccessors$4.isTextblock.get = function () { return this.isBlock && this.inlineContent; };
    // :: bool
    // True for node types that allow no content.
    prototypeAccessors$4.isLeaf.get = function () { return this.contentMatch == ContentMatch.empty; };
    // :: bool
    // True when this node is an atom, i.e. when it does not have
    // directly editable content.
    prototypeAccessors$4.isAtom.get = function () { return this.isLeaf || this.spec.atom; };
    NodeType.prototype.hasRequiredAttrs = function hasRequiredAttrs(ignore) {
        var this$1 = this;
        for (var n in this$1.attrs) {
            if (this$1.attrs[n].isRequired && (!ignore || !(n in ignore))) {
                return true;
            }
        }
        return false;
    };
    NodeType.prototype.compatibleContent = function compatibleContent(other) {
        return this == other || this.contentMatch.compatible(other.contentMatch);
    };
    NodeType.prototype.computeAttrs = function computeAttrs$1(attrs) {
        if (!attrs && this.defaultAttrs) {
            return this.defaultAttrs;
        }
        else {
            return computeAttrs(this.attrs, attrs);
        }
    };
    // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node
    // Create a `Node` of this type. The given attributes are
    // checked and defaulted (you can pass `null` to use the type's
    // defaults entirely, if no required attributes exist). `content`
    // may be a `Fragment`, a node, an array of nodes, or
    // `null`. Similarly `marks` may be `null` to default to the empty
    // set of marks.
    NodeType.prototype.create = function create(attrs, content, marks) {
        if (this.isText) {
            throw new Error("NodeType.create can't construct text nodes");
        }
        return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));
    };
    // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node
    // Like [`create`](#model.NodeType.create), but check the given content
    // against the node type's content restrictions, and throw an error
    // if it doesn't match.
    NodeType.prototype.createChecked = function createChecked(attrs, content, marks) {
        content = Fragment.from(content);
        if (!this.validContent(content)) {
            throw new RangeError("Invalid content for node " + this.name);
        }
        return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));
    };
    // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node
    // Like [`create`](#model.NodeType.create), but see if it is necessary to
    // add nodes to the start or end of the given fragment to make it
    // fit the node. If no fitting wrapping can be found, return null.
    // Note that, due to the fact that required nodes can always be
    // created, this will always succeed if you pass null or
    // `Fragment.empty` as content.
    NodeType.prototype.createAndFill = function createAndFill(attrs, content, marks) {
        attrs = this.computeAttrs(attrs);
        content = Fragment.from(content);
        if (content.size) {
            var before = this.contentMatch.fillBefore(content);
            if (!before) {
                return null;
            }
            content = before.append(content);
        }
        var after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true);
        if (!after) {
            return null;
        }
        return new Node(this, attrs, content.append(after), Mark.setFrom(marks));
    };
    // :: (Fragment) → bool
    // Returns true if the given fragment is valid content for this node
    // type with the given attributes.
    NodeType.prototype.validContent = function validContent(content) {
        var this$1 = this;
        var result = this.contentMatch.matchFragment(content);
        if (!result || !result.validEnd) {
            return false;
        }
        for (var i = 0; i < content.childCount; i++) {
            if (!this$1.allowsMarks(content.child(i).marks)) {
                return false;
            }
        }
        return true;
    };
    // :: (MarkType) → bool
    // Check whether the given mark type is allowed in this node.
    NodeType.prototype.allowsMarkType = function allowsMarkType(markType) {
        return this.markSet == null || this.markSet.indexOf(markType) > -1;
    };
    // :: ([Mark]) → bool
    // Test whether the given set of marks are allowed in this node.
    NodeType.prototype.allowsMarks = function allowsMarks(marks) {
        var this$1 = this;
        if (this.markSet == null) {
            return true;
        }
        for (var i = 0; i < marks.length; i++) {
            if (!this$1.allowsMarkType(marks[i].type)) {
                return false;
            }
        }
        return true;
    };
    // :: ([Mark]) → [Mark]
    // Removes the marks that are not allowed in this node from the given set.
    NodeType.prototype.allowedMarks = function allowedMarks(marks) {
        var this$1 = this;
        if (this.markSet == null) {
            return marks;
        }
        var copy;
        for (var i = 0; i < marks.length; i++) {
            if (!this$1.allowsMarkType(marks[i].type)) {
                if (!copy) {
                    copy = marks.slice(0, i);
                }
            }
            else if (copy) {
                copy.push(marks[i]);
            }
        }
        return !copy ? marks : copy.length ? copy : Mark.empty;
    };
    NodeType.compile = function compile(nodes, schema) {
        var result = Object.create(null);
        nodes.forEach(function (name, spec) { return result[name] = new NodeType(name, schema, spec); });
        var topType = schema.spec.topNode || "doc";
        if (!result[topType]) {
            throw new RangeError("Schema is missing its top node type ('" + topType + "')");
        }
        if (!result.text) {
            throw new RangeError("Every schema needs a 'text' type");
        }
        for (var _ in result.text.attrs) {
            throw new RangeError("The text node type should not have attributes");
        }
        return result;
    };
    Object.defineProperties(NodeType.prototype, prototypeAccessors$4);
    // Attribute descriptors
    var Attribute = function Attribute(options) {
        this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
        this.default = options.default;
    };
    var prototypeAccessors$1$2 = { isRequired: {} };
    prototypeAccessors$1$2.isRequired.get = function () {
        return !this.hasDefault;
    };
    Object.defineProperties(Attribute.prototype, prototypeAccessors$1$2);
    // Marks
    // ::- Like nodes, marks (which are associated with nodes to signify
    // things like emphasis or being part of a link) are
    // [tagged](#model.Mark.type) with type objects, which are
    // instantiated once per `Schema`.
    var MarkType = function MarkType(name, rank, schema, spec) {
        // :: string
        // The name of the mark type.
        this.name = name;
        // :: Schema
        // The schema that this mark type instance is part of.
        this.schema = schema;
        // :: MarkSpec
        // The spec on which the type is based.
        this.spec = spec;
        this.attrs = initAttrs(spec.attrs);
        this.rank = rank;
        this.excluded = null;
        var defaults = defaultAttrs(this.attrs);
        this.instance = defaults && new Mark(this, defaults);
    };
    // :: (?Object) → Mark
    // Create a mark of this type. `attrs` may be `null` or an object
    // containing only some of the mark's attributes. The others, if
    // they have defaults, will be added.
    MarkType.prototype.create = function create(attrs) {
        if (!attrs && this.instance) {
            return this.instance;
        }
        return new Mark(this, computeAttrs(this.attrs, attrs));
    };
    MarkType.compile = function compile(marks, schema) {
        var result = Object.create(null), rank = 0;
        marks.forEach(function (name, spec) { return result[name] = new MarkType(name, rank++, schema, spec); });
        return result;
    };
    // :: ([Mark]) → [Mark]
    // When there is a mark of this type in the given set, a new set
    // without it is returned. Otherwise, the input set is returned.
    MarkType.prototype.removeFromSet = function removeFromSet(set) {
        var this$1 = this;
        for (var i = 0; i < set.length; i++) {
            if (set[i].type == this$1) {
                return set.slice(0, i).concat(set.slice(i + 1));
            }
        }
        return set;
    };
    // :: ([Mark]) → ?Mark
    // Tests whether there is a mark of this type in the given set.
    MarkType.prototype.isInSet = function isInSet(set) {
        var this$1 = this;
        for (var i = 0; i < set.length; i++) {
            if (set[i].type == this$1) {
                return set[i];
            }
        }
    };
    // :: (MarkType) → bool
    // Queries whether a given mark type is
    // [excluded](#model.MarkSpec.excludes) by this one.
    MarkType.prototype.excludes = function excludes(other) {
        return this.excluded.indexOf(other) > -1;
    };
    // SchemaSpec:: interface
    // An object describing a schema, as passed to the [`Schema`](#model.Schema)
    // constructor.
    //
    //   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>
    //   The node types in this schema. Maps names to
    //   [`NodeSpec`](#model.NodeSpec) objects that describe the node type
    //   associated with that name. Their order is significant—it
    //   determines which [parse rules](#model.NodeSpec.parseDOM) take
    //   precedence by default, and which nodes come first in a given
    //   [group](#model.NodeSpec.group).
    //
    //   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>
    //   The mark types that exist in this schema. The order in which they
    //   are provided determines the order in which [mark
    //   sets](#model.Mark.addToSet) are sorted and in which [parse
    //   rules](#model.MarkSpec.parseDOM) are tried.
    //
    //   topNode:: ?string
    //   The name of the default top-level node for the schema. Defaults
    //   to `"doc"`.
    // NodeSpec:: interface
    //
    //   content:: ?string
    //   The content expression for this node, as described in the [schema
    //   guide](/docs/guide/#schema.content_expressions). When not given,
    //   the node does not allow any content.
    //
    //   marks:: ?string
    //   The marks that are allowed inside of this node. May be a
    //   space-separated string referring to mark names or groups, `"_"`
    //   to explicitly allow all marks, or `""` to disallow marks. When
    //   not given, nodes with inline content default to allowing all
    //   marks, other nodes default to not allowing marks.
    //
    //   group:: ?string
    //   The group or space-separated groups to which this node belongs,
    //   which can be referred to in the content expressions for the
    //   schema.
    //
    //   inline:: ?bool
    //   Should be set to true for inline nodes. (Implied for text nodes.)
    //
    //   atom:: ?bool
    //   Can be set to true to indicate that, though this isn't a [leaf
    //   node](#model.NodeType.isLeaf), it doesn't have directly editable
    //   content and should be treated as a single unit in the view.
    //
    //   attrs:: ?Object<AttributeSpec>
    //   The attributes that nodes of this type get.
    //
    //   selectable:: ?bool
    //   Controls whether nodes of this type can be selected as a [node
    //   selection](#state.NodeSelection). Defaults to true for non-text
    //   nodes.
    //
    //   draggable:: ?bool
    //   Determines whether nodes of this type can be dragged without
    //   being selected. Defaults to false.
    //
    //   code:: ?bool
    //   Can be used to indicate that this node contains code, which
    //   causes some commands to behave differently.
    //
    //   defining:: ?bool
    //   Determines whether this node is considered an important parent
    //   node during replace operations (such as paste). Non-defining (the
    //   default) nodes get dropped when their entire content is replaced,
    //   whereas defining nodes persist and wrap the inserted content.
    //   Likewise, in _inserted_ content the defining parents of the
    //   content are preserved when possible. Typically,
    //   non-default-paragraph textblock types, and possibly list items,
    //   are marked as defining.
    //
    //   isolating:: ?bool
    //   When enabled (default is false), the sides of nodes of this type
    //   count as boundaries that regular editing operations, like
    //   backspacing or lifting, won't cross. An example of a node that
    //   should probably have this enabled is a table cell.
    //
    //   toDOM:: ?(node: Node) → DOMOutputSpec
    //   Defines the default way a node of this type should be serialized
    //   to DOM/HTML (as used by
    //   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).
    //   Should return a DOM node or an [array
    //   structure](#model.DOMOutputSpec) that describes one, with an
    //   optional number zero (“hole”) in it to indicate where the node's
    //   content should be inserted.
    //
    //   For text nodes, the default is to create a text DOM node. Though
    //   it is possible to create a serializer where text is rendered
    //   differently, this is not supported inside the editor, so you
    //   shouldn't override that in your text node spec.
    //
    //   parseDOM:: ?[ParseRule]
    //   Associates DOM parser information with this node, which can be
    //   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to
    //   automatically derive a parser. The `node` field in the rules is
    //   implied (the name of this node will be filled in automatically).
    //   If you supply your own parser, you do not need to also specify
    //   parsing rules in your schema.
    //
    //   toDebugString:: ?(node: Node) -> string
    //   Defines the default way a node of this type should be serialized
    //   to a string representation for debugging (e.g. in error messages).
    // MarkSpec:: interface
    //
    //   attrs:: ?Object<AttributeSpec>
    //   The attributes that marks of this type get.
    //
    //   inclusive:: ?bool
    //   Whether this mark should be active when the cursor is positioned
    //   at its end (or at its start when that is also the start of the
    //   parent node). Defaults to true.
    //
    //   excludes:: ?string
    //   Determines which other marks this mark can coexist with. Should
    //   be a space-separated strings naming other marks or groups of marks.
    //   When a mark is [added](#model.Mark.addToSet) to a set, all marks
    //   that it excludes are removed in the process. If the set contains
    //   any mark that excludes the new mark but is not, itself, excluded
    //   by the new mark, the mark can not be added an the set. You can
    //   use the value `"_"` to indicate that the mark excludes all
    //   marks in the schema.
    //
    //   Defaults to only being exclusive with marks of the same type. You
    //   can set it to an empty string (or any string not containing the
    //   mark's own name) to allow multiple marks of a given type to
    //   coexist (as long as they have different attributes).
    //
    //   group:: ?string
    //   The group or space-separated groups to which this mark belongs.
    //
    //   spanning:: ?bool
    //   Determines whether marks of this type can span multiple adjacent
    //   nodes when serialized to DOM/HTML. Defaults to true.
    //
    //   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec
    //   Defines the default way marks of this type should be serialized
    //   to DOM/HTML. When the resulting spec contains a hole, that is
    //   where the marked content is placed. Otherwise, it is appended to
    //   the top node.
    //
    //   parseDOM:: ?[ParseRule]
    //   Associates DOM parser information with this mark (see the
    //   corresponding [node spec field](#model.NodeSpec.parseDOM)). The
    //   `mark` field in the rules is implied.
    // AttributeSpec:: interface
    //
    // Used to [define](#model.NodeSpec.attrs) attributes on nodes or
    // marks.
    //
    //   default:: ?any
    //   The default value for this attribute, to use when no explicit
    //   value is provided. Attributes that have no default must be
    //   provided whenever a node or mark of a type that has them is
    //   created.
    // ::- A document schema. Holds [node](#model.NodeType) and [mark
    // type](#model.MarkType) objects for the nodes and marks that may
    // occur in conforming documents, and provides functionality for
    // creating and deserializing such documents.
    var Schema = function Schema(spec) {
        var this$1 = this;
        // :: SchemaSpec
        // The [spec](#model.SchemaSpec) on which the schema is based,
        // with the added guarantee that its `nodes` and `marks`
        // properties are
        // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances
        // (not raw objects).
        this.spec = {};
        for (var prop in spec) {
            this$1.spec[prop] = spec[prop];
        }
        this.spec.nodes = OrderedMap.from(spec.nodes);
        this.spec.marks = OrderedMap.from(spec.marks);
        // :: Object<NodeType>
        // An object mapping the schema's node names to node type objects.
        this.nodes = NodeType.compile(this.spec.nodes, this);
        // :: Object<MarkType>
        // A map from mark names to mark type objects.
        this.marks = MarkType.compile(this.spec.marks, this);
        var contentExprCache = Object.create(null);
        for (var prop$1 in this$1.nodes) {
            if (prop$1 in this$1.marks) {
                throw new RangeError(prop$1 + " can not be both a node and a mark");
            }
            var type = this$1.nodes[prop$1], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
            type.contentMatch = contentExprCache[contentExpr] ||
                (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this$1.nodes));
            type.inlineContent = type.contentMatch.inlineContent;
            type.markSet = markExpr == "_" ? null :
                markExpr ? gatherMarks(this$1, markExpr.split(" ")) :
                    markExpr == "" || !type.inlineContent ? [] : null;
        }
        for (var prop$2 in this$1.marks) {
            var type$1 = this$1.marks[prop$2], excl = type$1.spec.excludes;
            type$1.excluded = excl == null ? [type$1] : excl == "" ? [] : gatherMarks(this$1, excl.split(" "));
        }
        this.nodeFromJSON = this.nodeFromJSON.bind(this);
        this.markFromJSON = this.markFromJSON.bind(this);
        // :: NodeType
        // The type of the [default top node](#model.SchemaSpec.topNode)
        // for this schema.
        this.topNodeType = this.nodes[this.spec.topNode || "doc"];
        // :: Object
        // An object for storing whatever values modules may want to
        // compute and cache per schema. (If you want to store something
        // in it, try to use property names unlikely to clash.)
        this.cached = Object.create(null);
        this.cached.wrappings = Object.create(null);
    };
    // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node
    // Create a node in this schema. The `type` may be a string or a
    // `NodeType` instance. Attributes will be extended
    // with defaults, `content` may be a `Fragment`,
    // `null`, a `Node`, or an array of nodes.
    Schema.prototype.node = function node(type, attrs, content, marks) {
        if (typeof type == "string") {
            type = this.nodeType(type);
        }
        else if (!(type instanceof NodeType)) {
            throw new RangeError("Invalid node type: " + type);
        }
        else if (type.schema != this) {
            throw new RangeError("Node type from different schema used (" + type.name + ")");
        }
        return type.createChecked(attrs, content, marks);
    };
    // :: (string, ?[Mark]) → Node
    // Create a text node in the schema. Empty text nodes are not
    // allowed.
    Schema.prototype.text = function text(text$1, marks) {
        var type = this.nodes.text;
        return new TextNode(type, type.defaultAttrs, text$1, Mark.setFrom(marks));
    };
    // :: (union<string, MarkType>, ?Object) → Mark
    // Create a mark with the given type and attributes.
    Schema.prototype.mark = function mark(type, attrs) {
        if (typeof type == "string") {
            type = this.marks[type];
        }
        return type.create(attrs);
    };
    // :: (Object) → Node
    // Deserialize a node from its JSON representation. This method is
    // bound.
    Schema.prototype.nodeFromJSON = function nodeFromJSON(json) {
        return Node.fromJSON(this, json);
    };
    // :: (Object) → Mark
    // Deserialize a mark from its JSON representation. This method is
    // bound.
    Schema.prototype.markFromJSON = function markFromJSON(json) {
        return Mark.fromJSON(this, json);
    };
    Schema.prototype.nodeType = function nodeType(name) {
        var found = this.nodes[name];
        if (!found) {
            throw new RangeError("Unknown node type: " + name);
        }
        return found;
    };
    function gatherMarks(schema, marks) {
        var found = [];
        for (var i = 0; i < marks.length; i++) {
            var name = marks[i], mark = schema.marks[name], ok = mark;
            if (mark) {
                found.push(mark);
            }
            else {
                for (var prop in schema.marks) {
                    var mark$1 = schema.marks[prop];
                    if (name == "_" || (mark$1.spec.group && mark$1.spec.group.split(" ").indexOf(name) > -1)) {
                        found.push(ok = mark$1);
                    }
                }
            }
            if (!ok) {
                throw new SyntaxError("Unknown mark type: '" + marks[i] + "'");
            }
        }
        return found;
    }
    // ParseOptions:: interface
    // These are the options recognized by the
    // [`parse`](#model.DOMParser.parse) and
    // [`parseSlice`](#model.DOMParser.parseSlice) methods.
    //
    //   preserveWhitespace:: ?union<bool, "full">
    //   By default, whitespace is collapsed as per HTML's rules. Pass
    //   `true` to preserve whitespace, but normalize newlines to
    //   spaces, and `"full"` to preserve whitespace entirely.
    //
    //   findPositions:: ?[{node: dom.Node, offset: number}]
    //   When given, the parser will, beside parsing the content,
    //   record the document positions of the given DOM positions. It
    //   will do so by writing to the objects, adding a `pos` property
    //   that holds the document position. DOM positions that are not
    //   in the parsed content will not be written to.
    //
    //   from:: ?number
    //   The child node index to start parsing from.
    //
    //   to:: ?number
    //   The child node index to stop parsing at.
    //
    //   topNode:: ?Node
    //   By default, the content is parsed into the schema's default
    //   [top node type](#model.Schema.topNodeType). You can pass this
    //   option to use the type and attributes from a different node
    //   as the top container.
    //
    //   topMatch:: ?ContentMatch
    //   Provide the starting content match that content parsed into the
    //   top node is matched against.
    //
    //   context:: ?ResolvedPos
    //   A set of additional nodes to count as
    //   [context](#model.ParseRule.context) when parsing, above the
    //   given [top node](#model.ParseOptions.topNode).
    // ParseRule:: interface
    // A value that describes how to parse a given DOM node or inline
    // style as a ProseMirror node or mark.
    //
    //   tag:: ?string
    //   A CSS selector describing the kind of DOM elements to match. A
    //   single rule should have _either_ a `tag` or a `style` property.
    //
    //   namespace:: ?string
    //   The namespace to match. This should be used with `tag`.
    //   Nodes are only matched when the namespace matches or this property
    //   is null.
    //
    //   style:: ?string
    //   A CSS property name to match. When given, this rule matches
    //   inline styles that list that property. May also have the form
    //   `"property=value"`, in which case the rule only matches if the
    //   propery's value exactly matches the given value. (For more
    //   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)
    //   and return undefined to indicate that the match failed.)
    //
    //   priority:: ?number
    //   Can be used to change the order in which the parse rules in a
    //   schema are tried. Those with higher priority come first. Rules
    //   without a priority are counted as having priority 50. This
    //   property is only meaningful in a schema—when directly
    //   constructing a parser, the order of the rule array is used.
    //
    //   context:: ?string
    //   When given, restricts this rule to only match when the current
    //   context—the parent nodes into which the content is being
    //   parsed—matches this expression. Should contain one or more node
    //   names or node group names followed by single or double slashes.
    //   For example `"paragraph/"` means the rule only matches when the
    //   parent node is a paragraph, `"blockquote/paragraph/"` restricts
    //   it to be in a paragraph that is inside a blockquote, and
    //   `"section//"` matches any position inside a section—a double
    //   slash matches any sequence of ancestor nodes. To allow multiple
    //   different contexts, they can be separated by a pipe (`|`)
    //   character, as in `"blockquote/|list_item/"`.
    //
    //   node:: ?string
    //   The name of the node type to create when this rule matches. Only
    //   valid for rules with a `tag` property, not for style rules. Each
    //   rule should have one of a `node`, `mark`, or `ignore` property
    //   (except when it appears in a [node](#model.NodeSpec.parseDOM) or
    //   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`
    //   or `mark` property will be derived from its position).
    //
    //   mark:: ?string
    //   The name of the mark type to wrap the matched content in.
    //
    //   ignore:: ?bool
    //   When true, ignore content that matches this rule.
    //
    //   skip:: ?bool
    //   When true, ignore the node that matches this rule, but do parse
    //   its content.
    //
    //   attrs:: ?Object
    //   Attributes for the node or mark created by this rule. When
    //   `getAttrs` is provided, it takes precedence.
    //
    //   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>
    //   A function used to compute the attributes for the node or mark
    //   created by this rule. Can also be used to describe further
    //   conditions the DOM element or style must match. When it returns
    //   `false`, the rule won't match. When it returns null or undefined,
    //   that is interpreted as an empty/default set of attributes.
    //
    //   Called with a DOM Element for `tag` rules, and with a string (the
    //   style's value) for `style` rules.
    //
    //   contentElement:: ?union<string, (dom.Node) → dom.Node>
    //   For `tag` rules that produce non-leaf nodes or marks, by default
    //   the content of the DOM element is parsed as content of the mark
    //   or node. If the child nodes are in a descendent node, this may be
    //   a CSS selector string that the parser must use to find the actual
    //   content element, or a function that returns the actual content
    //   element to the parser.
    //
    //   getContent:: ?(dom.Node, schema: Schema) → Fragment
    //   Can be used to override the content of a matched node. When
    //   present, instead of parsing the node's child nodes, the result of
    //   this function is used.
    //
    //   preserveWhitespace:: ?union<bool, "full">
    //   Controls whether whitespace should be preserved when parsing the
    //   content inside the matched element. `false` means whitespace may
    //   be collapsed, `true` means that whitespace should be preserved
    //   but newlines normalized to spaces, and `"full"` means that
    //   newlines should also be preserved.
    // ::- A DOM parser represents a strategy for parsing DOM content into
    // a ProseMirror document conforming to a given schema. Its behavior
    // is defined by an array of [rules](#model.ParseRule).
    var DOMParser = function DOMParser(schema, rules) {
        var this$1 = this;
        // :: Schema
        // The schema into which the parser parses.
        this.schema = schema;
        // :: [ParseRule]
        // The set of [parse rules](#model.ParseRule) that the parser
        // uses, in order of precedence.
        this.rules = rules;
        this.tags = [];
        this.styles = [];
        rules.forEach(function (rule) {
            if (rule.tag) {
                this$1.tags.push(rule);
            }
            else if (rule.style) {
                this$1.styles.push(rule);
            }
        });
    };
    // :: (dom.Node, ?ParseOptions) → Node
    // Parse a document from the content of a DOM node.
    DOMParser.prototype.parse = function parse(dom, options) {
        if (options === void 0)
            options = {};
        var context = new ParseContext(this, options, false);
        context.addAll(dom, null, options.from, options.to);
        return context.finish();
    };
    // :: (dom.Node, ?ParseOptions) → Slice
    // Parses the content of the given DOM node, like
    // [`parse`](#model.DOMParser.parse), and takes the same set of
    // options. But unlike that method, which produces a whole node,
    // this one returns a slice that is open at the sides, meaning that
    // the schema constraints aren't applied to the start of nodes to
    // the left of the input and the end of nodes at the end.
    DOMParser.prototype.parseSlice = function parseSlice(dom, options) {
        if (options === void 0)
            options = {};
        var context = new ParseContext(this, options, true);
        context.addAll(dom, null, options.from, options.to);
        return Slice.maxOpen(context.finish());
    };
    DOMParser.prototype.matchTag = function matchTag(dom, context) {
        var this$1 = this;
        for (var i = 0; i < this.tags.length; i++) {
            var rule = this$1.tags[i];
            if (matches(dom, rule.tag) &&
                (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&
                (!rule.context || context.matchesContext(rule.context))) {
                if (rule.getAttrs) {
                    var result = rule.getAttrs(dom);
                    if (result === false) {
                        continue;
                    }
                    rule.attrs = result;
                }
                return rule;
            }
        }
    };
    DOMParser.prototype.matchStyle = function matchStyle(prop, value, context) {
        var this$1 = this;
        for (var i = 0; i < this.styles.length; i++) {
            var rule = this$1.styles[i];
            if (rule.style.indexOf(prop) != 0 ||
                rule.context && !context.matchesContext(rule.context) ||
                // Test that the style string either precisely matches the prop,
                // or has an '=' sign after the prop, followed by the given
                // value.
                rule.style.length > prop.length &&
                    (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value)) {
                continue;
            }
            if (rule.getAttrs) {
                var result = rule.getAttrs(value);
                if (result === false) {
                    continue;
                }
                rule.attrs = result;
            }
            return rule;
        }
    };
    // : (Schema) → [ParseRule]
    DOMParser.schemaRules = function schemaRules(schema) {
        var result = [];
        function insert(rule) {
            var priority = rule.priority == null ? 50 : rule.priority, i = 0;
            for (; i < result.length; i++) {
                var next = result[i], nextPriority = next.priority == null ? 50 : next.priority;
                if (nextPriority < priority) {
                    break;
                }
            }
            result.splice(i, 0, rule);
        }
        var loop = function (name) {
            var rules = schema.marks[name].spec.parseDOM;
            if (rules) {
                rules.forEach(function (rule) {
                    insert(rule = copy(rule));
                    rule.mark = name;
                });
            }
        };
        for (var name in schema.marks)
            loop(name);
        var loop$1 = function (name) {
            var rules$1 = schema.nodes[name$1].spec.parseDOM;
            if (rules$1) {
                rules$1.forEach(function (rule) {
                    insert(rule = copy(rule));
                    rule.node = name$1;
                });
            }
        };
        for (var name$1 in schema.nodes)
            loop$1(name);
        return result;
    };
    // :: (Schema) → DOMParser
    // Construct a DOM parser using the parsing rules listed in a
    // schema's [node specs](#model.NodeSpec.parseDOM), reordered by
    // [priority](#model.ParseRule.priority).
    DOMParser.fromSchema = function fromSchema(schema) {
        return schema.cached.domParser ||
            (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));
    };
    // : Object<bool> The block-level tags in HTML5
    var blockTags = {
        address: true, article: true, aside: true, blockquote: true, canvas: true,
        dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,
        footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,
        h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,
        output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true
    };
    // : Object<bool> The tags that we normally ignore.
    var ignoreTags = {
        head: true, noscript: true, object: true, script: true, style: true, title: true
    };
    // : Object<bool> List tags.
    var listTags = { ol: true, ul: true };
    // Using a bitfield for node context options
    var OPT_PRESERVE_WS = 1;
    var OPT_PRESERVE_WS_FULL = 2;
    var OPT_OPEN_LEFT = 4;
    function wsOptionsFor(preserveWhitespace) {
        return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
    }
    var NodeContext = function NodeContext(type, attrs, marks, solid, match, options) {
        this.type = type;
        this.attrs = attrs;
        this.solid = solid;
        this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
        this.options = options;
        this.content = [];
        this.marks = marks;
        this.activeMarks = Mark.none;
    };
    NodeContext.prototype.findWrapping = function findWrapping(node) {
        if (!this.match) {
            if (!this.type) {
                return [];
            }
            var fill = this.type.contentMatch.fillBefore(Fragment.from(node));
            if (fill) {
                this.match = this.type.contentMatch.matchFragment(fill);
            }
            else {
                var start = this.type.contentMatch, wrap;
                if (wrap = start.findWrapping(node.type)) {
                    this.match = start;
                    return wrap;
                }
                else {
                    return null;
                }
            }
        }
        return this.match.findWrapping(node.type);
    };
    NodeContext.prototype.finish = function finish(openEnd) {
        if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace
            var last = this.content[this.content.length - 1], m;
            if (last && last.isText && (m = /\s+$/.exec(last.text))) {
                if (last.text.length == m[0].length) {
                    this.content.pop();
                }
                else {
                    this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length));
                }
            }
        }
        var content = Fragment.from(this.content);
        if (!openEnd && this.match) {
            content = content.append(this.match.fillBefore(Fragment.empty, true));
        }
        return this.type ? this.type.create(this.attrs, content, this.marks) : content;
    };
    var ParseContext = function ParseContext(parser, options, open) {
        // : DOMParser The parser we are using.
        this.parser = parser;
        // : Object The options passed to this parse.
        this.options = options;
        this.isOpen = open;
        this.pendingMarks = [];
        var topNode = options.topNode, topContext;
        var topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0);
        if (topNode) {
            topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
        }
        else if (open) {
            topContext = new NodeContext(null, null, Mark.none, true, null, topOptions);
        }
        else {
            topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, true, null, topOptions);
        }
        this.nodes = [topContext];
        // : [Mark] The current set of marks
        this.open = 0;
        this.find = options.findPositions;
        this.needsBlock = false;
    };
    var prototypeAccessors$6 = { top: {}, currentPos: {} };
    prototypeAccessors$6.top.get = function () {
        return this.nodes[this.open];
    };
    // : (dom.Node)
    // Add a DOM node to the content. Text is inserted as text node,
    // otherwise, the node is passed to `addElement` or, if it has a
    // `style` attribute, `addElementWithStyles`.
    ParseContext.prototype.addDOM = function addDOM(dom) {
        var this$1 = this;
        if (dom.nodeType == 3) {
            this.addTextNode(dom);
        }
        else if (dom.nodeType == 1) {
            var style = dom.getAttribute("style");
            var marks = style ? this.readStyles(parseStyles(style)) : null;
            if (marks != null) {
                for (var i = 0; i < marks.length; i++) {
                    this$1.addPendingMark(marks[i]);
                }
            }
            this.addElement(dom);
            if (marks != null) {
                for (var i$1 = 0; i$1 < marks.length; i$1++) {
                    this$1.removePendingMark(marks[i$1]);
                }
            }
        }
    };
    ParseContext.prototype.addTextNode = function addTextNode(dom) {
        var value = dom.nodeValue;
        var top = this.top;
        if ((top.type ? top.type.inlineContent : top.content.length && top.content[0].isInline) || /\S/.test(value)) {
            if (!(top.options & OPT_PRESERVE_WS)) {
                value = value.replace(/\s+/g, " ");
                // If this starts with whitespace, and there is no node before it, or
                // a hard break, or a text node that ends with whitespace, strip the
                // leading space.
                if (/^\s/.test(value) && this.open == this.nodes.length - 1) {
                    var nodeBefore = top.content[top.content.length - 1];
                    var domNodeBefore = dom.previousSibling;
                    if (!nodeBefore ||
                        (domNodeBefore && domNodeBefore.nodeName == 'BR') ||
                        (nodeBefore.isText && /\s$/.test(nodeBefore.text))) {
                        value = value.slice(1);
                    }
                }
            }
            else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
                value = value.replace(/\r?\n|\r/g, " ");
            }
            if (value) {
                this.insertNode(this.parser.schema.text(value));
            }
            this.findInText(dom);
        }
        else {
            this.findInside(dom);
        }
    };
    // : (dom.Element)
    // Try to find a handler for the given tag and use that to parse. If
    // none is found, the element's content nodes are added directly.
    ParseContext.prototype.addElement = function addElement(dom) {
        var name = dom.nodeName.toLowerCase();
        if (listTags.hasOwnProperty(name)) {
            normalizeList(dom);
        }
        var rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) || this.parser.matchTag(dom, this);
        if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
            this.findInside(dom);
        }
        else if (!rule || rule.skip) {
            if (rule && rule.skip.nodeType) {
                dom = rule.skip;
            }
            var sync, top = this.top, oldNeedsBlock = this.needsBlock;
            if (blockTags.hasOwnProperty(name)) {
                sync = true;
                if (!top.type) {
                    this.needsBlock = true;
                }
            }
            this.addAll(dom);
            if (sync) {
                this.sync(top);
            }
            this.needsBlock = oldNeedsBlock;
        }
        else {
            this.addElementByRule(dom, rule);
        }
    };
    // Run any style parser associated with the node's styles. Either
    // return an array of marks, or null to indicate some of the styles
    // had a rule with `ignore` set.
    ParseContext.prototype.readStyles = function readStyles(styles) {
        var this$1 = this;
        var marks = Mark.none;
        for (var i = 0; i < styles.length; i += 2) {
            var rule = this$1.parser.matchStyle(styles[i], styles[i + 1], this$1);
            if (!rule) {
                continue;
            }
            if (rule.ignore) {
                return null;
            }
            marks = this$1.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks);
        }
        return marks;
    };
    // : (dom.Element, ParseRule) → bool
    // Look up a handler for the given node. If none are found, return
    // false. Otherwise, apply it, use its return value to drive the way
    // the node's content is wrapped, and return true.
    ParseContext.prototype.addElementByRule = function addElementByRule(dom, rule) {
        var this$1 = this;
        var sync, nodeType, markType, mark;
        if (rule.node) {
            nodeType = this.parser.schema.nodes[rule.node];
            if (nodeType.isLeaf) {
                this.insertNode(nodeType.create(rule.attrs));
            }
            else {
                sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace);
            }
        }
        else {
            markType = this.parser.schema.marks[rule.mark];
            mark = markType.create(rule.attrs);
            this.addPendingMark(mark);
        }
        var startIn = this.top;
        if (nodeType && nodeType.isLeaf) {
            this.findInside(dom);
        }
        else if (rule.getContent) {
            this.findInside(dom);
            rule.getContent(dom, this.parser.schema).forEach(function (node) { return this$1.insertNode(node); });
        }
        else {
            var contentDOM = rule.contentElement;
            if (typeof contentDOM == "string") {
                contentDOM = dom.querySelector(contentDOM);
            }
            else if (typeof contentDOM == "function") {
                contentDOM = contentDOM(dom);
            }
            if (!contentDOM) {
                contentDOM = dom;
            }
            this.findAround(dom, contentDOM, true);
            this.addAll(contentDOM, sync);
        }
        if (sync) {
            this.sync(startIn);
            this.open--;
        }
        if (mark) {
            this.removePendingMark(mark);
        }
        return true;
    };
    // : (dom.Node, ?NodeBuilder, ?number, ?number)
    // Add all child nodes between `startIndex` and `endIndex` (or the
    // whole node, if not given). If `sync` is passed, use it to
    // synchronize after every block element.
    ParseContext.prototype.addAll = function addAll(parent, sync, startIndex, endIndex) {
        var this$1 = this;
        var index = startIndex || 0;
        for (var dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {
            this$1.findAtPoint(parent, index);
            this$1.addDOM(dom);
            if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase())) {
                this$1.sync(sync);
            }
        }
        this.findAtPoint(parent, index);
    };
    // Try to find a way to fit the given node type into the current
    // context. May add intermediate wrappers and/or leave non-solid
    // nodes that we're in.
    ParseContext.prototype.findPlace = function findPlace(node) {
        var this$1 = this;
        var route, sync;
        for (var depth = this.open; depth >= 0; depth--) {
            var cx = this$1.nodes[depth];
            var found = cx.findWrapping(node);
            if (found && (!route || route.length > found.length)) {
                route = found;
                sync = cx;
                if (!found.length) {
                    break;
                }
            }
            if (cx.solid) {
                break;
            }
        }
        if (!route) {
            return false;
        }
        this.sync(sync);
        for (var i = 0; i < route.length; i++) {
            this$1.enterInner(route[i], null, false);
        }
        return true;
    };
    // : (Node) → ?Node
    // Try to insert the given node, adjusting the context when needed.
    ParseContext.prototype.insertNode = function insertNode(node) {
        if (node.isInline && this.needsBlock && !this.top.type) {
            var block = this.textblockFromContext();
            if (block) {
                this.enterInner(block);
            }
        }
        if (this.findPlace(node)) {
            this.closeExtra();
            var top = this.top;
            this.applyPendingMarks(top);
            if (top.match) {
                top.match = top.match.matchType(node.type);
            }
            var marks = top.activeMarks;
            for (var i = 0; i < node.marks.length; i++) {
                if (!top.type || top.type.allowsMarkType(node.marks[i].type)) {
                    marks = node.marks[i].addToSet(marks);
                }
            }
            top.content.push(node.mark(marks));
        }
    };
    ParseContext.prototype.applyPendingMarks = function applyPendingMarks(top) {
        var this$1 = this;
        for (var i = 0; i < this.pendingMarks.length; i++) {
            var mark = this$1.pendingMarks[i];
            if ((!top.type || top.type.allowsMarkType(mark.type)) && !mark.type.isInSet(top.activeMarks)) {
                top.activeMarks = mark.addToSet(top.activeMarks);
                this$1.pendingMarks.splice(i--, 1);
            }
        }
    };
    // : (NodeType, ?Object) → bool
    // Try to start a node of the given type, adjusting the context when
    // necessary.
    ParseContext.prototype.enter = function enter(type, attrs, preserveWS) {
        var ok = this.findPlace(type.create(attrs));
        if (ok) {
            this.applyPendingMarks(this.top);
            this.enterInner(type, attrs, true, preserveWS);
        }
        return ok;
    };
    // Open a node of the given type
    ParseContext.prototype.enterInner = function enterInner(type, attrs, solid, preserveWS) {
        this.closeExtra();
        var top = this.top;
        top.match = top.match && top.match.matchType(type, attrs);
        var options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS);
        if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) {
            options |= OPT_OPEN_LEFT;
        }
        this.nodes.push(new NodeContext(type, attrs, top.activeMarks, solid, null, options));
        this.open++;
    };
    // Make sure all nodes above this.open are finished and added to
    // their parents
    ParseContext.prototype.closeExtra = function closeExtra(openEnd) {
        var this$1 = this;
        var i = this.nodes.length - 1;
        if (i > this.open) {
            for (; i > this.open; i--) {
                this$1.nodes[i - 1].content.push(this$1.nodes[i].finish(openEnd));
            }
            this.nodes.length = this.open + 1;
        }
    };
    ParseContext.prototype.finish = function finish() {
        this.open = 0;
        this.closeExtra(this.isOpen);
        return this.nodes[0].finish(this.isOpen || this.options.topOpen);
    };
    ParseContext.prototype.sync = function sync(to) {
        var this$1 = this;
        for (var i = this.open; i >= 0; i--) {
            if (this$1.nodes[i] == to) {
                this$1.open = i;
                return;
            }
        }
    };
    ParseContext.prototype.addPendingMark = function addPendingMark(mark) {
        this.pendingMarks.push(mark);
    };
    ParseContext.prototype.removePendingMark = function removePendingMark(mark) {
        var found = this.pendingMarks.lastIndexOf(mark);
        if (found > -1) {
            this.pendingMarks.splice(found, 1);
        }
        else {
            var top = this.top;
            top.activeMarks = mark.removeFromSet(top.activeMarks);
        }
    };
    prototypeAccessors$6.currentPos.get = function () {
        var this$1 = this;
        this.closeExtra();
        var pos = 0;
        for (var i = this.open; i >= 0; i--) {
            var content = this$1.nodes[i].content;
            for (var j = content.length - 1; j >= 0; j--) {
                pos += content[j].nodeSize;
            }
            if (i) {
                pos++;
            }
        }
        return pos;
    };
    ParseContext.prototype.findAtPoint = function findAtPoint(parent, offset) {
        var this$1 = this;
        if (this.find) {
            for (var i = 0; i < this.find.length; i++) {
                if (this$1.find[i].node == parent && this$1.find[i].offset == offset) {
                    this$1.find[i].pos = this$1.currentPos;
                }
            }
        }
    };
    ParseContext.prototype.findInside = function findInside(parent) {
        var this$1 = this;
        if (this.find) {
            for (var i = 0; i < this.find.length; i++) {
                if (this$1.find[i].pos == null && parent.nodeType == 1 && parent.contains(this$1.find[i].node)) {
                    this$1.find[i].pos = this$1.currentPos;
                }
            }
        }
    };
    ParseContext.prototype.findAround = function findAround(parent, content, before) {
        var this$1 = this;
        if (parent != content && this.find) {
            for (var i = 0; i < this.find.length; i++) {
                if (this$1.find[i].pos == null && parent.nodeType == 1 && parent.contains(this$1.find[i].node)) {
                    var pos = content.compareDocumentPosition(this$1.find[i].node);
                    if (pos & (before ? 2 : 4)) {
                        this$1.find[i].pos = this$1.currentPos;
                    }
                }
            }
        }
    };
    ParseContext.prototype.findInText = function findInText(textNode) {
        var this$1 = this;
        if (this.find) {
            for (var i = 0; i < this.find.length; i++) {
                if (this$1.find[i].node == textNode) {
                    this$1.find[i].pos = this$1.currentPos - (textNode.nodeValue.length - this$1.find[i].offset);
                }
            }
        }
    };
    // : (string) → bool
    // Determines whether the given [context
    // string](#ParseRule.context) matches this context.
    ParseContext.prototype.matchesContext = function matchesContext(context) {
        var this$1 = this;
        if (context.indexOf("|") > -1) {
            return context.split(/\s*\|\s*/).some(this.matchesContext, this);
        }
        var parts = context.split("/");
        var option = this.options.context;
        var useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
        var minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
        var match = function (i, depth) {
            for (; i >= 0; i--) {
                var part = parts[i];
                if (part == "") {
                    if (i == parts.length - 1 || i == 0) {
                        continue;
                    }
                    for (; depth >= minDepth; depth--) {
                        if (match(i - 1, depth)) {
                            return true;
                        }
                    }
                    return false;
                }
                else {
                    var next = depth > 0 || (depth == 0 && useRoot) ? this$1.nodes[depth].type
                        : option && depth >= minDepth ? option.node(depth - minDepth).type
                            : null;
                    if (!next || (next.name != part && next.groups.indexOf(part) == -1)) {
                        return false;
                    }
                    depth--;
                }
            }
            return true;
        };
        return match(parts.length - 1, this.open);
    };
    ParseContext.prototype.textblockFromContext = function textblockFromContext() {
        var this$1 = this;
        var $context = this.options.context;
        if ($context) {
            for (var d = $context.depth; d >= 0; d--) {
                var deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
                if (deflt && deflt.isTextblock && deflt.defaultAttrs) {
                    return deflt;
                }
            }
        }
        for (var name in this$1.parser.schema.nodes) {
            var type = this$1.parser.schema.nodes[name];
            if (type.isTextblock && type.defaultAttrs) {
                return type;
            }
        }
    };
    Object.defineProperties(ParseContext.prototype, prototypeAccessors$6);
    // Kludge to work around directly nested list nodes produced by some
    // tools and allowed by browsers to mean that the nested list is
    // actually part of the list item above it.
    function normalizeList(dom) {
        for (var child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
            var name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
            if (name && listTags.hasOwnProperty(name) && prevItem) {
                prevItem.appendChild(child);
                child = prevItem;
            }
            else if (name == "li") {
                prevItem = child;
            }
            else if (name) {
                prevItem = null;
            }
        }
    }
    // Apply a CSS selector.
    function matches(dom, selector) {
        return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
    }
    // : (string) → [string]
    // Tokenize a style attribute into property/value pairs.
    function parseStyles(style) {
        var re = /\s*([\w-]+)\s*:\s*([^;]+)/g, m, result = [];
        while (m = re.exec(style)) {
            result.push(m[1], m[2].trim());
        }
        return result;
    }
    function copy(obj) {
        var copy = {};
        for (var prop in obj) {
            copy[prop] = obj[prop];
        }
        return copy;
    }
    // DOMOutputSpec:: interface
    // A description of a DOM structure. Can be either a string, which is
    // interpreted as a text node, a DOM node, which is interpreted as
    // itself, or an array.
    //
    // An array describes a DOM element. The first value in the array
    // should be a string—the name of the DOM element. If the second
    // element is plain object, it is interpreted as a set of attributes
    // for the element. Any elements after that (including the 2nd if it's
    // not an attribute object) are interpreted as children of the DOM
    // elements, and must either be valid `DOMOutputSpec` values, or the
    // number zero.
    //
    // The number zero (pronounced “hole”) is used to indicate the place
    // where a node's child nodes should be inserted. It it occurs in an
    // output spec, it should be the only child element in its parent
    // node.
    // ::- A DOM serializer knows how to convert ProseMirror nodes and
    // marks of various types to DOM nodes.
    var DOMSerializer = function DOMSerializer(nodes, marks) {
        // :: Object<(node: Node) → DOMOutputSpec>
        // The node serialization functions.
        this.nodes = nodes || {};
        // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>
        // The mark serialization functions.
        this.marks = marks || {};
    };
    // :: (Fragment, ?Object) → dom.DocumentFragment
    // Serialize the content of this fragment to a DOM fragment. When
    // not in the browser, the `document` option, containing a DOM
    // document, should be passed so that the serializer can create
    // nodes.
    DOMSerializer.prototype.serializeFragment = function serializeFragment(fragment, options, target) {
        var this$1 = this;
        if (options === void 0)
            options = {};
        if (!target) {
            target = doc(options).createDocumentFragment();
        }
        var top = target, active = null;
        fragment.forEach(function (node) {
            if (active || node.marks.length) {
                if (!active) {
                    active = [];
                }
                var keep = 0, rendered = 0;
                while (keep < active.length && rendered < node.marks.length) {
                    var next = node.marks[rendered];
                    if (!this$1.marks[next.type.name]) {
                        rendered++;
                        continue;
                    }
                    if (!next.eq(active[keep]) || next.type.spec.spanning === false) {
                        break;
                    }
                    keep += 2;
                    rendered++;
                }
                while (keep < active.length) {
                    top = active.pop();
                    active.pop();
                }
                while (rendered < node.marks.length) {
                    var add = node.marks[rendered++];
                    var markDOM = this$1.serializeMark(add, node.isInline, options);
                    if (markDOM) {
                        active.push(add, top);
                        top.appendChild(markDOM.dom);
                        top = markDOM.contentDOM || markDOM.dom;
                    }
                }
            }
            top.appendChild(this$1.serializeNode(node, options));
        });
        return target;
    };
    // :: (Node, ?Object) → dom.Node
    // Serialize this node to a DOM node. This can be useful when you
    // need to serialize a part of a document, as opposed to the whole
    // document. To serialize a whole document, use
    // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on
    // its [content](#model.Node.content).
    DOMSerializer.prototype.serializeNode = function serializeNode(node, options) {
        if (options === void 0)
            options = {};
        var ref = DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));
        var dom = ref.dom;
        var contentDOM = ref.contentDOM;
        if (contentDOM) {
            if (node.isLeaf) {
                throw new RangeError("Content hole not allowed in a leaf node spec");
            }
            if (options.onContent) {
                options.onContent(node, contentDOM, options);
            }
            else {
                this.serializeFragment(node.content, options, contentDOM);
            }
        }
        return dom;
    };
    DOMSerializer.prototype.serializeNodeAndMarks = function serializeNodeAndMarks(node, options) {
        var this$1 = this;
        if (options === void 0)
            options = {};
        var dom = this.serializeNode(node, options);
        for (var i = node.marks.length - 1; i >= 0; i--) {
            var wrap = this$1.serializeMark(node.marks[i], node.isInline, options);
            if (wrap) {
                (wrap.contentDOM || wrap.dom).appendChild(dom);
                dom = wrap.dom;
            }
        }
        return dom;
    };
    DOMSerializer.prototype.serializeMark = function serializeMark(mark, inline, options) {
        if (options === void 0)
            options = {};
        var toDOM = this.marks[mark.type.name];
        return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));
    };
    // :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}
    // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If
    // the spec has a hole (zero) in it, `contentDOM` will point at the
    // node with the hole.
    DOMSerializer.renderSpec = function renderSpec(doc, structure) {
        if (typeof structure == "string") {
            return { dom: doc.createTextNode(structure) };
        }
        if (structure.nodeType != null) {
            return { dom: structure };
        }
        var dom = doc.createElement(structure[0]), contentDOM = null;
        var attrs = structure[1], start = 1;
        if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
            start = 2;
            for (var name in attrs) {
                if (attrs[name] != null) {
                    dom.setAttribute(name, attrs[name]);
                }
            }
        }
        for (var i = start; i < structure.length; i++) {
            var child = structure[i];
            if (child === 0) {
                if (i < structure.length - 1 || i > start) {
                    throw new RangeError("Content hole must be the only child of its parent node");
                }
                return { dom: dom, contentDOM: dom };
            }
            else {
                var ref = DOMSerializer.renderSpec(doc, child);
                var inner = ref.dom;
                var innerContent = ref.contentDOM;
                dom.appendChild(inner);
                if (innerContent) {
                    if (contentDOM) {
                        throw new RangeError("Multiple content holes");
                    }
                    contentDOM = innerContent;
                }
            }
        }
        return { dom: dom, contentDOM: contentDOM };
    };
    // :: (Schema) → DOMSerializer
    // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)
    // properties in a schema's node and mark specs.
    DOMSerializer.fromSchema = function fromSchema(schema) {
        return schema.cached.domSerializer ||
            (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
    };
    // : (Schema) → Object<(node: Node) → DOMOutputSpec>
    // Gather the serializers in a schema's node specs into an object.
    // This can be useful as a base to build a custom serializer from.
    DOMSerializer.nodesFromSchema = function nodesFromSchema(schema) {
        var result = gatherToDOM(schema.nodes);
        if (!result.text) {
            result.text = function (node) { return node.text; };
        }
        return result;
    };
    // : (Schema) → Object<(mark: Mark) → DOMOutputSpec>
    // Gather the serializers in a schema's mark specs into an object.
    DOMSerializer.marksFromSchema = function marksFromSchema(schema) {
        return gatherToDOM(schema.marks);
    };
    function gatherToDOM(obj) {
        var result = {};
        for (var name in obj) {
            var toDOM = obj[name].spec.toDOM;
            if (toDOM) {
                result[name] = toDOM;
            }
        }
        return result;
    }
    function doc(options) {
        // declare global: window
        return options.document || window.document;
    }
    exports.Node = Node;
    exports.ResolvedPos = ResolvedPos;
    exports.NodeRange = NodeRange;
    exports.Fragment = Fragment;
    exports.Slice = Slice;
    exports.ReplaceError = ReplaceError;
    exports.Mark = Mark;
    exports.Schema = Schema;
    exports.NodeType = NodeType;
    exports.MarkType = MarkType;
    exports.ContentMatch = ContentMatch;
    exports.DOMParser = DOMParser;
    exports.DOMSerializer = DOMSerializer;
    //# sourceMappingURL=index.js.map
});
define("prosemirror-state", function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var prosemirrorModel = require('prosemirror-model');
    var prosemirrorTransform = require('prosemirror-transform');
    var classesById = Object.create(null);
    // ::- Superclass for editor selections. Every selection type should
    // extend this. Should not be instantiated directly.
    var Selection = function Selection($anchor, $head, ranges) {
        // :: [SelectionRange]
        // The ranges covered by the selection.
        this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
        // :: ResolvedPos
        // The resolved anchor of the selection (the side that stays in
        // place when the selection is modified).
        this.$anchor = $anchor;
        // :: ResolvedPos
        // The resolved head of the selection (the side that moves when
        // the selection is modified).
        this.$head = $head;
    };
    var prototypeAccessors = { anchor: {}, head: {}, from: {}, to: {}, $from: {}, $to: {}, empty: {} };
    // :: number
    // The selection's anchor, as an unresolved position.
    prototypeAccessors.anchor.get = function () { return this.$anchor.pos; };
    // :: number
    // The selection's head.
    prototypeAccessors.head.get = function () { return this.$head.pos; };
    // :: number
    // The lower bound of the selection's main range.
    prototypeAccessors.from.get = function () { return this.$from.pos; };
    // :: number
    // The upper bound of the selection's main range.
    prototypeAccessors.to.get = function () { return this.$to.pos; };
    // :: ResolvedPos
    // The resolved lowerbound of the selection's main range.
    prototypeAccessors.$from.get = function () {
        return this.ranges[0].$from;
    };
    // :: ResolvedPos
    // The resolved upper bound of the selection's main range.
    prototypeAccessors.$to.get = function () {
        return this.ranges[0].$to;
    };
    // :: bool
    // Indicates whether the selection contains any content.
    prototypeAccessors.empty.get = function () {
        var ranges = this.ranges;
        for (var i = 0; i < ranges.length; i++) {
            if (ranges[i].$from.pos != ranges[i].$to.pos) {
                return false;
            }
        }
        return true;
    };
    // eq:: (Selection) → bool
    // Test whether the selection is the same as another selection.
    // map:: (doc: Node, mapping: Mappable) → Selection
    // Map this selection through a [mappable](#transform.Mappable) thing. `doc`
    // should be the new document to which we are mapping.
    // :: () → Slice
    // Get the content of this selection as a slice.
    Selection.prototype.content = function content() {
        return this.$from.node(0).slice(this.from, this.to, true);
    };
    // :: (Transaction, ?Slice)
    // Replace the selection with a slice or, if no slice is given,
    // delete the selection. Will append to the given transaction.
    Selection.prototype.replace = function replace(tr, content) {
        if (content === void 0)
            content = prosemirrorModel.Slice.empty;
        // Put the new selection at the position after the inserted
        // content. When that ended in an inline node, search backwards,
        // to get the position after that node. If not, search forward.
        var lastNode = content.content.lastChild, lastParent = null;
        for (var i = 0; i < content.openEnd; i++) {
            lastParent = lastNode;
            lastNode = lastNode.lastChild;
        }
        var mapFrom = tr.steps.length, ranges = this.ranges;
        for (var i$1 = 0; i$1 < ranges.length; i$1++) {
            var ref = ranges[i$1];
            var $from = ref.$from;
            var $to = ref.$to;
            var mapping = tr.mapping.slice(mapFrom);
            tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i$1 ? prosemirrorModel.Slice.empty : content);
            if (i$1 == 0) {
                selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
            }
        }
    };
    // :: (Transaction, Node)
    // Replace the selection with the given node, appending the changes
    // to the given transaction.
    Selection.prototype.replaceWith = function replaceWith(tr, node) {
        var mapFrom = tr.steps.length, ranges = this.ranges;
        for (var i = 0; i < ranges.length; i++) {
            var ref = ranges[i];
            var $from = ref.$from;
            var $to = ref.$to;
            var mapping = tr.mapping.slice(mapFrom);
            var from = mapping.map($from.pos), to = mapping.map($to.pos);
            if (i) {
                tr.deleteRange(from, to);
            }
            else {
                tr.replaceRangeWith(from, to, node);
                selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);
            }
        }
    };
    // toJSON:: () → Object
    // Convert the selection to a JSON representation. When implementing
    // this for a custom selection class, make sure to give the object a
    // `type` property whose value matches the ID under which you
    // [registered](#state.Selection^jsonID) your class.
    // :: (ResolvedPos, number, ?bool) → ?Selection
    // Find a valid cursor or leaf node selection starting at the given
    // position and searching back if `dir` is negative, and forward if
    // positive. When `textOnly` is true, only consider cursor
    // selections. Will return null when no valid selection position is
    // found.
    Selection.findFrom = function findFrom($pos, dir, textOnly) {
        var inner = $pos.parent.inlineContent ? new TextSelection($pos)
            : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
        if (inner) {
            return inner;
        }
        for (var depth = $pos.depth - 1; depth >= 0; depth--) {
            var found = dir < 0
                ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)
                : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
            if (found) {
                return found;
            }
        }
    };
    // :: (ResolvedPos, ?number) → Selection
    // Find a valid cursor or leaf node selection near the given
    // position. Searches forward first by default, but if `bias` is
    // negative, it will search backwards first.
    Selection.near = function near($pos, bias) {
        if (bias === void 0)
            bias = 1;
        return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
    };
    // :: (Node) → Selection
    // Find the cursor or leaf node selection closest to the start of
    // the given document. Will return an
    // [`AllSelection`](#state.AllSelection) if no valid position
    // exists.
    Selection.atStart = function atStart(doc) {
        return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);
    };
    // :: (Node) → Selection
    // Find the cursor or leaf node selection closest to the end of the
    // given document.
    Selection.atEnd = function atEnd(doc) {
        return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);
    };
    // :: (Node, Object) → Selection
    // Deserialize the JSON representation of a selection. Must be
    // implemented for custom classes (as a static class method).
    Selection.fromJSON = function fromJSON(doc, json) {
        if (!json || !json.type) {
            throw new RangeError("Invalid input for Selection.fromJSON");
        }
        var cls = classesById[json.type];
        if (!cls) {
            throw new RangeError(("No selection type " + (json.type) + " defined"));
        }
        return cls.fromJSON(doc, json);
    };
    // :: (string, constructor<Selection>)
    // To be able to deserialize selections from JSON, custom selection
    // classes must register themselves with an ID string, so that they
    // can be disambiguated. Try to pick something that's unlikely to
    // clash with classes from other modules.
    Selection.jsonID = function jsonID(id, selectionClass) {
        if (id in classesById) {
            throw new RangeError("Duplicate use of selection JSON ID " + id);
        }
        classesById[id] = selectionClass;
        selectionClass.prototype.jsonID = id;
        return selectionClass;
    };
    // :: () → SelectionBookmark
    // Get a [bookmark](#state.SelectionBookmark) for this selection,
    // which is a value that can be mapped without having access to a
    // current document, and later resolved to a real selection for a
    // given document again. (This is used mostly by the history to
    // track and restore old selections.) The default implementation of
    // this method just converts the selection to a text selection and
    // returns the bookmark for that.
    Selection.prototype.getBookmark = function getBookmark() {
        return TextSelection.between(this.$anchor, this.$head).getBookmark();
    };
    Object.defineProperties(Selection.prototype, prototypeAccessors);
    // :: bool
    // Controls whether, when a selection of this type is active in the
    // browser, the selected range should be visible to the user. Defaults
    // to `true`.
    Selection.prototype.visible = true;
    // SelectionBookmark:: interface
    // A lightweight, document-independent representation of a selection.
    // You can define a custom bookmark type for a custom selection class
    // to make the history handle it well.
    //
    //   map:: (mapping: Mapping) → SelectionBookmark
    //   Map the bookmark through a set of changes.
    //
    //   resolve:: (doc: Node) → Selection
    //   Resolve the bookmark to a real selection again. This may need to
    //   do some error checking and may fall back to a default (usually
    //   [`TextSelection.between`](#state.TextSelection^between)) if
    //   mapping made the bookmark invalid.
    // ::- Represents a selected range in a document.
    var SelectionRange = function SelectionRange($from, $to) {
        // :: ResolvedPos
        // The lower bound of the range.
        this.$from = $from;
        // :: ResolvedPos
        // The upper bound of the range.
        this.$to = $to;
    };
    // ::- A text selection represents a classical editor selection, with
    // a head (the moving side) and anchor (immobile side), both of which
    // point into textblock nodes. It can be empty (a regular cursor
    // position).
    var TextSelection = (function (Selection) {
        function TextSelection($anchor, $head) {
            if ($head === void 0)
                $head = $anchor;
            Selection.call(this, $anchor, $head);
        }
        if (Selection)
            TextSelection.__proto__ = Selection;
        TextSelection.prototype = Object.create(Selection && Selection.prototype);
        TextSelection.prototype.constructor = TextSelection;
        var prototypeAccessors$1 = { $cursor: {} };
        // :: ?ResolvedPos
        // Returns a resolved position if this is a cursor selection (an
        // empty text selection), and null otherwise.
        prototypeAccessors$1.$cursor.get = function () { return this.$anchor.pos == this.$head.pos ? this.$head : null; };
        TextSelection.prototype.map = function map(doc, mapping) {
            var $head = doc.resolve(mapping.map(this.head));
            if (!$head.parent.inlineContent) {
                return Selection.near($head);
            }
            var $anchor = doc.resolve(mapping.map(this.anchor));
            return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
        };
        TextSelection.prototype.replace = function replace(tr, content) {
            if (content === void 0)
                content = prosemirrorModel.Slice.empty;
            Selection.prototype.replace.call(this, tr, content);
            if (content == prosemirrorModel.Slice.empty) {
                var marks = this.$from.marksAcross(this.$to);
                if (marks) {
                    tr.ensureMarks(marks);
                }
            }
        };
        TextSelection.prototype.eq = function eq(other) {
            return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;
        };
        TextSelection.prototype.getBookmark = function getBookmark() {
            return new TextBookmark(this.anchor, this.head);
        };
        TextSelection.prototype.toJSON = function toJSON() {
            return { type: "text", anchor: this.anchor, head: this.head };
        };
        TextSelection.fromJSON = function fromJSON(doc, json) {
            if (typeof json.anchor != "number" || typeof json.head != "number") {
                throw new RangeError("Invalid input for TextSelection.fromJSON");
            }
            return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));
        };
        // :: (Node, number, ?number) → TextSelection
        // Create a text selection from non-resolved positions.
        TextSelection.create = function create(doc, anchor, head) {
            if (head === void 0)
                head = anchor;
            var $anchor = doc.resolve(anchor);
            return new this($anchor, head == anchor ? $anchor : doc.resolve(head));
        };
        // :: (ResolvedPos, ResolvedPos, ?number) → Selection
        // Return a text selection that spans the given positions or, if
        // they aren't text positions, find a text selection near them.
        // `bias` determines whether the method searches forward (default)
        // or backwards (negative number) first. Will fall back to calling
        // [`Selection.near`](#state.Selection^near) when the document
        // doesn't contain a valid text position.
        TextSelection.between = function between($anchor, $head, bias) {
            var dPos = $anchor.pos - $head.pos;
            if (!bias || dPos) {
                bias = dPos >= 0 ? 1 : -1;
            }
            if (!$head.parent.inlineContent) {
                var found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
                if (found) {
                    $head = found.$head;
                }
                else {
                    return Selection.near($head, bias);
                }
            }
            if (!$anchor.parent.inlineContent) {
                if (dPos == 0) {
                    $anchor = $head;
                }
                else {
                    $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
                    if (($anchor.pos < $head.pos) != (dPos < 0)) {
                        $anchor = $head;
                    }
                }
            }
            return new TextSelection($anchor, $head);
        };
        Object.defineProperties(TextSelection.prototype, prototypeAccessors$1);
        return TextSelection;
    }(Selection));
    Selection.jsonID("text", TextSelection);
    var TextBookmark = function TextBookmark(anchor, head) {
        this.anchor = anchor;
        this.head = head;
    };
    TextBookmark.prototype.map = function map(mapping) {
        return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
    };
    TextBookmark.prototype.resolve = function resolve(doc) {
        return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));
    };
    // ::- A node selection is a selection that points at a single node.
    // All nodes marked [selectable](#model.NodeSpec.selectable) can be
    // the target of a node selection. In such a selection, `from` and
    // `to` point directly before and after the selected node, `anchor`
    // equals `from`, and `head` equals `to`..
    var NodeSelection = (function (Selection) {
        function NodeSelection($pos) {
            var node = $pos.nodeAfter;
            var $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
            Selection.call(this, $pos, $end);
            // :: Node The selected node.
            this.node = node;
        }
        if (Selection)
            NodeSelection.__proto__ = Selection;
        NodeSelection.prototype = Object.create(Selection && Selection.prototype);
        NodeSelection.prototype.constructor = NodeSelection;
        NodeSelection.prototype.map = function map(doc, mapping) {
            var ref = mapping.mapResult(this.anchor);
            var deleted = ref.deleted;
            var pos = ref.pos;
            var $pos = doc.resolve(pos);
            if (deleted) {
                return Selection.near($pos);
            }
            return new NodeSelection($pos);
        };
        NodeSelection.prototype.content = function content() {
            return new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(this.node), 0, 0);
        };
        NodeSelection.prototype.eq = function eq(other) {
            return other instanceof NodeSelection && other.anchor == this.anchor;
        };
        NodeSelection.prototype.toJSON = function toJSON() {
            return { type: "node", anchor: this.anchor };
        };
        NodeSelection.prototype.getBookmark = function getBookmark() { return new NodeBookmark(this.anchor); };
        NodeSelection.fromJSON = function fromJSON(doc, json) {
            if (typeof json.anchor != "number") {
                throw new RangeError("Invalid input for NodeSelection.fromJSON");
            }
            return new NodeSelection(doc.resolve(json.anchor));
        };
        // :: (Node, number) → NodeSelection
        // Create a node selection from non-resolved positions.
        NodeSelection.create = function create(doc, from) {
            return new this(doc.resolve(from));
        };
        // :: (Node) → bool
        // Determines whether the given node may be selected as a node
        // selection.
        NodeSelection.isSelectable = function isSelectable(node) {
            return !node.isText && node.type.spec.selectable !== false;
        };
        return NodeSelection;
    }(Selection));
    NodeSelection.prototype.visible = false;
    Selection.jsonID("node", NodeSelection);
    var NodeBookmark = function NodeBookmark(anchor) {
        this.anchor = anchor;
    };
    NodeBookmark.prototype.map = function map(mapping) {
        var ref = mapping.mapResult(this.anchor);
        var deleted = ref.deleted;
        var pos = ref.pos;
        return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);
    };
    NodeBookmark.prototype.resolve = function resolve(doc) {
        var $pos = doc.resolve(this.anchor), node = $pos.nodeAfter;
        if (node && NodeSelection.isSelectable(node)) {
            return new NodeSelection($pos);
        }
        return Selection.near($pos);
    };
    // ::- A selection type that represents selecting the whole document
    // (which can not necessarily be expressed with a text selection, when
    // there are for example leaf block nodes at the start or end of the
    // document).
    var AllSelection = (function (Selection) {
        function AllSelection(doc) {
            Selection.call(this, doc.resolve(0), doc.resolve(doc.content.size));
        }
        if (Selection)
            AllSelection.__proto__ = Selection;
        AllSelection.prototype = Object.create(Selection && Selection.prototype);
        AllSelection.prototype.constructor = AllSelection;
        AllSelection.prototype.toJSON = function toJSON() { return { type: "all" }; };
        AllSelection.fromJSON = function fromJSON(doc) { return new AllSelection(doc); };
        AllSelection.prototype.map = function map(doc) { return new AllSelection(doc); };
        AllSelection.prototype.eq = function eq(other) { return other instanceof AllSelection; };
        AllSelection.prototype.getBookmark = function getBookmark() { return AllBookmark; };
        return AllSelection;
    }(Selection));
    Selection.jsonID("all", AllSelection);
    var AllBookmark = {
        map: function map() { return this; },
        resolve: function resolve(doc) { return new AllSelection(doc); }
    };
    // FIXME we'll need some awareness of text direction when scanning for selections
    // Try to find a selection inside the given node. `pos` points at the
    // position where the search starts. When `text` is true, only return
    // text selections.
    function findSelectionIn(doc, node, pos, index, dir, text) {
        if (node.inlineContent) {
            return TextSelection.create(doc, pos);
        }
        for (var i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
            var child = node.child(i);
            if (!child.isAtom) {
                var inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
                if (inner) {
                    return inner;
                }
            }
            else if (!text && NodeSelection.isSelectable(child)) {
                return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));
            }
            pos += child.nodeSize * dir;
        }
    }
    function selectionToInsertionEnd(tr, startLen, bias) {
        var last = tr.steps.length - 1;
        if (last < startLen) {
            return;
        }
        var step = tr.steps[last];
        if (!(step instanceof prosemirrorTransform.ReplaceStep || step instanceof prosemirrorTransform.ReplaceAroundStep)) {
            return;
        }
        var map = tr.mapping.maps[last], end;
        map.forEach(function (_from, _to, _newFrom, newTo) { if (end == null) {
            end = newTo;
        } });
        tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
    }
    var UPDATED_SEL = 1;
    var UPDATED_MARKS = 2;
    var UPDATED_SCROLL = 4;
    // ::- An editor state transaction, which can be applied to a state to
    // create an updated state. Use
    // [`EditorState.tr`](#state.EditorState.tr) to create an instance.
    //
    // Transactions track changes to the document (they are a subclass of
    // [`Transform`](#transform.Transform)), but also other state changes,
    // like selection updates and adjustments of the set of [stored
    // marks](#state.EditorState.storedMarks). In addition, you can store
    // metadata properties in a transaction, which are extra pieces of
    // information that client code or plugins can use to describe what a
    // transacion represents, so that they can update their [own
    // state](#state.StateField) accordingly.
    //
    // The [editor view](#view.EditorView) uses a few metadata properties:
    // it will attach a property `"pointer"` with the value `true` to
    // selection transactions directly caused by mouse or touch input, and
    // a `"uiEvent"` property of that may be `"paste"`, `"cut"`, or `"drop"`.
    var Transaction = (function (Transform$$1) {
        function Transaction(state) {
            Transform$$1.call(this, state.doc);
            // :: number
            // The timestamp associated with this transaction, in the same
            // format as `Date.now()`.
            this.time = Date.now();
            this.curSelection = state.selection;
            // The step count for which the current selection is valid.
            this.curSelectionFor = 0;
            // :: ?[Mark]
            // The stored marks set by this transaction, if any.
            this.storedMarks = state.storedMarks;
            // Bitfield to track which aspects of the state were updated by
            // this transaction.
            this.updated = 0;
            // Object used to store metadata properties for the transaction.
            this.meta = Object.create(null);
        }
        if (Transform$$1)
            Transaction.__proto__ = Transform$$1;
        Transaction.prototype = Object.create(Transform$$1 && Transform$$1.prototype);
        Transaction.prototype.constructor = Transaction;
        var prototypeAccessors = { selection: {}, selectionSet: {}, storedMarksSet: {}, isGeneric: {}, scrolledIntoView: {} };
        // :: Selection
        // The transaction's current selection. This defaults to the editor
        // selection [mapped](#state.Selection.map) through the steps in the
        // transaction, but can be overwritten with
        // [`setSelection`](#state.Transaction.setSelection).
        prototypeAccessors.selection.get = function () {
            if (this.curSelectionFor < this.steps.length) {
                this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
                this.curSelectionFor = this.steps.length;
            }
            return this.curSelection;
        };
        // :: (Selection) → Transaction
        // Update the transaction's current selection. Will determine the
        // selection that the editor gets when the transaction is applied.
        Transaction.prototype.setSelection = function setSelection(selection) {
            this.curSelection = selection;
            this.curSelectionFor = this.steps.length;
            this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
            this.storedMarks = null;
            return this;
        };
        // :: bool
        // Whether the selection was explicitly updated by this transaction.
        prototypeAccessors.selectionSet.get = function () {
            return (this.updated & UPDATED_SEL) > 0;
        };
        // :: (?[Mark]) → Transaction
        // Set the current stored marks.
        Transaction.prototype.setStoredMarks = function setStoredMarks(marks) {
            this.storedMarks = marks;
            this.updated |= UPDATED_MARKS;
            return this;
        };
        // :: ([Mark]) → Transaction
        // Make sure the current stored marks or, if that is null, the marks
        // at the selection, match the given set of marks. Does nothing if
        // this is already the case.
        Transaction.prototype.ensureMarks = function ensureMarks(marks) {
            if (!prosemirrorModel.Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks)) {
                this.setStoredMarks(marks);
            }
            return this;
        };
        // :: (Mark) → Transaction
        // Add a mark to the set of stored marks.
        Transaction.prototype.addStoredMark = function addStoredMark(mark) {
            return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
        };
        // :: (union<Mark, MarkType>) → Transaction
        // Remove a mark or mark type from the set of stored marks.
        Transaction.prototype.removeStoredMark = function removeStoredMark(mark) {
            return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
        };
        // :: bool
        // Whether the stored marks were explicitly set for this transaction.
        prototypeAccessors.storedMarksSet.get = function () {
            return (this.updated & UPDATED_MARKS) > 0;
        };
        Transaction.prototype.addStep = function addStep(step, doc) {
            Transform$$1.prototype.addStep.call(this, step, doc);
            this.updated = this.updated & ~UPDATED_MARKS;
            this.storedMarks = null;
        };
        // :: (number) → Transaction
        // Update the timestamp for the transaction.
        Transaction.prototype.setTime = function setTime(time) {
            this.time = time;
            return this;
        };
        // :: (Slice) → Transaction
        // Replace the current selection with the given slice.
        Transaction.prototype.replaceSelection = function replaceSelection(slice) {
            this.selection.replace(this, slice);
            return this;
        };
        // :: (Node, ?bool) → Transaction
        // Replace the selection with the given node. When `inheritMarks` is
        // true and the content is inline, it inherits the marks from the
        // place where it is inserted.
        Transaction.prototype.replaceSelectionWith = function replaceSelectionWith(node, inheritMarks) {
            var selection = this.selection;
            if (inheritMarks !== false) {
                node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || prosemirrorModel.Mark.none)));
            }
            selection.replaceWith(this, node);
            return this;
        };
        // :: () → Transaction
        // Delete the selection.
        Transaction.prototype.deleteSelection = function deleteSelection() {
            this.selection.replace(this);
            return this;
        };
        // :: (string, from: ?number, to: ?number) → Transaction
        // Replace the given range, or the selection if no range is given,
        // with a text node containing the given string.
        Transaction.prototype.insertText = function insertText(text, from, to) {
            if (to === void 0)
                to = from;
            var schema = this.doc.type.schema;
            if (from == null) {
                if (!text) {
                    return this.deleteSelection();
                }
                return this.replaceSelectionWith(schema.text(text), true);
            }
            else {
                if (!text) {
                    return this.deleteRange(from, to);
                }
                var marks = this.storedMarks;
                if (!marks) {
                    var $from = this.doc.resolve(from);
                    marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
                }
                return this.replaceRangeWith(from, to, schema.text(text, marks));
            }
        };
        // :: (union<string, Plugin, PluginKey>, any) → Transaction
        // Store a metadata property in this transaction, keyed either by
        // name or by plugin.
        Transaction.prototype.setMeta = function setMeta(key, value) {
            this.meta[typeof key == "string" ? key : key.key] = value;
            return this;
        };
        // :: (union<string, Plugin, PluginKey>) → any
        // Retrieve a metadata property for a given name or plugin.
        Transaction.prototype.getMeta = function getMeta(key) {
            return this.meta[typeof key == "string" ? key : key.key];
        };
        // :: bool
        // Returns true if this transaction doesn't contain any metadata,
        // and can thus safely be extended.
        prototypeAccessors.isGeneric.get = function () {
            var this$1 = this;
            for (var _ in this$1.meta) {
                return false;
            }
            return true;
        };
        // :: () → Transaction
        // Indicate that the editor should scroll the selection into view
        // when updated to the state produced by this transaction.
        Transaction.prototype.scrollIntoView = function scrollIntoView() {
            this.updated |= UPDATED_SCROLL;
            return this;
        };
        prototypeAccessors.scrolledIntoView.get = function () {
            return (this.updated & UPDATED_SCROLL) > 0;
        };
        Object.defineProperties(Transaction.prototype, prototypeAccessors);
        return Transaction;
    }(prosemirrorTransform.Transform));
    function bind(f, self) {
        return !self || !f ? f : f.bind(self);
    }
    var FieldDesc = function FieldDesc(name, desc, self) {
        this.name = name;
        this.init = bind(desc.init, self);
        this.apply = bind(desc.apply, self);
    };
    var baseFields = [
        new FieldDesc("doc", {
            init: function init(config) { return config.doc || config.schema.topNodeType.createAndFill(); },
            apply: function apply(tr) { return tr.doc; }
        }),
        new FieldDesc("selection", {
            init: function init(config, instance) { return config.selection || Selection.atStart(instance.doc); },
            apply: function apply(tr) { return tr.selection; }
        }),
        new FieldDesc("storedMarks", {
            init: function init(config) { return config.storedMarks || null; },
            apply: function apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null; }
        }),
        new FieldDesc("scrollToSelection", {
            init: function init() { return 0; },
            apply: function apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev; }
        })
    ];
    // Object wrapping the part of a state object that stays the same
    // across transactions. Stored in the state's `config` property.
    var Configuration = function Configuration(schema, plugins) {
        var this$1 = this;
        this.schema = schema;
        this.fields = baseFields.concat();
        this.plugins = [];
        this.pluginsByKey = Object.create(null);
        if (plugins) {
            plugins.forEach(function (plugin) {
                if (this$1.pluginsByKey[plugin.key]) {
                    throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
                }
                this$1.plugins.push(plugin);
                this$1.pluginsByKey[plugin.key] = plugin;
                if (plugin.spec.state) {
                    this$1.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
                }
            });
        }
    };
    // ::- The state of a ProseMirror editor is represented by an object
    // of this type. A state is a persistent data structure—it isn't
    // updated, but rather a new state value is computed from an old one
    // using the [`apply`](#state.EditorState.apply) method.
    //
    // A state holds a number of built-in fields, and plugins can
    // [define](#state.PluginSpec.state) additional fields.
    var EditorState = function EditorState(config) {
        this.config = config;
    };
    var prototypeAccessors$1 = { schema: {}, plugins: {}, tr: {} };
    // doc:: Node
    // The current document.
    // selection:: Selection
    // The selection.
    // storedMarks:: ?[Mark]
    // A set of marks to apply to the next input. Will be null when
    // no explicit marks have been set.
    // :: Schema
    // The schema of the state's document.
    prototypeAccessors$1.schema.get = function () {
        return this.config.schema;
    };
    // :: [Plugin]
    // The plugins that are active in this state.
    prototypeAccessors$1.plugins.get = function () {
        return this.config.plugins;
    };
    // :: (Transaction) → EditorState
    // Apply the given transaction to produce a new state.
    EditorState.prototype.apply = function apply(tr) {
        return this.applyTransaction(tr).state;
    };
    // : (Transaction) → ?Transaction
    EditorState.prototype.filterTransaction = function filterTransaction(tr, ignore) {
        var this$1 = this;
        if (ignore === void 0)
            ignore = -1;
        for (var i = 0; i < this.config.plugins.length; i++) {
            if (i != ignore) {
                var plugin = this$1.config.plugins[i];
                if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this$1)) {
                    return false;
                }
            }
        }
        return true;
    };
    // :: (Transaction) → {state: EditorState, transactions: [Transaction]}
    // Verbose variant of [`apply`](#state.EditorState.apply) that
    // returns the precise transactions that were applied (which might
    // be influenced by the [transaction
    // hooks](#state.PluginSpec.filterTransaction) of
    // plugins) along with the new state.
    EditorState.prototype.applyTransaction = function applyTransaction(rootTr) {
        var this$1 = this;
        if (!this.filterTransaction(rootTr)) {
            return { state: this, transactions: [] };
        }
        var trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
        // This loop repeatedly gives plugins a chance to respond to
        // transactions as new transactions are added, making sure to only
        // pass the transactions the plugin did not see before.
        outer: for (;;) {
            var haveNew = false;
            for (var i = 0; i < this.config.plugins.length; i++) {
                var plugin = this$1.config.plugins[i];
                if (plugin.spec.appendTransaction) {
                    var n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this$1;
                    var tr = n < trs.length &&
                        plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
                    if (tr && newState.filterTransaction(tr, i)) {
                        tr.setMeta("appendedTransaction", rootTr);
                        if (!seen) {
                            seen = [];
                            for (var j = 0; j < this.config.plugins.length; j++) {
                                seen.push(j < i ? { state: newState, n: trs.length } : { state: this$1, n: 0 });
                            }
                        }
                        trs.push(tr);
                        newState = newState.applyInner(tr);
                        haveNew = true;
                    }
                    if (seen) {
                        seen[i] = { state: newState, n: trs.length };
                    }
                }
            }
            if (!haveNew) {
                return { state: newState, transactions: trs };
            }
        }
    };
    // : (Transaction) → EditorState
    EditorState.prototype.applyInner = function applyInner(tr) {
        var this$1 = this;
        if (!tr.before.eq(this.doc)) {
            throw new RangeError("Applying a mismatched transaction");
        }
        var newInstance = new EditorState(this.config), fields = this.config.fields;
        for (var i = 0; i < fields.length; i++) {
            var field = fields[i];
            newInstance[field.name] = field.apply(tr, this$1[field.name], this$1, newInstance);
        }
        for (var i$1 = 0; i$1 < applyListeners.length; i$1++) {
            applyListeners[i$1](this$1, tr, newInstance);
        }
        return newInstance;
    };
    // :: Transaction
    // Start a [transaction](#state.Transaction) from this state.
    prototypeAccessors$1.tr.get = function () { return new Transaction(this); };
    // :: (Object) → EditorState
    // Create a new state.
    //
    // config::- Configuration options. Must contain `schema` or `doc` (or both).
    //
    //    schema:: ?Schema
    //    The schema to use.
    //
    //    doc:: ?Node
    //    The starting document.
    //
    //    selection:: ?Selection
    //    A valid selection in the document.
    //
    //    storedMarks:: ?[Mark]
    //    The initial set of [stored marks](#state.EditorState.storedMarks).
    //
    //    plugins:: ?[Plugin]
    //    The plugins that should be active in this state.
    EditorState.create = function create(config) {
        var $config = new Configuration(config.schema || config.doc.type.schema, config.plugins);
        var instance = new EditorState($config);
        for (var i = 0; i < $config.fields.length; i++) {
            instance[$config.fields[i].name] = $config.fields[i].init(config, instance);
        }
        return instance;
    };
    // :: (Object) → EditorState
    // Create a new state based on this one, but with an adjusted set of
    // active plugins. State fields that exist in both sets of plugins
    // are kept unchanged. Those that no longer exist are dropped, and
    // those that are new are initialized using their
    // [`init`](#state.StateField.init) method, passing in the new
    // configuration object..
    //
    // config::- configuration options
    //
    //   schema:: ?Schema
    //   New schema to use.
    //
    //   plugins:: ?[Plugin]
    //   New set of active plugins.
    EditorState.prototype.reconfigure = function reconfigure(config) {
        var this$1 = this;
        var $config = new Configuration(config.schema || this.schema, config.plugins);
        var fields = $config.fields, instance = new EditorState($config);
        for (var i = 0; i < fields.length; i++) {
            var name = fields[i].name;
            instance[name] = this$1.hasOwnProperty(name) ? this$1[name] : fields[i].init(config, instance);
        }
        return instance;
    };
    // :: (?union<Object<Plugin>, string, number>) → Object
    // Serialize this state to JSON. If you want to serialize the state
    // of plugins, pass an object mapping property names to use in the
    // resulting JSON object to plugin objects. The argument may also be
    // a string or number, in which case it is ignored, to support the
    // way `JSON.stringify` calls `toString` methods.
    EditorState.prototype.toJSON = function toJSON(pluginFields) {
        var this$1 = this;
        var result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
        if (this.storedMarks) {
            result.storedMarks = this.storedMarks.map(function (m) { return m.toJSON(); });
        }
        if (pluginFields && typeof pluginFields == 'object') {
            for (var prop in pluginFields) {
                if (prop == "doc" || prop == "selection") {
                    throw new RangeError("The JSON fields `doc` and `selection` are reserved");
                }
                var plugin = pluginFields[prop], state = plugin.spec.state;
                if (state && state.toJSON) {
                    result[prop] = state.toJSON.call(plugin, this$1[plugin.key]);
                }
            }
        }
        return result;
    };
    // :: (Object, Object, ?Object<Plugin>) → EditorState
    // Deserialize a JSON representation of a state. `config` should
    // have at least a `schema` field, and should contain array of
    // plugins to initialize the state with. `pluginFields` can be used
    // to deserialize the state of plugins, by associating plugin
    // instances with the property names they use in the JSON object.
    //
    // config::- configuration options
    //
    //   schema:: Schema
    //   The schema to use.
    //
    //   plugins:: ?[Plugin]
    //   The set of active plugins.
    EditorState.fromJSON = function fromJSON(config, json, pluginFields) {
        if (!json) {
            throw new RangeError("Invalid input for EditorState.fromJSON");
        }
        if (!config.schema) {
            throw new RangeError("Required config field 'schema' missing");
        }
        var $config = new Configuration(config.schema, config.plugins);
        var instance = new EditorState($config);
        $config.fields.forEach(function (field) {
            if (field.name == "doc") {
                instance.doc = prosemirrorModel.Node.fromJSON(config.schema, json.doc);
            }
            else if (field.name == "selection") {
                instance.selection = Selection.fromJSON(instance.doc, json.selection);
            }
            else if (field.name == "storedMarks") {
                if (json.storedMarks) {
                    instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
                }
            }
            else {
                if (pluginFields) {
                    for (var prop in pluginFields) {
                        var plugin = pluginFields[prop], state = plugin.spec.state;
                        if (plugin.key == field.name && state && state.fromJSON &&
                            Object.prototype.hasOwnProperty.call(json, prop)) {
                            // This field belongs to a plugin mapped to a JSON field, read it from there.
                            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
                            return;
                        }
                    }
                }
                instance[field.name] = field.init(config, instance);
            }
        });
        return instance;
    };
    // Kludge to allow the view to track mappings between different
    // instances of a state.
    EditorState.addApplyListener = function addApplyListener(f) {
        applyListeners.push(f);
    };
    EditorState.removeApplyListener = function removeApplyListener(f) {
        var found = applyListeners.indexOf(f);
        if (found > -1) {
            applyListeners.splice(found, 1);
        }
    };
    Object.defineProperties(EditorState.prototype, prototypeAccessors$1);
    var applyListeners = [];
    // PluginSpec:: interface
    //
    // This is the type passed to the [`Plugin`](#state.Plugin)
    // constructor. It provides a definition for a plugin.
    //
    //   props:: ?EditorProps
    //   The [view props](#view.EditorProps) added by this plugin. Props
    //   that are functions will be bound to have the plugin instance as
    //   their `this` binding.
    //
    //   state:: ?StateField<any>
    //   Allows a plugin to define a [state field](#state.StateField), an
    //   extra slot in the state object in which it can keep its own data.
    //
    //   key:: ?PluginKey
    //   Can be used to make this a keyed plugin. You can have only one
    //   plugin with a given key in a given state, but it is possible to
    //   access the plugin's configuration and state through the key,
    //   without having access to the plugin instance object.
    //
    //   view:: ?(EditorView) → Object
    //   When the plugin needs to interact with the editor view, or
    //   set something up in the DOM, use this field. The function
    //   will be called when the plugin's state is associated with an
    //   editor view.
    //
    //     return::-
    //     Should return an object with the following optional
    //     properties:
    //
    //       update:: ?(view: EditorView, prevState: EditorState)
    //       Called whenever the view's state is updated.
    //
    //       destroy:: ?()
    //       Called when the view is destroyed or receives a state
    //       with different plugins.
    //
    //   filterTransaction:: ?(Transaction, EditorState) → bool
    //   When present, this will be called before a transaction is
    //   applied by the state, allowing the plugin to cancel it (by
    //   returning false).
    //
    //   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction
    //   Allows the plugin to append another transaction to be applied
    //   after the given array of transactions. When another plugin
    //   appends a transaction after this was called, it is called again
    //   with the new state and new transactions—but only the new
    //   transactions, i.e. it won't be passed transactions that it
    //   already saw.
    function bindProps(obj, self, target) {
        for (var prop in obj) {
            var val = obj[prop];
            if (val instanceof Function) {
                val = val.bind(self);
            }
            else if (prop == "handleDOMEvents") {
                val = bindProps(val, self, {});
            }
            target[prop] = val;
        }
        return target;
    }
    // ::- Plugins bundle functionality that can be added to an editor.
    // They are part of the [editor state](#state.EditorState) and
    // may influence that state and the view that contains it.
    var Plugin = function Plugin(spec) {
        // :: EditorProps
        // The [props](#view.EditorProps) exported by this plugin.
        this.props = {};
        if (spec.props) {
            bindProps(spec.props, this, this.props);
        }
        // :: Object
        // The plugin's [spec object](#state.PluginSpec).
        this.spec = spec;
        this.key = spec.key ? spec.key.key : createKey("plugin");
    };
    // :: (EditorState) → any
    // Extract the plugin's state field from an editor state.
    Plugin.prototype.getState = function getState(state) { return state[this.key]; };
    // StateField:: interface<T>
    // A plugin spec may provide a state field (under its
    // [`state`](#state.PluginSpec.state) property) of this type, which
    // describes the state it wants to keep. Functions provided here are
    // always called with the plugin instance as their `this` binding.
    //
    //   init:: (config: Object, instance: EditorState) → T
    //   Initialize the value of the field. `config` will be the object
    //   passed to [`EditorState.create`](#state.EditorState^create). Note
    //   that `instance` is a half-initialized state instance, and will
    //   not have values for plugin fields initialized after this one.
    //
    //   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T
    //   Apply the given transaction to this state field, producing a new
    //   field value. Note that the `newState` argument is again a partially
    //   constructed state does not yet contain the state from plugins
    //   coming after this one.
    //
    //   toJSON:: ?(value: T) → *
    //   Convert this field to JSON. Optional, can be left off to disable
    //   JSON serialization for the field.
    //
    //   fromJSON:: ?(config: Object, value: *, state: EditorState) → T
    //   Deserialize the JSON representation of this field. Note that the
    //   `state` argument is again a half-initialized state.
    var keys = Object.create(null);
    function createKey(name) {
        if (name in keys) {
            return name + "$" + ++keys[name];
        }
        keys[name] = 0;
        return name + "$";
    }
    // ::- A key is used to [tag](#state.PluginSpec.key)
    // plugins in a way that makes it possible to find them, given an
    // editor state. Assigning a key does mean only one plugin of that
    // type can be active in a state.
    var PluginKey = function PluginKey(name) {
        if (name === void 0)
            name = "key";
        this.key = createKey(name);
    };
    // :: (EditorState) → ?Plugin
    // Get the active plugin with this key, if any, from an editor
    // state.
    PluginKey.prototype.get = function get(state) { return state.config.pluginsByKey[this.key]; };
    // :: (EditorState) → ?any
    // Get the plugin's state from an editor state.
    PluginKey.prototype.getState = function getState(state) { return state[this.key]; };
    exports.Selection = Selection;
    exports.SelectionRange = SelectionRange;
    exports.TextSelection = TextSelection;
    exports.NodeSelection = NodeSelection;
    exports.AllSelection = AllSelection;
    exports.Transaction = Transaction;
    exports.EditorState = EditorState;
    exports.Plugin = Plugin;
    exports.PluginKey = PluginKey;
    //# sourceMappingURL=index.js.map
});
define("prosemirror-transform", function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var prosemirrorModel = require('prosemirror-model');
    // Mappable:: interface
    // There are several things that positions can be mapped through.
    // Such objects conform to this interface.
    //
    //   map:: (pos: number, assoc: ?number) → number
    //   Map a position through this object. When given, `assoc` (should
    //   be -1 or 1, defaults to 1) determines with which side the
    //   position is associated, which determines in which direction to
    //   move when a chunk of content is inserted at the mapped position.
    //
    //   mapResult:: (pos: number, assoc: ?number) → MapResult
    //   Map a position, and return an object containing additional
    //   information about the mapping. The result's `deleted` field tells
    //   you whether the position was deleted (completely enclosed in a
    //   replaced range) during the mapping. When content on only one side
    //   is deleted, the position itself is only considered deleted when
    //   `assoc` points in the direction of the deleted content.
    // Recovery values encode a range index and an offset. They are
    // represented as numbers, because tons of them will be created when
    // mapping, for example, a large number of decorations. The number's
    // lower 16 bits provide the index, the remaining bits the offset.
    //
    // Note: We intentionally don't use bit shift operators to en- and
    // decode these, since those clip to 32 bits, which we might in rare
    // cases want to overflow. A 64-bit float can represent 48-bit
    // integers precisely.
    var lower16 = 0xffff;
    var factor16 = Math.pow(2, 16);
    function makeRecover(index, offset) { return index + offset * factor16; }
    function recoverIndex(value) { return value & lower16; }
    function recoverOffset(value) { return (value - (value & lower16)) / factor16; }
    // ::- An object representing a mapped position with extra
    // information.
    var MapResult = function MapResult(pos, deleted, recover) {
        if (deleted === void 0)
            deleted = false;
        if (recover === void 0)
            recover = null;
        // :: number The mapped version of the position.
        this.pos = pos;
        // :: bool Tells you whether the position was deleted, that is,
        // whether the step removed its surroundings from the document.
        this.deleted = deleted;
        this.recover = recover;
    };
    // :: class extends Mappable
    // A map describing the deletions and insertions made by a step, which
    // can be used to find the correspondence between positions in the
    // pre-step version of a document and the same position in the
    // post-step version.
    var StepMap = function StepMap(ranges, inverted) {
        if (inverted === void 0)
            inverted = false;
        this.ranges = ranges;
        this.inverted = inverted;
    };
    StepMap.prototype.recover = function recover(value) {
        var this$1 = this;
        var diff = 0, index = recoverIndex(value);
        if (!this.inverted) {
            for (var i = 0; i < index; i++) {
                diff += this$1.ranges[i * 3 + 2] - this$1.ranges[i * 3 + 1];
            }
        }
        return this.ranges[index * 3] + diff + recoverOffset(value);
    };
    // : (number, ?number) → MapResult
    StepMap.prototype.mapResult = function mapResult(pos, assoc) {
        if (assoc === void 0)
            assoc = 1;
        return this._map(pos, assoc, false);
    };
    // : (number, ?number) → number
    StepMap.prototype.map = function map(pos, assoc) {
        if (assoc === void 0)
            assoc = 1;
        return this._map(pos, assoc, true);
    };
    StepMap.prototype._map = function _map(pos, assoc, simple) {
        var this$1 = this;
        var diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
        for (var i = 0; i < this.ranges.length; i += 3) {
            var start = this$1.ranges[i] - (this$1.inverted ? diff : 0);
            if (start > pos) {
                break;
            }
            var oldSize = this$1.ranges[i + oldIndex], newSize = this$1.ranges[i + newIndex], end = start + oldSize;
            if (pos <= end) {
                var side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
                var result = start + diff + (side < 0 ? 0 : newSize);
                if (simple) {
                    return result;
                }
                var recover = makeRecover(i / 3, pos - start);
                return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover);
            }
            diff += newSize - oldSize;
        }
        return simple ? pos + diff : new MapResult(pos + diff);
    };
    StepMap.prototype.touches = function touches(pos, recover) {
        var this$1 = this;
        var diff = 0, index = recoverIndex(recover);
        var oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
        for (var i = 0; i < this.ranges.length; i += 3) {
            var start = this$1.ranges[i] - (this$1.inverted ? diff : 0);
            if (start > pos) {
                break;
            }
            var oldSize = this$1.ranges[i + oldIndex], end = start + oldSize;
            if (pos <= end && i == index * 3) {
                return true;
            }
            diff += this$1.ranges[i + newIndex] - oldSize;
        }
        return false;
    };
    // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))
    // Calls the given function on each of the changed ranges included in
    // this map.
    StepMap.prototype.forEach = function forEach(f) {
        var this$1 = this;
        var oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
        for (var i = 0, diff = 0; i < this.ranges.length; i += 3) {
            var start = this$1.ranges[i], oldStart = start - (this$1.inverted ? diff : 0), newStart = start + (this$1.inverted ? 0 : diff);
            var oldSize = this$1.ranges[i + oldIndex], newSize = this$1.ranges[i + newIndex];
            f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
            diff += newSize - oldSize;
        }
    };
    // :: () → StepMap
    // Create an inverted version of this map. The result can be used to
    // map positions in the post-step document to the pre-step document.
    StepMap.prototype.invert = function invert() {
        return new StepMap(this.ranges, !this.inverted);
    };
    StepMap.prototype.toString = function toString() {
        return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
    };
    // :: (n: number) → StepMap
    // Create a map that moves all positions by offset `n` (which may be
    // negative). This can be useful when applying steps meant for a
    // sub-document to a larger document, or vice-versa.
    StepMap.offset = function offset(n) {
        return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
    };
    StepMap.empty = new StepMap([]);
    // :: class extends Mappable
    // A mapping represents a pipeline of zero or more [step
    // maps](#transform.StepMap). It has special provisions for losslessly
    // handling mapping positions through a series of steps in which some
    // steps are inverted versions of earlier steps. (This comes up when
    // ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
    // collaboration or history management.)
    var Mapping = function Mapping(maps, mirror, from, to) {
        // :: [StepMap]
        // The step maps in this mapping.
        this.maps = maps || [];
        // :: number
        // The starting position in the `maps` array, used when `map` or
        // `mapResult` is called.
        this.from = from || 0;
        // :: number
        // The end position in the `maps` array.
        this.to = to == null ? this.maps.length : to;
        this.mirror = mirror;
    };
    // :: (?number, ?number) → Mapping
    // Create a mapping that maps only through a part of this one.
    Mapping.prototype.slice = function slice(from, to) {
        if (from === void 0)
            from = 0;
        if (to === void 0)
            to = this.maps.length;
        return new Mapping(this.maps, this.mirror, from, to);
    };
    Mapping.prototype.copy = function copy() {
        return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
    };
    // :: (StepMap, ?number)
    // Add a step map to the end of this mapping. If `mirrors` is
    // given, it should be the index of the step map that is the mirror
    // image of this one.
    Mapping.prototype.appendMap = function appendMap(map, mirrors) {
        this.to = this.maps.push(map);
        if (mirrors != null) {
            this.setMirror(this.maps.length - 1, mirrors);
        }
    };
    // :: (Mapping)
    // Add all the step maps in a given mapping to this one (preserving
    // mirroring information).
    Mapping.prototype.appendMapping = function appendMapping(mapping) {
        var this$1 = this;
        for (var i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
            var mirr = mapping.getMirror(i);
            this$1.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null);
        }
    };
    // :: (number) → ?number
    // Finds the offset of the step map that mirrors the map at the
    // given offset, in this mapping (as per the second argument to
    // `appendMap`).
    Mapping.prototype.getMirror = function getMirror(n) {
        var this$1 = this;
        if (this.mirror) {
            for (var i = 0; i < this.mirror.length; i++) {
                if (this$1.mirror[i] == n) {
                    return this$1.mirror[i + (i % 2 ? -1 : 1)];
                }
            }
        }
    };
    Mapping.prototype.setMirror = function setMirror(n, m) {
        if (!this.mirror) {
            this.mirror = [];
        }
        this.mirror.push(n, m);
    };
    // :: (Mapping)
    // Append the inverse of the given mapping to this one.
    Mapping.prototype.appendMappingInverted = function appendMappingInverted(mapping) {
        var this$1 = this;
        for (var i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
            var mirr = mapping.getMirror(i);
            this$1.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null);
        }
    };
    // () → Mapping
    // Create an inverted version of this mapping.
    Mapping.prototype.invert = function invert() {
        var inverse = new Mapping;
        inverse.appendMappingInverted(this);
        return inverse;
    };
    // : (number, ?number) → number
    // Map a position through this mapping.
    Mapping.prototype.map = function map(pos, assoc) {
        var this$1 = this;
        if (assoc === void 0)
            assoc = 1;
        if (this.mirror) {
            return this._map(pos, assoc, true);
        }
        for (var i = this.from; i < this.to; i++) {
            pos = this$1.maps[i].map(pos, assoc);
        }
        return pos;
    };
    // : (number, ?number) → MapResult
    // Map a position through this mapping, returning a mapping
    // result.
    Mapping.prototype.mapResult = function mapResult(pos, assoc) {
        if (assoc === void 0)
            assoc = 1;
        return this._map(pos, assoc, false);
    };
    Mapping.prototype._map = function _map(pos, assoc, simple) {
        var this$1 = this;
        var deleted = false, recoverables = null;
        for (var i = this.from; i < this.to; i++) {
            var map = this$1.maps[i], rec = recoverables && recoverables[i];
            if (rec != null && map.touches(pos, rec)) {
                pos = map.recover(rec);
                continue;
            }
            var result = map.mapResult(pos, assoc);
            if (result.recover != null) {
                var corr = this$1.getMirror(i);
                if (corr != null && corr > i && corr < this$1.to) {
                    if (result.deleted) {
                        i = corr;
                        pos = this$1.maps[corr].recover(result.recover);
                        continue;
                    }
                    else {
                        (recoverables || (recoverables = Object.create(null)))[corr] = result.recover;
                    }
                }
            }
            if (result.deleted) {
                deleted = true;
            }
            pos = result.pos;
        }
        return simple ? pos : new MapResult(pos, deleted);
    };
    function TransformError(message) {
        var err = Error.call(this, message);
        err.__proto__ = TransformError.prototype;
        return err;
    }
    TransformError.prototype = Object.create(Error.prototype);
    TransformError.prototype.constructor = TransformError;
    TransformError.prototype.name = "TransformError";
    // ::- Abstraction to build up and track an array of
    // [steps](#transform.Step) representing a document transformation.
    //
    // Most transforming methods return the `Transform` object itself, so
    // that they can be chained.
    var Transform = function Transform(doc) {
        // :: Node
        // The current document (the result of applying the steps in the
        // transform).
        this.doc = doc;
        // :: [Step]
        // The steps in this transform.
        this.steps = [];
        // :: [Node]
        // The documents before each of the steps.
        this.docs = [];
        // :: Mapping
        // A mapping with the maps for each of the steps in this transform.
        this.mapping = new Mapping;
    };
    var prototypeAccessors = { before: {}, docChanged: {} };
    // :: Node The starting document.
    prototypeAccessors.before.get = function () { return this.docs.length ? this.docs[0] : this.doc; };
    // :: (step: Step) → this
    // Apply a new step in this transform, saving the result. Throws an
    // error when the step fails.
    Transform.prototype.step = function step(object) {
        var result = this.maybeStep(object);
        if (result.failed) {
            throw new TransformError(result.failed);
        }
        return this;
    };
    // :: (Step) → StepResult
    // Try to apply a step in this transformation, ignoring it if it
    // fails. Returns the step result.
    Transform.prototype.maybeStep = function maybeStep(step) {
        var result = step.apply(this.doc);
        if (!result.failed) {
            this.addStep(step, result.doc);
        }
        return result;
    };
    // :: bool
    // True when the document has been changed (when there are any
    // steps).
    prototypeAccessors.docChanged.get = function () {
        return this.steps.length > 0;
    };
    Transform.prototype.addStep = function addStep(step, doc) {
        this.docs.push(this.doc);
        this.steps.push(step);
        this.mapping.appendMap(step.getMap());
        this.doc = doc;
    };
    Object.defineProperties(Transform.prototype, prototypeAccessors);
    function mustOverride() { throw new Error("Override me"); }
    var stepsByID = Object.create(null);
    // ::- A step object represents an atomic change. It generally applies
    // only to the document it was created for, since the positions
    // stored in it will only make sense for that document.
    //
    // New steps are defined by creating classes that extend `Step`,
    // overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
    // methods, and registering your class with a unique
    // JSON-serialization identifier using
    // [`Step.jsonID`](#transform.Step^jsonID).
    var Step = function Step() { };
    Step.prototype.apply = function apply(_doc) { return mustOverride(); };
    // :: () → StepMap
    // Get the step map that represents the changes made by this step,
    // and which can be used to transform between positions in the old
    // and the new document.
    Step.prototype.getMap = function getMap() { return StepMap.empty; };
    // :: (doc: Node) → Step
    // Create an inverted version of this step. Needs the document as it
    // was before the step as argument.
    Step.prototype.invert = function invert(_doc) { return mustOverride(); };
    // :: (mapping: Mappable) → ?Step
    // Map this step through a mappable thing, returning either a
    // version of that step with its positions adjusted, or `null` if
    // the step was entirely deleted by the mapping.
    Step.prototype.map = function map(_mapping) { return mustOverride(); };
    // :: (other: Step) → ?Step
    // Try to merge this step with another one, to be applied directly
    // after it. Returns the merged step when possible, null if the
    // steps can't be merged.
    Step.prototype.merge = function merge(_other) { return null; };
    // :: () → Object
    // Create a JSON-serializeable representation of this step. When
    // defining this for a custom subclass, make sure the result object
    // includes the step type's [JSON id](#transform.Step^jsonID) under
    // the `stepType` property.
    Step.prototype.toJSON = function toJSON() { return mustOverride(); };
    // :: (Schema, Object) → Step
    // Deserialize a step from its JSON representation. Will call
    // through to the step class' own implementation of this method.
    Step.fromJSON = function fromJSON(schema, json) {
        if (!json || !json.stepType) {
            throw new RangeError("Invalid input for Step.fromJSON");
        }
        var type = stepsByID[json.stepType];
        if (!type) {
            throw new RangeError(("No step type " + (json.stepType) + " defined"));
        }
        return type.fromJSON(schema, json);
    };
    // :: (string, constructor<Step>)
    // To be able to serialize steps to JSON, each step needs a string
    // ID to attach to its JSON representation. Use this method to
    // register an ID for your step classes. Try to pick something
    // that's unlikely to clash with steps from other modules.
    Step.jsonID = function jsonID(id, stepClass) {
        if (id in stepsByID) {
            throw new RangeError("Duplicate use of step JSON ID " + id);
        }
        stepsByID[id] = stepClass;
        stepClass.prototype.jsonID = id;
        return stepClass;
    };
    // ::- The result of [applying](#transform.Step.apply) a step. Contains either a
    // new document or a failure value.
    var StepResult = function StepResult(doc, failed) {
        // :: ?Node The transformed document.
        this.doc = doc;
        // :: ?string Text providing information about a failed step.
        this.failed = failed;
    };
    // :: (Node) → StepResult
    // Create a successful step result.
    StepResult.ok = function ok(doc) { return new StepResult(doc, null); };
    // :: (string) → StepResult
    // Create a failed step result.
    StepResult.fail = function fail(message) { return new StepResult(null, message); };
    // :: (Node, number, number, Slice) → StepResult
    // Call [`Node.replace`](#model.Node.replace) with the given
    // arguments. Create a successful result if it succeeds, and a
    // failed one if it throws a `ReplaceError`.
    StepResult.fromReplace = function fromReplace(doc, from, to, slice) {
        try {
            return StepResult.ok(doc.replace(from, to, slice));
        }
        catch (e) {
            if (e instanceof prosemirrorModel.ReplaceError) {
                return StepResult.fail(e.message);
            }
            throw e;
        }
    };
    // ::- Replace a part of the document with a slice of new content.
    var ReplaceStep = (function (Step$$1) {
        function ReplaceStep(from, to, slice, structure) {
            Step$$1.call(this);
            this.from = from;
            this.to = to;
            this.slice = slice;
            this.structure = !!structure;
        }
        if (Step$$1)
            ReplaceStep.__proto__ = Step$$1;
        ReplaceStep.prototype = Object.create(Step$$1 && Step$$1.prototype);
        ReplaceStep.prototype.constructor = ReplaceStep;
        ReplaceStep.prototype.apply = function apply(doc) {
            if (this.structure && contentBetween(doc, this.from, this.to)) {
                return StepResult.fail("Structure replace would overwrite content");
            }
            return StepResult.fromReplace(doc, this.from, this.to, this.slice);
        };
        ReplaceStep.prototype.getMap = function getMap() {
            return new StepMap([this.from, this.to - this.from, this.slice.size]);
        };
        ReplaceStep.prototype.invert = function invert(doc) {
            return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
        };
        ReplaceStep.prototype.map = function map(mapping) {
            var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deleted && to.deleted) {
                return null;
            }
            return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
        };
        ReplaceStep.prototype.merge = function merge(other) {
            if (!(other instanceof ReplaceStep) || other.structure != this.structure) {
                return null;
            }
            if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
                var slice = this.slice.size + other.slice.size == 0 ? prosemirrorModel.Slice.empty
                    : new prosemirrorModel.Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
                return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);
            }
            else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
                var slice$1 = this.slice.size + other.slice.size == 0 ? prosemirrorModel.Slice.empty
                    : new prosemirrorModel.Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
                return new ReplaceStep(other.from, this.to, slice$1, this.structure);
            }
            else {
                return null;
            }
        };
        ReplaceStep.prototype.toJSON = function toJSON() {
            var json = { stepType: "replace", from: this.from, to: this.to };
            if (this.slice.size) {
                json.slice = this.slice.toJSON();
            }
            if (this.structure) {
                json.structure = true;
            }
            return json;
        };
        ReplaceStep.fromJSON = function fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number") {
                throw new RangeError("Invalid input for ReplaceStep.fromJSON");
            }
            return new ReplaceStep(json.from, json.to, prosemirrorModel.Slice.fromJSON(schema, json.slice), !!json.structure);
        };
        return ReplaceStep;
    }(Step));
    Step.jsonID("replace", ReplaceStep);
    // ::- Replace a part of the document with a slice of content, but
    // preserve a range of the replaced content by moving it into the
    // slice.
    var ReplaceAroundStep = (function (Step$$1) {
        function ReplaceAroundStep(from, to, gapFrom, gapTo, slice, insert, structure) {
            Step$$1.call(this);
            this.from = from;
            this.to = to;
            this.gapFrom = gapFrom;
            this.gapTo = gapTo;
            this.slice = slice;
            this.insert = insert;
            this.structure = !!structure;
        }
        if (Step$$1)
            ReplaceAroundStep.__proto__ = Step$$1;
        ReplaceAroundStep.prototype = Object.create(Step$$1 && Step$$1.prototype);
        ReplaceAroundStep.prototype.constructor = ReplaceAroundStep;
        ReplaceAroundStep.prototype.apply = function apply(doc) {
            if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
                contentBetween(doc, this.gapTo, this.to))) {
                return StepResult.fail("Structure gap-replace would overwrite content");
            }
            var gap = doc.slice(this.gapFrom, this.gapTo);
            if (gap.openStart || gap.openEnd) {
                return StepResult.fail("Gap is not a flat range");
            }
            var inserted = this.slice.insertAt(this.insert, gap.content);
            if (!inserted) {
                return StepResult.fail("Content does not fit in gap");
            }
            return StepResult.fromReplace(doc, this.from, this.to, inserted);
        };
        ReplaceAroundStep.prototype.getMap = function getMap() {
            return new StepMap([this.from, this.gapFrom - this.from, this.insert,
                this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
        };
        ReplaceAroundStep.prototype.invert = function invert(doc) {
            var gap = this.gapTo - this.gapFrom;
            return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
        };
        ReplaceAroundStep.prototype.map = function map(mapping) {
            var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            var gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
            if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) {
                return null;
            }
            return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
        };
        ReplaceAroundStep.prototype.toJSON = function toJSON() {
            var json = { stepType: "replaceAround", from: this.from, to: this.to,
                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };
            if (this.slice.size) {
                json.slice = this.slice.toJSON();
            }
            if (this.structure) {
                json.structure = true;
            }
            return json;
        };
        ReplaceAroundStep.fromJSON = function fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number" ||
                typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number") {
                throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
            }
            return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, prosemirrorModel.Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
        };
        return ReplaceAroundStep;
    }(Step));
    Step.jsonID("replaceAround", ReplaceAroundStep);
    function contentBetween(doc, from, to) {
        var $from = doc.resolve(from), dist = to - from, depth = $from.depth;
        while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
            depth--;
            dist--;
        }
        if (dist > 0) {
            var next = $from.node(depth).maybeChild($from.indexAfter(depth));
            while (dist > 0) {
                if (!next || next.isLeaf) {
                    return true;
                }
                next = next.firstChild;
                dist--;
            }
        }
        return false;
    }
    function canCut(node, start, end) {
        return (start == 0 || node.canReplace(start, node.childCount)) &&
            (end == node.childCount || node.canReplace(0, end));
    }
    // :: (NodeRange) → ?number
    // Try to find a target depth to which the content in the given range
    // can be lifted. Will not go across
    // [isolating](#model.NodeSpec.isolating) parent nodes.
    function liftTarget(range) {
        var parent = range.parent;
        var content = parent.content.cutByIndex(range.startIndex, range.endIndex);
        for (var depth = range.depth;; --depth) {
            var node = range.$from.node(depth);
            var index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
            if (depth < range.depth && node.canReplace(index, endIndex, content)) {
                return depth;
            }
            if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) {
                break;
            }
        }
    }
    // :: (NodeRange, number) → this
    // Split the content in the given range off from its parent, if there
    // is sibling content before or after it, and move it up the tree to
    // the depth specified by `target`. You'll probably want to use
    // [`liftTarget`](#transform.liftTarget) to compute `target`, to make
    // sure the lift is valid.
    Transform.prototype.lift = function (range, target) {
        var $from = range.$from;
        var $to = range.$to;
        var depth = range.depth;
        var gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
        var start = gapStart, end = gapEnd;
        var before = prosemirrorModel.Fragment.empty, openStart = 0;
        for (var d = depth, splitting = false; d > target; d--) {
            if (splitting || $from.index(d) > 0) {
                splitting = true;
                before = prosemirrorModel.Fragment.from($from.node(d).copy(before));
                openStart++;
            }
            else {
                start--;
            }
        }
        var after = prosemirrorModel.Fragment.empty, openEnd = 0;
        for (var d$1 = depth, splitting$1 = false; d$1 > target; d$1--) {
            if (splitting$1 || $to.after(d$1 + 1) < $to.end(d$1)) {
                splitting$1 = true;
                after = prosemirrorModel.Fragment.from($to.node(d$1).copy(after));
                openEnd++;
            }
            else {
                end++;
            }
        }
        return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new prosemirrorModel.Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
    };
    // :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]
    // Try to find a valid way to wrap the content in the given range in a
    // node of the given type. May introduce extra nodes around and inside
    // the wrapper node, if necessary. Returns null if no valid wrapping
    // could be found. When `innerRange` is given, that range's content is
    // used as the content to fit into the wrapping, instead of the
    // content of `range`.
    function findWrapping(range, nodeType, attrs, innerRange) {
        if (innerRange === void 0)
            innerRange = range;
        var around = findWrappingOutside(range, nodeType);
        var inner = around && findWrappingInside(innerRange, nodeType);
        if (!inner) {
            return null;
        }
        return around.map(withAttrs).concat({ type: nodeType, attrs: attrs }).concat(inner.map(withAttrs));
    }
    function withAttrs(type) { return { type: type, attrs: null }; }
    function findWrappingOutside(range, type) {
        var parent = range.parent;
        var startIndex = range.startIndex;
        var endIndex = range.endIndex;
        var around = parent.contentMatchAt(startIndex).findWrapping(type);
        if (!around) {
            return null;
        }
        var outer = around.length ? around[0] : type;
        return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
    }
    function findWrappingInside(range, type) {
        var parent = range.parent;
        var startIndex = range.startIndex;
        var endIndex = range.endIndex;
        var inner = parent.child(startIndex);
        var inside = type.contentMatch.findWrapping(inner.type);
        if (!inside) {
            return null;
        }
        var lastType = inside.length ? inside[inside.length - 1] : type;
        var innerMatch = lastType.contentMatch;
        for (var i = startIndex; innerMatch && i < endIndex; i++) {
            innerMatch = innerMatch.matchType(parent.child(i).type);
        }
        if (!innerMatch || !innerMatch.validEnd) {
            return null;
        }
        return inside;
    }
    // :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this
    // Wrap the given [range](#model.NodeRange) in the given set of wrappers.
    // The wrappers are assumed to be valid in this position, and should
    // probably be computed with [`findWrapping`](#transform.findWrapping).
    Transform.prototype.wrap = function (range, wrappers) {
        var content = prosemirrorModel.Fragment.empty;
        for (var i = wrappers.length - 1; i >= 0; i--) {
            content = prosemirrorModel.Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
        }
        var start = range.start, end = range.end;
        return this.step(new ReplaceAroundStep(start, end, start, end, new prosemirrorModel.Slice(content, 0, 0), wrappers.length, true));
    };
    // :: (number, ?number, NodeType, ?Object) → this
    // Set the type of all textblocks (partly) between `from` and `to` to
    // the given node type with the given attributes.
    Transform.prototype.setBlockType = function (from, to, type, attrs) {
        var this$1 = this;
        if (to === void 0)
            to = from;
        if (!type.isTextblock) {
            throw new RangeError("Type given to setBlockType should be a textblock");
        }
        var mapFrom = this.steps.length;
        this.doc.nodesBetween(from, to, function (node, pos) {
            if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this$1.doc, this$1.mapping.slice(mapFrom).map(pos), type)) {
                // Ensure all markup that isn't allowed in the new node type is cleared
                this$1.clearIncompatible(this$1.mapping.slice(mapFrom).map(pos, 1), type);
                var mapping = this$1.mapping.slice(mapFrom);
                var startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
                this$1.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
                return false;
            }
        });
        return this;
    };
    function canChangeType(doc, pos, type) {
        var $pos = doc.resolve(pos), index = $pos.index();
        return $pos.parent.canReplaceWith(index, index + 1, type);
    }
    // :: (number, ?NodeType, ?Object, ?[Mark]) → this
    // Change the type, attributes, and/or marks of the node at `pos`.
    // When `type` isn't given, the existing node type is preserved,
    Transform.prototype.setNodeMarkup = function (pos, type, attrs, marks) {
        var node = this.doc.nodeAt(pos);
        if (!node) {
            throw new RangeError("No node at given position");
        }
        if (!type) {
            type = node.type;
        }
        var newNode = type.create(attrs, null, marks || node.marks);
        if (node.isLeaf) {
            return this.replaceWith(pos, pos + node.nodeSize, newNode);
        }
        if (!type.validContent(node.content)) {
            throw new RangeError("Invalid content for node type " + type.name);
        }
        return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(newNode), 0, 0), 1, true));
    };
    // :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool
    // Check whether splitting at the given position is allowed.
    function canSplit(doc, pos, depth, typesAfter) {
        if (depth === void 0)
            depth = 1;
        var $pos = doc.resolve(pos), base = $pos.depth - depth;
        var innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
        if (base < 0 || $pos.parent.type.spec.isolating ||
            !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
            !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount))) {
            return false;
        }
        for (var d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
            var node = $pos.node(d), index$1 = $pos.index(d);
            if (node.type.spec.isolating) {
                return false;
            }
            var rest = node.content.cutByIndex(index$1, node.childCount);
            var after = (typesAfter && typesAfter[i]) || node;
            if (after != node) {
                rest = rest.replaceChild(0, after.type.create(after.attrs));
            }
            if (!node.canReplace(index$1 + 1, node.childCount) || !after.type.validContent(rest)) {
                return false;
            }
        }
        var index = $pos.indexAfter(base);
        var baseType = typesAfter && typesAfter[0];
        return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);
    }
    // :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this
    // Split the node at the given position, and optionally, if `depth` is
    // greater than one, any number of nodes above that. By default, the
    // parts split off will inherit the node type of the original node.
    // This can be changed by passing an array of types and attributes to
    // use after the split.
    Transform.prototype.split = function (pos, depth, typesAfter) {
        if (depth === void 0)
            depth = 1;
        var $pos = this.doc.resolve(pos), before = prosemirrorModel.Fragment.empty, after = prosemirrorModel.Fragment.empty;
        for (var d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
            before = prosemirrorModel.Fragment.from($pos.node(d).copy(before));
            var typeAfter = typesAfter && typesAfter[i];
            after = prosemirrorModel.Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
        }
        return this.step(new ReplaceStep(pos, pos, new prosemirrorModel.Slice(before.append(after), depth, depth, true)));
    };
    // :: (Node, number) → bool
    // Test whether the blocks before and after a given position can be
    // joined.
    function canJoin(doc, pos) {
        var $pos = doc.resolve(pos), index = $pos.index();
        return joinable($pos.nodeBefore, $pos.nodeAfter) &&
            $pos.parent.canReplace(index, index + 1);
    }
    function joinable(a, b) {
        return a && b && !a.isLeaf && a.canAppend(b);
    }
    // :: (Node, number, ?number) → ?number
    // Find an ancestor of the given position that can be joined to the
    // block before (or after if `dir` is positive). Returns the joinable
    // point, if any.
    function joinPoint(doc, pos, dir) {
        if (dir === void 0)
            dir = -1;
        var $pos = doc.resolve(pos);
        for (var d = $pos.depth;; d--) {
            var before = (void 0), after = (void 0);
            if (d == $pos.depth) {
                before = $pos.nodeBefore;
                after = $pos.nodeAfter;
            }
            else if (dir > 0) {
                before = $pos.node(d + 1);
                after = $pos.node(d).maybeChild($pos.index(d) + 1);
            }
            else {
                before = $pos.node(d).maybeChild($pos.index(d) - 1);
                after = $pos.node(d + 1);
            }
            if (before && !before.isTextblock && joinable(before, after)) {
                return pos;
            }
            if (d == 0) {
                break;
            }
            pos = dir < 0 ? $pos.before(d) : $pos.after(d);
        }
    }
    // :: (number, ?number) → this
    // Join the blocks around the given position. If depth is 2, their
    // last and first siblings are also joined, and so on.
    Transform.prototype.join = function (pos, depth) {
        if (depth === void 0)
            depth = 1;
        var step = new ReplaceStep(pos - depth, pos + depth, prosemirrorModel.Slice.empty, true);
        return this.step(step);
    };
    // :: (Node, number, NodeType) → ?number
    // Try to find a point where a node of the given type can be inserted
    // near `pos`, by searching up the node hierarchy when `pos` itself
    // isn't a valid place but is at the start or end of a node. Return
    // null if no position was found.
    function insertPoint(doc, pos, nodeType) {
        var $pos = doc.resolve(pos);
        if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) {
            return pos;
        }
        if ($pos.parentOffset == 0) {
            for (var d = $pos.depth - 1; d >= 0; d--) {
                var index = $pos.index(d);
                if ($pos.node(d).canReplaceWith(index, index, nodeType)) {
                    return $pos.before(d + 1);
                }
                if (index > 0) {
                    return null;
                }
            }
        }
        if ($pos.parentOffset == $pos.parent.content.size) {
            for (var d$1 = $pos.depth - 1; d$1 >= 0; d$1--) {
                var index$1 = $pos.indexAfter(d$1);
                if ($pos.node(d$1).canReplaceWith(index$1, index$1, nodeType)) {
                    return $pos.after(d$1 + 1);
                }
                if (index$1 < $pos.node(d$1).childCount) {
                    return null;
                }
            }
        }
    }
    // :: (Node, number, Slice) → ?number
    // Finds a position at or around the given position where the given
    // slice can be inserted. Will look at parent nodes' nearest boundary
    // and try there, even if the original position wasn't directly at the
    // start or end of that node. Returns null when no position was found.
    function dropPoint(doc, pos, slice) {
        var $pos = doc.resolve(pos);
        if (!slice.content.size) {
            return pos;
        }
        var content = slice.content;
        for (var i = 0; i < slice.openStart; i++) {
            content = content.firstChild.content;
        }
        for (var pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
            for (var d = $pos.depth; d >= 0; d--) {
                var bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
                var insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
                if (pass == 1
                    ? $pos.node(d).canReplace(insertPos, insertPos, content)
                    : $pos.node(d).contentMatchAt(insertPos).findWrapping(content.firstChild.type)) {
                    return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
                }
            }
        }
        return null;
    }
    function mapFragment(fragment, f, parent) {
        var mapped = [];
        for (var i = 0; i < fragment.childCount; i++) {
            var child = fragment.child(i);
            if (child.content.size) {
                child = child.copy(mapFragment(child.content, f, child));
            }
            if (child.isInline) {
                child = f(child, parent, i);
            }
            mapped.push(child);
        }
        return prosemirrorModel.Fragment.fromArray(mapped);
    }
    // ::- Add a mark to all inline content between two positions.
    var AddMarkStep = (function (Step$$1) {
        function AddMarkStep(from, to, mark) {
            Step$$1.call(this);
            this.from = from;
            this.to = to;
            this.mark = mark;
        }
        if (Step$$1)
            AddMarkStep.__proto__ = Step$$1;
        AddMarkStep.prototype = Object.create(Step$$1 && Step$$1.prototype);
        AddMarkStep.prototype.constructor = AddMarkStep;
        AddMarkStep.prototype.apply = function apply(doc) {
            var this$1 = this;
            var oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
            var parent = $from.node($from.sharedDepth(this.to));
            var slice = new prosemirrorModel.Slice(mapFragment(oldSlice.content, function (node, parent) {
                if (!parent.type.allowsMarkType(this$1.mark.type)) {
                    return node;
                }
                return node.mark(this$1.mark.addToSet(node.marks));
            }, parent), oldSlice.openStart, oldSlice.openEnd);
            return StepResult.fromReplace(doc, this.from, this.to, slice);
        };
        AddMarkStep.prototype.invert = function invert() {
            return new RemoveMarkStep(this.from, this.to, this.mark);
        };
        AddMarkStep.prototype.map = function map(mapping) {
            var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deleted && to.deleted || from.pos >= to.pos) {
                return null;
            }
            return new AddMarkStep(from.pos, to.pos, this.mark);
        };
        AddMarkStep.prototype.merge = function merge(other) {
            if (other instanceof AddMarkStep &&
                other.mark.eq(this.mark) &&
                this.from <= other.to && this.to >= other.from) {
                return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
            }
        };
        AddMarkStep.prototype.toJSON = function toJSON() {
            return { stepType: "addMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to };
        };
        AddMarkStep.fromJSON = function fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number") {
                throw new RangeError("Invalid input for AddMarkStep.fromJSON");
            }
            return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
        };
        return AddMarkStep;
    }(Step));
    Step.jsonID("addMark", AddMarkStep);
    // ::- Remove a mark from all inline content between two positions.
    var RemoveMarkStep = (function (Step$$1) {
        function RemoveMarkStep(from, to, mark) {
            Step$$1.call(this);
            this.from = from;
            this.to = to;
            this.mark = mark;
        }
        if (Step$$1)
            RemoveMarkStep.__proto__ = Step$$1;
        RemoveMarkStep.prototype = Object.create(Step$$1 && Step$$1.prototype);
        RemoveMarkStep.prototype.constructor = RemoveMarkStep;
        RemoveMarkStep.prototype.apply = function apply(doc) {
            var this$1 = this;
            var oldSlice = doc.slice(this.from, this.to);
            var slice = new prosemirrorModel.Slice(mapFragment(oldSlice.content, function (node) {
                return node.mark(this$1.mark.removeFromSet(node.marks));
            }), oldSlice.openStart, oldSlice.openEnd);
            return StepResult.fromReplace(doc, this.from, this.to, slice);
        };
        RemoveMarkStep.prototype.invert = function invert() {
            return new AddMarkStep(this.from, this.to, this.mark);
        };
        RemoveMarkStep.prototype.map = function map(mapping) {
            var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deleted && to.deleted || from.pos >= to.pos) {
                return null;
            }
            return new RemoveMarkStep(from.pos, to.pos, this.mark);
        };
        RemoveMarkStep.prototype.merge = function merge(other) {
            if (other instanceof RemoveMarkStep &&
                other.mark.eq(this.mark) &&
                this.from <= other.to && this.to >= other.from) {
                return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
            }
        };
        RemoveMarkStep.prototype.toJSON = function toJSON() {
            return { stepType: "removeMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to };
        };
        RemoveMarkStep.fromJSON = function fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number") {
                throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
            }
            return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
        };
        return RemoveMarkStep;
    }(Step));
    Step.jsonID("removeMark", RemoveMarkStep);
    // :: (number, number, Mark) → this
    // Add the given mark to the inline content between `from` and `to`.
    Transform.prototype.addMark = function (from, to, mark) {
        var this$1 = this;
        var removed = [], added = [], removing = null, adding = null;
        this.doc.nodesBetween(from, to, function (node, pos, parent) {
            if (!node.isInline) {
                return;
            }
            var marks = node.marks;
            if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
                var start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
                var newSet = mark.addToSet(marks);
                for (var i = 0; i < marks.length; i++) {
                    if (!marks[i].isInSet(newSet)) {
                        if (removing && removing.to == start && removing.mark.eq(marks[i])) {
                            removing.to = end;
                        }
                        else {
                            removed.push(removing = new RemoveMarkStep(start, end, marks[i]));
                        }
                    }
                }
                if (adding && adding.to == start) {
                    adding.to = end;
                }
                else {
                    added.push(adding = new AddMarkStep(start, end, mark));
                }
            }
        });
        removed.forEach(function (s) { return this$1.step(s); });
        added.forEach(function (s) { return this$1.step(s); });
        return this;
    };
    // :: (number, number, ?union<Mark, MarkType>) → this
    // Remove marks from inline nodes between `from` and `to`. When `mark`
    // is a single mark, remove precisely that mark. When it is a mark type,
    // remove all marks of that type. When it is null, remove all marks of
    // any type.
    Transform.prototype.removeMark = function (from, to, mark) {
        var this$1 = this;
        if (mark === void 0)
            mark = null;
        var matched = [], step = 0;
        this.doc.nodesBetween(from, to, function (node, pos) {
            if (!node.isInline) {
                return;
            }
            step++;
            var toRemove = null;
            if (mark instanceof prosemirrorModel.MarkType) {
                var found = mark.isInSet(node.marks);
                if (found) {
                    toRemove = [found];
                }
            }
            else if (mark) {
                if (mark.isInSet(node.marks)) {
                    toRemove = [mark];
                }
            }
            else {
                toRemove = node.marks;
            }
            if (toRemove && toRemove.length) {
                var end = Math.min(pos + node.nodeSize, to);
                for (var i = 0; i < toRemove.length; i++) {
                    var style = toRemove[i], found$1 = (void 0);
                    for (var j = 0; j < matched.length; j++) {
                        var m = matched[j];
                        if (m.step == step - 1 && style.eq(matched[j].style)) {
                            found$1 = m;
                        }
                    }
                    if (found$1) {
                        found$1.to = end;
                        found$1.step = step;
                    }
                    else {
                        matched.push({ style: style, from: Math.max(pos, from), to: end, step: step });
                    }
                }
            }
        });
        matched.forEach(function (m) { return this$1.step(new RemoveMarkStep(m.from, m.to, m.style)); });
        return this;
    };
    // :: (number, NodeType, ?ContentMatch) → this
    // Removes all marks and nodes from the content of the node at `pos`
    // that don't match the given new parent node type. Accepts an
    // optional starting [content match](#model.ContentMatch) as third
    // argument.
    Transform.prototype.clearIncompatible = function (pos, parentType, match) {
        var this$1 = this;
        if (match === void 0)
            match = parentType.contentMatch;
        var node = this.doc.nodeAt(pos);
        var delSteps = [], cur = pos + 1;
        for (var i = 0; i < node.childCount; i++) {
            var child = node.child(i), end = cur + child.nodeSize;
            var allowed = match.matchType(child.type, child.attrs);
            if (!allowed) {
                delSteps.push(new ReplaceStep(cur, end, prosemirrorModel.Slice.empty));
            }
            else {
                match = allowed;
                for (var j = 0; j < child.marks.length; j++) {
                    if (!parentType.allowsMarkType(child.marks[j].type)) {
                        this$1.step(new RemoveMarkStep(cur, end, child.marks[j]));
                    }
                }
            }
            cur = end;
        }
        if (!match.validEnd) {
            var fill = match.fillBefore(prosemirrorModel.Fragment.empty, true);
            this.replace(cur, cur, new prosemirrorModel.Slice(fill, 0, 0));
        }
        for (var i$1 = delSteps.length - 1; i$1 >= 0; i$1--) {
            this$1.step(delSteps[i$1]);
        }
        return this;
    };
    // :: (Node, number, ?number, ?Slice) → ?Step
    // ‘Fit’ a slice into a given position in the document, producing a
    // [step](#transform.Step) that inserts it. Will return null if
    // there's no meaningful way to insert the slice here, or inserting it
    // would be a no-op (an empty slice over an empty range).
    function replaceStep(doc, from, to, slice) {
        if (to === void 0)
            to = from;
        if (slice === void 0)
            slice = prosemirrorModel.Slice.empty;
        if (from == to && !slice.size) {
            return null;
        }
        var $from = doc.resolve(from), $to = doc.resolve(to);
        // Optimization -- avoid work if it's obvious that it's not needed.
        if (fitsTrivially($from, $to, slice)) {
            return new ReplaceStep(from, to, slice);
        }
        var placed = placeSlice($from, slice);
        var fittedLeft = fitLeft($from, placed);
        var fitted = fitRight($from, $to, fittedLeft);
        if (!fitted) {
            return null;
        }
        if (fittedLeft.size != fitted.size && canMoveText($from, $to, fittedLeft)) {
            var d = $to.depth, after = $to.after(d);
            while (d > 1 && after == $to.end(--d)) {
                ++after;
            }
            var fittedAfter = fitRight($from, doc.resolve(after), fittedLeft);
            if (fittedAfter) {
                return new ReplaceAroundStep(from, after, to, $to.end(), fittedAfter, fittedLeft.size);
            }
        }
        return fitted.size || from != to ? new ReplaceStep(from, to, fitted) : null;
    }
    // :: (number, ?number, ?Slice) → this
    // Replace the part of the document between `from` and `to` with the
    // given `slice`.
    Transform.prototype.replace = function (from, to, slice) {
        if (to === void 0)
            to = from;
        if (slice === void 0)
            slice = prosemirrorModel.Slice.empty;
        var step = replaceStep(this.doc, from, to, slice);
        if (step) {
            this.step(step);
        }
        return this;
    };
    // :: (number, number, union<Fragment, Node, [Node]>) → this
    // Replace the given range with the given content, which may be a
    // fragment, node, or array of nodes.
    Transform.prototype.replaceWith = function (from, to, content) {
        return this.replace(from, to, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(content), 0, 0));
    };
    // :: (number, number) → this
    // Delete the content between the given positions.
    Transform.prototype.delete = function (from, to) {
        return this.replace(from, to, prosemirrorModel.Slice.empty);
    };
    // :: (number, union<Fragment, Node, [Node]>) → this
    // Insert the given content at the given position.
    Transform.prototype.insert = function (pos, content) {
        return this.replaceWith(pos, pos, content);
    };
    function fitLeftInner($from, depth, placed, placedBelow) {
        var content = prosemirrorModel.Fragment.empty, openEnd = 0, placedHere = placed[depth];
        if ($from.depth > depth) {
            var inner = fitLeftInner($from, depth + 1, placed, placedBelow || placedHere);
            openEnd = inner.openEnd + 1;
            content = prosemirrorModel.Fragment.from($from.node(depth + 1).copy(inner.content));
        }
        if (placedHere) {
            content = content.append(placedHere.content);
            openEnd = placedHere.openEnd;
        }
        if (placedBelow) {
            content = content.append($from.node(depth).contentMatchAt($from.indexAfter(depth)).fillBefore(prosemirrorModel.Fragment.empty, true));
            openEnd = 0;
        }
        return { content: content, openEnd: openEnd };
    }
    function fitLeft($from, placed) {
        var ref = fitLeftInner($from, 0, placed, false);
        var content = ref.content;
        var openEnd = ref.openEnd;
        return new prosemirrorModel.Slice(content, $from.depth, openEnd || 0);
    }
    function fitRightJoin(content, parent, $from, $to, depth, openStart, openEnd) {
        var match, count = content.childCount, matchCount = count - (openEnd > 0 ? 1 : 0);
        var parentNode = openStart < 0 ? parent : $from.node(depth);
        if (openStart < 0) {
            match = parentNode.contentMatchAt(matchCount);
        }
        else if (count == 1 && openEnd > 0) {
            match = parentNode.contentMatchAt(openStart ? $from.index(depth) : $from.indexAfter(depth));
        }
        else {
            match = parentNode.contentMatchAt($from.indexAfter(depth))
                .matchFragment(content, count > 0 && openStart ? 1 : 0, matchCount);
        }
        var toNode = $to.node(depth);
        if (openEnd > 0 && depth < $to.depth) {
            var after = toNode.content.cutByIndex($to.indexAfter(depth)).addToStart(content.lastChild);
            var joinable$1 = match.fillBefore(after, true);
            // Can't insert content if there's a single node stretched across this gap
            if (joinable$1 && joinable$1.size && openStart > 0 && count == 1) {
                joinable$1 = null;
            }
            if (joinable$1) {
                var inner = fitRightJoin(content.lastChild.content, content.lastChild, $from, $to, depth + 1, count == 1 ? openStart - 1 : -1, openEnd - 1);
                if (inner) {
                    var last = content.lastChild.copy(inner);
                    if (joinable$1.size) {
                        return content.cutByIndex(0, count - 1).append(joinable$1).addToEnd(last);
                    }
                    else {
                        return content.replaceChild(count - 1, last);
                    }
                }
            }
        }
        if (openEnd > 0) {
            match = match.matchType((count == 1 && openStart > 0 ? $from.node(depth + 1) : content.lastChild).type);
        }
        // If we're here, the next level can't be joined, so we see what
        // happens if we leave it open.
        var toIndex = $to.index(depth);
        if (toIndex == toNode.childCount && !toNode.type.compatibleContent(parent.type)) {
            return null;
        }
        var joinable = match.fillBefore(toNode.content, true, toIndex);
        for (var i = toIndex; joinable && i < toNode.content.childCount; i++) {
            if (!parentNode.type.allowsMarks(toNode.content.child(i).marks)) {
                joinable = null;
            }
        }
        if (!joinable) {
            return null;
        }
        if (openEnd > 0) {
            var closed = fitRightClosed(content.lastChild, openEnd - 1, $from, depth + 1, count == 1 ? openStart - 1 : -1);
            content = content.replaceChild(count - 1, closed);
        }
        content = content.append(joinable);
        if ($to.depth > depth) {
            content = content.addToEnd(fitRightSeparate($to, depth + 1));
        }
        return content;
    }
    function fitRightClosed(node, openEnd, $from, depth, openStart) {
        var match, content = node.content, count = content.childCount;
        if (openStart >= 0) {
            match = $from.node(depth).contentMatchAt($from.indexAfter(depth))
                .matchFragment(content, openStart > 0 ? 1 : 0, count);
        }
        else {
            match = node.contentMatchAt(count);
        }
        if (openEnd > 0) {
            var closed = fitRightClosed(content.lastChild, openEnd - 1, $from, depth + 1, count == 1 ? openStart - 1 : -1);
            content = content.replaceChild(count - 1, closed);
        }
        return node.copy(content.append(match.fillBefore(prosemirrorModel.Fragment.empty, true)));
    }
    function fitRightSeparate($to, depth) {
        var node = $to.node(depth);
        var fill = node.contentMatchAt(0).fillBefore(node.content, true, $to.index(depth));
        if ($to.depth > depth) {
            fill = fill.addToEnd(fitRightSeparate($to, depth + 1));
        }
        return node.copy(fill);
    }
    function normalizeSlice(content, openStart, openEnd) {
        while (openStart > 0 && openEnd > 0 && content.childCount == 1) {
            content = content.firstChild.content;
            openStart--;
            openEnd--;
        }
        return new prosemirrorModel.Slice(content, openStart, openEnd);
    }
    // : (ResolvedPos, ResolvedPos, number, Slice) → Slice
    function fitRight($from, $to, slice) {
        var fitted = fitRightJoin(slice.content, $from.node(0), $from, $to, 0, slice.openStart, slice.openEnd);
        if (!fitted) {
            return null;
        }
        return normalizeSlice(fitted, slice.openStart, $to.depth);
    }
    function fitsTrivially($from, $to, slice) {
        return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
            $from.parent.canReplace($from.index(), $to.index(), slice.content);
    }
    function canMoveText($from, $to, slice) {
        if (!$to.parent.isTextblock) {
            return false;
        }
        var parent = slice.openEnd ? nodeRight(slice.content, slice.openEnd)
            : $from.node($from.depth - (slice.openStart - slice.openEnd));
        if (!parent.isTextblock) {
            return false;
        }
        for (var i = $to.index(); i < $to.parent.childCount; i++) {
            if (!parent.type.allowsMarks($to.parent.child(i).marks)) {
                return false;
            }
        }
        var match;
        if (slice.openEnd) {
            match = parent.contentMatchAt(parent.childCount);
        }
        else {
            match = parent.contentMatchAt(parent.childCount);
            if (slice.size) {
                match = match.matchFragment(slice.content, slice.openStart ? 1 : 0);
            }
        }
        match = match.matchFragment($to.parent.content, $to.index());
        return match && match.validEnd;
    }
    function nodeRight(content, depth) {
        for (var i = 1; i < depth; i++) {
            content = content.lastChild.content;
        }
        return content.lastChild;
    }
    // Algorithm for 'placing' the elements of a slice into a gap:
    //
    // We consider the content of each node that is open to the left to be
    // independently placeable. I.e. in <p("foo"), p("bar")>, when the
    // paragraph on the left is open, "foo" can be placed (somewhere on
    // the left side of the replacement gap) independently from p("bar").
    //
    // So placeSlice splits up a slice into a number of sub-slices,
    // along with information on where they can be placed on the given
    // left-side edge. It works by walking the open side of the slice,
    // from the inside out, and trying to find a landing spot for each
    // element, by simultaneously scanning over the gap side. When no
    // place is found for an open node's content, it is left in that node.
    // : (ResolvedPos, Slice) → [{content: Fragment, openEnd: number, depth: number}]
    function placeSlice($from, slice) {
        var frontier = new Frontier($from);
        for (var pass = 1; slice.size && pass <= 3; pass++) {
            slice = frontier.placeSlice(slice.content, slice.openStart, slice.openEnd, pass);
        }
        while (frontier.open.length) {
            frontier.closeNode();
        }
        return frontier.placed;
    }
    // Helper class that models the open side of the insert position,
    // keeping track of the content match and already inserted content
    // at each depth.
    var Frontier = function Frontier($pos) {
        var this$1 = this;
        // : [{parent: Node, match: ContentMatch, content: Fragment, wrapper: bool, openEnd: number, depth: number}]
        this.open = [];
        for (var d = 0; d <= $pos.depth; d++) {
            var parent = $pos.node(d), match = parent.contentMatchAt($pos.indexAfter(d));
            this$1.open.push({ parent: parent, match: match, content: prosemirrorModel.Fragment.empty, wrapper: false, openEnd: 0, depth: d });
        }
        this.placed = [];
    };
    // : (Fragment, number, number, number, ?Node) → Slice
    // Tries to place the content of the given slice, and returns a
    // slice containing unplaced content.
    //
    // pass 1: try to fit directly
    // pass 2: allow wrapper nodes to be introduced
    // pass 3: allow unwrapping of nodes that aren't open
    Frontier.prototype.placeSlice = function placeSlice(fragment, openStart, openEnd, pass, parent) {
        var this$1 = this;
        if (openStart > 0) {
            var first = fragment.firstChild;
            var inner = this.placeSlice(first.content, Math.max(0, openStart - 1), openEnd && fragment.childCount == 1 ? openEnd - 1 : 0, pass, first);
            if (inner.content != first.content) {
                if (inner.content.size) {
                    fragment = fragment.replaceChild(0, first.copy(inner.content));
                    openStart = inner.openStart + 1;
                }
                else {
                    if (fragment.childCount == 1) {
                        openEnd = 0;
                    }
                    fragment = fragment.cutByIndex(1);
                    openStart = 0;
                }
            }
        }
        var result = this.placeContent(fragment, openStart, openEnd, pass, parent);
        if (pass > 2 && result.size && openStart == 0) {
            for (var i = 0; i < result.content.childCount; i++) {
                var child = result.content.child(i);
                this$1.placeContent(child.content, 0, openEnd && i == result.content.childCount.length - 1 ? openEnd - 1 : 0, pass, child);
            }
            result = prosemirrorModel.Fragment.empty;
        }
        return result;
    };
    Frontier.prototype.placeContent = function placeContent(fragment, openStart, openEnd, pass, parent) {
        var this$1 = this;
        var i = 0;
        // Go over the fragment's children
        for (; i < fragment.childCount; i++) {
            var child = fragment.child(i), placed = false, last = i == fragment.childCount - 1;
            // Try each open node in turn, starting from the innermost
            for (var d = this.open.length - 1; d >= 0; d--) {
                var open = this$1.open[d], wrap = (void 0);
                // If pass > 1, it is allowed to wrap the node to help find a
                // fit, so if findWrappeing returns something, we add open
                // nodes to the frontier for that wrapping.
                if (pass > 1 && (wrap = open.match.findWrapping(child.type)) &&
                    !(parent && wrap.length && wrap[wrap.length - 1] == parent.type)) {
                    while (this.open.length - 1 > d) {
                        this$1.closeNode();
                    }
                    for (var w = 0; w < wrap.length; w++) {
                        open.match = open.match.matchType(wrap[w]);
                        d++;
                        open = { parent: wrap[w].create(),
                            match: wrap[w].contentMatch,
                            content: prosemirrorModel.Fragment.empty, wrapper: true, openEnd: 0, depth: d + w };
                        this$1.open.push(open);
                    }
                }
                // See if the child fits here
                var match = open.match.matchType(child.type);
                if (!match) {
                    var fill = open.match.fillBefore(prosemirrorModel.Fragment.from(child));
                    if (fill) {
                        for (var j = 0; j < fill.childCount; j++) {
                            var ch = fill.child(j);
                            this$1.addNode(open, ch, 0);
                            match = open.match.matchFragment(ch);
                        }
                    }
                    else if (parent && open.match.matchType(parent.type)) {
                        // Don't continue looking further up if the parent node
                        // would fit here.
                        break;
                    }
                    else {
                        continue;
                    }
                }
                // Close open nodes above this one, since we're starting to
                // add to this.
                while (this.open.length - 1 > d) {
                    this$1.closeNode();
                }
                // Strip marks from the child or close its start when necessary
                child = child.mark(open.parent.type.allowedMarks(child.marks));
                if (openStart) {
                    child = closeNodeStart(child, openStart, last ? openEnd : 0);
                    openStart = 0;
                }
                // Add the child to this open node and adjust its metadata
                this$1.addNode(open, child, last ? openEnd : 0);
                open.match = match;
                if (last) {
                    openEnd = 0;
                }
                placed = true;
                break;
            }
            // As soon as we've failed to place a node we stop looking at
            // later nodes
            if (!placed) {
                break;
            }
        }
        // Close the current open node if it's not the the root and we
        // either placed up to the end of the node or the the current
        // slice depth's node type matches the open node's type
        if (this.open.length > 1 &&
            (i > 0 && i == fragment.childCount ||
                parent && this.open[this.open.length - 1].parent.type == parent.type)) {
            this.closeNode();
        }
        return new prosemirrorModel.Slice(fragment.cutByIndex(i), openStart, openEnd);
    };
    Frontier.prototype.addNode = function addNode(open, node, openEnd) {
        open.content = closeFragmentEnd(open.content, open.openEnd).addToEnd(node);
        open.openEnd = openEnd;
    };
    Frontier.prototype.closeNode = function closeNode() {
        var open = this.open.pop();
        if (open.content.size == 0) {
            // Nothing here
        }
        else if (open.wrapper) {
            this.addNode(this.open[this.open.length - 1], open.parent.copy(open.content), open.openEnd + 1);
        }
        else {
            this.placed[open.depth] = { depth: open.depth, content: open.content, openEnd: open.openEnd };
        }
    };
    function closeNodeStart(node, openStart, openEnd) {
        var content = node.content;
        if (openStart > 1) {
            var first = closeNodeStart(node.firstChild, openStart - 1, node.childCount == 1 ? openEnd - 1 : 0);
            content = node.content.replaceChild(0, first);
        }
        var fill = node.type.contentMatch.fillBefore(content, openEnd == 0);
        return node.copy(fill.append(content));
    }
    function closeNodeEnd(node, depth) {
        var content = node.content;
        if (depth > 1) {
            var last = closeNodeEnd(node.lastChild, depth - 1);
            content = node.content.replaceChild(node.childCount - 1, last);
        }
        var fill = node.contentMatchAt(node.childCount).fillBefore(prosemirrorModel.Fragment.empty, true);
        return node.copy(content.append(fill));
    }
    function closeFragmentEnd(fragment, depth) {
        return depth ? fragment.replaceChild(fragment.childCount - 1, closeNodeEnd(fragment.lastChild, depth)) : fragment;
    }
    // :: (number, number, Slice) → this
    // Replace a range of the document with a given slice, using `from`,
    // `to`, and the slice's [`openStart`](#model.Slice.openStart) property
    // as hints, rather than fixed start and end points. This method may
    // grow the replaced area or close open nodes in the slice in order to
    // get a fit that is more in line with WYSIWYG expectations, by
    // dropping fully covered parent nodes of the replaced region when
    // they are marked [non-defining](#model.NodeSpec.defining), or
    // including an open parent node from the slice that _is_ marked as
    // [defining](#model.NodeSpec.defining).
    //
    // This is the method, for example, to handle paste. The similar
    // [`replace`](#transform.Transform.replace) method is a more
    // primitive tool which will _not_ move the start and end of its given
    // range, and is useful in situations where you need more precise
    // control over what happens.
    Transform.prototype.replaceRange = function (from, to, slice) {
        var this$1 = this;
        if (!slice.size) {
            return this.deleteRange(from, to);
        }
        var $from = this.doc.resolve(from), $to = this.doc.resolve(to);
        if (fitsTrivially($from, $to, slice)) {
            return this.step(new ReplaceStep(from, to, slice));
        }
        var targetDepths = coveredDepths($from, this.doc.resolve(to));
        // Can't replace the whole document, so remove 0 if it's present
        if (targetDepths[targetDepths.length - 1] == 0) {
            targetDepths.pop();
        }
        // Negative numbers represent not expansion over the whole node at
        // that depth, but replacing from $from.before(-D) to $to.pos.
        var preferredTarget = -($from.depth + 1);
        targetDepths.unshift(preferredTarget);
        // This loop picks a preferred target depth, if one of the covering
        // depths is not outside of a defining node, and adds negative
        // depths for any depth that has $from at its start and does not
        // cross a defining node.
        for (var d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
            var spec = $from.node(d).type.spec;
            if (spec.defining || spec.isolating) {
                break;
            }
            if (targetDepths.indexOf(d) > -1) {
                preferredTarget = d;
            }
            else if ($from.before(d) == pos) {
                targetDepths.splice(1, 0, -d);
            }
        }
        // Try to fit each possible depth of the slice into each possible
        // target depth, starting with the preferred depths.
        var preferredTargetIndex = targetDepths.indexOf(preferredTarget);
        var leftNodes = [], preferredDepth = slice.openStart;
        for (var content = slice.content, i = 0;; i++) {
            var node = content.firstChild;
            leftNodes.push(node);
            if (i == slice.openStart) {
                break;
            }
            content = node.content;
        }
        // Back up if the node directly above openStart, or the node above
        // that separated only by a non-defining textblock node, is defining.
        if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&
            $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type) {
            preferredDepth -= 1;
        }
        else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&
            $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type) {
            preferredDepth -= 2;
        }
        for (var j = slice.openStart; j >= 0; j--) {
            var openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
            var insert = leftNodes[openDepth];
            if (!insert) {
                continue;
            }
            for (var i$1 = 0; i$1 < targetDepths.length; i$1++) {
                // Loop over possible expansion levels, starting with the
                // preferred one
                var targetDepth = targetDepths[(i$1 + preferredTargetIndex) % targetDepths.length], expand = true;
                if (targetDepth < 0) {
                    expand = false;
                    targetDepth = -targetDepth;
                }
                var parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
                if (parent.canReplaceWith(index, index, insert.type, insert.marks)) {
                    return this$1.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new prosemirrorModel.Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));
                }
            }
        }
        return this.replace(from, to, slice);
    };
    function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
        if (depth < oldOpen) {
            var first = fragment.firstChild;
            fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
        }
        if (depth > newOpen) {
            fragment = parent.contentMatchAt(0).fillBefore(fragment, true).append(fragment);
        }
        return fragment;
    }
    // :: (number, number, Node) → this
    // Replace the given range with a node, but use `from` and `to` as
    // hints, rather than precise positions. When from and to are the same
    // and are at the start or end of a parent node in which the given
    // node doesn't fit, this method may _move_ them out towards a parent
    // that does allow the given node to be placed. When the given range
    // completely covers a parent node, this method may completely replace
    // that parent node.
    Transform.prototype.replaceRangeWith = function (from, to, node) {
        if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {
            var point = insertPoint(this.doc, from, node.type);
            if (point != null) {
                from = to = point;
            }
        }
        return this.replaceRange(from, to, new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(node), 0, 0));
    };
    // :: (number, number) → this
    // Delete the given range, expanding it to cover fully covered
    // parent nodes until a valid replace is found.
    Transform.prototype.deleteRange = function (from, to) {
        var this$1 = this;
        var $from = this.doc.resolve(from), $to = this.doc.resolve(to);
        var covered = coveredDepths($from, $to);
        for (var i = 0; i < covered.length; i++) {
            var depth = covered[i], last = i == covered.length - 1;
            if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd) {
                return this$1.delete($from.start(depth), $to.end(depth));
            }
            if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1)))) {
                return this$1.delete($from.before(depth), $to.after(depth));
            }
        }
        for (var d = 1; d <= $from.depth; d++) {
            if (from - $from.start(d) == $from.depth - d && to > $from.end(d)) {
                return this$1.delete($from.before(d), to);
            }
        }
        return this.delete(from, to);
    };
    // : (ResolvedPos, ResolvedPos) → [number]
    // Returns an array of all depths for which $from - $to spans the
    // whole content of the nodes at that depth.
    function coveredDepths($from, $to) {
        var result = [], minDepth = Math.min($from.depth, $to.depth);
        for (var d = minDepth; d >= 0; d--) {
            var start = $from.start(d);
            if (start < $from.pos - ($from.depth - d) ||
                $to.end(d) > $to.pos + ($to.depth - d) ||
                $from.node(d).type.spec.isolating ||
                $to.node(d).type.spec.isolating) {
                break;
            }
            if (start == $to.start(d)) {
                result.push(d);
            }
        }
        return result;
    }
    exports.Transform = Transform;
    exports.TransformError = TransformError;
    exports.Step = Step;
    exports.StepResult = StepResult;
    exports.joinPoint = joinPoint;
    exports.canJoin = canJoin;
    exports.canSplit = canSplit;
    exports.insertPoint = insertPoint;
    exports.dropPoint = dropPoint;
    exports.liftTarget = liftTarget;
    exports.findWrapping = findWrapping;
    exports.StepMap = StepMap;
    exports.MapResult = MapResult;
    exports.Mapping = Mapping;
    exports.AddMarkStep = AddMarkStep;
    exports.RemoveMarkStep = RemoveMarkStep;
    exports.ReplaceStep = ReplaceStep;
    exports.ReplaceAroundStep = ReplaceAroundStep;
    exports.replaceStep = replaceStep;
    //# sourceMappingURL=index.js.map
});
define("prosemirror-view", function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var prosemirrorModel = require('prosemirror-model');
    var prosemirrorState = require('prosemirror-state');
    var prosemirrorTransform = require('prosemirror-transform');
    var result = {};
    if (typeof navigator != "undefined" && typeof document != "undefined") {
        var ie_edge = /Edge\/(\d+)/.exec(navigator.userAgent);
        var ie_upto10 = /MSIE \d/.test(navigator.userAgent);
        var ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
        result.mac = /Mac/.test(navigator.platform);
        var ie = result.ie = !!(ie_upto10 || ie_11up || ie_edge);
        result.ie_version = ie_upto10 ? document.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : null;
        result.gecko = !ie && /gecko\/(\d+)/i.test(navigator.userAgent);
        result.gecko_version = result.gecko && +(/Firefox\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1];
        var chrome = !ie && /Chrome\/(\d+)/.exec(navigator.userAgent);
        result.chrome = !!chrome;
        result.chrome_version = chrome && +chrome[1];
        result.ios = !ie && /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent);
        result.android = /Android \d/.test(navigator.userAgent);
        result.webkit = !ie && 'WebkitAppearance' in document.documentElement.style;
        result.safari = /Apple Computer/.test(navigator.vendor);
        result.webkit_version = result.webkit && +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1];
    }
    var domIndex = function (node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node) {
                return index;
            }
        }
    };
    var parentNode = function (node) {
        var parent = node.parentNode;
        return parent && parent.nodeType == 11 ? parent.host : parent;
    };
    var textRange = function (node, from, to) {
        var range = document.createRange();
        range.setEnd(node, to == null ? node.nodeValue.length : to);
        range.setStart(node, from || 0);
        return range;
    };
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    var isEquivalentPosition = function (node, off, targetNode, targetOff) {
        return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1));
    };
    var atomElements = /^(img|br|input|textarea|hr)$/i;
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff) {
                return true;
            }
            if (off == (dir < 0 ? 0 : nodeSize(node)) || node.nodeType == 3 && node.nodeValue == "\ufeff") {
                var parent = node.parentNode;
                if (parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) || node.contentEditable == "false") {
                    return false;
                }
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                off = dir < 0 ? nodeSize(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function nodeSize(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function hasBlockDesc(dom) {
        var desc = dom.pmViewDesc;
        return desc && desc.node && desc.node.isBlock;
    }
    // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
    // (isCollapsed inappropriately returns true in shadow dom)
    var selectionCollapsed = function (domSel) {
        var collapsed = domSel.isCollapsed;
        if (collapsed && result.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed) {
            collapsed = false;
        }
        return collapsed;
    };
    function windowRect(win) {
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    function getSide(value, side) {
        return typeof value == "number" ? value : value[side];
    }
    function scrollRectIntoView(view, rect, startDOM) {
        var scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
        var doc = view.dom.ownerDocument, win = doc.defaultView;
        for (var parent = startDOM || view.dom;; parent = parentNode(parent)) {
            if (!parent) {
                break;
            }
            if (parent.nodeType != 1) {
                continue;
            }
            var atTop = parent == doc.body || parent.nodeType != 1;
            var bounding = atTop ? windowRect(win) : parent.getBoundingClientRect();
            var moveX = 0, moveY = 0;
            if (rect.top < bounding.top + getSide(scrollThreshold, "top")) {
                moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
            }
            else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom")) {
                moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
            }
            if (rect.left < bounding.left + getSide(scrollThreshold, "left")) {
                moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
            }
            else if (rect.right > bounding.right - getSide(scrollThreshold, "right")) {
                moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
            }
            if (moveX || moveY) {
                if (atTop) {
                    win.scrollBy(moveX, moveY);
                }
                else {
                    if (moveY) {
                        parent.scrollTop += moveY;
                    }
                    if (moveX) {
                        parent.scrollLeft += moveX;
                    }
                }
            }
            if (atTop) {
                break;
            }
        }
    }
    // Store the scroll position of the editor's parent nodes, along with
    // the top position of an element near the top of the editor, which
    // will be used to make sure the visible viewport remains stable even
    // when the size of the content above changes.
    function storeScrollPos(view) {
        var rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
        var doc = view.dom.ownerDocument;
        var refDOM, refTop;
        for (var x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
            var dom = view.root.elementFromPoint(x, y);
            if (dom == view.dom || !view.dom.contains(dom)) {
                continue;
            }
            var localRect = dom.getBoundingClientRect();
            if (localRect.top >= startY - 20) {
                refDOM = dom;
                refTop = localRect.top;
                break;
            }
        }
        var stack = [];
        for (var dom$1 = view.dom; dom$1; dom$1 = parentNode(dom$1)) {
            stack.push({ dom: dom$1, top: dom$1.scrollTop, left: dom$1.scrollLeft });
            if (dom$1 == doc.body) {
                break;
            }
        }
        return { refDOM: refDOM, refTop: refTop, stack: stack };
    }
    // Reset the scroll position of the editor's parent nodes to that what
    // it was before, when storeScrollPos was called.
    function resetScrollPos(ref) {
        var refDOM = ref.refDOM;
        var refTop = ref.refTop;
        var stack = ref.stack;
        var newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
        var dTop = newRefTop == 0 ? 0 : newRefTop - refTop;
        for (var i = 0; i < stack.length; i++) {
            var ref$1 = stack[i];
            var dom = ref$1.dom;
            var top = ref$1.top;
            var left = ref$1.left;
            if (dom.scrollTop != top + dTop) {
                dom.scrollTop = top + dTop;
            }
            if (dom.scrollLeft != left) {
                dom.scrollLeft = left;
            }
        }
    }
    function findOffsetInNode(node, coords) {
        var closest, dxClosest = 2e8, coordsClosest, offset = 0;
        var rowBot = coords.top, rowTop = coords.top;
        for (var child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
            var rects = (void 0);
            if (child.nodeType == 1) {
                rects = child.getClientRects();
            }
            else if (child.nodeType == 3) {
                rects = textRange(child).getClientRects();
            }
            else {
                continue;
            }
            for (var i = 0; i < rects.length; i++) {
                var rect = rects[i];
                if (rect.top <= rowBot && rect.bottom >= rowTop) {
                    rowBot = Math.max(rect.bottom, rowBot);
                    rowTop = Math.min(rect.top, rowTop);
                    var dx = rect.left > coords.left ? rect.left - coords.left
                        : rect.right < coords.left ? coords.left - rect.right : 0;
                    if (dx < dxClosest) {
                        closest = child;
                        dxClosest = dx;
                        coordsClosest = dx && closest.nodeType == 3 ? { left: rect.right < coords.left ? rect.right : rect.left, top: coords.top } : coords;
                        if (child.nodeType == 1 && dx) {
                            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
                        }
                        continue;
                    }
                }
                if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||
                    coords.left >= rect.left && coords.top >= rect.bottom)) {
                    offset = childIndex + 1;
                }
            }
        }
        if (closest && closest.nodeType == 3) {
            return findOffsetInText(closest, coordsClosest);
        }
        if (!closest || (dxClosest && closest.nodeType == 1)) {
            return { node: node, offset: offset };
        }
        return findOffsetInNode(closest, coordsClosest);
    }
    function findOffsetInText(node, coords) {
        var len = node.nodeValue.length;
        var range = document.createRange();
        for (var i = 0; i < len; i++) {
            range.setEnd(node, i + 1);
            range.setStart(node, i);
            var rect = singleRect(range, 1);
            if (rect.top == rect.bottom) {
                continue;
            }
            if (inRect(coords, rect)) {
                return { node: node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
            }
        }
        return { node: node, offset: 0 };
    }
    function inRect(coords, rect) {
        return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 &&
            coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
    }
    function targetKludge(dom, coords) {
        var parent = dom.parentNode;
        if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left) {
            return parent;
        }
        return dom;
    }
    function posFromElement(view, elt, coords) {
        var ref = findOffsetInNode(elt, coords);
        var node = ref.node;
        var offset = ref.offset;
        var bias = -1;
        if (node.nodeType == 1 && !node.firstChild) {
            var rect = node.getBoundingClientRect();
            bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
        }
        return view.docView.posFromDOM(node, offset, bias);
    }
    function posFromCaret(view, node, offset, coords) {
        // Browser (in caretPosition/RangeFromPoint) will agressively
        // normalize towards nearby inline nodes. Since we are interested in
        // positions between block nodes too, we first walk up the hierarchy
        // of nodes to see if there are block nodes that the coordinates
        // fall outside of. If so, we take the position before/after that
        // block. If not, we call `posFromDOM` on the raw node/offset.
        var outside = -1;
        for (var cur = node;;) {
            if (cur == view.dom) {
                break;
            }
            var desc = view.docView.nearestDesc(cur, true);
            if (!desc) {
                return null;
            }
            if (desc.node.isBlock && desc.parent) {
                var rect = desc.dom.getBoundingClientRect();
                if (rect.left > coords.left || rect.top > coords.top) {
                    outside = desc.posBefore;
                }
                else if (rect.right < coords.left || rect.bottom < coords.top) {
                    outside = desc.posAfter;
                }
                else {
                    break;
                }
            }
            cur = desc.dom.parentNode;
        }
        return outside > -1 ? outside : view.docView.posFromDOM(node, offset);
    }
    function elementFromPoint(element, coords, box) {
        var len = element.childNodes.length;
        if (len && box.top < box.bottom) {
            for (var startI = Math.max(0, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2), i = startI;;) {
                var child = element.childNodes[i];
                if (child.nodeType == 1) {
                    var rects = child.getClientRects();
                    for (var j = 0; j < rects.length; j++) {
                        var rect = rects[j];
                        if (inRect(coords, rect)) {
                            return elementFromPoint(child, coords, rect);
                        }
                    }
                }
                if ((i = (i + 1) % len) == startI) {
                    break;
                }
            }
        }
        return element;
    }
    // Given an x,y position on the editor, get the position in the document.
    function posAtCoords(view, coords) {
        var root = view.root, node, offset;
        if (root.caretPositionFromPoint) {
            var pos$1 = root.caretPositionFromPoint(coords.left, coords.top);
            if (pos$1) {
                var assign;
                ((assign = pos$1, node = assign.offsetNode, offset = assign.offset));
            }
        }
        if (!node && root.caretRangeFromPoint) {
            var range = root.caretRangeFromPoint(coords.left, coords.top);
            if (range) {
                var assign$1;
                ((assign$1 = range, node = assign$1.startContainer, offset = assign$1.startOffset));
            }
        }
        var elt = root.elementFromPoint(coords.left, coords.top + 1), pos;
        if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
            var box = view.dom.getBoundingClientRect();
            if (!inRect(coords, box)) {
                return null;
            }
            elt = elementFromPoint(view.dom, coords, box);
            if (!elt) {
                return null;
            }
        }
        elt = targetKludge(elt, coords);
        if (node) {
            // Suspiciously specific kludge to work around caret*FromPoint
            // never returning a position at the end of the document
            if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&
                coords.top > node.lastChild.getBoundingClientRect().bottom) {
                pos = view.state.doc.content.size;
            }
            // Ignore positions directly after a BR, since caret*FromPoint
            // 'round up' positions that would be more accurately placed
            // before the BR node.
            else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR") {
                pos = posFromCaret(view, node, offset, coords);
            }
        }
        if (pos == null) {
            pos = posFromElement(view, elt, coords);
        }
        var desc = view.docView.nearestDesc(elt, true);
        return { pos: pos, inside: desc ? desc.posAtStart - desc.border : -1 };
    }
    function singleRect(object, bias) {
        var rects = object.getClientRects();
        return !rects.length ? object.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1];
    }
    // : (EditorView, number) → {left: number, top: number, right: number, bottom: number}
    // Given a position in the document model, get a bounding box of the
    // character at that position, relative to the window.
    function coordsAtPos(view, pos) {
        var ref = view.docView.domFromPos(pos);
        var node = ref.node;
        var offset = ref.offset;
        // These browsers support querying empty text ranges
        if (node.nodeType == 3 && (result.chrome || result.gecko)) {
            var rect = singleRect(textRange(node, offset, offset), 0);
            // Firefox returns bad results (the position before the space)
            // when querying a position directly after line-broken
            // whitespace. Detect this situation and and kludge around it
            if (result.gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
                var rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);
                if (Math.abs(rectBefore.left - rect.left) < 1 && rectBefore.top == rect.top) {
                    var rectAfter = singleRect(textRange(node, offset, offset + 1), -1);
                    return flatten(rectAfter, rectAfter.left < rectBefore.left);
                }
            }
            return rect;
        }
        // Not Firefox/Chrome, or not in a text node, so we have to use
        // actual element/character rectangles to get a solution (this part
        // is not very bidi-safe)
        //
        // Try the left side first, fall back to the right one if that
        // doesn't work.
        for (var dir = -1; dir < 2; dir += 2) {
            if (dir < 0 && offset) {
                var prev = (void 0), target = node.nodeType == 3 ? textRange(node, offset - 1, offset)
                    : (prev = node.childNodes[offset - 1]).nodeType == 3 ? textRange(prev)
                        : prev.nodeType == 1 && prev.nodeName != "BR" ? prev : null; // BR nodes tend to only return the rectangle before them
                if (target) {
                    var rect$1 = singleRect(target, 1);
                    if (rect$1.top < rect$1.bottom) {
                        return flatten(rect$1, false);
                    }
                }
            }
            else if (dir > 0 && offset < nodeSize(node)) {
                var next = (void 0), target$1 = node.nodeType == 3 ? textRange(node, offset, offset + 1)
                    : (next = node.childNodes[offset]).nodeType == 3 ? textRange(next)
                        : next.nodeType == 1 ? next : null;
                if (target$1) {
                    var rect$2 = singleRect(target$1, -1);
                    if (rect$2.top < rect$2.bottom) {
                        return flatten(rect$2, true);
                    }
                }
            }
        }
        // All else failed, just try to get a rectangle for the target node
        return flatten(singleRect(node.nodeType == 3 ? textRange(node) : node, 0), false);
    }
    function flatten(rect, left) {
        if (rect.width == 0) {
            return rect;
        }
        var x = left ? rect.left : rect.right;
        return { top: rect.top, bottom: rect.bottom, left: x, right: x };
    }
    function withFlushedState(view, state, f) {
        var viewState = view.state, active = view.root.activeElement;
        if (viewState != state || !view.inDOMChange) {
            view.updateState(state);
        }
        if (active != view.dom) {
            view.focus();
        }
        try {
            return f();
        }
        finally {
            if (viewState != state) {
                view.updateState(viewState);
            }
            if (active != view.dom) {
                active.focus();
            }
        }
    }
    // : (EditorView, number, number)
    // Whether vertical position motion in a given direction
    // from a position would leave a text block.
    function endOfTextblockVertical(view, state, dir) {
        var sel = state.selection;
        var $pos = dir == "up" ? sel.$anchor.min(sel.$head) : sel.$anchor.max(sel.$head);
        return withFlushedState(view, state, function () {
            var ref = view.docView.domFromPos($pos.pos);
            var dom = ref.node;
            for (;;) {
                var nearest = view.docView.nearestDesc(dom, true);
                if (!nearest) {
                    break;
                }
                if (nearest.node.isBlock) {
                    dom = nearest.dom;
                    break;
                }
                dom = nearest.dom.parentNode;
            }
            var coords = coordsAtPos(view, $pos.pos);
            for (var child = dom.firstChild; child; child = child.nextSibling) {
                var boxes = (void 0);
                if (child.nodeType == 1) {
                    boxes = child.getClientRects();
                }
                else if (child.nodeType == 3) {
                    boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
                }
                else {
                    continue;
                }
                for (var i = 0; i < boxes.length; i++) {
                    var box = boxes[i];
                    if (box.bottom > box.top && (dir == "up" ? box.bottom < coords.top + 1 : box.top > coords.bottom - 1)) {
                        return false;
                    }
                }
            }
            return true;
        });
    }
    var maybeRTL = /[\u0590-\u08ac]/;
    function endOfTextblockHorizontal(view, state, dir) {
        var ref = state.selection;
        var $head = ref.$head;
        if (!$head.parent.isTextblock) {
            return false;
        }
        var offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
        var sel = getSelection();
        // If the textblock is all LTR, or the browser doesn't support
        // Selection.modify (Edge), fall back to a primitive approach
        if (!maybeRTL.test($head.parent.textContent) || !sel.modify) {
            return dir == "left" || dir == "backward" ? atStart : atEnd;
        }
        return withFlushedState(view, state, function () {
            // This is a huge hack, but appears to be the best we can
            // currently do: use `Selection.modify` to move the selection by
            // one character, and see if that moves the cursor out of the
            // textblock (or doesn't move it at all, when at the start/end of
            // the document).
            var oldRange = sel.getRangeAt(0), oldNode = sel.focusNode, oldOff = sel.focusOffset;
            sel.modify("move", dir, "character");
            var parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
            var result$$1 = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) ||
                (oldNode == sel.focusNode && oldOff == sel.focusOffset);
            // Restore the previous selection
            sel.removeAllRanges();
            sel.addRange(oldRange);
            return result$$1;
        });
    }
    var cachedState = null;
    var cachedDir = null;
    var cachedResult = false;
    function endOfTextblock(view, state, dir) {
        if (cachedState == state && cachedDir == dir) {
            return cachedResult;
        }
        cachedState = state;
        cachedDir = dir;
        return cachedResult = dir == "up" || dir == "down"
            ? endOfTextblockVertical(view, state, dir)
            : endOfTextblockHorizontal(view, state, dir);
    }
    // NodeView:: interface
    //
    // By default, document nodes are rendered using the result of the
    // [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed
    // entirely by the editor. For some use cases, such as embedded
    // node-specific editing interfaces, you want more control over
    // the behavior of a node's in-editor representation, and need to
    // [define](#view.EditorProps.nodeViews) a custom node view.
    //
    // Objects returned as node views must conform to this interface.
    //
    //   dom:: ?dom.Node
    //   The outer DOM node that represents the document node. When not
    //   given, the default strategy is used to create a DOM node.
    //
    //   contentDOM:: ?dom.Node
    //   The DOM node that should hold the node's content. Only meaningful
    //   if the node view also defines a `dom` property and if its node
    //   type is not a leaf node type. When this is present, ProseMirror
    //   will take care of rendering the node's children into it. When it
    //   is not present, the node view itself is responsible for rendering
    //   (or deciding not to render) its child nodes.
    //
    //   update:: ?(node: Node, decorations: [Decoration]) → bool
    //   When given, this will be called when the view is updating itself.
    //   It will be given a node (possibly of a different type), and an
    //   array of active decorations (which are automatically drawn, and
    //   the node view may ignore if it isn't interested in them), and
    //   should return true if it was able to update to that node, and
    //   false otherwise. If the node view has a `contentDOM` property (or
    //   no `dom` property), updating its child nodes will be handled by
    //   ProseMirror.
    //
    //   selectNode:: ?()
    //   Can be used to override the way the node's selected status (as a
    //   node selection) is displayed.
    //
    //   deselectNode:: ?()
    //   When defining a `selectNode` method, you should also provide a
    //   `deselectNode` method to remove the effect again.
    //
    //   setSelection:: ?(anchor: number, head: number, root: dom.Document)
    //   This will be called to handle setting the selection inside the
    //   node. The `anchor` and `head` positions are relative to the start
    //   of the node. By default, a DOM selection will be created between
    //   the DOM positions corresponding to those positions, but if you
    //   override it you can do something else.
    //
    //   stopEvent:: ?(event: dom.Event) → bool
    //   Can be used to prevent the editor view from trying to handle some
    //   or all DOM events that bubble up from the node view. Events for
    //   which this returns true are not handled by the editor.
    //
    //   ignoreMutation:: ?(dom.MutationRecord) → bool
    //   Called when a DOM
    //   [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)
    //   happens within the view. Return false if the editor should
    //   re-parse the range around the mutation, true if it can safely be
    //   ignored.
    //
    //   destroy:: ?()
    //   Called when the node view is removed from the editor or the whole
    //   editor is destroyed.
    // View descriptions are data structures that describe the DOM that is
    // used to represent the editor's content. They are used for:
    //
    // - Incremental redrawing when the document changes
    //
    // - Figuring out what part of the document a given DOM position
    //   corresponds to
    //
    // - Wiring in custom implementations of the editing interface for a
    //   given node
    //
    // They form a doubly-linked mutable tree, starting at `view.docView`.
    var NOT_DIRTY = 0;
    var CHILD_DIRTY = 1;
    var CONTENT_DIRTY = 2;
    var NODE_DIRTY = 3;
    // Superclass for the various kinds of descriptions. Defines their
    // basic structure and shared methods.
    var ViewDesc = function ViewDesc(parent, children, dom, contentDOM) {
        this.parent = parent;
        this.children = children;
        this.dom = dom;
        // An expando property on the DOM node provides a link back to its
        // description.
        dom.pmViewDesc = this;
        // This is the node that holds the child views. It may be null for
        // descs that don't have children.
        this.contentDOM = contentDOM;
        this.dirty = NOT_DIRTY;
    };
    var prototypeAccessors$1 = { beforePosition: {}, size: {}, border: {}, posBefore: {}, posAtStart: {}, posAfter: {}, posAtEnd: {}, contentLost: {} };
    // Used to check whether a given description corresponds to a
    // widget/mark/node.
    ViewDesc.prototype.matchesWidget = function matchesWidget() { return false; };
    ViewDesc.prototype.matchesMark = function matchesMark() { return false; };
    ViewDesc.prototype.matchesNode = function matchesNode() { return false; };
    ViewDesc.prototype.matchesHack = function matchesHack() { return false; };
    prototypeAccessors$1.beforePosition.get = function () { return false; };
    // : () → ?ParseRule
    // When parsing in-editor content (in domchange.js), we allow
    // descriptions to determine the parse rules that should be used to
    // parse them.
    ViewDesc.prototype.parseRule = function parseRule() { return null; };
    // : (dom.Event) → bool
    // Used by the editor's event handler to ignore events that come
    // from certain descs.
    ViewDesc.prototype.stopEvent = function stopEvent() { return false; };
    // The size of the content represented by this desc.
    prototypeAccessors$1.size.get = function () {
        var this$1 = this;
        var size = 0;
        for (var i = 0; i < this.children.length; i++) {
            size += this$1.children[i].size;
        }
        return size;
    };
    // For block nodes, this represents the space taken up by their
    // start/end tokens.
    prototypeAccessors$1.border.get = function () { return 0; };
    ViewDesc.prototype.destroy = function destroy() {
        var this$1 = this;
        this.parent = null;
        if (this.dom.pmViewDesc == this) {
            this.dom.pmViewDesc = null;
        }
        for (var i = 0; i < this.children.length; i++) {
            this$1.children[i].destroy();
        }
    };
    ViewDesc.prototype.posBeforeChild = function posBeforeChild(child) {
        var this$1 = this;
        for (var i = 0, pos = this.posAtStart; i < this.children.length; i++) {
            var cur = this$1.children[i];
            if (cur == child) {
                return pos;
            }
            pos += cur.size;
        }
    };
    prototypeAccessors$1.posBefore.get = function () {
        return this.parent.posBeforeChild(this);
    };
    prototypeAccessors$1.posAtStart.get = function () {
        return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
    };
    prototypeAccessors$1.posAfter.get = function () {
        return this.posBefore + this.size;
    };
    prototypeAccessors$1.posAtEnd.get = function () {
        return this.posAtStart + this.size - 2 * this.border;
    };
    // : (dom.Node, number, ?number) → number
    ViewDesc.prototype.localPosFromDOM = function localPosFromDOM(dom, offset, bias) {
        var this$1 = this;
        // If the DOM position is in the content, use the child desc after
        // it to figure out a position.
        if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
            if (bias < 0) {
                var domBefore, desc;
                if (dom == this.contentDOM) {
                    domBefore = dom.childNodes[offset - 1];
                }
                else {
                    while (dom.parentNode != this.contentDOM) {
                        dom = dom.parentNode;
                    }
                    domBefore = dom.previousSibling;
                }
                while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this)) {
                    domBefore = domBefore.previousSibling;
                }
                return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
            }
            else {
                var domAfter, desc$1;
                if (dom == this.contentDOM) {
                    domAfter = dom.childNodes[offset];
                }
                else {
                    while (dom.parentNode != this.contentDOM) {
                        dom = dom.parentNode;
                    }
                    domAfter = dom.nextSibling;
                }
                while (domAfter && !((desc$1 = domAfter.pmViewDesc) && desc$1.parent == this)) {
                    domAfter = domAfter.nextSibling;
                }
                return domAfter ? this.posBeforeChild(desc$1) : this.posAtEnd;
            }
        }
        // Otherwise, use various heuristics, falling back on the bias
        // parameter, to determine whether to return the position at the
        // start or at the end of this view desc.
        var atEnd;
        if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
            atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
        }
        else if (this.dom.firstChild) {
            if (offset == 0) {
                for (var search = dom;; search = search.parentNode) {
                    if (search == this$1.dom) {
                        atEnd = false;
                        break;
                    }
                    if (search.parentNode.firstChild != search) {
                        break;
                    }
                }
            }
            if (atEnd == null && offset == dom.childNodes.length) {
                for (var search$1 = dom;; search$1 = search$1.parentNode) {
                    if (search$1 == this$1.dom) {
                        atEnd = true;
                        break;
                    }
                    if (search$1.parentNode.lastChild != search$1) {
                        break;
                    }
                }
            }
        }
        return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
    };
    // Scan up the dom finding the first desc that is a descendant of
    // this one.
    ViewDesc.prototype.nearestDesc = function nearestDesc(dom, onlyNodes) {
        var this$1 = this;
        for (var first = true, cur = dom; cur; cur = cur.parentNode) {
            var desc = this$1.getDesc(cur);
            if (desc && (!onlyNodes || desc.node)) {
                // If dom is outside of this desc's nodeDOM, don't count it.
                if (first && desc.nodeDOM && !(desc.nodeDOM.nodeType == 1 ? desc.nodeDOM.contains(dom) : desc.nodeDOM == dom)) {
                    first = false;
                }
                else {
                    return desc;
                }
            }
        }
    };
    ViewDesc.prototype.getDesc = function getDesc(dom) {
        var this$1 = this;
        var desc = dom.pmViewDesc;
        for (var cur = desc; cur; cur = cur.parent) {
            if (cur == this$1) {
                return desc;
            }
        }
    };
    ViewDesc.prototype.posFromDOM = function posFromDOM(dom, offset, bias) {
        var this$1 = this;
        for (var scan = dom;; scan = scan.parentNode) {
            var desc = this$1.getDesc(scan);
            if (desc) {
                return desc.localPosFromDOM(dom, offset, bias);
            }
        }
    };
    // : (number) → ?NodeViewDesc
    // Find the desc for the node after the given pos, if any. (When a
    // parent node overrode rendering, there might not be one.)
    ViewDesc.prototype.descAt = function descAt(pos) {
        var this$1 = this;
        for (var i = 0, offset = 0; i < this.children.length; i++) {
            var child = this$1.children[i], end = offset + child.size;
            if (offset == pos && end != offset) {
                while (!child.border && child.children.length) {
                    child = child.children[0];
                }
                return child;
            }
            if (pos < end) {
                return child.descAt(pos - offset - child.border);
            }
            offset = end;
        }
    };
    // : (number) → {node: dom.Node, offset: number}
    ViewDesc.prototype.domFromPos = function domFromPos(pos) {
        var this$1 = this;
        if (!this.contentDOM) {
            return { node: this.dom, offset: 0 };
        }
        for (var offset = 0, i = 0;; i++) {
            if (offset == pos) {
                while (i < this.children.length && this.children[i].beforePosition) {
                    i++;
                }
                return { node: this$1.contentDOM, offset: i };
            }
            if (i == this$1.children.length) {
                throw new Error("Invalid position " + pos);
            }
            var child = this$1.children[i], end = offset + child.size;
            if (pos < end) {
                return child.domFromPos(pos - offset - child.border);
            }
            offset = end;
        }
    };
    // Used to find a DOM range in a single parent for a given changed
    // range.
    ViewDesc.prototype.parseRange = function parseRange(from, to, base) {
        var this$1 = this;
        if (base === void 0)
            base = 0;
        if (this.children.length == 0) {
            return { node: this.contentDOM, from: from, to: to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
        }
        var fromOffset = -1, toOffset = -1;
        for (var offset = 0, i = 0;; i++) {
            var child = this$1.children[i], end = offset + child.size;
            if (fromOffset == -1 && from <= end) {
                var childBase = offset + child.border;
                // FIXME maybe descend mark views to parse a narrower range?
                if (from >= childBase && to <= end - child.border && child.node &&
                    child.contentDOM && this$1.contentDOM.contains(child.contentDOM)) {
                    return child.parseRange(from - childBase, to - childBase, base + childBase);
                }
                from = base + offset;
                for (var j = i; j > 0; j--) {
                    var prev = this$1.children[j - 1];
                    if (prev.size && prev.dom.parentNode == this$1.contentDOM && !prev.emptyChildAt(1)) {
                        fromOffset = domIndex(prev.dom) + 1;
                        break;
                    }
                    from -= prev.size;
                }
                if (fromOffset == -1) {
                    fromOffset = 0;
                }
            }
            if (fromOffset > -1 && to <= end) {
                to = base + end;
                for (var j$1 = i + 1; j$1 < this.children.length; j$1++) {
                    var next = this$1.children[j$1];
                    if (next.size && next.dom.parentNode == this$1.contentDOM && !next.emptyChildAt(-1)) {
                        toOffset = domIndex(next.dom);
                        break;
                    }
                    to += next.size;
                }
                if (toOffset == -1) {
                    toOffset = this$1.contentDOM.childNodes.length;
                }
                break;
            }
            offset = end;
        }
        return { node: this.contentDOM, from: from, to: to, fromOffset: fromOffset, toOffset: toOffset };
    };
    ViewDesc.prototype.emptyChildAt = function emptyChildAt(side) {
        if (this.border || !this.contentDOM || !this.children.length) {
            return false;
        }
        var child = this.children[side < 0 ? 0 : this.children.length - 1];
        return child.size == 0 || child.emptyChildAt(side);
    };
    // : (number) → dom.Node
    ViewDesc.prototype.domAfterPos = function domAfterPos(pos) {
        var ref = this.domFromPos(pos);
        var node = ref.node;
        var offset = ref.offset;
        if (node.nodeType != 1 || offset == node.childNodes.length) {
            throw new RangeError("No node after pos " + pos);
        }
        return node.childNodes[offset];
    };
    // : (number, number, dom.Document)
    // View descs are responsible for setting any selection that falls
    // entirely inside of them, so that custom implementations can do
    // custom things with the selection. Note that this falls apart when
    // a selection starts in such a node and ends in another, in which
    // case we just use whatever domFromPos produces as a best effort.
    ViewDesc.prototype.setSelection = function setSelection(anchor, head, root, force) {
        var this$1 = this;
        // If the selection falls entirely in a child, give it to that child
        var from = Math.min(anchor, head), to = Math.max(anchor, head);
        for (var i = 0, offset = 0; i < this.children.length; i++) {
            var child = this$1.children[i], end = offset + child.size;
            if (from > offset && to < end) {
                return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);
            }
            offset = end;
        }
        var anchorDOM = this.domFromPos(anchor), headDOM = this.domFromPos(head);
        var domSel = root.getSelection(), range = document.createRange();
        if (!force &&
            isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&
            isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset)) {
            return;
        }
        // Selection.extend can be used to create an 'inverted' selection
        // (one where the focus is before the anchor), but not all
        // browsers support it yet.
        if (domSel.extend) {
            range.setEnd(anchorDOM.node, anchorDOM.offset);
            range.collapse(false);
        }
        else {
            if (anchor > head) {
                var tmp = anchorDOM;
                anchorDOM = headDOM;
                headDOM = tmp;
            }
            range.setEnd(headDOM.node, headDOM.offset);
            range.setStart(anchorDOM.node, anchorDOM.offset);
        }
        domSel.removeAllRanges();
        domSel.addRange(range);
        if (domSel.extend) {
            domSel.extend(headDOM.node, headDOM.offset);
        }
    };
    // : (dom.MutationRecord) → bool
    ViewDesc.prototype.ignoreMutation = function ignoreMutation(_mutation) {
        return !this.contentDOM;
    };
    prototypeAccessors$1.contentLost.get = function () {
        return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
    };
    // Remove a subtree of the element tree that has been touched
    // by a DOM change, so that the next update will redraw it.
    ViewDesc.prototype.markDirty = function markDirty(from, to) {
        var this$1 = this;
        for (var offset = 0, i = 0; i < this.children.length; i++) {
            var child = this$1.children[i], end = offset + child.size;
            if (offset == end ? from <= end && to >= offset : from < end && to > offset) {
                var startInside = offset + child.border, endInside = end - child.border;
                if (from >= startInside && to <= endInside) {
                    this$1.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
                    if (from == startInside && to == endInside && child.contentLost) {
                        child.dirty = NODE_DIRTY;
                    }
                    else {
                        child.markDirty(from - startInside, to - startInside);
                    }
                    return;
                }
                else {
                    child.dirty = NODE_DIRTY;
                }
            }
            offset = end;
        }
        this.dirty = CONTENT_DIRTY;
    };
    Object.defineProperties(ViewDesc.prototype, prototypeAccessors$1);
    // Reused array to avoid allocating fresh arrays for things that will
    // stay empty anyway.
    var nothing = [];
    // A widget desc represents a widget decoration, which is a DOM node
    // drawn between the document nodes.
    var WidgetViewDesc = (function (ViewDesc) {
        function WidgetViewDesc(parent, widget, view, pos) {
            var self, dom = widget.type.toDOM;
            if (typeof dom == "function") {
                dom = dom(view, function () {
                    if (!self) {
                        return pos;
                    }
                    if (self.parent) {
                        return self.parent.posBeforeChild(self);
                    }
                });
            }
            if (!widget.type.spec.raw) {
                if (dom.nodeType != 1) {
                    var wrap = document.createElement("span");
                    wrap.appendChild(dom);
                    dom = wrap;
                }
                dom.contentEditable = false;
                dom.classList.add("ProseMirror-widget");
            }
            ViewDesc.call(this, parent, nothing, dom, null);
            this.widget = widget;
            self = this;
        }
        if (ViewDesc)
            WidgetViewDesc.__proto__ = ViewDesc;
        WidgetViewDesc.prototype = Object.create(ViewDesc && ViewDesc.prototype);
        WidgetViewDesc.prototype.constructor = WidgetViewDesc;
        var prototypeAccessors$1 = { beforePosition: {} };
        prototypeAccessors$1.beforePosition.get = function () {
            return this.widget.type.side < 0;
        };
        WidgetViewDesc.prototype.matchesWidget = function matchesWidget(widget) {
            return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
        };
        WidgetViewDesc.prototype.parseRule = function parseRule() { return { ignore: true }; };
        WidgetViewDesc.prototype.stopEvent = function stopEvent(event) {
            var stop = this.widget.spec.stopEvent;
            return stop ? stop(event) : false;
        };
        Object.defineProperties(WidgetViewDesc.prototype, prototypeAccessors$1);
        return WidgetViewDesc;
    }(ViewDesc));
    // A cursor wrapper is used to put the cursor in when newly typed text
    // needs to be styled differently from its surrounding text (for
    // example through storedMarks), so that the style of the text doesn't
    // visually 'pop' between typing it and actually updating the view.
    var CursorWrapperDesc = (function (WidgetViewDesc) {
        function CursorWrapperDesc() {
            WidgetViewDesc.apply(this, arguments);
        }
        if (WidgetViewDesc)
            CursorWrapperDesc.__proto__ = WidgetViewDesc;
        CursorWrapperDesc.prototype = Object.create(WidgetViewDesc && WidgetViewDesc.prototype);
        CursorWrapperDesc.prototype.constructor = CursorWrapperDesc;
        CursorWrapperDesc.prototype.parseRule = function parseRule() {
            var content;
            for (var child = this.dom.firstChild; child; child = child.nextSibling) {
                var add = (void 0);
                if (child.nodeType == 3) {
                    var text = child.nodeValue.replace(/\ufeff/g, "");
                    if (!text) {
                        continue;
                    }
                    add = document.createTextNode(text);
                }
                else if (child.textContent == "\ufeff") {
                    continue;
                }
                else {
                    add = child.cloneNode(true);
                }
                if (!content) {
                    content = document.createDocumentFragment();
                }
                content.appendChild(add);
            }
            if (content) {
                return { skip: content };
            }
            else {
                return WidgetViewDesc.prototype.parseRule.call(this);
            }
        };
        CursorWrapperDesc.prototype.ignoreMutation = function ignoreMutation() { return false; };
        return CursorWrapperDesc;
    }(WidgetViewDesc));
    // A mark desc represents a mark. May have multiple children,
    // depending on how the mark is split. Note that marks are drawn using
    // a fixed nesting order, for simplicity and predictability, so in
    // some cases they will be split more often than would appear
    // necessary.
    var MarkViewDesc = (function (ViewDesc) {
        function MarkViewDesc(parent, mark, dom, contentDOM) {
            ViewDesc.call(this, parent, [], dom, contentDOM);
            this.mark = mark;
        }
        if (ViewDesc)
            MarkViewDesc.__proto__ = ViewDesc;
        MarkViewDesc.prototype = Object.create(ViewDesc && ViewDesc.prototype);
        MarkViewDesc.prototype.constructor = MarkViewDesc;
        MarkViewDesc.create = function create(parent, mark, inline, view) {
            var custom = view.nodeViews[mark.type.name];
            var spec = custom && custom(mark, view, inline);
            if (!spec || !spec.dom) {
                spec = prosemirrorModel.DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
            }
            return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
        };
        MarkViewDesc.prototype.parseRule = function parseRule() { return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM }; };
        MarkViewDesc.prototype.matchesMark = function matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark); };
        MarkViewDesc.prototype.markDirty = function markDirty(from, to) {
            ViewDesc.prototype.markDirty.call(this, from, to);
            // Move dirty info to nearest node view
            if (this.dirty != NOT_DIRTY) {
                var parent = this.parent;
                while (!parent.node) {
                    parent = parent.parent;
                }
                if (parent.dirty < this.dirty) {
                    parent.dirty = this.dirty;
                }
                this.dirty = NOT_DIRTY;
            }
        };
        return MarkViewDesc;
    }(ViewDesc));
    // Node view descs are the main, most common type of view desc, and
    // correspond to an actual node in the document. Unlike mark descs,
    // they populate their child array themselves.
    var NodeViewDesc = (function (ViewDesc) {
        function NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
            ViewDesc.call(this, parent, node.isLeaf ? nothing : [], dom, contentDOM);
            this.nodeDOM = nodeDOM;
            this.node = node;
            this.outerDeco = outerDeco;
            this.innerDeco = innerDeco;
            if (contentDOM) {
                this.updateChildren(view, pos);
            }
        }
        if (ViewDesc)
            NodeViewDesc.__proto__ = ViewDesc;
        NodeViewDesc.prototype = Object.create(ViewDesc && ViewDesc.prototype);
        NodeViewDesc.prototype.constructor = NodeViewDesc;
        var prototypeAccessors$2 = { size: {}, border: {} };
        // By default, a node is rendered using the `toDOM` method from the
        // node type spec. But client code can use the `nodeViews` spec to
        // supply a custom node view, which can influence various aspects of
        // the way the node works.
        //
        // (Using subclassing for this was intentionally decided against,
        // since it'd require exposing a whole slew of finnicky
        // implementation details to the user code that they probably will
        // never need.)
        NodeViewDesc.create = function create(parent, node, outerDeco, innerDeco, view, pos) {
            var custom = view.nodeViews[node.type.name], descObj;
            var spec = custom && custom(node, view, function () {
                // (This is a function that allows the custom view to find its
                // own position)
                if (!descObj) {
                    return pos;
                }
                if (descObj.parent) {
                    return descObj.parent.posBeforeChild(descObj);
                }
            }, outerDeco);
            var dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
            if (node.isText) {
                if (!dom) {
                    dom = document.createTextNode(node.text);
                }
                else if (dom.nodeType != 3) {
                    throw new RangeError("Text must be rendered as a DOM text node");
                }
            }
            else if (!dom) {
                var assign;
                ((assign = prosemirrorModel.DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)), dom = assign.dom, contentDOM = assign.contentDOM));
            }
            if (!contentDOM && !node.isText && dom.nodeName != "BR") { // Chrome gets confused by <br contenteditable=false>
                if (!dom.hasAttribute("contenteditable")) {
                    dom.contentEditable = false;
                }
                if (node.type.spec.draggable) {
                    dom.draggable = true;
                }
            }
            var nodeDOM = dom;
            dom = applyOuterDeco(dom, outerDeco, node);
            if (spec) {
                return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos + 1);
            }
            else if (node.isText) {
                return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);
            }
            else {
                return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos + 1);
            }
        };
        NodeViewDesc.prototype.parseRule = function parseRule() {
            var this$1 = this;
            // Experimental kludge to allow opt-in re-parsing of nodes
            if (this.node.type.spec.reparseInView) {
                return null;
            }
            // FIXME the assumption that this can always return the current
            // attrs means that if the user somehow manages to change the
            // attrs in the dom, that won't be picked up. Not entirely sure
            // whether this is a problem
            var rule = { node: this.node.type.name, attrs: this.node.attrs };
            if (this.node.type.spec.code) {
                rule.preserveWhitespace = "full";
            }
            if (this.contentDOM && !this.contentLost) {
                rule.contentElement = this.contentDOM;
            }
            else {
                rule.getContent = function () { return this$1.contentDOM ? prosemirrorModel.Fragment.empty : this$1.node.content; };
            }
            return rule;
        };
        NodeViewDesc.prototype.matchesNode = function matchesNode(node, outerDeco, innerDeco) {
            return this.dirty == NOT_DIRTY && node.eq(this.node) &&
                sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
        };
        prototypeAccessors$2.size.get = function () { return this.node.nodeSize; };
        prototypeAccessors$2.border.get = function () { return this.node.isLeaf ? 0 : 1; };
        // Syncs `this.children` to match `this.node.content` and the local
        // decorations, possibly introducing nesting for marks. Then, in a
        // separate step, syncs the DOM inside `this.contentDOM` to
        // `this.children`.
        NodeViewDesc.prototype.updateChildren = function updateChildren(view, pos) {
            var this$1 = this;
            var updater = new ViewTreeUpdater(this), inline = this.node.inlineContent;
            iterDeco(this.node, this.innerDeco, function (widget, i) {
                if (widget.spec.marks) {
                    updater.syncToMarks(widget.spec.marks, inline, view);
                }
                else if (widget.type.side >= 0) {
                    updater.syncToMarks(i == this$1.node.childCount ? prosemirrorModel.Mark.none : this$1.node.child(i).marks, inline, view);
                }
                // If the next node is a desc matching this widget, reuse it,
                // otherwise insert the widget as a new view desc.
                updater.placeWidget(widget, view, pos);
            }, function (child, outerDeco, innerDeco, i) {
                // Make sure the wrapping mark descs match the node's marks.
                updater.syncToMarks(child.marks, inline, view);
                // Either find an existing desc that exactly matches this node,
                // and drop the descs before it.
                updater.findNodeMatch(child, outerDeco, innerDeco, i) ||
                    // Or try updating the next desc to reflect this node.
                    updater.updateNextNode(child, outerDeco, innerDeco, view, i) ||
                    // Or just add it as a new desc.
                    updater.addNode(child, outerDeco, innerDeco, view, pos);
                pos += child.nodeSize;
            });
            // Drop all remaining descs after the current position.
            updater.syncToMarks(nothing, inline, view);
            if (this.node.isTextblock) {
                updater.addTextblockHacks();
            }
            updater.destroyRest();
            // Sync the DOM if anything changed
            if (updater.changed || this.dirty == CONTENT_DIRTY) {
                this.renderChildren();
            }
        };
        NodeViewDesc.prototype.renderChildren = function renderChildren() {
            renderDescs(this.contentDOM, this.children, NodeViewDesc.is);
            if (result.ios) {
                iosHacks(this.dom);
            }
        };
        // : (Node, [Decoration], DecorationSet, EditorView) → bool
        // If this desc be updated to match the given node decoration,
        // do so and return true.
        NodeViewDesc.prototype.update = function update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY ||
                !node.sameMarkup(this.node)) {
                return false;
            }
            this.updateInner(node, outerDeco, innerDeco, view);
            return true;
        };
        NodeViewDesc.prototype.updateInner = function updateInner(node, outerDeco, innerDeco, view) {
            this.updateOuterDeco(outerDeco);
            this.node = node;
            this.innerDeco = innerDeco;
            if (this.contentDOM) {
                this.updateChildren(view, this.posAtStart);
            }
            this.dirty = NOT_DIRTY;
        };
        NodeViewDesc.prototype.updateOuterDeco = function updateOuterDeco(outerDeco) {
            if (sameOuterDeco(outerDeco, this.outerDeco)) {
                return;
            }
            var needsWrap = this.nodeDOM.nodeType != 1;
            var oldDOM = this.dom;
            this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
            if (this.dom != oldDOM) {
                oldDOM.pmViewDesc = null;
                this.dom.pmViewDesc = this;
            }
            this.outerDeco = outerDeco;
        };
        // Mark this node as being the selected node.
        NodeViewDesc.prototype.selectNode = function selectNode() {
            this.nodeDOM.classList.add("ProseMirror-selectednode");
            if (this.contentDOM || !this.node.type.spec.draggable) {
                this.dom.draggable = true;
            }
        };
        // Remove selected node marking from this node.
        NodeViewDesc.prototype.deselectNode = function deselectNode() {
            this.nodeDOM.classList.remove("ProseMirror-selectednode");
            if (this.contentDOM || !this.node.type.spec.draggable) {
                this.dom.draggable = false;
            }
        };
        Object.defineProperties(NodeViewDesc.prototype, prototypeAccessors$2);
        return NodeViewDesc;
    }(ViewDesc));
    // Create a view desc for the top-level document node, to be exported
    // and used by the view class.
    function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
        applyOuterDeco(dom, outerDeco, doc);
        return new NodeViewDesc(null, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
    }
    var TextViewDesc = (function (NodeViewDesc) {
        function TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
            NodeViewDesc.call(this, parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view);
        }
        if (NodeViewDesc)
            TextViewDesc.__proto__ = NodeViewDesc;
        TextViewDesc.prototype = Object.create(NodeViewDesc && NodeViewDesc.prototype);
        TextViewDesc.prototype.constructor = TextViewDesc;
        TextViewDesc.prototype.parseRule = function parseRule() {
            var parent = this.nodeDOM.parentNode;
            return parent ? { skip: parent } : { ignore: true };
        };
        TextViewDesc.prototype.update = function update(node, outerDeco) {
            if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||
                !node.sameMarkup(this.node)) {
                return false;
            }
            this.updateOuterDeco(outerDeco);
            if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
                this.nodeDOM.nodeValue = node.text;
            }
            this.node = node;
            this.dirty = NOT_DIRTY;
            return true;
        };
        TextViewDesc.prototype.inParent = function inParent() {
            var parentDOM = this.parent.contentDOM;
            for (var n = this.nodeDOM; n; n = n.parentNode) {
                if (n == parentDOM) {
                    return true;
                }
            }
            return false;
        };
        TextViewDesc.prototype.domFromPos = function domFromPos(pos) {
            return { node: this.nodeDOM, offset: pos };
        };
        TextViewDesc.prototype.localPosFromDOM = function localPosFromDOM(dom, offset, bias) {
            if (dom == this.nodeDOM) {
                return this.posAtStart + Math.min(offset, this.node.text.length);
            }
            return NodeViewDesc.prototype.localPosFromDOM.call(this, dom, offset, bias);
        };
        TextViewDesc.prototype.ignoreMutation = function ignoreMutation(mutation) {
            return mutation.type != "characterData";
        };
        return TextViewDesc;
    }(NodeViewDesc));
    // A dummy desc used to tag trailing BR or span nodes created to work
    // around contentEditable terribleness.
    var BRHackViewDesc = (function (ViewDesc) {
        function BRHackViewDesc() {
            ViewDesc.apply(this, arguments);
        }
        if (ViewDesc)
            BRHackViewDesc.__proto__ = ViewDesc;
        BRHackViewDesc.prototype = Object.create(ViewDesc && ViewDesc.prototype);
        BRHackViewDesc.prototype.constructor = BRHackViewDesc;
        BRHackViewDesc.prototype.parseRule = function parseRule() { return { ignore: true }; };
        BRHackViewDesc.prototype.matchesHack = function matchesHack() { return this.dirty == NOT_DIRTY; };
        return BRHackViewDesc;
    }(ViewDesc));
    // A separate subclass is used for customized node views, so that the
    // extra checks only have to be made for nodes that are actually
    // customized.
    var CustomNodeViewDesc = (function (NodeViewDesc) {
        function CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
            NodeViewDesc.call(this, parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
            this.spec = spec;
        }
        if (NodeViewDesc)
            CustomNodeViewDesc.__proto__ = NodeViewDesc;
        CustomNodeViewDesc.prototype = Object.create(NodeViewDesc && NodeViewDesc.prototype);
        CustomNodeViewDesc.prototype.constructor = CustomNodeViewDesc;
        // A custom `update` method gets to decide whether the update goes
        // through. If it does, and there's a `contentDOM` node, our logic
        // updates the children.
        CustomNodeViewDesc.prototype.update = function update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY) {
                return false;
            }
            if (this.spec.update) {
                var result$$1 = this.spec.update(node, outerDeco);
                if (result$$1) {
                    this.updateInner(node, outerDeco, innerDeco, view);
                }
                return result$$1;
            }
            else if (!this.contentDOM && !node.isLeaf) {
                return false;
            }
            else {
                return NodeViewDesc.prototype.update.call(this, node, outerDeco, innerDeco, view);
            }
        };
        CustomNodeViewDesc.prototype.selectNode = function selectNode() {
            this.spec.selectNode ? this.spec.selectNode() : NodeViewDesc.prototype.selectNode.call(this);
        };
        CustomNodeViewDesc.prototype.deselectNode = function deselectNode() {
            this.spec.deselectNode ? this.spec.deselectNode() : NodeViewDesc.prototype.deselectNode.call(this);
        };
        CustomNodeViewDesc.prototype.setSelection = function setSelection(anchor, head, root, force) {
            this.spec.setSelection ? this.spec.setSelection(anchor, head, root)
                : NodeViewDesc.prototype.setSelection.call(this, anchor, head, root, force);
        };
        CustomNodeViewDesc.prototype.destroy = function destroy() {
            if (this.spec.destroy) {
                this.spec.destroy();
            }
            NodeViewDesc.prototype.destroy.call(this);
        };
        CustomNodeViewDesc.prototype.stopEvent = function stopEvent(event) {
            return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
        };
        CustomNodeViewDesc.prototype.ignoreMutation = function ignoreMutation(mutation) {
            return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : NodeViewDesc.prototype.ignoreMutation.call(this, mutation);
        };
        return CustomNodeViewDesc;
    }(NodeViewDesc));
    // : (dom.Node, [ViewDesc])
    // Sync the content of the given DOM node with the nodes associated
    // with the given array of view descs, recursing into mark descs
    // because this should sync the subtree for a whole node at a time.
    function renderDescs(parentDOM, descs) {
        var dom = parentDOM.firstChild;
        for (var i = 0; i < descs.length; i++) {
            var desc = descs[i], childDOM = desc.dom;
            if (childDOM.parentNode == parentDOM) {
                while (childDOM != dom) {
                    dom = rm(dom);
                }
                dom = dom.nextSibling;
            }
            else {
                parentDOM.insertBefore(childDOM, dom);
            }
            if (desc instanceof MarkViewDesc) {
                var pos = dom ? dom.previousSibling : parentDOM.lastChild;
                renderDescs(desc.contentDOM, desc.children);
                dom = pos ? pos.nextSibling : parentDOM.firstChild;
            }
        }
        while (dom) {
            dom = rm(dom);
        }
    }
    function OuterDecoLevel(nodeName) {
        if (nodeName) {
            this.nodeName = nodeName;
        }
    }
    OuterDecoLevel.prototype = Object.create(null);
    var noDeco = [new OuterDecoLevel];
    function computeOuterDeco(outerDeco, node, needsWrap) {
        if (outerDeco.length == 0) {
            return noDeco;
        }
        var top = needsWrap ? noDeco[0] : new OuterDecoLevel, result$$1 = [top];
        for (var i = 0; i < outerDeco.length; i++) {
            var attrs = outerDeco[i].type.attrs, cur = top;
            if (!attrs) {
                continue;
            }
            if (attrs.nodeName) {
                result$$1.push(cur = new OuterDecoLevel(attrs.nodeName));
            }
            for (var name in attrs) {
                var val = attrs[name];
                if (val == null) {
                    continue;
                }
                if (needsWrap && result$$1.length == 1) {
                    result$$1.push(cur = top = new OuterDecoLevel(node.isInline ? "span" : "div"));
                }
                if (name == "class") {
                    cur.class = (cur.class ? cur.class + " " : "") + val;
                }
                else if (name == "style") {
                    cur.style = (cur.style ? cur.style + ";" : "") + val;
                }
                else if (name != "nodeName") {
                    cur[name] = val;
                }
            }
        }
        return result$$1;
    }
    function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
        // Shortcut for trivial case
        if (prevComputed == noDeco && curComputed == noDeco) {
            return nodeDOM;
        }
        var curDOM = nodeDOM;
        for (var i = 0; i < curComputed.length; i++) {
            var deco = curComputed[i], prev = prevComputed[i];
            if (i) {
                var parent = (void 0);
                if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&
                    (parent = nodeDOM.parentNode) && parent.tagName.toLowerCase() == deco.nodeName) {
                    curDOM = parent;
                }
                else {
                    parent = document.createElement(deco.nodeName);
                    parent.appendChild(curDOM);
                    curDOM = parent;
                }
            }
            patchAttributes(curDOM, prev || noDeco[0], deco);
        }
        return curDOM;
    }
    function patchAttributes(dom, prev, cur) {
        for (var name in prev) {
            if (name != "class" && name != "style" && name != "nodeName" && !(name in cur)) {
                dom.removeAttribute(name);
            }
        }
        for (var name$1 in cur) {
            if (name$1 != "class" && name$1 != "style" && name$1 != "nodeName" && cur[name$1] != prev[name$1]) {
                dom.setAttribute(name$1, cur[name$1]);
            }
        }
        if (prev.class != cur.class) {
            var prevList = prev.class ? prev.class.split(" ") : nothing;
            var curList = cur.class ? cur.class.split(" ") : nothing;
            for (var i = 0; i < prevList.length; i++) {
                if (curList.indexOf(prevList[i]) == -1) {
                    dom.classList.remove(prevList[i]);
                }
            }
            for (var i$1 = 0; i$1 < curList.length; i$1++) {
                if (prevList.indexOf(curList[i$1]) == -1) {
                    dom.classList.add(curList[i$1]);
                }
            }
        }
        if (prev.style != cur.style) {
            if (prev.style) {
                var prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
                while (m = prop.exec(prev.style)) {
                    dom.style[m[1].toLowerCase()] = "";
                }
            }
            if (cur.style) {
                dom.style.cssText += cur.style;
            }
        }
    }
    function applyOuterDeco(dom, deco, node) {
        return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));
    }
    // : ([Decoration], [Decoration]) → bool
    function sameOuterDeco(a, b) {
        if (a.length != b.length) {
            return false;
        }
        for (var i = 0; i < a.length; i++) {
            if (!a[i].type.eq(b[i].type)) {
                return false;
            }
        }
        return true;
    }
    // Remove a DOM node and return its next sibling.
    function rm(dom) {
        var next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    // Helper class for incrementally updating a tree of mark descs and
    // the widget and node descs inside of them.
    var ViewTreeUpdater = function ViewTreeUpdater(top) {
        this.top = top;
        // Index into `this.top`'s child array, represents the current
        // update position.
        this.index = 0;
        // When entering a mark, the current top and index are pushed
        // onto this.
        this.stack = [];
        // Tracks whether anything was changed
        this.changed = false;
        this.preMatched = preMatch(top.node.content, top.children);
    };
    // Destroy and remove the children between the given indices in
    // `this.top`.
    ViewTreeUpdater.prototype.destroyBetween = function destroyBetween(start, end) {
        var this$1 = this;
        if (start == end) {
            return;
        }
        for (var i = start; i < end; i++) {
            this$1.top.children[i].destroy();
        }
        this.top.children.splice(start, end - start);
        this.changed = true;
    };
    // Destroy all remaining children in `this.top`.
    ViewTreeUpdater.prototype.destroyRest = function destroyRest() {
        this.destroyBetween(this.index, this.top.children.length);
    };
    // : ([Mark], EditorView)
    // Sync the current stack of mark descs with the given array of
    // marks, reusing existing mark descs when possible.
    ViewTreeUpdater.prototype.syncToMarks = function syncToMarks(marks, inline, view) {
        var this$1 = this;
        var keep = 0, depth = this.stack.length >> 1;
        var maxKeep = Math.min(depth, marks.length);
        while (keep < maxKeep &&
            (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1]).matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false) {
            keep++;
        }
        while (keep < depth) {
            this$1.destroyRest();
            this$1.top.dirty = NOT_DIRTY;
            this$1.index = this$1.stack.pop();
            this$1.top = this$1.stack.pop();
            depth--;
        }
        while (depth < marks.length) {
            this$1.stack.push(this$1.top, this$1.index + 1);
            var found = -1;
            for (var i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
                if (this$1.top.children[i].matchesMark(marks[depth])) {
                    found = i;
                    break;
                }
            }
            if (found > -1) {
                if (found > this$1.index) {
                    this$1.changed = true;
                    this$1.top.children.splice(this$1.index, found - this$1.index);
                }
                this$1.top = this$1.top.children[this$1.index];
            }
            else {
                var markDesc = MarkViewDesc.create(this$1.top, marks[depth], inline, view);
                this$1.top.children.splice(this$1.index, 0, markDesc);
                this$1.top = markDesc;
                this$1.changed = true;
            }
            this$1.index = 0;
            depth++;
        }
    };
    // : (Node, [Decoration], DecorationSet) → bool
    // Try to find a node desc matching the given data. Skip over it and
    // return true when successful.
    ViewTreeUpdater.prototype.findNodeMatch = function findNodeMatch(node, outerDeco, innerDeco, index) {
        var this$1 = this;
        var found = -1, preMatch = this.preMatched[index], children = this.top.children;
        if (preMatch && preMatch.matchesNode(node, outerDeco, innerDeco)) {
            found = children.indexOf(preMatch);
        }
        else {
            for (var i = this.index, e = Math.min(children.length, i + 5); i < e; i++) {
                var child = children[i];
                if (child.matchesNode(node, outerDeco, innerDeco) && this$1.preMatched.indexOf(child) < 0) {
                    found = i;
                    break;
                }
            }
        }
        if (found < 0) {
            return false;
        }
        this.destroyBetween(this.index, found);
        this.index++;
        return true;
    };
    // : (Node, [Decoration], DecorationSet, EditorView, Fragment, number) → bool
    // Try to update the next node, if any, to the given data. Checks
    // pre-matches to avoid overwriting nodes that could still be used.
    ViewTreeUpdater.prototype.updateNextNode = function updateNextNode(node, outerDeco, innerDeco, view, index) {
        if (this.index == this.top.children.length) {
            return false;
        }
        var next = this.top.children[this.index];
        if (next instanceof NodeViewDesc) {
            var preMatch = this.preMatched.indexOf(next);
            if (preMatch > -1 && preMatch != index) {
                return false;
            }
            var nextDOM = next.dom;
            if (next.update(node, outerDeco, innerDeco, view)) {
                if (next.dom != nextDOM) {
                    this.changed = true;
                }
                this.index++;
                return true;
            }
        }
        return false;
    };
    // : (Node, [Decoration], DecorationSet, EditorView)
    // Insert the node as a newly created node desc.
    ViewTreeUpdater.prototype.addNode = function addNode(node, outerDeco, innerDeco, view, pos) {
        this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos));
        this.changed = true;
    };
    ViewTreeUpdater.prototype.placeWidget = function placeWidget(widget, view, pos) {
        if (this.index < this.top.children.length && this.top.children[this.index].matchesWidget(widget)) {
            this.index++;
        }
        else {
            var desc = new (widget.spec.isCursorWrapper ? CursorWrapperDesc : WidgetViewDesc)(this.top, widget, view, pos);
            this.top.children.splice(this.index++, 0, desc);
            this.changed = true;
        }
    };
    // Make sure a textblock looks and behaves correctly in
    // contentEditable.
    ViewTreeUpdater.prototype.addTextblockHacks = function addTextblockHacks() {
        var lastChild = this.top.children[this.index - 1];
        while (lastChild instanceof MarkViewDesc) {
            lastChild = lastChild.children[lastChild.children.length - 1];
        }
        if (!lastChild || // Empty textblock
            !(lastChild instanceof TextViewDesc) ||
            /\n$/.test(lastChild.node.text)) {
            if (this.index < this.top.children.length && this.top.children[this.index].matchesHack()) {
                this.index++;
            }
            else {
                var dom = document.createElement("br");
                this.top.children.splice(this.index++, 0, new BRHackViewDesc(this.top, nothing, dom, null));
                this.changed = true;
            }
        }
    };
    // : (Fragment, [ViewDesc]) → [ViewDesc]
    // Iterate from the end of the fragment and array of descs to find
    // directly matching ones, in order to avoid overeagerly reusing
    // those for other nodes. Returns an array whose positions correspond
    // to node positions in the fragment, and whose elements are either
    // descs matched to the child at that index, or empty.
    function preMatch(frag, descs) {
        var result$$1 = [], end = frag.childCount;
        for (var i = descs.length - 1; end > 0 && i >= 0; i--) {
            var desc = descs[i], node = desc.node;
            if (!node) {
                continue;
            }
            if (node != frag.child(end - 1)) {
                break;
            }
            result$$1[--end] = desc;
        }
        return result$$1;
    }
    function compareSide(a, b) { return a.type.side - b.type.side; }
    // : (ViewDesc, DecorationSet, (Decoration), (Node, [Decoration], DecorationSet, number))
    // This function abstracts iterating over the nodes and decorations in
    // a fragment. Calls `onNode` for each node, with its local and child
    // decorations. Splits text nodes when there is a decoration starting
    // or ending inside of them. Calls `onWidget` for each widget.
    function iterDeco(parent, deco, onWidget, onNode) {
        var locals = deco.locals(parent), offset = 0;
        // Simple, cheap variant for when there are no local decorations
        if (locals.length == 0) {
            for (var i = 0; i < parent.childCount; i++) {
                var child = parent.child(i);
                onNode(child, locals, deco.forChild(offset, child), i);
                offset += child.nodeSize;
            }
            return;
        }
        var decoIndex = 0, active = [], restNode = null;
        for (var parentIndex = 0;;) {
            if (decoIndex < locals.length && locals[decoIndex].to == offset) {
                var widget = locals[decoIndex++], widgets = (void 0);
                while (decoIndex < locals.length && locals[decoIndex].to == offset) {
                    (widgets || (widgets = [widget])).push(locals[decoIndex++]);
                }
                if (widgets) {
                    widgets.sort(compareSide);
                    for (var i$1 = 0; i$1 < widgets.length; i$1++) {
                        onWidget(widgets[i$1], parentIndex);
                    }
                }
                else {
                    onWidget(widget, parentIndex);
                }
            }
            var child$1 = (void 0);
            if (restNode) {
                child$1 = restNode;
                restNode = null;
            }
            else if (parentIndex < parent.childCount) {
                child$1 = parent.child(parentIndex++);
            }
            else {
                break;
            }
            for (var i$2 = 0; i$2 < active.length; i$2++) {
                if (active[i$2].to <= offset) {
                    active.splice(i$2--, 1);
                }
            }
            while (decoIndex < locals.length && locals[decoIndex].from == offset) {
                active.push(locals[decoIndex++]);
            }
            var end = offset + child$1.nodeSize;
            if (child$1.isText) {
                var cutAt = end;
                if (decoIndex < locals.length && locals[decoIndex].from < cutAt) {
                    cutAt = locals[decoIndex].from;
                }
                for (var i$3 = 0; i$3 < active.length; i$3++) {
                    if (active[i$3].to < cutAt) {
                        cutAt = active[i$3].to;
                    }
                }
                if (cutAt < end) {
                    restNode = child$1.cut(cutAt - offset);
                    child$1 = child$1.cut(0, cutAt - offset);
                    end = cutAt;
                }
            }
            onNode(child$1, active.length ? active.slice() : nothing, deco.forChild(offset, child$1), parentIndex - 1);
            offset = end;
        }
    }
    // List markers in Mobile Safari will mysteriously disappear
    // sometimes. This works around that.
    function iosHacks(dom) {
        if (dom.nodeName == "UL" || dom.nodeName == "OL") {
            var oldCSS = dom.style.cssText;
            dom.style.cssText = oldCSS + "; list-style: square !important";
            window.getComputedStyle(dom).listStyle;
            dom.style.cssText = oldCSS;
        }
    }
    function moveSelectionBlock(state, dir) {
        var ref = state.selection;
        var $anchor = ref.$anchor;
        var $head = ref.$head;
        var $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
        var $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
        return $start && prosemirrorState.Selection.findFrom($start, dir);
    }
    function apply(view, sel) {
        view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
        return true;
    }
    function selectHorizontally(view, dir, mods) {
        var sel = view.state.selection;
        if (sel instanceof prosemirrorState.TextSelection) {
            if (!sel.empty || mods.indexOf("s") > -1) {
                return false;
            }
            else if (view.endOfTextblock(dir > 0 ? "right" : "left")) {
                var next = moveSelectionBlock(view.state, dir);
                if (next && (next instanceof prosemirrorState.NodeSelection)) {
                    return apply(view, next);
                }
                return false;
            }
            else {
                var $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
                if (node && prosemirrorState.NodeSelection.isSelectable(node)) {
                    var nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
                    if (node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM) {
                        return apply(view, new prosemirrorState.NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));
                    }
                }
                return false;
            }
        }
        else if (sel instanceof prosemirrorState.NodeSelection && sel.node.isInline) {
            return apply(view, new prosemirrorState.TextSelection(dir > 0 ? sel.$to : sel.$from));
        }
        else {
            var next$1 = moveSelectionBlock(view.state, dir);
            if (next$1) {
                return apply(view, next$1);
            }
            return false;
        }
    }
    function nodeLen(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function isIgnorable(dom) {
        var desc = dom.pmViewDesc;
        return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != "BR");
    }
    // Make sure the cursor isn't directly after one or more ignored
    // nodes, which will confuse the browser's cursor motion logic.
    function skipIgnoredNodesLeft(view) {
        var sel = view.root.getSelection();
        var node = sel.focusNode, offset = sel.focusOffset;
        if (!node) {
            return;
        }
        var moveNode, moveOffset, force = false;
        // Gecko will do odd things when the selection is directly in front
        // of a non-editable node, so in that case, move it into the next
        // node if possible. Issue prosemirror/prosemirror#832.
        if (result.gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset])) {
            force = true;
        }
        for (;;) {
            if (offset > 0) {
                if (node.nodeType != 1) {
                    if (node.nodeType == 3 && node.nodeValue.charAt(offset - 1) == "\ufeff") {
                        // IE11's cursor will still be stuck when placed at the
                        // beginning of the cursor wrapper text node (#807)
                        if (result.ie && result.ie_version <= 11) {
                            force = true;
                        }
                        moveNode = node;
                        moveOffset = --offset;
                    }
                    else {
                        break;
                    }
                }
                else {
                    var before = node.childNodes[offset - 1];
                    if (isIgnorable(before)) {
                        moveNode = node;
                        moveOffset = --offset;
                    }
                    else if (before.nodeType == 3) {
                        node = before;
                        offset = node.nodeValue.length;
                    }
                    else {
                        break;
                    }
                }
            }
            else if (isBlockNode(node)) {
                break;
            }
            else {
                var prev = node.previousSibling;
                while (prev && isIgnorable(prev)) {
                    moveNode = node.parentNode;
                    moveOffset = domIndex(prev);
                    prev = prev.previousSibling;
                }
                if (!prev) {
                    node = node.parentNode;
                    if (node == view.dom) {
                        break;
                    }
                    offset = 0;
                }
                else {
                    node = prev;
                    offset = nodeLen(node);
                }
            }
        }
        if (force) {
            setSelFocus(view, sel, node, offset);
        }
        else if (moveNode) {
            setSelFocus(view, sel, moveNode, moveOffset);
        }
    }
    // Make sure the cursor isn't directly before one or more ignored
    // nodes.
    function skipIgnoredNodesRight(view) {
        var sel = view.root.getSelection();
        var node = sel.focusNode, offset = sel.focusOffset;
        if (!node) {
            return;
        }
        var len = nodeLen(node);
        var moveNode, moveOffset;
        for (;;) {
            if (offset < len) {
                if (node.nodeType != 1) {
                    break;
                }
                var after = node.childNodes[offset];
                if (isIgnorable(after)) {
                    moveNode = node;
                    moveOffset = ++offset;
                }
                else {
                    break;
                }
            }
            else if (isBlockNode(node)) {
                break;
            }
            else {
                var next = node.nextSibling;
                while (next && isIgnorable(next)) {
                    moveNode = next.parentNode;
                    moveOffset = domIndex(next) + 1;
                    next = next.nextSibling;
                }
                if (!next) {
                    node = node.parentNode;
                    if (node == view.dom) {
                        break;
                    }
                    offset = len = 0;
                }
                else {
                    node = next;
                    offset = 0;
                    len = nodeLen(node);
                }
            }
        }
        if (moveNode) {
            setSelFocus(view, sel, moveNode, moveOffset);
        }
    }
    function isBlockNode(dom) {
        var desc = dom.pmViewDesc;
        return desc && desc.node && desc.node.isBlock;
    }
    function setSelFocus(view, sel, node, offset) {
        if (selectionCollapsed(sel)) {
            var range = document.createRange();
            range.setEnd(node, offset);
            range.setStart(node, offset);
            sel.removeAllRanges();
            sel.addRange(range);
        }
        else if (sel.extend) {
            sel.extend(node, offset);
        }
        view.selectionReader.storeDOMState(view.selection);
    }
    // : (EditorState, number)
    // Check whether vertical selection motion would involve node
    // selections. If so, apply it (if not, the result is left to the
    // browser)
    function selectVertically(view, dir, mods) {
        var sel = view.state.selection;
        if (sel instanceof prosemirrorState.TextSelection && !sel.empty || mods.indexOf("s") > -1) {
            return false;
        }
        var $from = sel.$from;
        var $to = sel.$to;
        if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
            var next = moveSelectionBlock(view.state, dir);
            if (next && (next instanceof prosemirrorState.NodeSelection)) {
                return apply(view, next);
            }
        }
        if (!$from.parent.inlineContent) {
            var beyond = prosemirrorState.Selection.findFrom(dir < 0 ? $from : $to, dir);
            return beyond ? apply(view, beyond) : true;
        }
        return false;
    }
    function stopNativeHorizontalDelete(view, dir) {
        if (!(view.state.selection instanceof prosemirrorState.TextSelection)) {
            return true;
        }
        var ref = view.state.selection;
        var $head = ref.$head;
        var $anchor = ref.$anchor;
        var empty = ref.empty;
        if (!$head.sameParent($anchor)) {
            return true;
        }
        if (!empty) {
            return false;
        }
        if (view.endOfTextblock(dir > 0 ? "forward" : "backward")) {
            return true;
        }
        var nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
        if (nextNode && !nextNode.isText) {
            var tr = view.state.tr;
            if (dir < 0) {
                tr.delete($head.pos - nextNode.nodeSize, $head.pos);
            }
            else {
                tr.delete($head.pos, $head.pos + nextNode.nodeSize);
            }
            view.dispatch(tr);
            return true;
        }
        return false;
    }
    function switchEditable(view, node, state) {
        view.domObserver.stop();
        node.contentEditable = state;
        view.domObserver.start();
    }
    // Issue #867 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821
    // In which Chrome does really wrong things when the down arrow is
    // pressed when the cursor is directly at the start of a textblock and
    // has an uneditable node after it
    function chromeDownArrowBug(view) {
        if (!result.chrome || view.state.selection.$head.parentOffset > 0) {
            return;
        }
        var ref = view.root.getSelection();
        var focusNode = ref.focusNode;
        var focusOffset = ref.focusOffset;
        if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&
            focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
            var child = focusNode.firstChild;
            switchEditable(view, child, true);
            setTimeout(function () { return switchEditable(view, child, false); }, 20);
        }
    }
    // A backdrop key mapping used to make sure we always suppress keys
    // that have a dangerous default effect, even if the commands they are
    // bound to return false, and to make sure that cursor-motion keys
    // find a cursor (as opposed to a node selection) when pressed. For
    // cursor-motion keys, the code in the handlers also takes care of
    // block selections.
    function getMods(event) {
        var result$$1 = "";
        if (event.ctrlKey) {
            result$$1 += "c";
        }
        if (event.metaKey) {
            result$$1 += "m";
        }
        if (event.altKey) {
            result$$1 += "a";
        }
        if (event.shiftKey) {
            result$$1 += "s";
        }
        return result$$1;
    }
    function captureKeyDown(view, event) {
        var code = event.keyCode, mods = getMods(event);
        if (code == 8 || (result.mac && code == 72 && mods == "c")) { // Backspace, Ctrl-h on Mac
            return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view);
        }
        else if (code == 46 || (result.mac && code == 68 && mods == "c")) { // Delete, Ctrl-d on Mac
            return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view);
        }
        else if (code == 13 || code == 27) { // Enter, Esc
            return true;
        }
        else if (code == 37) { // Left arrow
            return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view);
        }
        else if (code == 39) { // Right arrow
            return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view);
        }
        else if (code == 38) { // Up arrow
            return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view);
        }
        else if (code == 40) { // Down arrow
            return chromeDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view);
        }
        else if (mods == (result.mac ? "m" : "c") &&
            (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]
            return true;
        }
        return false;
    }
    var TrackedRecord = function TrackedRecord(prev, mapping, state) {
        this.prev = prev;
        this.mapping = mapping;
        this.state = state;
    };
    var TrackMappings = function TrackMappings(state) {
        this.seen = [new TrackedRecord(null, null, state)];
        // Kludge to listen to state changes globally in order to be able
        // to find mappings from a given state to another.
        prosemirrorState.EditorState.addApplyListener(this.track = this.track.bind(this));
    };
    TrackMappings.prototype.destroy = function destroy() {
        prosemirrorState.EditorState.removeApplyListener(this.track);
    };
    TrackMappings.prototype.find = function find(state) {
        var this$1 = this;
        for (var i = this.seen.length - 1; i >= 0; i--) {
            var record = this$1.seen[i];
            if (record.state == state) {
                return record;
            }
        }
    };
    TrackMappings.prototype.track = function track(old, tr, state) {
        var found = this.seen.length < 200 ? this.find(old) : null;
        if (found) {
            this.seen.push(new TrackedRecord(found, tr.docChanged ? tr.mapping : null, state));
        }
    };
    TrackMappings.prototype.getMapping = function getMapping(state, appendTo) {
        var found = this.find(state);
        if (!found) {
            return null;
        }
        var mappings = [];
        for (var rec = found; rec; rec = rec.prev) {
            if (rec.mapping) {
                mappings.push(rec.mapping);
            }
        }
        var result = appendTo || new prosemirrorTransform.Mapping;
        for (var i = mappings.length - 1; i >= 0; i--) {
            result.appendMapping(mappings[i]);
        }
        return result;
    };
    // Track the state of the DOM selection, creating transactions to
    // update the selection state when necessary.
    var SelectionReader = function SelectionReader(view) {
        var this$1 = this;
        this.view = view;
        // Track the state of the DOM selection.
        this.lastAnchorNode = this.lastHeadNode = this.lastAnchorOffset = this.lastHeadOffset = null;
        this.lastSelection = view.state.selection;
        this.ignoreUpdates = false;
        this.suppressUpdates = false;
        this.poller = poller(this);
        this.focusFunc = (function () { return this$1.poller.start(hasFocusAndSelection(this$1.view)); }).bind(this);
        this.blurFunc = this.poller.stop;
        view.dom.addEventListener("focus", this.focusFunc);
        view.dom.addEventListener("blur", this.blurFunc);
        if (!view.editable) {
            this.poller.start(false);
        }
    };
    SelectionReader.prototype.destroy = function destroy() {
        this.view.dom.removeEventListener("focus", this.focusFunc);
        this.view.dom.removeEventListener("blur", this.blurFunc);
        this.poller.stop();
    };
    SelectionReader.prototype.poll = function poll(origin) { this.poller.poll(origin); };
    SelectionReader.prototype.editableChanged = function editableChanged() {
        if (!this.view.editable) {
            this.poller.start();
        }
        else if (!hasFocusAndSelection(this.view)) {
            this.poller.stop();
        }
    };
    // : () → bool
    // Whether the DOM selection has changed from the last known state.
    SelectionReader.prototype.domChanged = function domChanged() {
        var sel = this.view.root.getSelection();
        return sel.anchorNode != this.lastAnchorNode || sel.anchorOffset != this.lastAnchorOffset ||
            sel.focusNode != this.lastHeadNode || sel.focusOffset != this.lastHeadOffset;
    };
    // Store the current state of the DOM selection.
    SelectionReader.prototype.storeDOMState = function storeDOMState(selection) {
        var sel = this.view.root.getSelection();
        this.lastAnchorNode = sel.anchorNode;
        this.lastAnchorOffset = sel.anchorOffset;
        this.lastHeadNode = sel.focusNode;
        this.lastHeadOffset = sel.focusOffset;
        this.lastSelection = selection;
    };
    SelectionReader.prototype.clearDOMState = function clearDOMState() {
        this.lastAnchorNode = this.lastSelection = null;
    };
    // : (?string)
    // When the DOM selection changes in a notable manner, modify the
    // current selection state to match.
    SelectionReader.prototype.readFromDOM = function readFromDOM(origin) {
        if (this.ignoreUpdates || !this.domChanged() || !hasFocusAndSelection(this.view)) {
            return;
        }
        if (this.suppressUpdates) {
            return selectionToDOM(this.view);
        }
        if (!this.view.inDOMChange) {
            this.view.domObserver.flush();
        }
        if (this.view.inDOMChange) {
            return;
        }
        var domSel = this.view.root.getSelection(), doc = this.view.state.doc;
        var nearestDesc = this.view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
        var head = this.view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
        var $head = doc.resolve(head), $anchor, selection;
        if (selectionCollapsed(domSel)) {
            $anchor = $head;
            while (nearestDesc && !nearestDesc.node) {
                nearestDesc = nearestDesc.parent;
            }
            if (nearestDesc && nearestDesc.node.isAtom && prosemirrorState.NodeSelection.isSelectable(nearestDesc.node) && nearestDesc.parent) {
                var pos = nearestDesc.posBefore;
                selection = new prosemirrorState.NodeSelection(head == pos ? $head : doc.resolve(pos));
            }
        }
        else {
            $anchor = doc.resolve(this.view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset));
        }
        if (!selection) {
            var bias = origin == "pointer" || (this.view.state.selection.head < $head.pos && !inWidget) ? 1 : -1;
            selection = selectionBetween(this.view, $anchor, $head, bias);
        }
        if (!this.view.state.selection.eq(selection)) {
            var tr = this.view.state.tr.setSelection(selection);
            if (origin == "pointer") {
                tr.setMeta("pointer", true);
            }
            else if (origin == "key") {
                tr.scrollIntoView();
            }
            this.view.dispatch(tr);
        }
        else {
            selectionToDOM(this.view);
        }
    };
    // There's two polling models. On browsers that support the
    // selectionchange event (everything except Firefox < 52, basically), we
    // register a listener for that whenever the editor is focused.
    var SelectionChangePoller = function SelectionChangePoller(reader) {
        var this$1 = this;
        this.listening = false;
        this.curOrigin = null;
        this.originTime = 0;
        this.reader = reader;
        this.readFunc = function () { return reader.readFromDOM(this$1.originTime > Date.now() - 50 ? this$1.curOrigin : null); };
    };
    SelectionChangePoller.prototype.poll = function poll(origin) {
        this.curOrigin = origin;
        this.originTime = Date.now();
    };
    SelectionChangePoller.prototype.start = function start(andRead) {
        if (!this.listening) {
            var doc = this.reader.view.dom.ownerDocument;
            doc.addEventListener("selectionchange", this.readFunc);
            this.listening = true;
            if (andRead) {
                this.readFunc();
            }
        }
    };
    SelectionChangePoller.prototype.stop = function stop() {
        if (this.listening) {
            var doc = this.reader.view.dom.ownerDocument;
            doc.removeEventListener("selectionchange", this.readFunc);
            this.listening = false;
        }
    };
    // On Browsers that don't support the selectionchange event,
    // we use timeout-based polling.
    var TimeoutPoller = function TimeoutPoller(reader) {
        // The timeout ID for the poller when active.
        this.polling = null;
        this.reader = reader;
        this.pollFunc = this.doPoll.bind(this, null);
    };
    TimeoutPoller.prototype.doPoll = function doPoll(origin) {
        var view = this.reader.view;
        if (view.focused || !view.editable) {
            this.reader.readFromDOM(origin);
            this.polling = setTimeout(this.pollFunc, 100);
        }
        else {
            this.polling = null;
        }
    };
    TimeoutPoller.prototype.poll = function poll(origin) {
        clearTimeout(this.polling);
        this.polling = setTimeout(origin ? this.doPoll.bind(this, origin) : this.pollFunc, 0);
    };
    TimeoutPoller.prototype.start = function start() {
        if (this.polling == null) {
            this.poll();
        }
    };
    TimeoutPoller.prototype.stop = function stop() {
        clearTimeout(this.polling);
        this.polling = null;
    };
    function poller(reader) {
        return new ("onselectionchange" in document ? SelectionChangePoller : TimeoutPoller)(reader);
    }
    function selectionToDOM(view, takeFocus, force) {
        var sel = view.state.selection;
        syncNodeSelection(view, sel);
        if (view.editable && !view.hasFocus()) {
            if (!takeFocus) {
                return;
            }
            // See https://bugzilla.mozilla.org/show_bug.cgi?id=921444
            if (result.gecko && result.gecko_version <= 55) {
                view.selectionReader.ignoreUpdates = true;
                view.dom.focus();
                view.selectionReader.ignoreUpdates = false;
            }
        }
        else if (!view.editable && !hasSelection(view) && !takeFocus) {
            return;
        }
        var reader = view.selectionReader;
        if (reader.lastSelection && reader.lastSelection.eq(sel) && !reader.domChanged()) {
            return;
        }
        reader.ignoreUpdates = true;
        if (view.cursorWrapper) {
            selectCursorWrapper(view);
        }
        else {
            var anchor = sel.anchor;
            var head = sel.head;
            var resetEditableFrom, resetEditableTo;
            if (brokenSelectBetweenUneditable && !(sel instanceof prosemirrorState.TextSelection)) {
                if (!sel.$from.parent.inlineContent) {
                    resetEditableFrom = temporarilyEditableNear(view, sel.from);
                }
                if (!sel.empty && !sel.$from.parent.inlineContent) {
                    resetEditableTo = temporarilyEditableNear(view, sel.to);
                }
            }
            view.docView.setSelection(anchor, head, view.root, force);
            if (brokenSelectBetweenUneditable) {
                if (resetEditableFrom) {
                    resetEditableFrom.contentEditable = "false";
                }
                if (resetEditableTo) {
                    resetEditableTo.contentEditable = "false";
                }
            }
            if (sel.visible) {
                view.dom.classList.remove("ProseMirror-hideselection");
            }
            else if (anchor != head) {
                view.dom.classList.add("ProseMirror-hideselection");
                if ("onselectionchange" in document) {
                    removeClassOnSelectionChange(view);
                }
            }
        }
        reader.storeDOMState(sel);
        reader.ignoreUpdates = false;
    }
    // Kludge to work around Webkit not allowing a selection to start/end
    // between non-editable block nodes. We briefly make something
    // editable, set the selection, then set it uneditable again.
    var brokenSelectBetweenUneditable = result.safari || result.chrome && result.chrome_version < 63;
    function temporarilyEditableNear(view, pos) {
        var ref = view.docView.domFromPos(pos);
        var node = ref.node;
        var offset = ref.offset;
        var after = offset < node.childNodes.length ? node.childNodes[offset] : null;
        var before = offset ? node.childNodes[offset - 1] : null;
        if ((!after || after.contentEditable == "false") && (!before || before.contentEditable == "false")) {
            if (after) {
                after.contentEditable = "true";
                return after;
            }
            else if (before) {
                before.contentEditable = "true";
                return before;
            }
        }
    }
    function removeClassOnSelectionChange(view) {
        var doc = view.dom.ownerDocument;
        doc.removeEventListener("selectionchange", view.hideSelectionGuard);
        var domSel = view.root.getSelection();
        var node = domSel.anchorNode, offset = domSel.anchorOffset;
        doc.addEventListener("selectionchange", view.hideSelectionGuard = function () {
            if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
                doc.removeEventListener("selectionchange", view.hideSelectionGuard);
                view.dom.classList.remove("ProseMirror-hideselection");
            }
        });
    }
    function selectCursorWrapper(view) {
        var domSel = view.root.getSelection(), range = document.createRange();
        var node = view.cursorWrapper.dom;
        range.setEnd(node, node.childNodes.length);
        range.collapse(false);
        domSel.removeAllRanges();
        domSel.addRange(range);
        // Kludge to kill 'control selection' in IE11 when selecting an
        // invisible cursor wrapper, since that would result in those weird
        // resize handles and a selection that considers the absolutely
        // positioned wrapper, rather than the root editable node, the
        // focused element.
        if (!view.state.selection.visible && result.ie && result.ie_version <= 11) {
            node.disabled = true;
            node.disabled = false;
        }
    }
    function syncNodeSelection(view, sel) {
        if (sel instanceof prosemirrorState.NodeSelection) {
            var desc = view.docView.descAt(sel.from);
            if (desc != view.lastSelectedViewDesc) {
                clearNodeSelection(view);
                if (desc) {
                    desc.selectNode();
                }
                view.lastSelectedViewDesc = desc;
            }
        }
        else {
            clearNodeSelection(view);
        }
    }
    // Clear all DOM statefulness of the last node selection.
    function clearNodeSelection(view) {
        if (view.lastSelectedViewDesc) {
            view.lastSelectedViewDesc.deselectNode();
            view.lastSelectedViewDesc = null;
        }
    }
    function selectionBetween(view, $anchor, $head, bias) {
        return view.someProp("createSelectionBetween", function (f) { return f(view, $anchor, $head); })
            || prosemirrorState.TextSelection.between($anchor, $head, bias);
    }
    function hasFocusAndSelection(view) {
        if (view.editable && view.root.activeElement != view.dom) {
            return false;
        }
        return hasSelection(view);
    }
    function hasSelection(view) {
        var sel = view.root.getSelection();
        if (!sel.anchorNode) {
            return false;
        }
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&
                (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
        }
        catch (_) {
            return false;
        }
    }
    function nonInclusiveMark(mark) {
        return mark.type.spec.inclusive === false;
    }
    function needsCursorWrapper(state) {
        var ref = state.selection;
        var $head = ref.$head;
        var $anchor = ref.$anchor;
        var visible = ref.visible;
        var $pos = $head.pos == $anchor.pos && (!visible || $head.parent.inlineContent) ? $head : null;
        if ($pos && (!visible || state.storedMarks || $pos.parent.content.length == 0 ||
            $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.some(nonInclusiveMark))) {
            return $pos;
        }
        else {
            return null;
        }
    }
    function anchorInRightPlace(view) {
        var anchorDOM = view.docView.domFromPos(view.state.selection.anchor);
        var domSel = view.root.getSelection();
        return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
    }
    var DOMChange = function DOMChange(view, composing) {
        var this$1 = this;
        this.view = view;
        this.state = view.state;
        this.composing = composing;
        this.compositionEndedAt = null;
        this.from = this.to = null;
        this.typeOver = false;
        this.timeout = composing ? null : setTimeout(function () { return this$1.finish(); }, DOMChange.commitTimeout);
        this.trackMappings = new TrackMappings(view.state);
        // If there have been changes since this DOM update started, we must
        // map our start and end positions, as well as the new selection
        // positions, through them. This tracks that mapping.
        this.mapping = new prosemirrorTransform.Mapping;
        this.mappingTo = view.state;
    };
    DOMChange.prototype.addRange = function addRange(from, to) {
        if (this.from == null) {
            this.from = from;
            this.to = to;
        }
        else {
            this.from = Math.min(from, this.from);
            this.to = Math.max(to, this.to);
        }
    };
    DOMChange.prototype.changedRange = function changedRange() {
        if (this.from == null) {
            return rangeAroundSelection(this.state.selection);
        }
        var $from = this.state.doc.resolve(Math.min(this.from, this.state.selection.from)), $to = this.state.doc.resolve(this.to);
        var shared = $from.sharedDepth(this.to);
        return { from: $from.before(shared + 1), to: $to.after(shared + 1) };
    };
    DOMChange.prototype.markDirty = function markDirty(range) {
        if (this.from == null) {
            this.view.docView.markDirty((range = range || this.changedRange()).from, range.to);
        }
        else {
            this.view.docView.markDirty(this.from, this.to);
        }
    };
    DOMChange.prototype.stateUpdated = function stateUpdated(state) {
        if (this.trackMappings.getMapping(state, this.mapping)) {
            this.trackMappings.destroy();
            this.trackMappings = new TrackMappings(state);
            this.mappingTo = state;
            return true;
        }
        else {
            this.markDirty();
            this.destroy();
            return false;
        }
    };
    DOMChange.prototype.finish = function finish(force) {
        clearTimeout(this.timeout);
        if (this.composing && !force) {
            return;
        }
        this.view.domObserver.flush();
        var range = this.changedRange();
        this.markDirty(range);
        this.destroy();
        var sel = this.state.selection, allowTypeOver = this.typeOver && sel instanceof prosemirrorState.TextSelection &&
            !sel.empty && sel.$head.sameParent(sel.$anchor);
        readDOMChange(this.view, this.mapping, this.state, range, allowTypeOver);
        // If the reading didn't result in a view update, force one by
        // resetting the view to its current state.
        if (this.view.docView.dirty) {
            this.view.updateState(this.view.state);
        }
    };
    DOMChange.prototype.destroy = function destroy() {
        clearTimeout(this.timeout);
        this.trackMappings.destroy();
        this.view.inDOMChange = null;
    };
    DOMChange.prototype.compositionEnd = function compositionEnd(event) {
        var this$1 = this;
        if (this.composing) {
            this.composing = false;
            if (event) {
                this.compositionEndedAt = event.timeStamp;
            }
            this.timeout = setTimeout(function () { return this$1.finish(); }, 50);
        }
    };
    DOMChange.prototype.ignoreKeyDownOnCompositionEnd = function ignoreKeyDownOnCompositionEnd(event) {
        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
        // On Japanese input method editors (IMEs), the Enter key is used to confirm character
        // selection. On Safari, when Enter is pressed, compositionend and keydown events are
        // emitted. The keydown event triggers newline insertion, which we don't want.
        // This method returns true if the keydown event should be ignored.
        // We only ignore it once, as pressing Enter a second time *should* insert a newline.
        // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.
        // This guards against the case where compositionend is triggered without the keyboard
        // (e.g. character confirmation may be done with the mouse), and keydown is triggered
        // afterwards- we wouldn't want to ignore the keydown event in this case.
        if (result.safari && this.compositionEndedAt !== null && Math.abs(event.timeStamp - this.compositionEndedAt) < 500) {
            this.compositionEndedAt = null;
            return true;
        }
        return false;
    };
    DOMChange.start = function start(view, composing) {
        if (view.inDOMChange) {
            if (composing) {
                clearTimeout(view.inDOMChange.timeout);
                view.inDOMChange.composing = true;
                view.inDOMChange.compositionEndedAt = null;
            }
        }
        else {
            view.inDOMChange = new DOMChange(view, composing);
        }
        return view.inDOMChange;
    };
    DOMChange.commitTimeout = 20;
    // Note that all referencing and parsing is done with the
    // start-of-operation selection and document, since that's the one
    // that the DOM represents. If any changes came in in the meantime,
    // the modification is mapped over those before it is applied, in
    // readDOMChange.
    function parseBetween(view, oldState, range) {
        var ref = view.docView.parseRange(range.from, range.to);
        var parent = ref.node;
        var fromOffset = ref.fromOffset;
        var toOffset = ref.toOffset;
        var from = ref.from;
        var to = ref.to;
        var domSel = view.root.getSelection(), find = null, anchor = domSel.anchorNode;
        if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
            find = [{ node: anchor, offset: domSel.anchorOffset }];
            if (!selectionCollapsed(domSel)) {
                find.push({ node: domSel.focusNode, offset: domSel.focusOffset });
            }
        }
        // Work around issue in Chrome where backspacing sometimes replaces
        // the deleted content with a random BR node (issues #799, #831)
        if (result.chrome && view.lastKeyCode === 8) {
            for (var off = toOffset; off > fromOffset; off--) {
                var node = parent.childNodes[off - 1], desc = node.pmViewDesc;
                if (node.nodeType == "BR" && !desc) {
                    toOffset = off;
                    break;
                }
                if (!desc || desc.size) {
                    break;
                }
            }
        }
        var startDoc = oldState.doc;
        var parser = view.someProp("domParser") || prosemirrorModel.DOMParser.fromSchema(view.state.schema);
        var $from = startDoc.resolve(from);
        var sel = null, doc = parser.parse(parent, {
            topNode: $from.parent,
            topMatch: $from.parent.contentMatchAt($from.index()),
            topOpen: true,
            from: fromOffset,
            to: toOffset,
            preserveWhitespace: $from.parent.type.spec.code ? "full" : true,
            editableContent: true,
            findPositions: find,
            ruleFromNode: ruleFromNode(parser, $from),
            context: $from
        });
        if (find && find[0].pos != null) {
            var anchor$1 = find[0].pos, head = find[1] && find[1].pos;
            if (head == null) {
                head = anchor$1;
            }
            sel = { anchor: anchor$1 + from, head: head + from };
        }
        return { doc: doc, sel: sel, from: from, to: to };
    }
    function ruleFromNode(parser, context) {
        return function (dom) {
            var desc = dom.pmViewDesc;
            if (desc) {
                return desc.parseRule();
            }
            else if (dom.nodeName == "BR" && dom.parentNode) {
                // Safari replaces the list item or table cell with a BR
                // directly in the list node (?!) if you delete the last
                // character in a list item or table cell (#708, #862)
                if (result.safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
                    return parser.matchTag(document.createElement("li"), context);
                }
                else if (dom.parentNode.lastChild == dom || result.safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
                    return { ignore: true };
                }
            }
        };
    }
    function isAtEnd($pos, depth) {
        for (var i = depth || 0; i < $pos.depth; i++) {
            if ($pos.index(i) + 1 < $pos.node(i).childCount) {
                return false;
            }
        }
        return $pos.parentOffset == $pos.parent.content.size;
    }
    function isAtStart($pos, depth) {
        for (var i = depth || 0; i < $pos.depth; i++) {
            if ($pos.index(0) > 0) {
                return false;
            }
        }
        return $pos.parentOffset == 0;
    }
    function rangeAroundSelection(selection) {
        // Intentionally uses $head/$anchor because those will correspond to the DOM selection
        var $from = selection.$anchor.min(selection.$head), $to = selection.$anchor.max(selection.$head);
        if ($from.sameParent($to) && $from.parent.inlineContent && $from.parentOffset && $to.parentOffset < $to.parent.content.size) {
            var startOff = Math.max(0, $from.parentOffset);
            var size = $from.parent.content.size;
            var endOff = Math.min(size, $to.parentOffset);
            if (startOff > 0) {
                startOff = $from.parent.childBefore(startOff).offset;
            }
            if (endOff < size) {
                var after = $from.parent.childAfter(endOff);
                endOff = after.offset + after.node.nodeSize;
            }
            var nodeStart = $from.start();
            return { from: nodeStart + startOff, to: nodeStart + endOff };
        }
        else {
            for (var depth = 0;; depth++) {
                var fromStart = isAtStart($from, depth + 1), toEnd = isAtEnd($to, depth + 1);
                if (fromStart || toEnd || $from.index(depth) != $to.index(depth) || $to.node(depth).isTextblock) {
                    var from = $from.before(depth + 1), to = $to.after(depth + 1);
                    if (fromStart && $from.index(depth) > 0) {
                        from -= $from.node(depth).child($from.index(depth) - 1).nodeSize;
                    }
                    if (toEnd && $to.index(depth) + 1 < $to.node(depth).childCount) {
                        to += $to.node(depth).child($to.index(depth) + 1).nodeSize;
                    }
                    return { from: from, to: to };
                }
            }
        }
    }
    function keyEvent(keyCode, key) {
        var event = document.createEvent("Event");
        event.initEvent("keydown", true, true);
        event.keyCode = keyCode;
        event.key = event.code = key;
        return event;
    }
    function readDOMChange(view, mapping, oldState, range, allowTypeOver) {
        var parse = parseBetween(view, oldState, range);
        var doc = oldState.doc, compare = doc.slice(parse.from, parse.to);
        var preferredPos, preferredSide;
        // Prefer anchoring to end when Backspace is pressed
        if (view.lastKeyCode === 8 && Date.now() - 100 < view.lastKeyCodeTime) {
            preferredPos = oldState.selection.to;
            preferredSide = "end";
        }
        else {
            preferredPos = oldState.selection.from;
            preferredSide = "start";
        }
        view.lastKeyCode = null;
        var change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
        if (!change) {
            if (allowTypeOver) {
                var state = view.state, sel = state.selection;
                view.dispatch(state.tr.replaceSelectionWith(state.schema.text(state.doc.textBetween(sel.from, sel.to)), true).scrollIntoView());
            }
            else if (parse.sel) {
                var sel$1 = resolveSelection(view, view.state.doc, mapping, parse.sel);
                if (sel$1 && !sel$1.eq(view.state.selection)) {
                    view.dispatch(view.state.tr.setSelection(sel$1));
                }
            }
            return;
        }
        // Handle the case where overwriting a selection by typing matches
        // the start or end of the selected content, creating a change
        // that's smaller than what was actually overwritten.
        if (oldState.selection.from < oldState.selection.to &&
            change.start == change.endB &&
            oldState.selection instanceof prosemirrorState.TextSelection) {
            if (change.start > oldState.selection.from && change.start <= oldState.selection.from + 2) {
                change.start = oldState.selection.from;
            }
            else if (change.endA < oldState.selection.to && change.endA >= oldState.selection.to - 2) {
                change.endB += (oldState.selection.to - change.endA);
                change.endA = oldState.selection.to;
            }
        }
        var $from = parse.doc.resolveNoCache(change.start - parse.from);
        var $to = parse.doc.resolveNoCache(change.endB - parse.from);
        var nextSel;
        // If this looks like the effect of pressing Enter, just dispatch an
        // Enter key instead.
        if (!$from.sameParent($to) && $from.pos < parse.doc.content.size &&
            (nextSel = prosemirrorState.Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&
            nextSel.head == $to.pos &&
            view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); })) {
            return;
        }
        // Same for backspace
        if (oldState.selection.anchor > change.start &&
            looksLikeJoin(doc, change.start, change.endA, $from, $to) &&
            view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(8, "Backspace")); })) {
            if (result.android && result.chrome) { // #820
                view.selectionReader.suppressUpdates = true;
                setTimeout(function () { return view.selectionReader.suppressUpdates = false; }, 50);
            }
            return;
        }
        var from = mapping.map(change.start), to = mapping.map(change.endA, -1);
        var tr, storedMarks, markChange, $from1;
        if ($from.sameParent($to) && $from.parent.inlineContent) {
            if ($from.pos == $to.pos) { // Deletion
                tr = view.state.tr.delete(from, to);
                storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));
            }
            else if ( // Adding or removing a mark
            change.endA == change.endB && ($from1 = doc.resolve(change.start)) &&
                (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $from1.parent.content.cut($from1.parentOffset, change.endA - $from1.start())))) {
                tr = view.state.tr;
                if (markChange.type == "add") {
                    tr.addMark(from, to, markChange.mark);
                }
                else {
                    tr.removeMark(from, to, markChange.mark);
                }
            }
            else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
                // Both positions in the same text node -- simply insert text
                var text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
                if (view.someProp("handleTextInput", function (f) { return f(view, from, to, text); })) {
                    return;
                }
                tr = view.state.tr.insertText(text, from, to);
            }
        }
        if (!tr) {
            tr = view.state.tr.replace(from, to, parse.doc.slice(change.start - parse.from, change.endB - parse.from));
        }
        if (parse.sel) {
            var sel$2 = resolveSelection(view, tr.doc, mapping, parse.sel);
            if (sel$2) {
                tr.setSelection(sel$2);
            }
        }
        if (storedMarks) {
            tr.ensureMarks(storedMarks);
        }
        view.dispatch(tr.scrollIntoView());
    }
    function resolveSelection(view, doc, mapping, parsedSel) {
        if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size) {
            return null;
        }
        return selectionBetween(view, doc.resolve(mapping.map(parsedSel.anchor)), doc.resolve(mapping.map(parsedSel.head)));
    }
    // : (Fragment, Fragment) → ?{mark: Mark, type: string}
    // Given two same-length, non-empty fragments of inline content,
    // determine whether the first could be created from the second by
    // removing or adding a single mark type.
    function isMarkChange(cur, prev) {
        var curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
        var added = curMarks, removed = prevMarks, type, mark, update;
        for (var i = 0; i < prevMarks.length; i++) {
            added = prevMarks[i].removeFromSet(added);
        }
        for (var i$1 = 0; i$1 < curMarks.length; i$1++) {
            removed = curMarks[i$1].removeFromSet(removed);
        }
        if (added.length == 1 && removed.length == 0) {
            mark = added[0];
            type = "add";
            update = function (node) { return node.mark(mark.addToSet(node.marks)); };
        }
        else if (added.length == 0 && removed.length == 1) {
            mark = removed[0];
            type = "remove";
            update = function (node) { return node.mark(mark.removeFromSet(node.marks)); };
        }
        else {
            return null;
        }
        var updated = [];
        for (var i$2 = 0; i$2 < prev.childCount; i$2++) {
            updated.push(update(prev.child(i$2)));
        }
        if (prosemirrorModel.Fragment.from(updated).eq(cur)) {
            return { mark: mark, type: type };
        }
    }
    function looksLikeJoin(old, start, end, $newStart, $newEnd) {
        if (!$newStart.parent.isTextblock ||
            // The content must have shrunk
            end - start <= $newEnd.pos - $newStart.pos ||
            // newEnd must point directly at or after the end of the block that newStart points into
            skipClosingAndOpening($newStart, true, false) < $newEnd.pos) {
            return false;
        }
        var $start = old.resolve(start);
        // Start must be at the end of a block
        if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock) {
            return false;
        }
        var $next = old.resolve(skipClosingAndOpening($start, true, true));
        // The next textblock must start before end and end near it
        if (!$next.parent.isTextblock || $next.pos > end ||
            skipClosingAndOpening($next, true, false) < end) {
            return false;
        }
        // The fragments after the join point must match
        return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
    }
    function skipClosingAndOpening($pos, fromEnd, mayOpen) {
        var depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
        while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
            depth--;
            end++;
            fromEnd = false;
        }
        if (mayOpen) {
            var next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
            while (next && !next.isLeaf) {
                next = next.firstChild;
                end++;
            }
        }
        return end;
    }
    function findDiff(a, b, pos, preferredPos, preferredSide) {
        var start = a.findDiffStart(b, pos);
        if (start == null) {
            return null;
        }
        var ref = a.findDiffEnd(b, pos + a.size, pos + b.size);
        var endA = ref.a;
        var endB = ref.b;
        if (preferredSide == "end") {
            var adjust = Math.max(0, start - Math.min(endA, endB));
            preferredPos -= endA + adjust - start;
        }
        if (endA < start && a.size < b.size) {
            var move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
            start -= move;
            endB = start + (endB - endA);
            endA = start;
        }
        else if (endB < start) {
            var move$1 = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
            start -= move$1;
            endA = start + (endA - endB);
            endB = start;
        }
        return { start: start, endA: endA, endB: endB };
    }
    function serializeForClipboard(view, slice) {
        var context = [];
        var content = slice.content;
        var openStart = slice.openStart;
        var openEnd = slice.openEnd;
        while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
            openStart--;
            openEnd--;
            var node = content.firstChild;
            context.push(node.type.name, node.type.hasRequiredAttrs() ? node.attrs : null);
            content = node.content;
        }
        var serializer = view.someProp("clipboardSerializer") || prosemirrorModel.DOMSerializer.fromSchema(view.state.schema);
        var wrap = document.createElement("div");
        wrap.appendChild(serializer.serializeFragment(content));
        var firstChild = wrap.firstChild, needsWrap;
        while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
            for (var i = needsWrap.length - 1; i >= 0; i--) {
                var wrapper = document.createElement(needsWrap[i]);
                while (wrap.firstChild) {
                    wrapper.appendChild(wrap.firstChild);
                }
                wrap.appendChild(wrapper);
            }
            firstChild = wrap.firstChild;
        }
        if (firstChild && firstChild.nodeType == 1) {
            firstChild.setAttribute("data-pm-slice", (openStart + " " + openEnd + " " + (JSON.stringify(context))));
        }
        var text = view.someProp("clipboardTextSerializer", function (f) { return f(slice); }) ||
            slice.content.textBetween(0, slice.content.size, "\n\n");
        return { dom: wrap, text: text };
    }
    // : (EditorView, string, string, ?bool, ResolvedPos) → ?Slice
    // Read a slice of content from the clipboard (or drop data).
    function parseFromClipboard(view, text, html, plainText, $context) {
        var dom, inCode = $context.parent.type.spec.code, slice;
        if (!html && !text) {
            return null;
        }
        var asText = text && (plainText || inCode || !html);
        if (asText) {
            view.someProp("transformPastedText", function (f) { text = f(text); });
            if (inCode) {
                return new prosemirrorModel.Slice(prosemirrorModel.Fragment.from(view.state.schema.text(text)), 0, 0);
            }
            var parsed = view.someProp("clipboardTextParser", function (f) { return f(text, $context); });
            if (parsed) {
                slice = parsed;
            }
            else {
                dom = document.createElement("div");
                text.trim().split(/(?:\r\n?|\n)+/).forEach(function (block) {
                    dom.appendChild(document.createElement("p")).textContent = block;
                });
            }
        }
        else {
            view.someProp("transformPastedHTML", function (f) { return html = f(html); });
            dom = readHTML(html);
        }
        var contextNode = dom && dom.querySelector("[data-pm-slice]");
        var sliceData = contextNode && /^(\d+) (\d+) (.*)/.exec(contextNode.getAttribute("data-pm-slice"));
        if (!slice) {
            var parser = view.someProp("clipboardParser") || view.someProp("domParser") || prosemirrorModel.DOMParser.fromSchema(view.state.schema);
            slice = parser.parseSlice(dom, { preserveWhitespace: !!(asText || sliceData), context: $context });
        }
        if (sliceData) {
            slice = addContext(new prosemirrorModel.Slice(slice.content, Math.min(slice.openStart, +sliceData[1]), Math.min(slice.openEnd, +sliceData[2])), sliceData[3]);
        }
        else // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent
         {
            slice = prosemirrorModel.Slice.maxOpen(normalizeSiblings(slice.content, $context), false);
        }
        view.someProp("transformPasted", function (f) { slice = f(slice); });
        return slice;
    }
    // Takes a slice parsed with parseSlice, which means there hasn't been
    // any content-expression checking done on the top nodes, tries to
    // find a parent node in the current context that might fit the nodes,
    // and if successful, rebuilds the slice so that it fits into that parent.
    //
    // This addresses the problem that Transform.replace expects a
    // coherent slice, and will fail to place a set of siblings that don't
    // fit anywhere in the schema.
    function normalizeSiblings(fragment, $context) {
        if (fragment.childCount < 2) {
            return fragment;
        }
        var loop = function (d) {
            var parent = $context.node(d);
            var match = parent.contentMatchAt($context.index(d));
            var lastWrap = (void 0), result = [];
            fragment.forEach(function (node) {
                if (!result) {
                    return;
                }
                var wrap = match.findWrapping(node.type), inLast;
                if (!wrap) {
                    return result = null;
                }
                if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {
                    result[result.length - 1] = inLast;
                }
                else {
                    if (result.length) {
                        result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
                    }
                    var wrapped = withWrappers(node, wrap);
                    result.push(wrapped);
                    match = match.matchType(wrapped.type, wrapped.attrs);
                    lastWrap = wrap;
                }
            });
            if (result) {
                return { v: prosemirrorModel.Fragment.from(result) };
            }
        };
        for (var d = $context.depth; d >= 0; d--) {
            var returned = loop(d);
            if (returned)
                return returned.v;
        }
        return fragment;
    }
    function withWrappers(node, wrap, from) {
        if (from === void 0)
            from = 0;
        for (var i = wrap.length - 1; i >= from; i--) {
            node = wrap[i].create(null, prosemirrorModel.Fragment.from(node));
        }
        return node;
    }
    // Used to group adjacent nodes wrapped in similar parents by
    // normalizeSiblings into the same parent node
    function addToSibling(wrap, lastWrap, node, sibling, depth) {
        if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {
            var inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);
            if (inner) {
                return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
            }
            var match = sibling.contentMatchAt(sibling.childCount);
            if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1])) {
                return sibling.copy(sibling.content.append(prosemirrorModel.Fragment.from(withWrappers(node, wrap, depth + 1))));
            }
        }
    }
    function closeRight(node, depth) {
        if (depth == 0) {
            return node;
        }
        var fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
        var fill = node.contentMatchAt(node.childCount).fillBefore(prosemirrorModel.Fragment.empty, true);
        return node.copy(fragment.append(fill));
    }
    // Trick from jQuery -- some elements must be wrapped in other
    // elements for innerHTML to work. I.e. if you do `div.innerHTML =
    // "<td>..</td>"` the table cells are ignored.
    var wrapMap = { thead: ["table"], colgroup: ["table"], col: ["table", "colgroup"],
        tr: ["table", "tbody"], td: ["table", "tbody", "tr"], th: ["table", "tbody", "tr"] };
    var detachedDoc = null;
    function readHTML(html) {
        var metas = /(\s*<meta [^>]*>)*/.exec(html);
        if (metas) {
            html = html.slice(metas[0].length);
        }
        var doc = detachedDoc || (detachedDoc = document.implementation.createHTMLDocument("title"));
        var elt = doc.createElement("div");
        var firstTag = /(?:<meta [^>]*>)*<([a-z][^>\s]+)/i.exec(html), wrap, depth = 0;
        if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()]) {
            html = wrap.map(function (n) { return "<" + n + ">"; }).join("") + html + wrap.map(function (n) { return "</" + n + ">"; }).reverse().join("");
            depth = wrap.length;
        }
        elt.innerHTML = html;
        for (var i = 0; i < depth; i++) {
            elt = elt.firstChild;
        }
        return elt;
    }
    function addContext(slice, context) {
        if (!slice.size) {
            return slice;
        }
        var schema = slice.content.firstChild.type.schema, array;
        try {
            array = JSON.parse(context);
        }
        catch (e) {
            return slice;
        }
        var content = slice.content;
        var openStart = slice.openStart;
        var openEnd = slice.openEnd;
        for (var i = array.length - 2; i >= 0; i -= 2) {
            var type = schema.nodes[array[i]];
            if (!type || type.hasRequiredAttrs()) {
                break;
            }
            content = prosemirrorModel.Fragment.from(type.create(array[i + 1], content));
            openStart++;
            openEnd++;
        }
        return new prosemirrorModel.Slice(content, openStart, openEnd);
    }
    var observeOptions = { childList: true, characterData: true, attributes: true, subtree: true, characterDataOldValue: true };
    // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
    var useCharData = result.ie && result.ie_version <= 11;
    var DOMObserver = function DOMObserver(view) {
        var this$1 = this;
        this.view = view;
        this.observer = window.MutationObserver &&
            new window.MutationObserver(function (mutations) { return this$1.registerMutations(mutations); });
        if (useCharData) {
            this.onCharData = function (e) { return this$1.registerMutation({ target: e.target, type: "characterData", oldValue: e.prevValue }); };
        }
    };
    DOMObserver.prototype.start = function start() {
        if (this.observer) {
            this.observer.observe(this.view.dom, observeOptions);
        }
        if (useCharData) {
            this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
        }
    };
    DOMObserver.prototype.stop = function stop() {
        if (this.observer) {
            this.flush();
            this.observer.disconnect();
        }
        if (useCharData) {
            this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
    };
    DOMObserver.prototype.flush = function flush() {
        if (this.observer) {
            this.registerMutations(this.observer.takeRecords());
        }
    };
    DOMObserver.prototype.registerMutations = function registerMutations(mutations) {
        var this$1 = this;
        for (var i = 0; i < mutations.length; i++) {
            this$1.registerMutation(mutations[i]);
        }
    };
    DOMObserver.prototype.registerMutation = function registerMutation(mut) {
        if (!this.view.editable) {
            return;
        }
        var desc = this.view.docView.nearestDesc(mut.target);
        if (mut.type == "attributes" &&
            (desc == this.view.docView || mut.attributeName == "contenteditable")) {
            return;
        }
        if (!desc || desc.ignoreMutation(mut)) {
            return;
        }
        var from, to;
        if (mut.type == "childList") {
            var fromOffset = mut.previousSibling && mut.previousSibling.parentNode == mut.target
                ? domIndex(mut.previousSibling) + 1 : 0;
            if (fromOffset == -1) {
                return;
            }
            from = desc.localPosFromDOM(mut.target, fromOffset, -1);
            var toOffset = mut.nextSibling && mut.nextSibling.parentNode == mut.target
                ? domIndex(mut.nextSibling) : mut.target.childNodes.length;
            if (toOffset == -1) {
                return;
            }
            to = desc.localPosFromDOM(mut.target, toOffset, 1);
        }
        else if (mut.type == "attributes") {
            from = desc.posAtStart - desc.border;
            to = desc.posAtEnd + desc.border;
        }
        else { // "characterData"
            from = desc.posAtStart;
            to = desc.posAtEnd;
            // An event was generated for a text change that didn't change
            // any text. Mark the dom change to fall back to assuming the
            // selection was typed over with an identical value if it can't
            // find another change.
            if (mut.target.nodeValue == mut.oldValue) {
                DOMChange.start(this.view).typeOver = true;
            }
        }
        DOMChange.start(this.view).addRange(from, to);
    };
    // A collection of DOM events that occur within the editor, and callback functions
    // to invoke when the event fires.
    var handlers = {};
    var editHandlers = {};
    function initInput(view) {
        view.shiftKey = false;
        view.mouseDown = null;
        view.inDOMChange = null;
        view.lastKeyCode = null;
        view.lastKeyCodeTime = 0;
        view.domObserver = new DOMObserver(view);
        view.domObserver.start();
        view.eventHandlers = Object.create(null);
        var loop = function (event) {
            var handler = handlers[event];
            view.dom.addEventListener(event, view.eventHandlers[event] = function (event) {
                if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&
                    (view.editable || !(event.type in editHandlers))) {
                    handler(view, event);
                }
            });
        };
        for (var event in handlers)
            loop(event);
        ensureListeners(view);
    }
    function destroyInput(view) {
        view.domObserver.stop();
        if (view.inDOMChange) {
            view.inDOMChange.destroy();
        }
        for (var type in view.eventHandlers) {
            view.dom.removeEventListener(type, view.eventHandlers[type]);
        }
    }
    function ensureListeners(view) {
        view.someProp("handleDOMEvents", function (currentHandlers) {
            for (var type in currentHandlers) {
                if (!view.eventHandlers[type]) {
                    view.dom.addEventListener(type, view.eventHandlers[type] = function (event) { return runCustomHandler(view, event); });
                }
            }
        });
    }
    function runCustomHandler(view, event) {
        return view.someProp("handleDOMEvents", function (handlers) {
            var handler = handlers[event.type];
            return handler ? handler(view, event) || event.defaultPrevented : false;
        });
    }
    function eventBelongsToView(view, event) {
        if (!event.bubbles) {
            return true;
        }
        if (event.defaultPrevented) {
            return false;
        }
        for (var node = event.target; node != view.dom; node = node.parentNode) {
            if (!node || node.nodeType == 11 ||
                (node.pmViewDesc && node.pmViewDesc.stopEvent(event))) {
                return false;
            }
        }
        return true;
    }
    function dispatchEvent(view, event) {
        if (!runCustomHandler(view, event) && handlers[event.type] &&
            (view.editable || !(event.type in editHandlers))) {
            handlers[event.type](view, event);
        }
    }
    editHandlers.keydown = function (view, event) {
        view.shiftKey = event.keyCode == 16 || event.shiftKey;
        if (view.inDOMChange) {
            if (view.inDOMChange.composing) {
                return;
            }
            if (view.inDOMChange.ignoreKeyDownOnCompositionEnd(event)) {
                return;
            }
            view.inDOMChange.finish();
        }
        view.lastKeyCode = event.keyCode;
        view.lastKeyCodeTime = Date.now();
        if (view.someProp("handleKeyDown", function (f) { return f(view, event); }) || captureKeyDown(view, event)) {
            event.preventDefault();
        }
        else {
            view.selectionReader.poll("key");
        }
    };
    editHandlers.keyup = function (view, e) {
        if (e.keyCode == 16) {
            view.shiftKey = false;
        }
    };
    editHandlers.keypress = function (view, event) {
        if (view.inDOMChange || !event.charCode ||
            event.ctrlKey && !event.altKey || result.mac && event.metaKey) {
            return;
        }
        if (view.someProp("handleKeyPress", function (f) { return f(view, event); })) {
            event.preventDefault();
            return;
        }
        var sel = view.state.selection;
        if (!(sel instanceof prosemirrorState.TextSelection) || !sel.$from.sameParent(sel.$to)) {
            var text = String.fromCharCode(event.charCode);
            if (!view.someProp("handleTextInput", function (f) { return f(view, sel.$from.pos, sel.$to.pos, text); })) {
                view.dispatch(view.state.tr.insertText(text).scrollIntoView());
            }
            event.preventDefault();
        }
    };
    function eventCoords(event) { return { left: event.clientX, top: event.clientY }; }
    var lastClick = { time: 0, x: 0, y: 0, type: "" };
    function isNear(event, click) {
        var dx = click.x - event.clientX, dy = click.y - event.clientY;
        return dx * dx + dy * dy < 100;
    }
    function runHandlerOnContext(view, propName, pos, inside, event) {
        if (inside == -1) {
            return false;
        }
        var $pos = view.state.doc.resolve(inside);
        var loop = function (i) {
            if (view.someProp(propName, function (f) {
                return i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)
                    : f(view, pos, $pos.node(i), $pos.before(i), event, false);
            })) {
                return { v: true };
            }
        };
        for (var i = $pos.depth + 1; i > 0; i--) {
            var returned = loop(i);
            if (returned)
                return returned.v;
        }
        return false;
    }
    function updateSelection(view, selection, origin) {
        if (!view.focused) {
            view.focus();
        }
        var tr = view.state.tr.setSelection(selection);
        if (origin == "pointer") {
            tr.setMeta("pointer", true);
        }
        view.dispatch(tr);
    }
    function selectClickedLeaf(view, inside) {
        if (inside == -1) {
            return false;
        }
        var $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
        if (node && node.isAtom && prosemirrorState.NodeSelection.isSelectable(node)) {
            updateSelection(view, new prosemirrorState.NodeSelection($pos), "pointer");
            return true;
        }
        return false;
    }
    function selectClickedNode(view, inside) {
        if (inside == -1) {
            return false;
        }
        var sel = view.state.selection, selectedNode, selectAt;
        if (sel instanceof prosemirrorState.NodeSelection) {
            selectedNode = sel.node;
        }
        var $pos = view.state.doc.resolve(inside);
        for (var i = $pos.depth + 1; i > 0; i--) {
            var node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
            if (prosemirrorState.NodeSelection.isSelectable(node)) {
                if (selectedNode && sel.$from.depth > 0 &&
                    i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos) {
                    selectAt = $pos.before(sel.$from.depth);
                }
                else {
                    selectAt = $pos.before(i);
                }
                break;
            }
        }
        if (selectAt != null) {
            updateSelection(view, prosemirrorState.NodeSelection.create(view.state.doc, selectAt), "pointer");
            return true;
        }
        else {
            return false;
        }
    }
    function handleSingleClick(view, pos, inside, event, selectNode) {
        return runHandlerOnContext(view, "handleClickOn", pos, inside, event) ||
            view.someProp("handleClick", function (f) { return f(view, pos, event); }) ||
            (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
    }
    function handleDoubleClick(view, pos, inside, event) {
        return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) ||
            view.someProp("handleDoubleClick", function (f) { return f(view, pos, event); });
    }
    function handleTripleClick(view, pos, inside, event) {
        return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) ||
            view.someProp("handleTripleClick", function (f) { return f(view, pos, event); }) ||
            defaultTripleClick(view, inside);
    }
    function defaultTripleClick(view, inside) {
        var doc = view.state.doc;
        if (inside == -1) {
            if (doc.inlineContent) {
                updateSelection(view, prosemirrorState.TextSelection.create(doc, 0, doc.content.size), "pointer");
                return true;
            }
            return false;
        }
        var $pos = doc.resolve(inside);
        for (var i = $pos.depth + 1; i > 0; i--) {
            var node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
            var nodePos = $pos.before(i);
            if (node.inlineContent) {
                updateSelection(view, prosemirrorState.TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), "pointer");
            }
            else if (prosemirrorState.NodeSelection.isSelectable(node)) {
                updateSelection(view, prosemirrorState.NodeSelection.create(doc, nodePos), "pointer");
            }
            else {
                continue;
            }
            return true;
        }
    }
    function forceDOMFlush(view) {
        if (!view.inDOMChange) {
            return false;
        }
        view.inDOMChange.finish(true);
        return true;
    }
    var selectNodeModifier = result.mac ? "metaKey" : "ctrlKey";
    handlers.mousedown = function (view, event) {
        view.shiftKey = event.shiftKey;
        var flushed = forceDOMFlush(view);
        var now = Date.now(), type = "singleClick";
        if (now - lastClick.time < 500 && isNear(event, lastClick) && !event[selectNodeModifier]) {
            if (lastClick.type == "singleClick") {
                type = "doubleClick";
            }
            else if (lastClick.type == "doubleClick") {
                type = "tripleClick";
            }
        }
        lastClick = { time: now, x: event.clientX, y: event.clientY, type: type };
        var pos = view.posAtCoords(eventCoords(event));
        if (!pos) {
            return;
        }
        if (type == "singleClick") {
            view.mouseDown = new MouseDown(view, pos, event, flushed);
        }
        else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
            event.preventDefault();
        }
        else {
            view.selectionReader.poll("pointer");
        }
    };
    var MouseDown = function MouseDown(view, pos, event, flushed) {
        var this$1 = this;
        this.view = view;
        this.pos = pos;
        this.event = event;
        this.flushed = flushed;
        this.selectNode = event[selectNodeModifier];
        this.allowDefault = event.shiftKey;
        var targetNode, targetPos;
        if (pos.inside > -1) {
            targetNode = view.state.doc.nodeAt(pos.inside);
            targetPos = pos.inside;
        }
        else {
            var $pos = view.state.doc.resolve(pos.pos);
            targetNode = $pos.parent;
            targetPos = $pos.depth ? $pos.before() : 0;
        }
        this.mightDrag = null;
        var target = flushed ? null : event.target;
        var targetDesc = target ? view.docView.nearestDesc(target, true) : null;
        this.target = targetDesc ? targetDesc.dom : null;
        if (targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||
            view.state.selection instanceof prosemirrorState.NodeSelection && targetPos == view.state.selection.from) {
            this.mightDrag = { node: targetNode,
                pos: targetPos,
                addAttr: this.target && !this.target.draggable,
                setUneditable: this.target && result.gecko && !this.target.hasAttribute("contentEditable") };
        }
        if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
            this.view.domObserver.stop();
            if (this.mightDrag.addAttr) {
                this.target.draggable = true;
            }
            if (this.mightDrag.setUneditable) {
                setTimeout(function () { return this$1.target.setAttribute("contentEditable", "false"); }, 20);
            }
            this.view.domObserver.start();
        }
        view.root.addEventListener("mouseup", this.up = this.up.bind(this));
        view.root.addEventListener("mousemove", this.move = this.move.bind(this));
        view.selectionReader.poll("pointer");
    };
    MouseDown.prototype.done = function done() {
        this.view.root.removeEventListener("mouseup", this.up);
        this.view.root.removeEventListener("mousemove", this.move);
        if (this.mightDrag && this.target) {
            this.view.domObserver.stop();
            if (this.mightDrag.addAttr) {
                this.target.draggable = false;
            }
            if (this.mightDrag.setUneditable) {
                this.target.removeAttribute("contentEditable");
            }
            this.view.domObserver.start();
        }
        this.view.mouseDown = null;
    };
    MouseDown.prototype.up = function up(event) {
        this.done();
        if (!this.view.dom.contains(event.target.nodeType == 3 ? event.target.parentNode : event.target)) {
            return;
        }
        if (this.allowDefault) {
            // Force a cursor wrapper redraw if this was suppressed (to avoid an issue with IE drag-selection)
            if (result.ie && needsCursorWrapper(this.view.state)) {
                this.view.updateState(this.view.state);
            }
            this.view.selectionReader.poll("pointer");
        }
        else if (handleSingleClick(this.view, this.pos.pos, this.pos.inside, event, this.selectNode)) {
            event.preventDefault();
        }
        else if (this.flushed ||
            // Chrome will sometimes treat a node selection as a
            // cursor, but still report that the node is selected
            // when asked through getSelection. You'll then get a
            // situation where clicking at the point where that
            // (hidden) cursor is doesn't change the selection, and
            // thus doesn't get a reaction from ProseMirror. This
            // works around that.
            (result.chrome && !(this.view.state.selection instanceof prosemirrorState.TextSelection) &&
                (this.pos.pos == this.view.state.selection.from || this.pos.pos == this.view.state.selection.to))) {
            updateSelection(this.view, prosemirrorState.Selection.near(this.view.state.doc.resolve(this.pos.pos)), "pointer");
            event.preventDefault();
        }
        else {
            this.view.selectionReader.poll("pointer");
        }
    };
    MouseDown.prototype.move = function move(event) {
        if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||
            Math.abs(this.event.y - event.clientY) > 4)) {
            this.allowDefault = true;
        }
        this.view.selectionReader.poll("pointer");
    };
    handlers.touchdown = function (view) {
        forceDOMFlush(view);
        view.selectionReader.poll("pointer");
    };
    handlers.contextmenu = function (view) { return forceDOMFlush(view); };
    // Input compositions are hard. Mostly because the events fired by
    // browsers are A) very unpredictable and inconsistent, and B) not
    // cancelable.
    //
    // ProseMirror has the problem that it must not update the DOM during
    // a composition, or the browser will cancel it. What it does is keep
    // long-running operations (delayed DOM updates) when a composition is
    // active.
    //
    // We _do not_ trust the information in the composition events which,
    // apart from being very uninformative to begin with, is often just
    // plain wrong. Instead, when a composition ends, we parse the dom
    // around the original selection, and derive an update from that.
    editHandlers.compositionstart = editHandlers.compositionupdate = function (view) {
        DOMChange.start(view, true);
    };
    editHandlers.compositionend = function (view, e) {
        if (!view.inDOMChange) {
            // We received a compositionend without having seen any previous
            // events for the composition. If there's data in the event
            // object, we assume that it's a real change, and start a
            // composition. Otherwise, we just ignore it.
            if (e.data) {
                DOMChange.start(view, true);
            }
            else {
                return;
            }
        }
        view.inDOMChange.compositionEnd(e);
    };
    editHandlers.input = function (view) {
        var change = DOMChange.start(view);
        if (!change.composing) {
            change.finish();
        }
    };
    function captureCopy(view, dom) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        var doc = dom.ownerDocument;
        var wrap = doc.body.appendChild(doc.createElement("div"));
        wrap.appendChild(dom);
        wrap.style.cssText = "position: fixed; left: -10000px; top: 10px";
        var sel = getSelection(), range = doc.createRange();
        range.selectNodeContents(dom);
        // Done because IE will fire a selectionchange moving the selection
        // to its start when removeAllRanges is called and the editor still
        // has focus (which will mess up the editor's selection state).
        view.dom.blur();
        sel.removeAllRanges();
        sel.addRange(range);
        setTimeout(function () {
            doc.body.removeChild(wrap);
            view.focus();
        }, 50);
    }
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    var brokenClipboardAPI = (result.ie && result.ie_version < 15) ||
        (result.ios && result.webkit_version < 604);
    handlers.copy = editHandlers.cut = function (view, e) {
        var sel = view.state.selection, cut = e.type == "cut";
        if (sel.empty) {
            return;
        }
        // IE and Edge's clipboard interface is completely broken
        var data = brokenClipboardAPI ? null : e.clipboardData;
        var slice = sel.content();
        var ref = serializeForClipboard(view, slice);
        var dom = ref.dom;
        var text = ref.text;
        if (data) {
            e.preventDefault();
            data.clearData();
            data.setData("text/html", dom.innerHTML);
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, dom);
        }
        if (cut) {
            view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
        }
    };
    function sliceSingleNode(slice) {
        return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;
    }
    function capturePaste(view, e) {
        var doc = view.dom.ownerDocument;
        var plainText = view.shiftKey || view.state.selection.$from.parent.type.spec.code;
        var target = doc.body.appendChild(doc.createElement(plainText ? "textarea" : "div"));
        if (!plainText) {
            target.contentEditable = "true";
        }
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(function () {
            view.focus();
            doc.body.removeChild(target);
            if (plainText) {
                doPaste(view, target.value, null, e);
            }
            else {
                doPaste(view, target.textContent, target.innerHTML, e);
            }
        }, 50);
    }
    function doPaste(view, text, html, e) {
        var slice = parseFromClipboard(view, text, html, view.shiftKey, view.state.selection.$from);
        if (!slice) {
            return false;
        }
        if (view.someProp("handlePaste", function (f) { return f(view, e, slice); })) {
            return true;
        }
        var singleNode = sliceSingleNode(slice);
        var tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, view.shiftKey) : view.state.tr.replaceSelection(slice);
        view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
        return true;
    }
    editHandlers.paste = function (view, e) {
        var data = brokenClipboardAPI ? null : e.clipboardData;
        if (data && (doPaste(view, data.getData("text/plain"), data.getData("text/html"), e) || data.files.length > 0)) {
            e.preventDefault();
        }
        else {
            capturePaste(view, e);
        }
    };
    var Dragging = function Dragging(slice, move) {
        this.slice = slice;
        this.move = move;
    };
    var dragCopyModifier = result.mac ? "altKey" : "ctrlKey";
    handlers.dragstart = function (view, e) {
        var mouseDown = view.mouseDown;
        if (mouseDown) {
            mouseDown.done();
        }
        if (!e.dataTransfer) {
            return;
        }
        var sel = view.state.selection;
        var pos = sel.empty ? null : view.posAtCoords(eventCoords(e));
        if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof prosemirrorState.NodeSelection ? sel.to - 1 : sel.to)) {
            // In selection
        }
        else if (mouseDown && mouseDown.mightDrag) {
            view.dispatch(view.state.tr.setSelection(prosemirrorState.NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));
        }
        else if (e.target && e.target.nodeType == 1) {
            var desc = view.docView.nearestDesc(e.target, true);
            if (!desc || !desc.node.type.spec.draggable || desc == view.docView) {
                return;
            }
            view.dispatch(view.state.tr.setSelection(prosemirrorState.NodeSelection.create(view.state.doc, desc.posBefore)));
        }
        var slice = view.state.selection.content();
        var ref = serializeForClipboard(view, slice);
        var dom = ref.dom;
        var text = ref.text;
        e.dataTransfer.clearData();
        e.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
        if (!brokenClipboardAPI) {
            e.dataTransfer.setData("text/plain", text);
        }
        view.dragging = new Dragging(slice, !e[dragCopyModifier]);
    };
    handlers.dragend = function (view) {
        window.setTimeout(function () { return view.dragging = null; }, 50);
    };
    editHandlers.dragover = editHandlers.dragenter = function (_, e) { return e.preventDefault(); };
    editHandlers.drop = function (view, e) {
        var dragging = view.dragging;
        view.dragging = null;
        if (!e.dataTransfer) {
            return;
        }
        var eventPos = view.posAtCoords(eventCoords(e));
        if (!eventPos) {
            return;
        }
        var $mouse = view.state.doc.resolve(eventPos.pos);
        if (!$mouse) {
            return;
        }
        var slice = dragging && dragging.slice ||
            parseFromClipboard(view, e.dataTransfer.getData(brokenClipboardAPI ? "Text" : "text/plain"), brokenClipboardAPI ? null : e.dataTransfer.getData("text/html"), false, $mouse);
        if (!slice) {
            return;
        }
        e.preventDefault();
        if (view.someProp("handleDrop", function (f) { return f(view, e, slice, dragging && dragging.move); })) {
            return;
        }
        var insertPos = slice ? prosemirrorTransform.dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos;
        if (insertPos == null) {
            insertPos = $mouse.pos;
        }
        var tr = view.state.tr;
        if (dragging && dragging.move) {
            tr.deleteSelection();
        }
        var pos = tr.mapping.map(insertPos);
        var isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;
        var beforeInsert = tr.doc;
        if (isNode) {
            tr.replaceRangeWith(pos, pos, slice.content.firstChild);
        }
        else {
            tr.replaceRange(pos, pos, slice);
        }
        if (tr.doc.eq(beforeInsert)) {
            return;
        }
        var $pos = tr.doc.resolve(pos);
        if (isNode && prosemirrorState.NodeSelection.isSelectable(slice.content.firstChild) &&
            $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {
            tr.setSelection(new prosemirrorState.NodeSelection($pos));
        }
        else {
            tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(tr.mapping.map(insertPos))));
        }
        view.focus();
        view.dispatch(tr.setMeta("uiEvent", "drop"));
    };
    handlers.focus = function (view) {
        if (!view.focused) {
            view.dom.classList.add("ProseMirror-focused");
            view.focused = true;
        }
    };
    handlers.blur = function (view) {
        if (view.focused) {
            view.dom.classList.remove("ProseMirror-focused");
            view.focused = false;
        }
    };
    // Make sure all handlers get registered
    for (var prop in editHandlers) {
        handlers[prop] = editHandlers[prop];
    }
    function compareObjs(a, b) {
        if (a == b) {
            return true;
        }
        for (var p in a) {
            if (a[p] !== b[p]) {
                return false;
            }
        }
        for (var p$1 in b) {
            if (!(p$1 in a)) {
                return false;
            }
        }
        return true;
    }
    var WidgetType = function WidgetType(toDOM, spec) {
        this.spec = spec || noSpec;
        this.side = this.spec.side || 0;
        this.toDOM = toDOM;
    };
    WidgetType.prototype.map = function map(mapping, span, offset, oldOffset) {
        var ref = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
        var pos = ref.pos;
        var deleted = ref.deleted;
        return deleted ? null : new Decoration(pos - offset, pos - offset, this);
    };
    WidgetType.prototype.valid = function valid() { return true; };
    WidgetType.prototype.eq = function eq(other) {
        return this == other ||
            (other instanceof WidgetType &&
                (this.spec.key && this.spec.key == other.spec.key ||
                    this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)));
    };
    var InlineType = function InlineType(attrs, spec) {
        this.spec = spec || noSpec;
        this.attrs = attrs;
    };
    InlineType.prototype.map = function map(mapping, span, offset, oldOffset) {
        var from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
        var to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
        return from >= to ? null : new Decoration(from, to, this);
    };
    InlineType.prototype.valid = function valid(_, span) { return span.from < span.to; };
    InlineType.prototype.eq = function eq(other) {
        return this == other ||
            (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&
                compareObjs(this.spec, other.spec));
    };
    InlineType.is = function is(span) { return span.type instanceof InlineType; };
    var NodeType = function NodeType(attrs, spec) {
        this.spec = spec || noSpec;
        this.attrs = attrs;
    };
    NodeType.prototype.map = function map(mapping, span, offset, oldOffset) {
        var from = mapping.mapResult(span.from + oldOffset, 1);
        if (from.deleted) {
            return null;
        }
        var to = mapping.mapResult(span.to + oldOffset, -1);
        if (to.deleted || to.pos <= from.pos) {
            return null;
        }
        return new Decoration(from.pos - offset, to.pos - offset, this);
    };
    NodeType.prototype.valid = function valid(node, span) {
        var ref = node.content.findIndex(span.from);
        var index = ref.index;
        var offset = ref.offset;
        return offset == span.from && offset + node.child(index).nodeSize == span.to;
    };
    NodeType.prototype.eq = function eq(other) {
        return this == other ||
            (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&
                compareObjs(this.spec, other.spec));
    };
    // ::- Decoration objects can be provided to the view through the
    // [`decorations` prop](#view.EditorProps.decorations). They come in
    // several variants—see the static members of this class for details.
    var Decoration = function Decoration(from, to, type) {
        // :: number
        // The start position of the decoration.
        this.from = from;
        // :: number
        // The end position. Will be the same as `from` for [widget
        // decorations](#view.Decoration^widget).
        this.to = to;
        this.type = type;
    };
    var prototypeAccessors$2 = { spec: {} };
    Decoration.prototype.copy = function copy(from, to) {
        return new Decoration(from, to, this.type);
    };
    Decoration.prototype.eq = function eq(other) {
        return this.type.eq(other.type) && this.from == other.from && this.to == other.to;
    };
    Decoration.prototype.map = function map(mapping, offset, oldOffset) {
        return this.type.map(mapping, this, offset, oldOffset);
    };
    // :: (number, union<(view: EditorView, getPos: () → number) → dom.Node, dom.Node>, ?Object) → Decoration
    // Creates a widget decoration, which is a DOM node that's shown in
    // the document at the given position. It is recommended that you
    // delay rendering the widget by passing a function that will be
    // called when the widget is actually drawn in a view, but you can
    // also directly pass a DOM node. `getPos` can be used to find the
    // widget's current document position.
    //
    // spec::- These options are supported:
    //
    //   side:: ?number
    //   Controls which side of the document position this widget is
    //   associated with. When negative, it is drawn before a cursor
    //   at its position, and content inserted at that position ends
    //   up after the widget. When zero (the default) or positive, the
    //   widget is drawn after the cursor and content inserted there
    //   ends up before the widget.
    //
    //   When there are multiple widgets at a given position, their
    //   `side` values determine the order in which they appear. Those
    //   with lower values appear first. The ordering of widgets with
    //   the same `side` value is unspecified.
    //
    //   When `marks` is null, `side` also determines the marks that
    //   the widget is wrapped in—those of the node before when
    //   negative, those of the node after when positive.
    //
    //   marks:: ?[Mark]
    //   The precise set of marks to draw around the widget.
    //
    //   stopEvent:: ?(event: dom.Event) → bool
    //   Can be used to control which DOM events, when they bubble out
    //   of this widget, the editor view should ignore.
    //
    //   key:: ?string
    //   When comparing decorations of this type (in order to decide
    //   whether it needs to be redrawn), ProseMirror will by default
    //   compare the widget DOM node by identity. If you pass a key,
    //   that key will be compared instead, which can be useful when
    //   you generate decorations on the fly and don't want to store
    //   and reuse DOM nodes. Make sure that any widgets with the same
    //   key are interchangeable—if widgets differ in, for example,
    //   the behavior of some event handler, they should get
    //   different keys.
    Decoration.widget = function widget(pos, toDOM, spec) {
        return new Decoration(pos, pos, new WidgetType(toDOM, spec));
    };
    // :: (number, number, DecorationAttrs, ?Object) → Decoration
    // Creates an inline decoration, which adds the given attributes to
    // each inline node between `from` and `to`.
    //
    // spec::- These options are recognized:
    //
    //   inclusiveStart:: ?bool
    //   Determines how the left side of the decoration is
    //   [mapped](#transform.Position_Mapping) when content is
    //   inserted directly at that position. By default, the decoration
    //   won't include the new content, but you can set this to `true`
    //   to make it inclusive.
    //
    //   inclusiveEnd:: ?bool
    //   Determines how the right side of the decoration is mapped.
    //   See
    //   [`inclusiveStart`](#view.Decoration^inline^spec.inclusiveStart).
    Decoration.inline = function inline(from, to, attrs, spec) {
        return new Decoration(from, to, new InlineType(attrs, spec));
    };
    // :: (number, number, DecorationAttrs, ?Object) → Decoration
    // Creates a node decoration. `from` and `to` should point precisely
    // before and after a node in the document. That node, and only that
    // node, will receive the given attributes.
    Decoration.node = function node(from, to, attrs, spec) {
        return new Decoration(from, to, new NodeType(attrs, spec));
    };
    // :: Object
    // The spec provided when creating this decoration. Can be useful
    // if you've stored extra information in that object.
    prototypeAccessors$2.spec.get = function () { return this.type.spec; };
    Object.defineProperties(Decoration.prototype, prototypeAccessors$2);
    // DecorationAttrs:: interface
    // A set of attributes to add to a decorated node. Most properties
    // simply directly correspond to DOM attributes of the same name,
    // which will be set to the property's value. These are exceptions:
    //
    //   class:: ?string
    //   A CSS class name or a space-separated set of class names to be
    //   _added_ to the classes that the node already had.
    //
    //   style:: ?string
    //   A string of CSS to be _added_ to the node's existing `style` property.
    //
    //   nodeName:: ?string
    //   When non-null, the target node is wrapped in a DOM element of
    //   this type (and the other attributes are applied to this element).
    var none = [];
    var noSpec = {};
    // ::- A collection of [decorations](#view.Decoration), organized in
    // such a way that the drawing algorithm can efficiently use and
    // compare them. This is a persistent data structure—it is not
    // modified, updates create a new value.
    var DecorationSet = function DecorationSet(local, children) {
        this.local = local && local.length ? local : none;
        this.children = children && children.length ? children : none;
    };
    // :: (Node, [Decoration]) → DecorationSet
    // Create a set of decorations, using the structure of the given
    // document.
    DecorationSet.create = function create(doc, decorations) {
        return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty;
    };
    // :: (?number, ?number, ?(spec: Object) → bool) → [Decoration]
    // Find all decorations in this set which touch the given range
    // (including decorations that start or end directly at the
    // boundaries) and match the given predicate on their spec. When
    // `start` and `end` are omitted, all decorations in the set are
    // considered. When `predicate` isn't given, all decorations are
    // asssumed to match.
    DecorationSet.prototype.find = function find(start, end, predicate) {
        var result = [];
        this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
        return result;
    };
    DecorationSet.prototype.findInner = function findInner(start, end, result, offset, predicate) {
        var this$1 = this;
        for (var i = 0; i < this.local.length; i++) {
            var span = this$1.local[i];
            if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec))) {
                result.push(span.copy(span.from + offset, span.to + offset));
            }
        }
        for (var i$1 = 0; i$1 < this.children.length; i$1 += 3) {
            if (this$1.children[i$1] < end && this$1.children[i$1 + 1] > start) {
                var childOff = this$1.children[i$1] + 1;
                this$1.children[i$1 + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
            }
        }
    };
    // :: (Mapping, Node, ?Object) → DecorationSet
    // Map the set of decorations in response to a change in the
    // document.
    //
    // options::- An optional set of options.
    //
    //   onRemove:: ?(decorationSpec: Object)
    //   When given, this function will be called for each decoration
    //   that gets dropped as a result of the mapping, passing the
    //   spec of that decoration.
    DecorationSet.prototype.map = function map(mapping, doc, options) {
        if (this == empty || mapping.maps.length == 0) {
            return this;
        }
        return this.mapInner(mapping, doc, 0, 0, options || noSpec);
    };
    DecorationSet.prototype.mapInner = function mapInner(mapping, node, offset, oldOffset, options) {
        var this$1 = this;
        var newLocal;
        for (var i = 0; i < this.local.length; i++) {
            var mapped = this$1.local[i].map(mapping, offset, oldOffset);
            if (mapped && mapped.type.valid(node, mapped)) {
                (newLocal || (newLocal = [])).push(mapped);
            }
            else if (options.onRemove) {
                options.onRemove(this$1.local[i].spec);
            }
        }
        if (this.children.length) {
            return mapChildren(this.children, newLocal, mapping, node, offset, oldOffset, options);
        }
        else {
            return newLocal ? new DecorationSet(newLocal.sort(byPos)) : empty;
        }
    };
    // :: (Node, [Decoration]) → DecorationSet
    // Add the given array of decorations to the ones in the set,
    // producing a new set. Needs access to the current document to
    // create the appropriate tree structure.
    DecorationSet.prototype.add = function add(doc, decorations) {
        if (!decorations.length) {
            return this;
        }
        if (this == empty) {
            return DecorationSet.create(doc, decorations);
        }
        return this.addInner(doc, decorations, 0);
    };
    DecorationSet.prototype.addInner = function addInner(doc, decorations, offset) {
        var this$1 = this;
        var children, childIndex = 0;
        doc.forEach(function (childNode, childOffset) {
            var baseOffset = childOffset + offset, found;
            if (!(found = takeSpansForNode(decorations, childNode, baseOffset))) {
                return;
            }
            if (!children) {
                children = this$1.children.slice();
            }
            while (childIndex < children.length && children[childIndex] < childOffset) {
                childIndex += 3;
            }
            if (children[childIndex] == childOffset) {
                children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);
            }
            else {
                children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));
            }
            childIndex += 3;
        });
        var local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
        return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
    };
    // :: ([Decoration]) → DecorationSet
    // Create a new set that contains the decorations in this set, minus
    // the ones in the given array.
    DecorationSet.prototype.remove = function remove(decorations) {
        if (decorations.length == 0 || this == empty) {
            return this;
        }
        return this.removeInner(decorations, 0);
    };
    DecorationSet.prototype.removeInner = function removeInner(decorations, offset) {
        var this$1 = this;
        var children = this.children, local = this.local;
        for (var i = 0; i < children.length; i += 3) {
            var found = (void 0), from = children[i] + offset, to = children[i + 1] + offset;
            for (var j = 0, span = (void 0); j < decorations.length; j++) {
                if (span = decorations[j]) {
                    if (span.from > from && span.to < to) {
                        decorations[j] = null;
                        (found || (found = [])).push(span);
                    }
                }
            }
            if (!found) {
                continue;
            }
            if (children == this$1.children) {
                children = this$1.children.slice();
            }
            var removed = children[i + 2].removeInner(found, from + 1);
            if (removed != empty) {
                children[i + 2] = removed;
            }
            else {
                children.splice(i, 3);
                i -= 3;
            }
        }
        if (local.length) {
            for (var i$1 = 0, span$1 = (void 0); i$1 < decorations.length; i$1++) {
                if (span$1 = decorations[i$1]) {
                    for (var j$1 = 0; j$1 < local.length; j$1++) {
                        if (local[j$1].type.eq(span$1.type)) {
                            if (local == this$1.local) {
                                local = this$1.local.slice();
                            }
                            local.splice(j$1--, 1);
                        }
                    }
                }
            }
        }
        if (children == this.children && local == this.local) {
            return this;
        }
        return local.length || children.length ? new DecorationSet(local, children) : empty;
    };
    DecorationSet.prototype.forChild = function forChild(offset, node) {
        var this$1 = this;
        if (this == empty) {
            return this;
        }
        if (node.isLeaf) {
            return DecorationSet.empty;
        }
        var child, local;
        for (var i = 0; i < this.children.length; i += 3) {
            if (this$1.children[i] >= offset) {
                if (this$1.children[i] == offset) {
                    child = this$1.children[i + 2];
                }
                break;
            }
        }
        var start = offset + 1, end = start + node.content.size;
        for (var i$1 = 0; i$1 < this.local.length; i$1++) {
            var dec = this$1.local[i$1];
            if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {
                var from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
                if (from < to) {
                    (local || (local = [])).push(dec.copy(from, to));
                }
            }
        }
        if (local) {
            var localSet = new DecorationSet(local.sort(byPos));
            return child ? new DecorationGroup([localSet, child]) : localSet;
        }
        return child || empty;
    };
    DecorationSet.prototype.eq = function eq(other) {
        var this$1 = this;
        if (this == other) {
            return true;
        }
        if (!(other instanceof DecorationSet) ||
            this.local.length != other.local.length ||
            this.children.length != other.children.length) {
            return false;
        }
        for (var i = 0; i < this.local.length; i++) {
            if (!this$1.local[i].eq(other.local[i])) {
                return false;
            }
        }
        for (var i$1 = 0; i$1 < this.children.length; i$1 += 3) {
            if (this$1.children[i$1] != other.children[i$1] ||
                this$1.children[i$1 + 1] != other.children[i$1 + 1] ||
                !this$1.children[i$1 + 2].eq(other.children[i$1 + 2])) {
                return false;
            }
        }
        return false;
    };
    DecorationSet.prototype.locals = function locals(node) {
        return removeOverlap(this.localsInner(node));
    };
    DecorationSet.prototype.localsInner = function localsInner(node) {
        var this$1 = this;
        if (this == empty) {
            return none;
        }
        if (node.inlineContent || !this.local.some(InlineType.is)) {
            return this.local;
        }
        var result = [];
        for (var i = 0; i < this.local.length; i++) {
            if (!(this$1.local[i].type instanceof InlineType)) {
                result.push(this$1.local[i]);
            }
        }
        return result;
    };
    var empty = new DecorationSet();
    // :: DecorationSet
    // The empty set of decorations.
    DecorationSet.empty = empty;
    DecorationSet.removeOverlap = removeOverlap;
    // :- An abstraction that allows the code dealing with decorations to
    // treat multiple DecorationSet objects as if it were a single object
    // with (a subset of) the same interface.
    var DecorationGroup = function DecorationGroup(members) {
        this.members = members;
    };
    DecorationGroup.prototype.forChild = function forChild(offset, child) {
        var this$1 = this;
        if (child.isLeaf) {
            return DecorationSet.empty;
        }
        var found = [];
        for (var i = 0; i < this.members.length; i++) {
            var result = this$1.members[i].forChild(offset, child);
            if (result == empty) {
                continue;
            }
            if (result instanceof DecorationGroup) {
                found = found.concat(result.members);
            }
            else {
                found.push(result);
            }
        }
        return DecorationGroup.from(found);
    };
    DecorationGroup.prototype.eq = function eq(other) {
        var this$1 = this;
        if (!(other instanceof DecorationGroup) ||
            other.members.length != this.members.length) {
            return false;
        }
        for (var i = 0; i < this.members.length; i++) {
            if (!this$1.members[i].eq(other.members[i])) {
                return false;
            }
        }
        return true;
    };
    DecorationGroup.prototype.locals = function locals(node) {
        var this$1 = this;
        var result, sorted = true;
        for (var i = 0; i < this.members.length; i++) {
            var locals = this$1.members[i].localsInner(node);
            if (!locals.length) {
                continue;
            }
            if (!result) {
                result = locals;
            }
            else {
                if (sorted) {
                    result = result.slice();
                    sorted = false;
                }
                for (var j = 0; j < locals.length; j++) {
                    result.push(locals[j]);
                }
            }
        }
        return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
    };
    // : ([DecorationSet]) → union<DecorationSet, DecorationGroup>
    // Create a group for the given array of decoration sets, or return
    // a single set when possible.
    DecorationGroup.from = function from(members) {
        switch (members.length) {
            case 0: return empty;
            case 1: return members[0];
            default: return new DecorationGroup(members);
        }
    };
    function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
        var children = oldChildren.slice();
        // Mark the children that are directly touched by changes, and
        // move those that are after the changes.
        var shift = function (oldStart, oldEnd, newStart, newEnd) {
            for (var i = 0; i < children.length; i += 3) {
                var end = children[i + 1], dSize = (void 0);
                if (end == -1 || oldStart > end + oldOffset) {
                    continue;
                }
                if (oldEnd >= children[i] + oldOffset) {
                    children[i + 1] = -1;
                }
                else if (dSize = (newEnd - newStart) - (oldEnd - oldStart) + (oldOffset - offset)) {
                    children[i] += dSize;
                    children[i + 1] += dSize;
                }
            }
        };
        for (var i = 0; i < mapping.maps.length; i++) {
            mapping.maps[i].forEach(shift);
        }
        // Find the child nodes that still correspond to a single node,
        // recursively call mapInner on them and update their positions.
        var mustRebuild = false;
        for (var i$1 = 0; i$1 < children.length; i$1 += 3) {
            if (children[i$1 + 1] == -1) { // Touched nodes
                var from = mapping.map(children[i$1] + oldOffset), fromLocal = from - offset;
                if (fromLocal < 0 || fromLocal >= node.content.size) {
                    mustRebuild = true;
                    continue;
                }
                // Must read oldChildren because children was tagged with -1
                var to = mapping.map(oldChildren[i$1 + 1] + oldOffset, -1), toLocal = to - offset;
                var ref = node.content.findIndex(fromLocal);
                var index = ref.index;
                var childOffset = ref.offset;
                var childNode = node.maybeChild(index);
                if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
                    var mapped = children[i$1 + 2].mapInner(mapping, childNode, from + 1, children[i$1] + oldOffset + 1, options);
                    if (mapped != empty) {
                        children[i$1] = fromLocal;
                        children[i$1 + 1] = toLocal;
                        children[i$1 + 2] = mapped;
                    }
                    else {
                        children[i$1 + 1] = -2;
                        mustRebuild = true;
                    }
                }
                else {
                    mustRebuild = true;
                }
            }
        }
        // Remaining children must be collected and rebuilt into the appropriate structure
        if (mustRebuild) {
            var decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal || [], mapping, offset, oldOffset, options);
            var built = buildTree(decorations, node, 0, options);
            newLocal = built.local;
            for (var i$2 = 0; i$2 < children.length; i$2 += 3) {
                if (children[i$2 + 1] < 0) {
                    children.splice(i$2, 3);
                    i$2 -= 3;
                }
            }
            for (var i$3 = 0, j = 0; i$3 < built.children.length; i$3 += 3) {
                var from$1 = built.children[i$3];
                while (j < children.length && children[j] < from$1) {
                    j += 3;
                }
                children.splice(j, 0, built.children[i$3], built.children[i$3 + 1], built.children[i$3 + 2]);
            }
        }
        return new DecorationSet(newLocal && newLocal.sort(byPos), children);
    }
    function moveSpans(spans, offset) {
        if (!offset || !spans.length) {
            return spans;
        }
        var result = [];
        for (var i = 0; i < spans.length; i++) {
            var span = spans[i];
            result.push(new Decoration(span.from + offset, span.to + offset, span.type));
        }
        return result;
    }
    function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
        // Gather all decorations from the remaining marked children
        function gather(set, oldOffset) {
            for (var i = 0; i < set.local.length; i++) {
                var mapped = set.local[i].map(mapping, offset, oldOffset);
                if (mapped) {
                    decorations.push(mapped);
                }
                else if (options.onRemove) {
                    options.onRemove(set.local[i].spec);
                }
            }
            for (var i$1 = 0; i$1 < set.children.length; i$1 += 3) {
                gather(set.children[i$1 + 2], set.children[i$1] + oldOffset + 1);
            }
        }
        for (var i = 0; i < children.length; i += 3) {
            if (children[i + 1] == -1) {
                gather(children[i + 2], oldChildren[i] + oldOffset + 1);
            }
        }
        return decorations;
    }
    function takeSpansForNode(spans, node, offset) {
        if (node.isLeaf) {
            return null;
        }
        var end = offset + node.nodeSize, found = null;
        for (var i = 0, span = (void 0); i < spans.length; i++) {
            if ((span = spans[i]) && span.from > offset && span.to < end) {
                (found || (found = [])).push(span);
                spans[i] = null;
            }
        }
        return found;
    }
    function withoutNulls(array) {
        var result = [];
        for (var i = 0; i < array.length; i++) {
            if (array[i] != null) {
                result.push(array[i]);
            }
        }
        return result;
    }
    // : ([Decoration], Node, number) → DecorationSet
    // Build up a tree that corresponds to a set of decorations. `offset`
    // is a base offset that should be subtractet from the `from` and `to`
    // positions in the spans (so that we don't have to allocate new spans
    // for recursive calls).
    function buildTree(spans, node, offset, options) {
        var children = [], hasNulls = false;
        node.forEach(function (childNode, localStart) {
            var found = takeSpansForNode(spans, childNode, localStart + offset);
            if (found) {
                hasNulls = true;
                var subtree = buildTree(found, childNode, offset + localStart + 1, options);
                if (subtree != empty) {
                    children.push(localStart, localStart + childNode.nodeSize, subtree);
                }
            }
        });
        var locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
        for (var i = 0; i < locals.length; i++) {
            if (!locals[i].type.valid(node, locals[i])) {
                if (options.onRemove) {
                    options.onRemove(locals[i].spec);
                }
                locals.splice(i--, 1);
            }
        }
        return locals.length || children.length ? new DecorationSet(locals, children) : empty;
    }
    // : (Decoration, Decoration) → number
    // Used to sort decorations so that ones with a low start position
    // come first, and within a set with the same start position, those
    // with an smaller end position come first.
    function byPos(a, b) {
        return a.from - b.from || a.to - b.to;
    }
    // : ([Decoration]) → [Decoration]
    // Scan a sorted array of decorations for partially overlapping spans,
    // and split those so that only fully overlapping spans are left (to
    // make subsequent rendering easier). Will return the input array if
    // no partially overlapping spans are found (the common case).
    function removeOverlap(spans) {
        var working = spans;
        for (var i = 0; i < working.length - 1; i++) {
            var span = working[i];
            if (span.from != span.to) {
                for (var j = i + 1; j < working.length; j++) {
                    var next = working[j];
                    if (next.from == span.from) {
                        if (next.to != span.to) {
                            if (working == spans) {
                                working = spans.slice();
                            }
                            // Followed by a partially overlapping larger span. Split that
                            // span.
                            working[j] = next.copy(next.from, span.to);
                            insertAhead(working, j + 1, next.copy(span.to, next.to));
                        }
                        continue;
                    }
                    else {
                        if (next.from < span.to) {
                            if (working == spans) {
                                working = spans.slice();
                            }
                            // The end of this one overlaps with a subsequent span. Split
                            // this one.
                            working[i] = span.copy(span.from, next.from);
                            insertAhead(working, j, span.copy(next.from, span.to));
                        }
                        break;
                    }
                }
            }
        }
        return working;
    }
    function insertAhead(array, i, deco) {
        while (i < array.length && byPos(deco, array[i]) > 0) {
            i++;
        }
        array.splice(i, 0, deco);
    }
    // : (EditorView) → union<DecorationSet, DecorationGroup>
    // Get the decorations associated with the current props of a view.
    function viewDecorations(view) {
        var found = [];
        view.someProp("decorations", function (f) {
            var result = f(view.state);
            if (result && result != empty) {
                found.push(result);
            }
        });
        if (view.cursorWrapper) {
            found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
        }
        return DecorationGroup.from(found);
    }
    // ::- An editor view manages the DOM structure that represents an
    // editable document. Its state and behavior are determined by its
    // [props](#view.DirectEditorProps).
    var EditorView = function EditorView(place, props) {
        this._props = props;
        // :: EditorState
        // The view's current [state](#state.EditorState).
        this.state = props.state;
        this.dispatch = this.dispatch.bind(this);
        this._root = null;
        this.focused = false;
        // :: dom.Element
        // An editable DOM node containing the document. (You probably
        // should not directly interfere with its content.)
        this.dom = (place && place.mount) || document.createElement("div");
        if (place) {
            if (place.appendChild) {
                place.appendChild(this.dom);
            }
            else if (place.apply) {
                place(this.dom);
            }
            else if (place.mount) {
                this.mounted = true;
            }
        }
        this.editable = getEditable(this);
        this.redraw = false;
        this.cursorWrapper = null;
        updateCursorWrapper(this);
        this.nodeViews = buildNodeViews(this);
        this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
        this.lastSelectedViewDesc = null;
        // :: ?{slice: Slice, move: bool}
        // When editor content is being dragged, this object contains
        // information about the dragged slice and whether it is being
        // copied or moved. At any other time, it is null.
        this.dragging = null;
        initInput(this); // Must be done before creating a SelectionReader
        this.selectionReader = new SelectionReader(this);
        this.pluginViews = [];
        this.updatePluginViews();
    };
    var prototypeAccessors = { props: {}, root: {} };
    // :: DirectEditorProps
    // The view's current [props](#view.EditorProps).
    prototypeAccessors.props.get = function () {
        var this$1 = this;
        if (this._props.state != this.state) {
            var prev = this._props;
            this._props = {};
            for (var name in prev) {
                this$1._props[name] = prev[name];
            }
            this._props.state = this.state;
        }
        return this._props;
    };
    // :: (DirectEditorProps)
    // Update the view's props. Will immediately cause an update to
    // the DOM.
    EditorView.prototype.update = function update(props) {
        if (props.handleDOMEvents != this._props.handleDOMEvents) {
            ensureListeners(this);
        }
        this._props = props;
        var nodeViews = buildNodeViews(this);
        if (changedNodeViews(nodeViews, this.nodeViews)) {
            this.nodeViews = nodeViews;
            this.redraw = true;
        }
        this.updateState(props.state);
    };
    // :: (DirectEditorProps)
    // Update the view by updating existing props object with the object
    // given as argument. Equivalent to `view.update(Object.assign({},
    // view.props, props))`.
    EditorView.prototype.setProps = function setProps(props) {
        var this$1 = this;
        var updated = {};
        for (var name in this$1._props) {
            updated[name] = this$1._props[name];
        }
        updated.state = this.state;
        for (var name$1 in props) {
            updated[name$1] = props[name$1];
        }
        this.update(updated);
    };
    // :: (EditorState)
    // Update the editor's `state` prop, without touching any of the
    // other props.
    EditorView.prototype.updateState = function updateState(state) {
        var this$1 = this;
        var prev = this.state;
        this.state = state;
        if (prev.plugins != state.plugins) {
            ensureListeners(this);
        }
        this.domObserver.flush();
        if (this.inDOMChange && this.inDOMChange.stateUpdated(state)) {
            return;
        }
        var prevEditable = this.editable;
        this.editable = getEditable(this);
        updateCursorWrapper(this);
        var innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
        var scroll = prev.config != state.config ? "reset"
            : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
        var updateDoc = this.redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
        var updateSel = updateDoc || !state.selection.eq(prev.selection) || this.selectionReader.domChanged();
        var oldScrollPos = scroll == "preserve" && updateSel && storeScrollPos(this);
        if (updateSel) {
            this.domObserver.stop();
            var forceSelUpdate = false;
            if (updateDoc) {
                // Work around an issue in Chrome where changing the DOM
                // around the active selection puts it into a broken state
                // where the thing the user sees differs from the selection
                // reported by the Selection object (#710)
                var startSelContext = result.chrome && selectionContext(this.root);
                if (this.redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
                    this.docView.destroy();
                    this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
                    this.redraw = false;
                }
                this.selectionReader.clearDOMState();
                if (startSelContext) {
                    forceSelUpdate = needChromeSelectionForce(startSelContext, this.root);
                }
            }
            // Work around for an issue where an update arriving right between
            // a DOM selection change and the "selectionchange" event for it
            // can cause a spurious DOM selection update, disrupting mouse
            // drag selection.
            if (forceSelUpdate ||
                !(this.mouseDown && this.selectionReader.domChanged() && anchorInRightPlace(this))) {
                selectionToDOM(this, false, forceSelUpdate);
            }
            else {
                syncNodeSelection(this, state.selection);
            }
            this.domObserver.start();
        }
        if (prevEditable != this.editable) {
            this.selectionReader.editableChanged();
        }
        this.updatePluginViews(prev);
        if (scroll == "reset") {
            this.dom.scrollTop = 0;
        }
        else if (scroll == "to selection") {
            var startDOM = this.root.getSelection().focusNode;
            if (this.someProp("handleScrollToSelection", function (f) { return f(this$1); })) { } // Handled
            else if (state.selection instanceof prosemirrorState.NodeSelection) {
                scrollRectIntoView(this, this.docView.domAfterPos(state.selection.from).getBoundingClientRect(), startDOM);
            }
            else {
                scrollRectIntoView(this, this.coordsAtPos(state.selection.head), startDOM);
            }
        }
        else if (oldScrollPos) {
            resetScrollPos(oldScrollPos);
        }
    };
    EditorView.prototype.destroyPluginViews = function destroyPluginViews() {
        var view;
        while (view = this.pluginViews.pop()) {
            if (view.destroy) {
                view.destroy();
            }
        }
    };
    EditorView.prototype.updatePluginViews = function updatePluginViews(prevState) {
        var this$1 = this;
        var plugins = this.state.plugins;
        if (!prevState || prevState.plugins != plugins) {
            this.destroyPluginViews();
            for (var i = 0; i < plugins.length; i++) {
                var plugin = plugins[i];
                if (plugin.spec.view) {
                    this$1.pluginViews.push(plugin.spec.view(this$1));
                }
            }
        }
        else {
            for (var i$1 = 0; i$1 < this.pluginViews.length; i$1++) {
                var pluginView = this$1.pluginViews[i$1];
                if (pluginView.update) {
                    pluginView.update(this$1, prevState);
                }
            }
        }
    };
    // :: (string, ?(prop: *) → *) → *
    // Goes over the values of a prop, first those provided directly,
    // then those from plugins (in order), and calls `f` every time a
    // non-undefined value is found. When `f` returns a truthy value,
    // that is immediately returned. When `f` isn't provided, it is
    // treated as the identity function (the prop value is returned
    // directly).
    EditorView.prototype.someProp = function someProp(propName, f) {
        var prop = this._props && this._props[propName], value;
        if (prop != null && (value = f ? f(prop) : prop)) {
            return value;
        }
        var plugins = this.state.plugins;
        if (plugins) {
            for (var i = 0; i < plugins.length; i++) {
                var prop$1 = plugins[i].props[propName];
                if (prop$1 != null && (value = f ? f(prop$1) : prop$1)) {
                    return value;
                }
            }
        }
    };
    // :: () → bool
    // Query whether the view has focus.
    EditorView.prototype.hasFocus = function hasFocus() {
        return this.root.activeElement == this.dom;
    };
    // :: ()
    // Focus the editor.
    EditorView.prototype.focus = function focus() {
        this.domObserver.stop();
        selectionToDOM(this, true);
        this.domObserver.start();
        if (this.editable) {
            this.dom.focus();
        }
    };
    // :: union<dom.Document, dom.DocumentFragment>
    // Get the document root in which the editor exists. This will
    // usually be the top-level `document`, but might be a [shadow
    // DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
    // root if the editor is inside one.
    prototypeAccessors.root.get = function () {
        var this$1 = this;
        var cached = this._root;
        if (cached == null) {
            for (var search = this.dom.parentNode; search; search = search.parentNode) {
                if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {
                    return this$1._root = search;
                }
            }
        }
        return cached || document;
    };
    // :: ({left: number, top: number}) → ?{pos: number, inside: number}
    // Given a pair of viewport coordinates, return the document
    // position that corresponds to them. May return null if the given
    // coordinates aren't inside of the editor. When an object is
    // returned, its `pos` property is the position nearest to the
    // coordinates, and its `inside` property holds the position of the
    // inner node that the position falls inside of, or -1 if it is at
    // the top level, not in any node.
    EditorView.prototype.posAtCoords = function posAtCoords$1(coords) {
        var pos = posAtCoords(this, coords);
        if (this.inDOMChange && pos) {
            pos.pos = this.inDOMChange.mapping.map(pos.pos);
            if (pos.inside != -1) {
                pos.inside = this.inDOMChange.mapping.map(pos.inside);
            }
        }
        return pos;
    };
    // :: (number) → {left: number, right: number, top: number, bottom: number}
    // Returns the viewport rectangle at a given document position. `left`
    // and `right` will be the same number, as this returns a flat
    // cursor-ish rectangle.
    EditorView.prototype.coordsAtPos = function coordsAtPos$1(pos) {
        if (this.inDOMChange) {
            pos = this.inDOMChange.mapping.invert().map(pos);
        }
        return coordsAtPos(this, pos);
    };
    // :: (number) → {node: dom.Node, offset: number}
    // Find the DOM position that corresponds to the given document
    // position. Note that you should **not** mutate the editor's
    // internal DOM, only inspect it (and even that is usually not
    // necessary).
    EditorView.prototype.domAtPos = function domAtPos(pos) {
        if (this.inDOMChange) {
            pos = this.inDOMChange.mapping.invert().map(pos);
        }
        return this.docView.domFromPos(pos);
    };
    // :: (number) → ?dom.Node
    // Find the DOM node that represents the document node after the
    // given position. May return `null` when the position doesn't point
    // in front of a node or if the node is inside an opaque node view.
    //
    // This is intended to be able to call things like
    // `getBoundingClientRect` on that DOM node. Do **not** mutate the
    // editor DOM directly, or add styling this way, since that will be
    // immediately overriden by the editor as it redraws the node.
    EditorView.prototype.nodeDOM = function nodeDOM(pos) {
        if (this.inDOMChange) {
            pos = this.inDOMChange.mapping.invert().map(pos);
        }
        var desc = this.docView.descAt(pos);
        return desc ? desc.nodeDOM : null;
    };
    // :: (dom.Node, number, ?number) → number
    // Find the document position that corresponds to a given DOM
    // position. (Whenever possible, it is preferable to inspect the
    // document structure directly, rather than poking around in the
    // DOM, but sometimes—for example when interpreting an event
    // target—you don't have a choice.)
    //
    // The `bias` parameter can be used to influence which side of a DOM
    // node to use when the position is inside a leaf node.
    EditorView.prototype.posAtDOM = function posAtDOM(node, offset, bias) {
        if (bias === void 0)
            bias = -1;
        var pos = this.docView.posFromDOM(node, offset, bias);
        if (pos == null) {
            throw new RangeError("DOM position not inside the editor");
        }
        if (this.inDOMChange) {
            pos = this.inDOMChange.mapping.map(pos);
        }
        return pos;
    };
    // :: (union<"up", "down", "left", "right", "forward", "backward">, ?EditorState) → bool
    // Find out whether the selection is at the end of a textblock when
    // moving in a given direction. When, for example, given `"left"`,
    // it will return true if moving left from the current cursor
    // position would leave that position's parent textblock. Will apply
    // to the view's current state by default, but it is possible to
    // pass a different state.
    EditorView.prototype.endOfTextblock = function endOfTextblock$1(dir, state) {
        return endOfTextblock(this, state || this.state, dir);
    };
    // :: ()
    // Removes the editor from the DOM and destroys all [node
    // views](#view.NodeView).
    EditorView.prototype.destroy = function destroy() {
        if (!this.docView) {
            return;
        }
        destroyInput(this);
        this.destroyPluginViews();
        this.selectionReader.destroy();
        if (this.mounted) {
            this.docView.update(this.state.doc, [], viewDecorations(this), this);
            this.dom.textContent = "";
        }
        else if (this.dom.parentNode) {
            this.dom.parentNode.removeChild(this.dom);
        }
        this.docView.destroy();
        this.docView = null;
    };
    // Used for testing.
    EditorView.prototype.dispatchEvent = function dispatchEvent$1(event) {
        return dispatchEvent(this, event);
    };
    // :: (Transaction)
    // Dispatch a transaction. Will call
    // [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)
    // when given, and otherwise defaults to applying the transaction to
    // the current state and calling
    // [`updateState`](#view.EditorView.updateState) with the result.
    // This method is bound to the view instance, so that it can be
    // easily passed around.
    EditorView.prototype.dispatch = function dispatch(tr) {
        var dispatchTransaction = this._props.dispatchTransaction;
        if (dispatchTransaction) {
            dispatchTransaction.call(this, tr);
        }
        else {
            this.updateState(this.state.apply(tr));
        }
    };
    Object.defineProperties(EditorView.prototype, prototypeAccessors);
    function computeDocDeco(view) {
        var attrs = Object.create(null);
        attrs.class = "ProseMirror";
        attrs.contenteditable = String(view.editable);
        view.someProp("attributes", function (value) {
            if (typeof value == "function") {
                value = value(view.state);
            }
            if (value) {
                for (var attr in value) {
                    if (attr == "class") {
                        attrs.class += " " + value[attr];
                    }
                    else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName") {
                        attrs[attr] = String(value[attr]);
                    }
                }
            }
        });
        return [Decoration.node(0, view.state.doc.content.size, attrs)];
    }
    function cursorWrapperDOM(visible) {
        var span = document.createElement("span");
        span.textContent = "\ufeff"; // zero-width non-breaking space
        if (!visible) {
            span.style.position = "absolute";
            span.style.left = "-100000px";
        }
        return span;
    }
    function updateCursorWrapper(view) {
        var $pos = needsCursorWrapper(view.state);
        // On IE/Edge, moving the DOM selection will abort a mouse drag, so
        // there we delay the creation of the wrapper when the mouse is down.
        if ($pos && !(result.ie && view.mouseDown)) {
            var visible = view.state.selection.visible;
            // Needs a cursor wrapper
            var marks = view.state.storedMarks || $pos.marks(), dom;
            if (!view.cursorWrapper || !prosemirrorModel.Mark.sameSet(view.cursorWrapper.deco.spec.marks, marks) ||
                view.cursorWrapper.dom.textContent != "\ufeff" ||
                view.cursorWrapper.deco.spec.visible != visible) {
                dom = cursorWrapperDOM(visible);
            }
            else if (view.cursorWrapper.deco.pos != $pos.pos) {
                dom = view.cursorWrapper.dom;
            }
            if (dom) {
                view.cursorWrapper = { dom: dom, deco: Decoration.widget($pos.pos, dom, { isCursorWrapper: true, marks: marks, raw: true, visible: visible }) };
            }
        }
        else {
            view.cursorWrapper = null;
        }
    }
    function getEditable(view) {
        return !view.someProp("editable", function (value) { return value(view.state) === false; });
    }
    function selectionContext(root) {
        var ref = root.getSelection();
        var offset = ref.focusOffset;
        var node = ref.focusNode;
        if (!node || node.nodeType == 3) {
            return null;
        }
        return [node, offset,
            node.nodeType == 1 ? node.childNodes[offset - 1] : null,
            node.nodeType == 1 ? node.childNodes[offset] : null];
    }
    function needChromeSelectionForce(context, root) {
        var newContext = selectionContext(root);
        if (!newContext || newContext[0].nodeType == 3) {
            return false;
        }
        for (var i = 0; i < context.length; i++) {
            if (newContext[i] != context[i]) {
                return true;
            }
        }
        return false;
    }
    function buildNodeViews(view) {
        var result$$1 = {};
        view.someProp("nodeViews", function (obj) {
            for (var prop in obj) {
                if (!Object.prototype.hasOwnProperty.call(result$$1, prop)) {
                    result$$1[prop] = obj[prop];
                }
            }
        });
        return result$$1;
    }
    function changedNodeViews(a, b) {
        var nA = 0, nB = 0;
        for (var prop in a) {
            if (a[prop] != b[prop]) {
                return true;
            }
            nA++;
        }
        for (var _ in b) {
            nB++;
        }
        return nA != nB;
    }
    // EditorProps:: interface
    //
    // Props are configuration values that can be passed to an editor view
    // or included in a plugin. This interface lists the supported props.
    //
    // The various event-handling functions may all return `true` to
    // indicate that they handled the given event. The view will then take
    // care to call `preventDefault` on the event, except with
    // `handleDOMEvents`, where the handler itself is responsible for that.
    //
    // How a prop is resolved depends on the prop. Handler functions are
    // called one at a time, starting with the base props and then
    // searching through the plugins (in order of appearance) until one of
    // them returns true. For some props, the first plugin that yields a
    // value gets precedence.
    //
    //   handleDOMEvents:: ?Object<(view: EditorView, event: dom.Event) → bool>
    //   Can be an object mapping DOM event type names to functions that
    //   handle them. Such functions will be called before any handling
    //   ProseMirror does of events fired on the editable DOM element.
    //   Contrary to the other event handling props, when returning true
    //   from such a function, you are responsible for calling
    //   `preventDefault` yourself (or not, if you want to allow the
    //   default behavior).
    //
    //   handleKeyDown:: ?(view: EditorView, event: dom.KeyboardEvent) → bool
    //   Called when the editor receives a `keydown` event.
    //
    //   handleKeyPress:: ?(view: EditorView, event: dom.KeyboardEvent) → bool
    //   Handler for `keypress` events.
    //
    //   handleTextInput:: ?(view: EditorView, from: number, to: number, text: string) → bool
    //   Whenever the user directly input text, this handler is called
    //   before the input is applied. If it returns `true`, the default
    //   behavior of actually inserting the text is suppressed.
    //
    //   handleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool
    //   Called for each node around a click, from the inside out. The
    //   `direct` flag will be true for the inner node.
    //
    //   handleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool
    //   Called when the editor is clicked, after `handleClickOn` handlers
    //   have been called.
    //
    //   handleDoubleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool
    //   Called for each node around a double click.
    //
    //   handleDoubleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool
    //   Called when the editor is double-clicked, after `handleDoubleClickOn`.
    //
    //   handleTripleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) → bool
    //   Called for each node around a triple click.
    //
    //   handleTripleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) → bool
    //   Called when the editor is triple-clicked, after `handleTripleClickOn`.
    //
    //   handlePaste:: ?(view: EditorView, event: dom.Event, slice: Slice) → bool
    //   Can be used to override the behavior of pasting. `slice` is the
    //   pasted content parsed by the editor, but you can directly access
    //   the event to get at the raw content.
    //
    //   handleDrop:: ?(view: EditorView, event: dom.Event, slice: Slice, moved: bool) → bool
    //   Called when something is dropped on the editor. `moved` will be
    //   true if this drop moves from the current selection (which should
    //   thus be deleted).
    //
    //   handleScrollToSelection:: ?(view: EditorView) → bool
    //   Called when the view, after updating its state, tries to scroll
    //   the selection into view. A handler function may return false to
    //   indicate that it did not handle the scrolling and further
    //   handlers or the default behavior should be tried.
    //
    //   createSelectionBetween:: ?(view: EditorView, anchor: ResolvedPos, head: ResolvedPos) → ?Selection
    //   Can be used to override the way a selection is created when
    //   reading a DOM selection between the given anchor and head.
    //
    //   domParser:: ?DOMParser
    //   The [parser](#model.DOMParser) to use when reading editor changes
    //   from the DOM. Defaults to calling
    //   [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) on the
    //   editor's schema.
    //
    //   transformPastedHTML:: ?(html: string) → string
    //   Can be used to transform pasted HTML text, _before_ it is parsed,
    //   for example to clean it up.
    //
    //   clipboardParser:: ?DOMParser
    //   The [parser](#model.DOMParser) to use when reading content from
    //   the clipboard. When not given, the value of the
    //   [`domParser`](#view.EditorProps.domParser) prop is used.
    //
    //   transformPastedText:: ?(text: string) → string
    //   Transform pasted plain text.
    //
    //   clipboardTextParser:: ?(text: string, $context: ResolvedPos) → Slice
    //   A function to parse text from the clipboard into a document
    //   slice. Called after
    //   [`transformPastedText`](#view.EditorProps.transformPastedText).
    //   The default behavior is to split the text into lines, wrap them
    //   in `<p>` tags, and call
    //   [`clipboardParser`](#view.EditorProps.clipboardParser) on it.
    //
    //   transformPasted:: ?(Slice) → Slice
    //   Can be used to transform pasted content before it is applied to
    //   the document.
    //
    //   nodeViews:: ?Object<(node: Node, view: EditorView, getPos: () → number, decorations: [Decoration]) → NodeView>
    //   Allows you to pass custom rendering and behavior logic for nodes
    //   and marks. Should map node and mark names to constructor
    //   functions that produce a [`NodeView`](#view.NodeView) object
    //   implementing the node's display behavior. For nodes, the third
    //   argument `getPos` is a function that can be called to get the
    //   node's current position, which can be useful when creating
    //   transactions to update it. For marks, the third argument is a
    //   boolean that indicates whether the mark's content is inline.
    //
    //   `decorations` is an array of node or inline decorations that are
    //   active around the node. They are automatically drawn in the
    //   normal way, and you will usually just want to ignore this, but
    //   they can also be used as a way to provide context information to
    //   the node view without adding it to the document itself.
    //
    //   clipboardSerializer:: ?DOMSerializer
    //   The DOM serializer to use when putting content onto the
    //   clipboard. If not given, the result of
    //   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)
    //   will be used.
    //
    //   clipboardTextSerializer:: ?(Slice) → string
    //   A function that will be called to get the text for the current
    //   selection when copying text to the clipboard. By default, the
    //   editor will use [`textBetween`](#model.Node.textBetween) on the
    //   selected range.
    //
    //   decorations:: ?(state: EditorState) → ?DecorationSet
    //   A set of [document decorations](#view.Decoration) to show in the
    //   view.
    //
    //   editable:: ?(state: EditorState) → bool
    //   When this returns false, the content of the view is not directly
    //   editable.
    //
    //   attributes:: ?union<Object<string>, (EditorState) → ?Object<string>>
    //   Control the DOM attributes of the editable element. May be either
    //   an object or a function going from an editor state to an object.
    //   By default, the element will get a class `"ProseMirror"`, and
    //   will have its `contentEditable` attribute determined by the
    //   [`editable` prop](#view.EditorProps.editable). Additional classes
    //   provided here will be added to the class. For other attributes,
    //   the value provided first (as in
    //   [`someProp`](#view.EditorView.someProp)) will be used.
    //
    //   scrollThreshold:: ?union<number, {top: number, right: number, bottom: number, left: number}>
    //   Determines the distance (in pixels) between the cursor and the
    //   end of the visible viewport at which point, when scrolling the
    //   cursor into view, scrolling takes place. Defaults to 0.
    //
    //   scrollMargin:: ?union<number, {top: number, right: number, bottom: number, left: number}>
    //   Determines the extra space (in pixels) that is left above or
    //   below the cursor when it is scrolled into view. Defaults to 5.
    // DirectEditorProps:: interface extends EditorProps
    //
    // The props object given directly to the editor view supports two
    // fields that can't be used in plugins:
    //
    //   state:: EditorState
    //   The current state of the editor.
    //
    //   dispatchTransaction:: ?(tr: Transaction)
    //   The callback over which to send transactions (state updates)
    //   produced by the view. If you specify this, you probably want to
    //   make sure this ends up calling the view's
    //   [`updateState`](#view.EditorView.updateState) method with a new
    //   state that has the transaction
    //   [applied](#state.EditorState.apply). The callback will be bound to have
    //   the view instance as its `this` binding.
    exports.EditorView = EditorView;
    exports.Decoration = Decoration;
    exports.DecorationSet = DecorationSet;
    exports.__serializeForClipboard = serializeForClipboard;
    exports.__parseFromClipboard = parseFromClipboard;
    //# sourceMappingURL=index.js.map
});
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define('react', factory) :
            (global.React = factory());
}(this, (function () {
    'use strict';
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '16.8.4';
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') {
            return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') {
            return maybeIterator;
        }
        return null;
    }
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
        return Object(val);
    }
    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }
            // Detect buggy property enumeration order in older V8 versions.
            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
            }
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
            });
            if (order2.join('') !== '0123456789') {
                return false;
            }
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !==
                'abcdefghijklmnopqrst') {
                return false;
            }
            return true;
        }
        catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }
    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
            if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
        return to;
    };
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */
    var validateFormat = function () { };
    {
        validateFormat = function (format) {
            if (format === undefined) {
                throw new Error('invariant requires an error message argument');
            }
        };
    }
    function invariant(condition, format, a, b, c, d, e, f) {
        validateFormat(format);
        if (!condition) {
            var error = void 0;
            if (format === undefined) {
                error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
            }
            else {
                var args = [a, b, c, d, e, f];
                var argIndex = 0;
                error = new Error(format.replace(/%s/g, function () {
                    return args[argIndex++];
                }));
                error.name = 'Invariant Violation';
            }
            error.framesToPop = 1; // we don't care about invariant's own frame
            throw error;
        }
    }
    // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */
    var lowPriorityWarning = function () { };
    {
        var printWarning = function (format) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }
            var argIndex = 0;
            var message = 'Warning: ' + format.replace(/%s/g, function () {
                return args[argIndex++];
            });
            if (typeof console !== 'undefined') {
                console.warn(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            }
            catch (x) { }
        };
        lowPriorityWarning = function (condition, format) {
            if (format === undefined) {
                throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
            }
            if (!condition) {
                for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                    args[_key2 - 2] = arguments[_key2];
                }
                printWarning.apply(undefined, [format].concat(args));
            }
        };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */
    var warningWithoutStack = function () { };
    {
        warningWithoutStack = function (condition, format) {
            for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                args[_key - 2] = arguments[_key];
            }
            if (format === undefined) {
                throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
            }
            if (args.length > 8) {
                // Check before the condition to catch violations early.
                throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
            }
            if (condition) {
                return;
            }
            if (typeof console !== 'undefined') {
                var argsWithFormat = args.map(function (item) {
                    return '' + item;
                });
                argsWithFormat.unshift('Warning: ' + format);
                // We intentionally don't use spread (or .apply) directly because it
                // breaks IE9: https://github.com/facebook/react/issues/13610
                Function.prototype.apply.call(console.error, console, argsWithFormat);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                var argIndex = 0;
                var message = 'Warning: ' + format.replace(/%s/g, function () {
                    return args[argIndex++];
                });
                throw new Error(message);
            }
            catch (x) { }
        };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
        {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
            var warningKey = componentName + '.' + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
            }
            warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
    }
    /**
     * This is the abstract API for an update queue.
     */
    var ReactNoopUpdateQueue = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function (publicInstance) {
            return false;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function (publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function (publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {};
    {
        Object.freeze(emptyObject);
    }
    /**
     * Base class helpers for the updating state of a component.
     */
    function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */
    Component.prototype.setState = function (partialState, callback) {
        !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */
    Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */
    {
        var deprecatedAPIs = {
            isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
            replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
        };
        var defineDeprecationWarning = function (methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
                get: function () {
                    lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                    return undefined;
                }
            });
        };
        for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
        }
    }
    function ComponentDummy() { }
    ComponentDummy.prototype = Component.prototype;
    /**
     * Convenience component with default shallow equality check for sCU.
     */
    function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    // Avoid an extra prototype jump for these methods.
    objectAssign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        {
            Object.seal(refObject);
        }
        return refObject;
    }
    var enableSchedulerDebugging = false;
    /* eslint-disable no-var */
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;
    // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
    // Eventually times out
    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000;
    // Never times out
    var IDLE_PRIORITY = maxSigned31BitInt;
    // Callbacks are stored as a circular, doubly linked list.
    var firstCallbackNode = null;
    var currentDidTimeout = false;
    // Pausing the scheduler is useful for debugging.
    var isSchedulerPaused = false;
    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1;
    // This is set when a callback is being executed, to prevent re-entrancy.
    var isExecutingCallback = false;
    var isHostCallbackScheduled = false;
    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    function ensureHostCallbackIsScheduled() {
        if (isExecutingCallback) {
            // Don't schedule work yet; wait until the next time we yield.
            return;
        }
        // Schedule the host callback using the earliest expiration in the list.
        var expirationTime = firstCallbackNode.expirationTime;
        if (!isHostCallbackScheduled) {
            isHostCallbackScheduled = true;
        }
        else {
            // Cancel the existing host callback.
            cancelHostCallback();
        }
        requestHostCallback(flushWork, expirationTime);
    }
    function flushFirstCallback() {
        var flushedNode = firstCallbackNode;
        // Remove the node from the list before calling the callback. That way the
        // list is in a consistent state even if the callback throws.
        var next = firstCallbackNode.next;
        if (firstCallbackNode === next) {
            // This is the last callback in the list.
            firstCallbackNode = null;
            next = null;
        }
        else {
            var lastCallbackNode = firstCallbackNode.previous;
            firstCallbackNode = lastCallbackNode.next = next;
            next.previous = lastCallbackNode;
        }
        flushedNode.next = flushedNode.previous = null;
        // Now it's safe to call the callback.
        var callback = flushedNode.callback;
        var expirationTime = flushedNode.expirationTime;
        var priorityLevel = flushedNode.priorityLevel;
        var previousPriorityLevel = currentPriorityLevel;
        var previousExpirationTime = currentExpirationTime;
        currentPriorityLevel = priorityLevel;
        currentExpirationTime = expirationTime;
        var continuationCallback;
        try {
            continuationCallback = callback();
        }
        finally {
            currentPriorityLevel = previousPriorityLevel;
            currentExpirationTime = previousExpirationTime;
        }
        // A callback may return a continuation. The continuation should be scheduled
        // with the same priority and expiration as the just-finished callback.
        if (typeof continuationCallback === 'function') {
            var continuationNode = {
                callback: continuationCallback,
                priorityLevel: priorityLevel,
                expirationTime: expirationTime,
                next: null,
                previous: null
            };
            // Insert the new callback into the list, sorted by its expiration. This is
            // almost the same as the code in `scheduleCallback`, except the callback
            // is inserted into the list *before* callbacks of equal expiration instead
            // of after.
            if (firstCallbackNode === null) {
                // This is the first callback in the list.
                firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
            }
            else {
                var nextAfterContinuation = null;
                var node = firstCallbackNode;
                do {
                    if (node.expirationTime >= expirationTime) {
                        // This callback expires at or after the continuation. We will insert
                        // the continuation *before* this callback.
                        nextAfterContinuation = node;
                        break;
                    }
                    node = node.next;
                } while (node !== firstCallbackNode);
                if (nextAfterContinuation === null) {
                    // No equal or lower priority callback was found, which means the new
                    // callback is the lowest priority callback in the list.
                    nextAfterContinuation = firstCallbackNode;
                }
                else if (nextAfterContinuation === firstCallbackNode) {
                    // The new callback is the highest priority callback in the list.
                    firstCallbackNode = continuationNode;
                    ensureHostCallbackIsScheduled();
                }
                var previous = nextAfterContinuation.previous;
                previous.next = nextAfterContinuation.previous = continuationNode;
                continuationNode.next = nextAfterContinuation;
                continuationNode.previous = previous;
            }
        }
    }
    function flushImmediateWork() {
        if (
        // Confirm we've exited the outer most event handler
        currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
            isExecutingCallback = true;
            try {
                do {
                    flushFirstCallback();
                } while (
                // Keep flushing until there are no more immediate callbacks
                firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
            }
            finally {
                isExecutingCallback = false;
                if (firstCallbackNode !== null) {
                    // There's still work remaining. Request another callback.
                    ensureHostCallbackIsScheduled();
                }
                else {
                    isHostCallbackScheduled = false;
                }
            }
        }
    }
    function flushWork(didTimeout) {
        // Exit right away if we're currently paused
        if (enableSchedulerDebugging && isSchedulerPaused) {
            return;
        }
        isExecutingCallback = true;
        var previousDidTimeout = currentDidTimeout;
        currentDidTimeout = didTimeout;
        try {
            if (didTimeout) {
                // Flush all the expired callbacks without yielding.
                while (firstCallbackNode !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
                    // TODO Wrap in feature flag
                    // Read the current time. Flush all the callbacks that expire at or
                    // earlier than that time. Then read the current time again and repeat.
                    // This optimizes for as few performance.now calls as possible.
                    var currentTime = getCurrentTime();
                    if (firstCallbackNode.expirationTime <= currentTime) {
                        do {
                            flushFirstCallback();
                        } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused));
                        continue;
                    }
                    break;
                }
            }
            else {
                // Keep flushing callbacks until we run out of time in the frame.
                if (firstCallbackNode !== null) {
                    do {
                        if (enableSchedulerDebugging && isSchedulerPaused) {
                            break;
                        }
                        flushFirstCallback();
                    } while (firstCallbackNode !== null && !shouldYieldToHost());
                }
            }
        }
        finally {
            isExecutingCallback = false;
            currentDidTimeout = previousDidTimeout;
            if (firstCallbackNode !== null) {
                // There's still work remaining. Request another callback.
                ensureHostCallbackIsScheduled();
            }
            else {
                isHostCallbackScheduled = false;
            }
            // Before exiting, flush all the immediate work that was scheduled.
            flushImmediateWork();
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = priorityLevel;
        currentEventStartTime = getCurrentTime();
        try {
            return eventHandler();
        }
        finally {
            currentPriorityLevel = previousPriorityLevel;
            currentEventStartTime = previousEventStartTime;
            // Before exiting, flush all the immediate work that was scheduled.
            flushImmediateWork();
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel = void 0;
        switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = priorityLevel;
        currentEventStartTime = getCurrentTime();
        try {
            return eventHandler();
        }
        finally {
            currentPriorityLevel = previousPriorityLevel;
            currentEventStartTime = previousEventStartTime;
            // Before exiting, flush all the immediate work that was scheduled.
            flushImmediateWork();
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function () {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            var previousEventStartTime = currentEventStartTime;
            currentPriorityLevel = parentPriorityLevel;
            currentEventStartTime = getCurrentTime();
            try {
                return callback.apply(this, arguments);
            }
            finally {
                currentPriorityLevel = previousPriorityLevel;
                currentEventStartTime = previousEventStartTime;
                flushImmediateWork();
            }
        };
    }
    function unstable_scheduleCallback(callback, deprecated_options) {
        var startTime = currentEventStartTime !== -1 ? currentEventStartTime : getCurrentTime();
        var expirationTime;
        if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
            // FIXME: Remove this branch once we lift expiration times out of React.
            expirationTime = startTime + deprecated_options.timeout;
        }
        else {
            switch (currentPriorityLevel) {
                case ImmediatePriority:
                    expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
                    break;
                case UserBlockingPriority:
                    expirationTime = startTime + USER_BLOCKING_PRIORITY;
                    break;
                case IdlePriority:
                    expirationTime = startTime + IDLE_PRIORITY;
                    break;
                case LowPriority:
                    expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
                    break;
                case NormalPriority:
                default:
                    expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
            }
        }
        var newNode = {
            callback: callback,
            priorityLevel: currentPriorityLevel,
            expirationTime: expirationTime,
            next: null,
            previous: null
        };
        // Insert the new callback into the list, ordered first by expiration, then
        // by insertion. So the new callback is inserted any other callback with
        // equal expiration.
        if (firstCallbackNode === null) {
            // This is the first callback in the list.
            firstCallbackNode = newNode.next = newNode.previous = newNode;
            ensureHostCallbackIsScheduled();
        }
        else {
            var next = null;
            var node = firstCallbackNode;
            do {
                if (node.expirationTime > expirationTime) {
                    // The new callback expires before this one.
                    next = node;
                    break;
                }
                node = node.next;
            } while (node !== firstCallbackNode);
            if (next === null) {
                // No callback with a later expiration was found, which means the new
                // callback has the latest expiration in the list.
                next = firstCallbackNode;
            }
            else if (next === firstCallbackNode) {
                // The new callback has the earliest expiration in the entire list.
                firstCallbackNode = newNode;
                ensureHostCallbackIsScheduled();
            }
            var previous = next.previous;
            previous.next = next.previous = newNode;
            newNode.next = next;
            newNode.previous = previous;
        }
        return newNode;
    }
    function unstable_pauseExecution() {
        isSchedulerPaused = true;
    }
    function unstable_continueExecution() {
        isSchedulerPaused = false;
        if (firstCallbackNode !== null) {
            ensureHostCallbackIsScheduled();
        }
    }
    function unstable_getFirstCallbackNode() {
        return firstCallbackNode;
    }
    function unstable_cancelCallback(callbackNode) {
        var next = callbackNode.next;
        if (next === null) {
            // Already cancelled.
            return;
        }
        if (next === callbackNode) {
            // This is the only scheduled callback. Clear the list.
            firstCallbackNode = null;
        }
        else {
            // Remove the callback from its position in the list.
            if (callbackNode === firstCallbackNode) {
                firstCallbackNode = next;
            }
            var previous = callbackNode.previous;
            previous.next = next;
            next.previous = previous;
        }
        callbackNode.next = callbackNode.previous = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    function unstable_shouldYield() {
        return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
    }
    // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.
    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.
    var localDate = Date;
    // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088
    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.
    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;
    var getCurrentTime;
    // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.
    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;
    var requestAnimationFrameWithTimeout = function (callback) {
        // schedule rAF and also a setTimeout
        rAFID = localRequestAnimationFrame(function (timestamp) {
            // cancel the setTimeout
            localClearTimeout(rAFTimeoutID);
            callback(timestamp);
        });
        rAFTimeoutID = localSetTimeout(function () {
            // cancel the requestAnimationFrame
            localCancelAnimationFrame(rAFID);
            callback(getCurrentTime());
        }, ANIMATION_FRAME_TIMEOUT);
    };
    if (hasNativePerformanceNow) {
        var Performance = performance;
        getCurrentTime = function () {
            return Performance.now();
        };
    }
    else {
        getCurrentTime = function () {
            return localDate.now();
        };
    }
    var requestHostCallback;
    var cancelHostCallback;
    var shouldYieldToHost;
    var globalValue = null;
    if (typeof window !== 'undefined') {
        globalValue = window;
    }
    else if (typeof global !== 'undefined') {
        globalValue = global;
    }
    if (globalValue && globalValue._schedMock) {
        // Dynamic injection, only for testing purposes.
        var globalImpl = globalValue._schedMock;
        requestHostCallback = globalImpl[0];
        cancelHostCallback = globalImpl[1];
        shouldYieldToHost = globalImpl[2];
        getCurrentTime = globalImpl[3];
    }
    else if (
    // If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' ||
        // Check if MessageChannel is supported, too.
        typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _flushCallback = function (didTimeout) {
            if (_callback !== null) {
                try {
                    _callback(didTimeout);
                }
                finally {
                    _callback = null;
                }
            }
        };
        requestHostCallback = function (cb, ms) {
            if (_callback !== null) {
                // Protect against re-entrancy.
                setTimeout(requestHostCallback, 0, cb);
            }
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0, false);
            }
        };
        cancelHostCallback = function () {
            _callback = null;
        };
        shouldYieldToHost = function () {
            return false;
        };
    }
    else {
        if (typeof console !== 'undefined') {
            // TODO: Remove fb.me link
            if (typeof localRequestAnimationFrame !== 'function') {
                console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
            }
            if (typeof localCancelAnimationFrame !== 'function') {
                console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
            }
        }
        var scheduledHostCallback = null;
        var isMessageEventScheduled = false;
        var timeoutTime = -1;
        var isAnimationFrameScheduled = false;
        var isFlushingHostCallback = false;
        var frameDeadline = 0;
        // We start out assuming that we run at 30fps but then the heuristic tracking
        // will adjust this value to a faster fps if we get more frequent animation
        // frames.
        var previousFrameTime = 33;
        var activeFrameTime = 33;
        shouldYieldToHost = function () {
            return frameDeadline <= getCurrentTime();
        };
        // We use the postMessage trick to defer idle work until after the repaint.
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = function (event) {
            isMessageEventScheduled = false;
            var prevScheduledCallback = scheduledHostCallback;
            var prevTimeoutTime = timeoutTime;
            scheduledHostCallback = null;
            timeoutTime = -1;
            var currentTime = getCurrentTime();
            var didTimeout = false;
            if (frameDeadline - currentTime <= 0) {
                // There's no time left in this idle period. Check if the callback has
                // a timeout and whether it's been exceeded.
                if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
                    // Exceeded the timeout. Invoke the callback even though there's no
                    // time left.
                    didTimeout = true;
                }
                else {
                    // No timeout.
                    if (!isAnimationFrameScheduled) {
                        // Schedule another animation callback so we retry later.
                        isAnimationFrameScheduled = true;
                        requestAnimationFrameWithTimeout(animationTick);
                    }
                    // Exit without invoking the callback.
                    scheduledHostCallback = prevScheduledCallback;
                    timeoutTime = prevTimeoutTime;
                    return;
                }
            }
            if (prevScheduledCallback !== null) {
                isFlushingHostCallback = true;
                try {
                    prevScheduledCallback(didTimeout);
                }
                finally {
                    isFlushingHostCallback = false;
                }
            }
        };
        var animationTick = function (rafTime) {
            if (scheduledHostCallback !== null) {
                // Eagerly schedule the next animation callback at the beginning of the
                // frame. If the scheduler queue is not empty at the end of the frame, it
                // will continue flushing inside that callback. If the queue *is* empty,
                // then it will exit immediately. Posting the callback at the start of the
                // frame ensures it's fired within the earliest possible frame. If we
                // waited until the end of the frame to post the callback, we risk the
                // browser skipping a frame and not firing the callback until the frame
                // after that.
                requestAnimationFrameWithTimeout(animationTick);
            }
            else {
                // No pending work. Exit.
                isAnimationFrameScheduled = false;
                return;
            }
            var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
            if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
                if (nextFrameTime < 8) {
                    // Defensive coding. We don't support higher frame rates than 120hz.
                    // If the calculated frame time gets lower than 8, it is probably a bug.
                    nextFrameTime = 8;
                }
                // If one frame goes long, then the next one can be short to catch up.
                // If two frames are short in a row, then that's an indication that we
                // actually have a higher frame rate than what we're currently optimizing.
                // We adjust our heuristic dynamically accordingly. For example, if we're
                // running on 120hz display or 90hz VR display.
                // Take the max of the two in case one of them was an anomaly due to
                // missed frame deadlines.
                activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
            }
            else {
                previousFrameTime = nextFrameTime;
            }
            frameDeadline = rafTime + activeFrameTime;
            if (!isMessageEventScheduled) {
                isMessageEventScheduled = true;
                port.postMessage(undefined);
            }
        };
        requestHostCallback = function (callback, absoluteTimeout) {
            scheduledHostCallback = callback;
            timeoutTime = absoluteTimeout;
            if (isFlushingHostCallback || absoluteTimeout < 0) {
                // Don't wait for the next frame. Continue working ASAP, in a new event.
                port.postMessage(undefined);
            }
            else if (!isAnimationFrameScheduled) {
                // If rAF didn't already schedule one, we need to schedule a frame.
                // TODO: If this rAF doesn't materialize because the browser throttles, we
                // might want to still have setTimeout trigger rIC as a backup to ensure
                // that we keep performing work.
                isAnimationFrameScheduled = true;
                requestAnimationFrameWithTimeout(animationTick);
            }
        };
        cancelHostCallback = function () {
            scheduledHostCallback = null;
            isMessageEventScheduled = false;
            timeoutTime = -1;
        };
    }
    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.
    var enableSchedulerTracing = true;
    // Only used in www builds.
    // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
    var enableStableConcurrentModeAPIs = false;
    var DEFAULT_THREAD_ID = 0;
    // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0;
    // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    var interactionsRef = null;
    // Listener(s) to notify when interactions begin and end.
    var subscriberRef = null;
    if (enableSchedulerTracing) {
        interactionsRef = {
            current: new Set()
        };
        subscriberRef = {
            current: null
        };
    }
    function unstable_clear(callback) {
        if (!enableSchedulerTracing) {
            return callback();
        }
        var prevInteractions = interactionsRef.current;
        interactionsRef.current = new Set();
        try {
            return callback();
        }
        finally {
            interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        if (!enableSchedulerTracing) {
            return null;
        }
        else {
            return interactionsRef.current;
        }
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        if (!enableSchedulerTracing) {
            return callback();
        }
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = interactionsRef.current;
        // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        interactionsRef.current = interactions;
        var subscriber = subscriberRef.current;
        var returnValue = void 0;
        try {
            if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
            }
        }
        finally {
            try {
                if (subscriber !== null) {
                    subscriber.onWorkStarted(interactions, threadID);
                }
            }
            finally {
                try {
                    returnValue = callback();
                }
                finally {
                    interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) {
                            subscriber.onWorkStopped(interactions, threadID);
                        }
                    }
                    finally {
                        interaction.__count--;
                        // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        }
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        if (!enableSchedulerTracing) {
            return callback;
        }
        var wrappedInteractions = interactionsRef.current;
        var subscriber = subscriberRef.current;
        if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
        }
        // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function (interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = interactionsRef.current;
            interactionsRef.current = wrappedInteractions;
            subscriber = subscriberRef.current;
            try {
                var returnValue = void 0;
                try {
                    if (subscriber !== null) {
                        subscriber.onWorkStarted(wrappedInteractions, threadID);
                    }
                }
                finally {
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    }
                    finally {
                        interactionsRef.current = prevInteractions;
                        if (subscriber !== null) {
                            subscriber.onWorkStopped(wrappedInteractions, threadID);
                        }
                    }
                }
                return returnValue;
            }
            finally {
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true;
                    // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function (interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        }
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = subscriberRef.current;
            try {
                if (subscriber !== null) {
                    subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
            }
            finally {
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function (interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    if (enableSchedulerTracing) {
        subscribers = new Set();
    }
    function unstable_subscribe(subscriber) {
        if (enableSchedulerTracing) {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                subscriberRef.current = {
                    onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                    onInteractionTraced: onInteractionTraced,
                    onWorkCanceled: onWorkCanceled,
                    onWorkScheduled: onWorkScheduled,
                    onWorkStarted: onWorkStarted,
                    onWorkStopped: onWorkStopped
                };
            }
        }
    }
    function unstable_unsubscribe(subscriber) {
        if (enableSchedulerTracing) {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
                subscriberRef.current = null;
            }
        }
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            }
            catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) {
            throw caughtError;
        }
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
            catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) {
            throw caughtError;
        }
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            }
            catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) {
            throw caughtError;
        }
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            }
            catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) {
            throw caughtError;
        }
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            }
            catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) {
            throw caughtError;
        }
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            }
            catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) {
            throw caughtError;
        }
    }
    /**
     * Keeps track of the current dispatcher.
     */
    var ReactCurrentDispatcher = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
    };
    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    var ReactCurrentOwner = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
    };
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
    var describeComponentFrame = function (name, source, ownerName) {
        var sourceInfo = '';
        if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, '');
            {
                // In DEV, include code for a common special case:
                // prefer "folder/index.js" instead of just "index.js".
                if (/^index\./.test(fileName)) {
                    var match = path.match(BEFORE_SLASH_RE);
                    if (match) {
                        var pathBeforeSlash = match[1];
                        if (pathBeforeSlash) {
                            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                            fileName = folderName + '/' + fileName;
                        }
                    }
                }
            }
            sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
        }
        else if (ownerName) {
            sourceInfo = ' (created by ' + ownerName + ')';
        }
        return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };
    var Resolved = 1;
    function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }
    function getComponentName(type) {
        if (type == null) {
            // Host root, text node or just invalid type.
            return null;
        }
        {
            if (typeof type.tag === 'number') {
                warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
            }
        }
        if (typeof type === 'function') {
            return type.displayName || type.name || null;
        }
        if (typeof type === 'string') {
            return type;
        }
        switch (type) {
            case REACT_CONCURRENT_MODE_TYPE:
                return 'ConcurrentMode';
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
        }
        if (typeof type === 'object') {
            switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                    return 'Context.Consumer';
                case REACT_PROVIDER_TYPE:
                    return 'Context.Provider';
                case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, 'ForwardRef');
                case REACT_MEMO_TYPE:
                    return getComponentName(type.type);
                case REACT_LAZY_TYPE:
                    {
                        var thenable = type;
                        var resolvedThenable = refineResolvedLazyComponent(thenable);
                        if (resolvedThenable) {
                            return getComponentName(resolvedThenable);
                        }
                    }
            }
        }
        return null;
    }
    var ReactDebugCurrentFrame = {};
    var currentlyValidatingElement = null;
    function setCurrentlyValidatingElement(element) {
        {
            currentlyValidatingElement = element;
        }
    }
    {
        // Stack implementation injected by the current renderer.
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function () {
            var stack = '';
            // Add an extra top frame while an element is being validated
            if (currentlyValidatingElement) {
                var name = getComponentName(currentlyValidatingElement.type);
                var owner = currentlyValidatingElement._owner;
                stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
            }
            // Delegate to the injected renderer-specific implementation
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
                stack += impl() || '';
            }
            return stack;
        };
    }
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentOwner: ReactCurrentOwner,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: objectAssign
    };
    {
        // Re-export the schedule API(s) for UMD bundles.
        // This avoids introducing a dependency on a new UMD global in a minor update,
        // Since that would be a breaking change (e.g. for all existing CodeSandboxes).
        // This re-export is only required for UMD bundles;
        // CJS bundles use the shared NPM package.
        objectAssign(ReactSharedInternals, {
            Scheduler: {
                unstable_cancelCallback: unstable_cancelCallback,
                unstable_shouldYield: unstable_shouldYield,
                unstable_now: getCurrentTime,
                unstable_scheduleCallback: unstable_scheduleCallback,
                unstable_runWithPriority: unstable_runWithPriority,
                unstable_next: unstable_next,
                unstable_wrapCallback: unstable_wrapCallback,
                unstable_getFirstCallbackNode: unstable_getFirstCallbackNode,
                unstable_pauseExecution: unstable_pauseExecution,
                unstable_continueExecution: unstable_continueExecution,
                unstable_getCurrentPriorityLevel: unstable_getCurrentPriorityLevel,
                unstable_IdlePriority: IdlePriority,
                unstable_ImmediatePriority: ImmediatePriority,
                unstable_LowPriority: LowPriority,
                unstable_NormalPriority: NormalPriority,
                unstable_UserBlockingPriority: UserBlockingPriority
            },
            SchedulerTracing: {
                __interactionsRef: interactionsRef,
                __subscriberRef: subscriberRef,
                unstable_clear: unstable_clear,
                unstable_getCurrent: unstable_getCurrent,
                unstable_getThreadID: unstable_getThreadID,
                unstable_subscribe: unstable_subscribe,
                unstable_trace: unstable_trace,
                unstable_unsubscribe: unstable_unsubscribe,
                unstable_wrap: unstable_wrap
            }
        });
    }
    {
        objectAssign(ReactSharedInternals, {
            // These should not be included in production.
            ReactDebugCurrentFrame: ReactDebugCurrentFrame,
            // Shim for React DOM 16.0.0 which still destructured (but not used) this.
            // TODO: remove in React 17.0.
            ReactComponentTreeHook: {}
        });
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */
    var warning = warningWithoutStack$1;
    {
        warning = function (condition, format) {
            if (condition) {
                return;
            }
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            // eslint-disable-next-line react-internal/warning-and-invariant-args
            for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                args[_key - 2] = arguments[_key];
            }
            warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
        };
    }
    var warning$1 = warning;
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;
    function hasValidRef(config) {
        {
            if (hasOwnProperty$1.call(config, 'ref')) {
                var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
                if (getter && getter.isReactWarning) {
                    return false;
                }
            }
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        {
            if (hasOwnProperty$1.call(config, 'key')) {
                var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
                if (getter && getter.isReactWarning) {
                    return false;
                }
            }
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function () {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function () {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */
    var ReactElement = function (type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        {
            // The validation flag is currently mutative. We put it on
            // an external backing store so that we can freeze the whole object.
            // This can be replaced with a WeakMap once they are implemented in
            // commonly used development environments.
            element._store = {};
            // To make comparing ReactElements easier for testing purposes, we make
            // the validation flag non-enumerable (where possible, which should
            // include every environment we run tests in), so the test framework
            // ignores it.
            Object.defineProperty(element._store, 'validated', {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
            });
            // self and source are DEV only properties.
            Object.defineProperty(element, '_self', {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
            });
            // Two elements created in two different places should be considered
            // equal for testing purposes and therefore we hide it from enumeration.
            Object.defineProperty(element, '_source', {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
            });
            if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
            }
        }
        return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */
    function createElement(type, config, children) {
        var propName = void 0;
        // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
            }
            if (hasValidKey(config)) {
                key = '' + config.key;
            }
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source;
            // Remaining properties are added to a new props object
            for (propName in config) {
                if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                    props[propName] = config[propName];
                }
            }
        }
        // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
            props.children = children;
        }
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
            }
            {
                if (Object.freeze) {
                    Object.freeze(childArray);
                }
            }
            props.children = childArray;
        }
        // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
                if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                }
            }
        }
        {
            if (key || ref) {
                var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
                if (key) {
                    defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                    defineRefPropWarningGetter(props, displayName);
                }
            }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */
    function cloneElement(element, config, children) {
        !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;
        var propName = void 0;
        // Original props are copied
        var props = objectAssign({}, element.props);
        // Reserved names are extracted
        var key = element.key;
        var ref = element.ref;
        // Self is preserved since the owner is preserved.
        var self = element._self;
        // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source;
        // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
                key = '' + config.key;
            }
            // Remaining properties override existing props
            var defaultProps = void 0;
            if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
                if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                    if (config[propName] === undefined && defaultProps !== undefined) {
                        // Resolve default props
                        props[propName] = defaultProps[propName];
                    }
                    else {
                        props[propName] = config[propName];
                    }
                }
            }
        }
        // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
            props.children = children;
        }
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */
    function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */
    function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = ('' + key).replace(escapeRegex, function (match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */
    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }
    var POOL_SIZE = 10;
    var traverseContextPool = [];
    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
        if (traverseContextPool.length) {
            var traverseContext = traverseContextPool.pop();
            traverseContext.result = mapResult;
            traverseContext.keyPrefix = keyPrefix;
            traverseContext.func = mapFunction;
            traverseContext.context = mapContext;
            traverseContext.count = 0;
            return traverseContext;
        }
        else {
            return {
                result: mapResult,
                keyPrefix: keyPrefix,
                func: mapFunction,
                context: mapContext,
                count: 0
            };
        }
    }
    function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;
        if (traverseContextPool.length < POOL_SIZE) {
            traverseContextPool.push(traverseContext);
        }
    }
    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') {
            // All of the above are perceived as null.
            children = null;
        }
        var invokeCallback = false;
        if (children === null) {
            invokeCallback = true;
        }
        else {
            switch (type) {
                case 'string':
                case 'number':
                    invokeCallback = true;
                    break;
                case 'object':
                    switch (children.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                            invokeCallback = true;
                    }
            }
        }
        if (invokeCallback) {
            callback(traverseContext, children, 
            // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows.
            nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
            return 1;
        }
        var child = void 0;
        var nextName = void 0;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getComponentKey(child, i);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                {
                    // Warn about using Maps as children
                    if (iteratorFn === children.entries) {
                        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
                        didWarnAboutMaps = true;
                    }
                }
                var iterator = iteratorFn.call(children);
                var step = void 0;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                    child = step.value;
                    nextName = nextNamePrefix + getComponentKey(child, ii++);
                    subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                }
            }
            else if (type === 'object') {
                var addendum = '';
                {
                    addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
                }
                var childrenString = '' + children;
                invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
            }
        }
        return subtreeCount;
    }
    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
            return 0;
        }
        return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */
    function getComponentKey(component, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof component === 'object' && component !== null && component.key != null) {
            // Explicit key
            return escape(component.key);
        }
        // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func, context = bookKeeping.context;
        func.call(context, child, bookKeeping.count++);
    }
    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) {
            return children;
        }
        var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
    }
    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
        var mappedChild = func.call(context, child, bookKeeping.count++);
        if (Array.isArray(mappedChild)) {
            mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
                return c;
            });
        }
        else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, 
                // Keep both the (mapped) and old keys if they differ, just as
                // traverseAllChildren used to do for objects as children
                keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
            }
            result.push(mappedChild);
        }
    }
    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
        var escapedPrefix = '';
        if (prefix != null) {
            escapedPrefix = escapeUserProvidedKey(prefix) + '/';
        }
        var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
        traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
        releaseTraverseContext(traverseContext);
    }
    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
        if (children == null) {
            return children;
        }
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */
    function countChildren(children) {
        return traverseAllChildren(children, function () {
            return null;
        }, null);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */
    function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
            return child;
        });
        return result;
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */
    function onlyChild(children) {
        !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) {
            calculateChangedBits = null;
        }
        else {
            {
                !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
            }
        }
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        {
            // A separate object, but proxies back to the original context object for
            // backwards compatibility. It has a different $$typeof, so we can properly
            // warn for the incorrect usage of Context as a Consumer.
            var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
            };
            // $FlowFixMe: Flow complains about not setting a value, which is intentional here
            Object.defineProperties(Consumer, {
                Provider: {
                    get: function () {
                        if (!hasWarnedAboutUsingConsumerProvider) {
                            hasWarnedAboutUsingConsumerProvider = true;
                            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
                        }
                        return context.Provider;
                    },
                    set: function (_Provider) {
                        context.Provider = _Provider;
                    }
                },
                _currentValue: {
                    get: function () {
                        return context._currentValue;
                    },
                    set: function (_currentValue) {
                        context._currentValue = _currentValue;
                    }
                },
                _currentValue2: {
                    get: function () {
                        return context._currentValue2;
                    },
                    set: function (_currentValue2) {
                        context._currentValue2 = _currentValue2;
                    }
                },
                _threadCount: {
                    get: function () {
                        return context._threadCount;
                    },
                    set: function (_threadCount) {
                        context._threadCount = _threadCount;
                    }
                },
                Consumer: {
                    get: function () {
                        if (!hasWarnedAboutUsingNestedContextConsumers) {
                            hasWarnedAboutUsingNestedContextConsumers = true;
                            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                        }
                        return context.Consumer;
                    }
                }
            });
            // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
            context.Consumer = Consumer;
        }
        {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
        }
        return context;
    }
    function lazy(ctor) {
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _ctor: ctor,
            // React uses these fields to store the result.
            _status: -1,
            _result: null
        };
        {
            // In production, this would just set it on the object.
            var defaultProps = void 0;
            var propTypes = void 0;
            Object.defineProperties(lazyType, {
                defaultProps: {
                    configurable: true,
                    get: function () {
                        return defaultProps;
                    },
                    set: function (newDefaultProps) {
                        warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                        defaultProps = newDefaultProps;
                        // Match production behavior more closely:
                        Object.defineProperty(lazyType, 'defaultProps', {
                            enumerable: true
                        });
                    }
                },
                propTypes: {
                    configurable: true,
                    get: function () {
                        return propTypes;
                    },
                    set: function (newPropTypes) {
                        warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                        propTypes = newPropTypes;
                        // Match production behavior more closely:
                        Object.defineProperty(lazyType, 'propTypes', {
                            enumerable: true
                        });
                    }
                }
            });
        }
        return lazyType;
    }
    function forwardRef(render) {
        {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
            }
            else if (typeof render !== 'function') {
                warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
            }
            else {
                !(
                // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
                render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
            }
            if (render != null) {
                !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
            }
        }
        return {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
    }
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' ||
            // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }
    function memo(type, compare) {
        {
            if (!isValidElementType(type)) {
                warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
            }
        }
        return {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        !(dispatcher !== null) ? invariant(false, 'Hooks can only be called inside the body of a function component. (https://fb.me/react-invalid-hook-call)') : void 0;
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        {
            !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0;
            // TODO: add a more generic warning for invalid values.
            if (Context._context !== undefined) {
                var realContext = Context._context;
                // Don't deduplicate because this legitimately causes bugs
                // and nobody should be using this in existing code.
                if (realContext.Consumer === Context) {
                    warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
                }
                else if (realContext.Provider === Context) {
                    warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
                }
            }
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, inputs);
    }
    function useLayoutEffect(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, inputs);
    }
    function useCallback(callback, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, inputs);
    }
    function useMemo(create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, inputs);
    }
    function useImperativeHandle(ref, create, inputs) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, inputs);
    }
    function useDebugValue(value, formatterFn) {
        {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
        }
    }
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var printWarning$1 = function () { };
    {
        var ReactPropTypesSecret = ReactPropTypesSecret_1;
        var loggedTypeFailures = {};
        printWarning$1 = function (text) {
            var message = 'Warning: ' + text;
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            }
            catch (x) { }
        };
    }
    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        {
            for (var typeSpecName in typeSpecs) {
                if (typeSpecs.hasOwnProperty(typeSpecName)) {
                    var error;
                    // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.
                    try {
                        // This is intentionally an invariant that gets caught. It's the same
                        // behavior as without this statement except with a better message.
                        if (typeof typeSpecs[typeSpecName] !== 'function') {
                            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                                'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                            err.name = 'Invariant Violation';
                            throw err;
                        }
                        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                    }
                    catch (ex) {
                        error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                        printWarning$1((componentName || 'React class') + ': type specification of ' +
                            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                            'You may have forgotten to pass an argument to the type checker ' +
                            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                            'shape all require an argument).');
                    }
                    if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                        // Only monitor this failure once because there tends to be a lot of the
                        // same error.
                        loggedTypeFailures[error.message] = true;
                        var stack = getStack ? getStack() : '';
                        printWarning$1('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
                    }
                }
            }
        }
    }
    var checkPropTypes_1 = checkPropTypes;
    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */
    var propTypesMisspellWarningShown = void 0;
    {
        propTypesMisspellWarningShown = false;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
                return '\n\nCheck the render method of `' + name + '`.';
            }
        }
        return '';
    }
    function getSourceInfoErrorAddendum(elementProps) {
        if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
            var source = elementProps.__source;
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
                info = '\n\nCheck the top-level render call using <' + parentName + '>.';
            }
        }
        return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
            return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            // Give the component that originally created this child.
            childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
        }
        setCurrentlyValidatingElement(element);
        {
            warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
        }
        setCurrentlyValidatingElement(null);
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */
    function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
            return;
        }
        if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                }
            }
        }
        else if (isValidElement(node)) {
            // This element was passed in a valid location.
            if (node._store) {
                node._store.validated = true;
            }
        }
        else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') {
                // Entry iterators used to provide implicit keys,
                // but now we print a separate warning for them later.
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step = void 0;
                    while (!(step = iterator.next()).done) {
                        if (isValidElement(step.value)) {
                            validateExplicitKey(step.value, parentType);
                        }
                    }
                }
            }
        }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */
    function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') {
            return;
        }
        var name = getComponentName(type);
        var propTypes = void 0;
        if (typeof type === 'function') {
            propTypes = type.propTypes;
        }
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
            // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
        }
        else {
            return;
        }
        if (propTypes) {
            setCurrentlyValidatingElement(element);
            checkPropTypes_1(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
            setCurrentlyValidatingElement(null);
        }
        else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function') {
            !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
        }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */
    function validateFragmentProps(fragment) {
        setCurrentlyValidatingElement(fragment);
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
                break;
            }
        }
        if (fragment.ref !== null) {
            warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
        }
        setCurrentlyValidatingElement(null);
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(props);
            if (sourceInfo) {
                info += sourceInfo;
            }
            else {
                info += getDeclarationErrorAddendum();
            }
            var typeString = void 0;
            if (type === null) {
                typeString = 'null';
            }
            else if (Array.isArray(type)) {
                typeString = 'array';
            }
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
                info = ' Did you accidentally export a JSX literal instead of a component?';
            }
            else {
                typeString = typeof type;
            }
            warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }
        var element = createElement.apply(this, arguments);
        // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) {
            return element;
        }
        // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
            }
        }
        if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
        }
        else {
            validatePropTypes(element);
        }
        return element;
    }
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        // Legacy hook: remove it
        {
            Object.defineProperty(validatedFactory, 'type', {
                enumerable: false,
                get: function () {
                    lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
                    Object.defineProperty(this, 'type', {
                        value: type
                    });
                    return type;
                }
            });
        }
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
    }
    var React = {
        Children: {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray,
            only: onlyChild
        },
        createRef: createRef,
        Component: Component,
        PureComponent: PureComponent,
        createContext: createContext,
        forwardRef: forwardRef,
        lazy: lazy,
        memo: memo,
        useCallback: useCallback,
        useContext: useContext,
        useEffect: useEffect,
        useImperativeHandle: useImperativeHandle,
        useDebugValue: useDebugValue,
        useLayoutEffect: useLayoutEffect,
        useMemo: useMemo,
        useReducer: useReducer,
        useRef: useRef,
        useState: useState,
        Fragment: REACT_FRAGMENT_TYPE,
        StrictMode: REACT_STRICT_MODE_TYPE,
        Suspense: REACT_SUSPENSE_TYPE,
        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,
        version: ReactVersion,
        unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
        unstable_Profiler: REACT_PROFILER_TYPE,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    };
    // Note: some APIs are added with feature flags.
    // Make sure that stable builds for open source
    // don't modify the React object to avoid deopts.
    // Also let's not expose their names in stable builds.
    if (enableStableConcurrentModeAPIs) {
        React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        React.Profiler = REACT_PROFILER_TYPE;
        React.unstable_ConcurrentMode = undefined;
        React.unstable_Profiler = undefined;
    }
    var React$2 = Object.freeze({
        default: React
    });
    var React$3 = (React$2 && React) || React$2;
    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.
    var react = React$3.default || React$3;
    return react;
})));
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
        typeof define === 'function' && define.amd ? define('react-dom', ['react'], factory) :
            (global.ReactDOM = factory(global.React));
}(this, (function (React) {
    'use strict';
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */
    var validateFormat = function () { };
    {
        validateFormat = function (format) {
            if (format === undefined) {
                throw new Error('invariant requires an error message argument');
            }
        };
    }
    function invariant(condition, format, a, b, c, d, e, f) {
        validateFormat(format);
        if (!condition) {
            var error = void 0;
            if (format === undefined) {
                error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
            }
            else {
                var args = [a, b, c, d, e, f];
                var argIndex = 0;
                error = new Error(format.replace(/%s/g, function () {
                    return args[argIndex++];
                }));
                error.name = 'Invariant Violation';
            }
            error.framesToPop = 1; // we don't care about invariant's own frame
            throw error;
        }
    }
    // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.
    !React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;
    var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        }
        catch (error) {
            this.onError(error);
        }
    };
    {
        // In DEV mode, we swap out invokeGuardedCallback for a special version
        // that plays more nicely with the browser's DevTools. The idea is to preserve
        // "Pause on exceptions" behavior. Because React wraps all user-provided
        // functions in invokeGuardedCallback, and the production version of
        // invokeGuardedCallback uses a try-catch, all user exceptions are treated
        // like caught exceptions, and the DevTools won't pause unless the developer
        // takes the extra step of enabling pause on caught exceptions. This is
        // unintuitive, though, because even though React has caught the error, from
        // the developer's perspective, the error is uncaught.
        //
        // To preserve the expected "Pause on exceptions" behavior, we don't use a
        // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
        // DOM node, and call the user-provided callback from inside an event handler
        // for that fake event. If the callback throws, the error is "captured" using
        // a global event handler. But because the error happens in a different
        // event loop context, it does not interrupt the normal program flow.
        // Effectively, this gives us try-catch behavior without actually using
        // try-catch. Neat!
        // Check that the browser supports the APIs we need to implement our special
        // DEV version of invokeGuardedCallback
        if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
            var fakeNode = document.createElement('react');
            var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
                // If document doesn't exist we know for sure we will crash in this method
                // when we call document.createEvent(). However this can cause confusing
                // errors: https://github.com/facebookincubator/create-react-app/issues/3482
                // So we preemptively throw with a better message instead.
                !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
                var evt = document.createEvent('Event');
                // Keeps track of whether the user-provided callback threw an error. We
                // set this to true at the beginning, then set it to false right after
                // calling the function. If the function errors, `didError` will never be
                // set to false. This strategy works even if the browser is flaky and
                // fails to call our global error handler, because it doesn't rely on
                // the error event at all.
                var didError = true;
                // Keeps track of the value of window.event so that we can reset it
                // during the callback to let user code access window.event in the
                // browsers that support it.
                var windowEvent = window.event;
                // Keeps track of the descriptor of window.event to restore it after event
                // dispatching: https://github.com/facebook/react/issues/13688
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
                // Create an event handler for our fake event. We will synchronously
                // dispatch our fake event using `dispatchEvent`. Inside the handler, we
                // call the user-provided callback.
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback() {
                    // We immediately remove the callback from event listeners so that
                    // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                    // nested call would trigger the fake event handlers of any call higher
                    // in the stack.
                    fakeNode.removeEventListener(evtType, callCallback, false);
                    // We check for window.hasOwnProperty('event') to prevent the
                    // window.event assignment in both IE <= 10 as they throw an error
                    // "Member not found" in strict mode, and in Firefox which does not
                    // support window.event.
                    if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                        window.event = windowEvent;
                    }
                    func.apply(context, funcArgs);
                    didError = false;
                }
                // Create a global error event handler. We use this to capture the value
                // that was thrown. It's possible that this error handler will fire more
                // than once; for example, if non-React code also calls `dispatchEvent`
                // and a handler for that event throws. We should be resilient to most of
                // those cases. Even if our error event handler fires more than once, the
                // last error event is always used. If the callback actually does error,
                // we know that the last error event is the correct one, because it's not
                // possible for anything else to have happened in between our callback
                // erroring and the code that follows the `dispatchEvent` call below. If
                // the callback doesn't error, but the error event was fired, we know to
                // ignore it because `didError` will be false, as described above.
                var error = void 0;
                // Use this to track whether the error event is ever called.
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                    error = event.error;
                    didSetError = true;
                    if (error === null && event.colno === 0 && event.lineno === 0) {
                        isCrossOriginError = true;
                    }
                    if (event.defaultPrevented) {
                        // Some other error handler has prevented default.
                        // Browsers silence the error report if this happens.
                        // We'll remember this to later decide whether to log it or not.
                        if (error != null && typeof error === 'object') {
                            try {
                                error._suppressLogging = true;
                            }
                            catch (inner) {
                                // Ignore.
                            }
                        }
                    }
                }
                // Create a fake event type.
                var evtType = 'react-' + (name ? name : 'invokeguardedcallback');
                // Attach our event handlers
                window.addEventListener('error', handleWindowError);
                fakeNode.addEventListener(evtType, callCallback, false);
                // Synchronously dispatch our fake event. If the user-provided function
                // errors, it will trigger our global error handler.
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                    Object.defineProperty(window, 'event', windowEventDescriptor);
                }
                if (didError) {
                    if (!didSetError) {
                        // The callback errored, but the error event never fired.
                        error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
                    }
                    else if (isCrossOriginError) {
                        error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
                    }
                    this.onError(error);
                }
                // Remove our event listeners
                window.removeEventListener('error', handleWindowError);
            };
            invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
        }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    // Used by Fiber to simulate a try-catch.
    var hasError = false;
    var caughtError = null;
    // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function (error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
     * Call a function while guarding against errors that happens within it.
     * Returns an error if it throws, otherwise null.
     *
     * In production, this is implemented using a try-catch. The reason we don't
     * use a try-catch directly is so that we can swap out a different
     * implementation in DEV mode.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */
    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
     * Same as invokeGuardedCallback, but instead of returning an error, it stores
     * it in a global so it can be rethrown by `rethrowCaughtError` later.
     * TODO: See if caughtError and rethrowError can be unified.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */
    function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        }
        else {
            invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
    /**
     * Injectable ordering of event plugins.
     */
    var eventPluginOrder = null;
    /**
     * Injectable mapping from names to event plugin modules.
     */
    var namesToPlugins = {};
    /**
     * Recomputes the plugin list using the injected plugins and plugin ordering.
     *
     * @private
     */
    function recomputePluginOrdering() {
        if (!eventPluginOrder) {
            // Wait until an `eventPluginOrder` is injected.
            return;
        }
        for (var pluginName in namesToPlugins) {
            var pluginModule = namesToPlugins[pluginName];
            var pluginIndex = eventPluginOrder.indexOf(pluginName);
            !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
            if (plugins[pluginIndex]) {
                continue;
            }
            !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
            plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
                !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
            }
        }
    }
    /**
     * Publishes an event so that it can be dispatched by the supplied plugin.
     *
     * @param {object} dispatchConfig Dispatch configuration for the event.
     * @param {object} PluginModule Plugin publishing the event.
     * @return {boolean} True if the event was successfully published.
     * @private
     */
    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
        if (phasedRegistrationNames) {
            for (var phaseName in phasedRegistrationNames) {
                if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                    var phasedRegistrationName = phasedRegistrationNames[phaseName];
                    publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
                }
            }
            return true;
        }
        else if (dispatchConfig.registrationName) {
            publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
            return true;
        }
        return false;
    }
    /**
     * Publishes a registration name that is used to identify dispatched events.
     *
     * @param {string} registrationName Registration name to add.
     * @param {object} PluginModule Plugin publishing the event.
     * @private
     */
    function publishRegistrationName(registrationName, pluginModule, eventName) {
        !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === 'onDoubleClick') {
                possibleRegistrationNames.ondblclick = registrationName;
            }
        }
    }
    /**
     * Registers plugins so that they can extract and dispatch events.
     *
     * @see {EventPluginHub}
     */
    /**
     * Ordered list of injected plugins.
     */
    var plugins = [];
    /**
     * Mapping from event name to dispatch config
     */
    var eventNameDispatchConfigs = {};
    /**
     * Mapping from registration name to plugin module
     */
    var registrationNameModules = {};
    /**
     * Mapping from registration name to event name
     */
    var registrationNameDependencies = {};
    /**
     * Mapping from lowercase registration names to the properly cased version,
     * used to warn in the case of missing event handlers. Available
     * only in true.
     * @type {Object}
     */
    var possibleRegistrationNames = {};
    // Trust the developer to only use possibleRegistrationNames in true
    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */
    function injectEventPluginOrder(injectedEventPluginOrder) {
        !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
        // Clone the ordering so it cannot be dynamically mutated.
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
    }
    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */
    function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;
        for (var pluginName in injectedNamesToPlugins) {
            if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                continue;
            }
            var pluginModule = injectedNamesToPlugins[pluginName];
            if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
                !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
                namesToPlugins[pluginName] = pluginModule;
                isOrderingDirty = true;
            }
        }
        if (isOrderingDirty) {
            recomputePluginOrdering();
        }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */
    var warningWithoutStack = function () { };
    {
        warningWithoutStack = function (condition, format) {
            for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                args[_key - 2] = arguments[_key];
            }
            if (format === undefined) {
                throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
            }
            if (args.length > 8) {
                // Check before the condition to catch violations early.
                throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
            }
            if (condition) {
                return;
            }
            if (typeof console !== 'undefined') {
                var argsWithFormat = args.map(function (item) {
                    return '' + item;
                });
                argsWithFormat.unshift('Warning: ' + format);
                // We intentionally don't use spread (or .apply) directly because it
                // breaks IE9: https://github.com/facebook/react/issues/13610
                Function.prototype.apply.call(console.error, console, argsWithFormat);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                var argIndex = 0;
                var message = 'Warning: ' + format.replace(/%s/g, function () {
                    return args[argIndex++];
                });
                throw new Error(message);
            }
            catch (x) { }
        };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    var getNodeFromInstance = null;
    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
        getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
        getInstanceFromNode = getInstanceFromNodeImpl;
        getNodeFromInstance = getNodeFromInstanceImpl;
        {
            !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
        }
    }
    var validateEventDispatches = void 0;
    {
        validateEventDispatches = function (event) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            var listenersIsArr = Array.isArray(dispatchListeners);
            var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
            var instancesIsArr = Array.isArray(dispatchInstances);
            var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
            !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
        };
    }
    /**
     * Dispatch the event to the listener.
     * @param {SyntheticEvent} event SyntheticEvent to handle
     * @param {function} listener Application-level callback
     * @param {*} inst Internal component instance
     */
    function executeDispatch(event, listener, inst) {
        var type = event.type || 'unknown-event';
        event.currentTarget = getNodeFromInstance(inst);
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    /**
     * Standard/simple iteration through an event's collected dispatches.
     */
    function executeDispatchesInOrder(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
            validateEventDispatches(event);
        }
        if (Array.isArray(dispatchListeners)) {
            for (var i = 0; i < dispatchListeners.length; i++) {
                if (event.isPropagationStopped()) {
                    break;
                }
                // Listeners and Instances are two parallel arrays that are always in sync.
                executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
            }
        }
        else if (dispatchListeners) {
            executeDispatch(event, dispatchListeners, dispatchInstances);
        }
        event._dispatchListeners = null;
        event._dispatchInstances = null;
    }
    /**
     * @see executeDispatchesInOrderStopAtTrueImpl
     */
    /**
     * Execution of a "direct" dispatch - there must be at most one dispatch
     * accumulated on the event or it is considered an error. It doesn't really make
     * sense for an event with multiple dispatches (bubbled) to keep track of the
     * return values at each dispatch execution, but it does tend to make sense when
     * dealing with "direct" dispatches.
     *
     * @return {*} The return value of executing the single dispatch.
     */
    /**
     * @param {SyntheticEvent} event
     * @return {boolean} True iff number of dispatches accumulated is greater than 0.
     */
    /**
     * Accumulates items that must not be null or undefined into the first one. This
     * is used to conserve memory by avoiding array allocations, and thus sacrifices
     * API cleanness. Since `current` can be null before being passed in and not
     * null after this function, make sure to assign it back to `current`:
     *
     * `a = accumulateInto(a, b);`
     *
     * This API should be sparingly used. Try `accumulate` for something cleaner.
     *
     * @return {*|array<*>} An accumulation of items.
     */
    function accumulateInto(current, next) {
        !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;
        if (current == null) {
            return next;
        }
        // Both are not empty. Warning: Never call x.concat(y) when you are not
        // certain that x is an Array (x could be a string with concat method).
        if (Array.isArray(current)) {
            if (Array.isArray(next)) {
                current.push.apply(current, next);
                return current;
            }
            current.push(next);
            return current;
        }
        if (Array.isArray(next)) {
            // A bit too dangerous to mutate `next`.
            return [current].concat(next);
        }
        return [current, next];
    }
    /**
     * @param {array} arr an "accumulation" of items which is either an Array or
     * a single item. Useful when paired with the `accumulate` module. This is a
     * simple utility that allows us to reason about a collection of items, but
     * handling the case when there is exactly one item (and we do not need to
     * allocate an array).
     * @param {function} cb Callback invoked with each element or a collection.
     * @param {?} [scope] Scope used as `this` in a callback.
     */
    function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
            arr.forEach(cb, scope);
        }
        else if (arr) {
            cb.call(scope, arr);
        }
    }
    /**
     * Internal queue of events that have accumulated their dispatches and are
     * waiting to have their dispatches executed.
     */
    var eventQueue = null;
    /**
     * Dispatches an event and releases it back into the pool, unless persistent.
     *
     * @param {?object} event Synthetic event to be dispatched.
     * @private
     */
    var executeDispatchesAndRelease = function (event) {
        if (event) {
            executeDispatchesInOrder(event);
            if (!event.isPersistent()) {
                event.constructor.release(event);
            }
        }
    };
    var executeDispatchesAndReleaseTopLevel = function (e) {
        return executeDispatchesAndRelease(e);
    };
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
     * This is a unified interface for event plugins to be installed and configured.
     *
     * Event plugins can implement the following properties:
     *
     *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
     *     Required. When a top-level event is fired, this method is expected to
     *     extract synthetic events that will in turn be queued and dispatched.
     *
     *   `eventTypes` {object}
     *     Optional, plugins that fire events must publish a mapping of registration
     *     names that are used to register listeners. Values of this mapping must
     *     be objects that contain `registrationName` or `phasedRegistrationNames`.
     *
     *   `executeDispatch` {function(object, function, string)}
     *     Optional, allows plugins to override how an event gets dispatched. By
     *     default, the listener is simply invoked.
     *
     * Each plugin that is injected into `EventsPluginHub` is immediately operable.
     *
     * @public
     */
    /**
     * Methods for injecting dependencies.
     */
    var injection = {
        /**
         * @param {array} InjectedEventPluginOrder
         * @public
         */
        injectEventPluginOrder: injectEventPluginOrder,
        /**
         * @param {object} injectedNamesToPlugins Map from names to plugin modules.
         */
        injectEventPluginsByName: injectEventPluginsByName
    };
    /**
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */
    function getListener(inst, registrationName) {
        var listener = void 0;
        // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
        // live here; needs to be moved to a better place soon
        var stateNode = inst.stateNode;
        if (!stateNode) {
            // Work in progress (ex: onload events in incremental mode).
            return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (!props) {
            // Work in progress.
            return null;
        }
        listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
        }
        !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
        return listener;
    }
    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @return {*} An accumulation of synthetic events.
     * @internal
     */
    function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = null;
        for (var i = 0; i < plugins.length; i++) {
            // Not every plugin in the ordering may be loaded at runtime.
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                if (extractedEvents) {
                    events = accumulateInto(events, extractedEvents);
                }
            }
        }
        return events;
    }
    function runEventsInBatch(events) {
        if (events !== null) {
            eventQueue = accumulateInto(eventQueue, events);
        }
        // Set `eventQueue` to null before processing it so that we can tell if more
        // events get enqueued while processing.
        var processingEventQueue = eventQueue;
        eventQueue = null;
        if (!processingEventQueue) {
            return;
        }
        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
        // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventsInBatch(events);
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedSuspenseComponent = 18;
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactInternalInstance$' + randomKey;
    var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    /**
     * Given a DOM node, return the closest ReactDOMComponent or
     * ReactDOMTextComponent instance ancestor.
     */
    function getClosestInstanceFromNode(node) {
        if (node[internalInstanceKey]) {
            return node[internalInstanceKey];
        }
        while (!node[internalInstanceKey]) {
            if (node.parentNode) {
                node = node.parentNode;
            }
            else {
                // Top of the tree. This node must not be part of a React tree (or is
                // unmounted, potentially).
                return null;
            }
        }
        var inst = node[internalInstanceKey];
        if (inst.tag === HostComponent || inst.tag === HostText) {
            // In Fiber, this will always be the deepest root.
            return inst;
        }
        return null;
    }
    /**
     * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
     * instance, or null if the node was not rendered by this React.
     */
    function getInstanceFromNode$1(node) {
        var inst = node[internalInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
                return inst;
            }
            else {
                return null;
            }
        }
        return null;
    }
    /**
     * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
     * DOM node.
     */
    function getNodeFromInstance$1(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
            // In Fiber this, is just the state node right now. We assume it will be
            // a host component or host text.
            return inst.stateNode;
        }
        // Without this first invariant, passing a non-DOM-component triggers the next
        // invariant for a missing parent, which is super confusing.
        invariant(false, 'getNodeFromInstance: Invalid argument.');
    }
    function getFiberCurrentPropsFromNode$1(node) {
        return node[internalEventHandlersKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalEventHandlersKey] = props;
    }
    function getParent(inst) {
        do {
            inst = inst.return;
            // TODO: If this is a HostRoot we might want to bail out.
            // That is depending on if we want nested subtrees (layers) to bubble
            // events to their parent. We could also go through parentNode on the
            // host node but that wouldn't work for React Native and doesn't let us
            // do the portal feature.
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
            return inst;
        }
        return null;
    }
    /**
     * Return the lowest common ancestor of A and B, or null if they are in
     * different trees.
     */
    function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;
        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
            depthA++;
        }
        var depthB = 0;
        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
            depthB++;
        }
        // If A is deeper, crawl up.
        while (depthA - depthB > 0) {
            instA = getParent(instA);
            depthA--;
        }
        // If B is deeper, crawl up.
        while (depthB - depthA > 0) {
            instB = getParent(instB);
            depthB--;
        }
        // Walk in lockstep until we find a match.
        var depth = depthA;
        while (depth--) {
            if (instA === instB || instA === instB.alternate) {
                return instA;
            }
            instA = getParent(instA);
            instB = getParent(instB);
        }
        return null;
    }
    /**
     * Return if A is an ancestor of B.
     */
    /**
     * Return the parent instance of the passed-in instance.
     */
    /**
     * Simulates the traversal of a two-phase, capture/bubble event dispatch.
     */
    function traverseTwoPhase(inst, fn, arg) {
        var path = [];
        while (inst) {
            path.push(inst);
            inst = getParent(inst);
        }
        var i = void 0;
        for (i = path.length; i-- > 0;) {
            fn(path[i], 'captured', arg);
        }
        for (i = 0; i < path.length; i++) {
            fn(path[i], 'bubbled', arg);
        }
    }
    /**
     * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
     * should would receive a `mouseEnter` or `mouseLeave` event.
     *
     * Does not invoke the callback on the nearest common ancestor because nothing
     * "entered" or "left" that element.
     */
    function traverseEnterLeave(from, to, fn, argFrom, argTo) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        var pathFrom = [];
        while (true) {
            if (!from) {
                break;
            }
            if (from === common) {
                break;
            }
            var alternate = from.alternate;
            if (alternate !== null && alternate === common) {
                break;
            }
            pathFrom.push(from);
            from = getParent(from);
        }
        var pathTo = [];
        while (true) {
            if (!to) {
                break;
            }
            if (to === common) {
                break;
            }
            var _alternate = to.alternate;
            if (_alternate !== null && _alternate === common) {
                break;
            }
            pathTo.push(to);
            to = getParent(to);
        }
        for (var i = 0; i < pathFrom.length; i++) {
            fn(pathFrom[i], 'bubbled', argFrom);
        }
        for (var _i = pathTo.length; _i-- > 0;) {
            fn(pathTo[_i], 'captured', argTo);
        }
    }
    /**
     * Some event types have a notion of different registration names for different
     * "phases" of propagation. This finds listeners by a given phase.
     */
    function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
    }
    /**
     * A small set of propagation patterns, each of which will accept a small amount
     * of information, and generate a set of "dispatch ready event objects" - which
     * are sets of events that have already been annotated with a set of dispatched
     * listener functions/ids. The API is designed this way to discourage these
     * propagation strategies from actually executing the dispatches, since we
     * always want to collect the entire set of dispatches before executing even a
     * single one.
     */
    /**
     * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
     * here, allows us to not have to bind or create functions for each event.
     * Mutating the event's members allows us to not have to create a wrapping
     * "dispatch" object that pairs the event with the listener.
     */
    function accumulateDirectionalDispatches(inst, phase, event) {
        {
            !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
        }
        var listener = listenerAtPhase(inst, event, phase);
        if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
    }
    /**
     * Collect dispatches (must be entirely collected before dispatching - see unit
     * tests). Lazily allocate the array to conserve memory.  We must loop through
     * each event and perform the traversal for each one. We cannot perform a
     * single traversal for the entire collection of events because each event may
     * have a different target.
     */
    function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
            traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
    }
    /**
     * Accumulates without regard to direction, does not look for phased
     * registration names. Same as `accumulateDirectDispatchesSingle` but without
     * requiring that the `dispatchMarker` be the same as the dispatched ID.
     */
    function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
            var registrationName = event.dispatchConfig.registrationName;
            var listener = getListener(inst, registrationName);
            if (listener) {
                event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
        }
    }
    /**
     * Accumulates dispatches on an `SyntheticEvent`, but only for the
     * `dispatchMarker`.
     * @param {SyntheticEvent} event
     */
    function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
            accumulateDispatches(event._targetInst, null, event);
        }
    }
    function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }
    function accumulateEnterLeaveDispatches(leave, enter, from, to) {
        traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
    }
    function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    // Do not uses the below two methods directly!
    // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
    // (It is the only module that is allowed to access these methods.)
    function unsafeCastStringToDOMTopLevelType(topLevelType) {
        return topLevelType;
    }
    function unsafeCastDOMTopLevelTypeToString(topLevelType) {
        return topLevelType;
    }
    /**
     * Generate a mapping of standard vendor prefixes using the defined style property and event name.
     *
     * @param {string} styleProp
     * @param {string} eventName
     * @returns {object}
     */
    function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
    }
    /**
     * A list of event names to a configurable list of vendor prefixes.
     */
    var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
     * Event names that have already been detected and prefixed (if applicable).
     */
    var prefixedEventNames = {};
    /**
     * Element to check for prefixes on.
     */
    var style = {};
    /**
     * Bootstrap if a DOM exists.
     */
    if (canUseDOM) {
        style = document.createElement('div').style;
        // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        }
        // Same as above
        if (!('TransitionEvent' in window)) {
            delete vendorPrefixes.transitionend.transition;
        }
    }
    /**
     * Attempts to determine the correct vendor prefixed event name.
     *
     * @param {string} eventName
     * @returns {string}
     */
    function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
        }
        else if (!vendorPrefixes[eventName]) {
            return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
        }
        return eventName;
    }
    /**
     * To identify top level events in ReactDOM, we use constants defined by this
     * module. This is the only module that uses the unsafe* methods to express
     * that the constants actually correspond to the browser event names. This lets
     * us save some bundle size by avoiding a top level type -> event name map.
     * The rest of ReactDOM code should import top level types from this file.
     */
    var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
    var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
    var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
    var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
    var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
    var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
    var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
    var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
    var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
    var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
    var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
    var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
    var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
    var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
    var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
    var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
    var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
    var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
    var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
    var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
    var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
    var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
    var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
    var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
    var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
    var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
    var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
    var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
    var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
    var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
    var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
    var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
    var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
    var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
    var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
    var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
    var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
    var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
    var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
    var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
    var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
    var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
    var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
    var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
    var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
    var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
    var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
    var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
    var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
    var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
    var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
    var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
    var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
    var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
    var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
    var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
    var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
    var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
    var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
    var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
    var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
    var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
    var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
    var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
    var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
    var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
    var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
    var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
    var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
    var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
    var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
    var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
    var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
    var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
    var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
    var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
    var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
    var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
    var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
    var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');
    // List of events that need to be individually attached to media elements.
    // Note that events in this list will *not* be listened to at the top level
    // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
    var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
    function getRawEventName(topLevelType) {
        return unsafeCastDOMTopLevelTypeToString(topLevelType);
    }
    /**
     * These variables store information about text content of a target node,
     * allowing comparison of content before and after a given event.
     *
     * Identify the node where selection currently begins, then observe
     * both its text content and its current position in the DOM. Since the
     * browser may natively replace the target node during composition, we can
     * use its position to find its replacement.
     *
     *
     */
    var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) {
            return fallbackText;
        }
        var start = void 0;
        var startValue = startText;
        var startLength = startValue.length;
        var end = void 0;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
                break;
            }
        }
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
            }
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) {
            return root.value;
        }
        return root.textContent;
    }
    var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var _assign = ReactInternals.assign;
    /* eslint valid-typeof: 0 */
    var EVENT_POOL_SIZE = 10;
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var EventInterface = {
        type: null,
        target: null,
        // currentTarget is set when dispatching; no use in copying it here
        currentTarget: function () {
            return null;
        },
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function (event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
    };
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    }
    /**
     * Synthetic events are dispatched by event plugins, typically in response to a
     * top-level event delegation handler.
     *
     * These systems should generally use pooling to reduce the frequency of garbage
     * collection. The system should check `isPersistent` to determine whether the
     * event should be released into the pool after being dispatched. Users that
     * need a persisted event should invoke `persist`.
     *
     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
     * normalizing browser quirks. Subclasses do not necessarily have to implement a
     * DOM interface; custom application-specific events can also subclass this.
     *
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {*} targetInst Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @param {DOMEventTarget} nativeEventTarget Target node.
     */
    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
            // these have a getter/setter for warnings
            delete this.nativeEvent;
            delete this.preventDefault;
            delete this.stopPropagation;
            delete this.isDefaultPrevented;
            delete this.isPropagationStopped;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
            if (!Interface.hasOwnProperty(propName)) {
                continue;
            }
            {
                delete this[propName]; // this has a getter/setter for warnings
            }
            var normalize = Interface[propName];
            if (normalize) {
                this[propName] = normalize(nativeEvent);
            }
            else {
                if (propName === 'target') {
                    this.target = nativeEventTarget;
                }
                else {
                    this[propName] = nativeEvent[propName];
                }
            }
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
        }
        else {
            this.isDefaultPrevented = functionThatReturnsFalse;
        }
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
    }
    _assign(SyntheticEvent.prototype, {
        preventDefault: function () {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
                return;
            }
            if (event.preventDefault) {
                event.preventDefault();
            }
            else if (typeof event.returnValue !== 'unknown') {
                event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function () {
            var event = this.nativeEvent;
            if (!event) {
                return;
            }
            if (event.stopPropagation) {
                event.stopPropagation();
            }
            else if (typeof event.cancelBubble !== 'unknown') {
                // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
        },
        /**
         * We release all dispatched `SyntheticEvent`s after each event loop, adding
         * them back into the pool. This allows a way to hold onto a reference that
         * won't be added back into the pool.
         */
        persist: function () {
            this.isPersistent = functionThatReturnsTrue;
        },
        /**
         * Checks if this event should be released back into the pool.
         *
         * @return {boolean} True if this should not be released, false otherwise.
         */
        isPersistent: functionThatReturnsFalse,
        /**
         * `PooledClass` looks for `destructor` on each instance it releases.
         */
        destructor: function () {
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
                {
                    Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
                }
            }
            this.dispatchConfig = null;
            this._targetInst = null;
            this.nativeEvent = null;
            this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            this._dispatchListeners = null;
            this._dispatchInstances = null;
            {
                Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
                Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
                Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
                Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () { }));
                Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () { }));
            }
        }
    });
    SyntheticEvent.Interface = EventInterface;
    /**
     * Helper to reduce boilerplate when creating subclasses.
     */
    SyntheticEvent.extend = function (Interface) {
        var Super = this;
        var E = function () { };
        E.prototype = Super.prototype;
        var prototype = new E();
        function Class() {
            return Super.apply(this, arguments);
        }
        _assign(prototype, Class.prototype);
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = _assign({}, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
    };
    addEventPoolingTo(SyntheticEvent);
    /**
     * Helper to nullify syntheticEvent instance properties when destructing
     *
     * @param {String} propName
     * @param {?object} getVal
     * @return {object} defineProperty object
     */
    function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === 'function';
        return {
            configurable: true,
            set: set,
            get: get
        };
        function set(val) {
            var action = isFunction ? 'setting the method' : 'setting the property';
            warn(action, 'This is effectively a no-op');
            return val;
        }
        function get() {
            var action = isFunction ? 'accessing the method' : 'accessing the property';
            var result = isFunction ? 'This is a no-op function' : 'This is set to null';
            warn(action, result);
            return getVal;
        }
        function warn(action, result) {
            var warningCondition = false;
            !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
        }
    }
    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;
        if (EventConstructor.eventPool.length) {
            var instance = EventConstructor.eventPool.pop();
            EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
            return instance;
        }
        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }
    function releasePooledEvent(event) {
        var EventConstructor = this;
        !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
        event.destructor();
        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
            EventConstructor.eventPool.push(event);
        }
    }
    function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
     */
    var SyntheticCompositionEvent = SyntheticEvent.extend({
        data: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
     *      /#events-inputevents
     */
    var SyntheticInputEvent = SyntheticEvent.extend({
        data: null
    });
    var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) {
        documentMode = document.documentMode;
    }
    // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;
    // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    // Events and their corresponding property names.
    var eventTypes = {
        beforeInput: {
            phasedRegistrationNames: {
                bubbled: 'onBeforeInput',
                captured: 'onBeforeInputCapture'
            },
            dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
        },
        compositionEnd: {
            phasedRegistrationNames: {
                bubbled: 'onCompositionEnd',
                captured: 'onCompositionEndCapture'
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
        },
        compositionStart: {
            phasedRegistrationNames: {
                bubbled: 'onCompositionStart',
                captured: 'onCompositionStartCapture'
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
        },
        compositionUpdate: {
            phasedRegistrationNames: {
                bubbled: 'onCompositionUpdate',
                captured: 'onCompositionUpdateCapture'
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
        }
    };
    // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
     * Return whether a native keypress event is assumed to be a command.
     * This is required because Firefox fires `keypress` events for key commands
     * (cut, copy, select-all, etc.) even though no character is inserted.
     */
    function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
            // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
     * Translate native top level events into event types.
     *
     * @param {string} topLevelType
     * @return {object}
     */
    function getCompositionEventType(topLevelType) {
        switch (topLevelType) {
            case TOP_COMPOSITION_START:
                return eventTypes.compositionStart;
            case TOP_COMPOSITION_END:
                return eventTypes.compositionEnd;
            case TOP_COMPOSITION_UPDATE:
                return eventTypes.compositionUpdate;
        }
    }
    /**
     * Does our fallback best-guess model think this event signifies that
     * composition has begun?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isFallbackCompositionStart(topLevelType, nativeEvent) {
        return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
     * Does our fallback mode think that this event is the end of composition?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isFallbackCompositionEnd(topLevelType, nativeEvent) {
        switch (topLevelType) {
            case TOP_KEY_UP:
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case TOP_KEY_DOWN:
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case TOP_KEY_PRESS:
            case TOP_MOUSE_DOWN:
            case TOP_BLUR:
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
     * Google Input Tools provides composition data via a CustomEvent,
     * with the `data` property populated in the `detail` object. If this
     * is available on the event object, use it. If not, this is a plain
     * composition event and we have nothing special to extract.
     *
     * @param {object} nativeEvent
     * @return {?string}
     */
    function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) {
            return detail.data;
        }
        return null;
    }
    /**
     * Check if a composition event was triggered by Korean IME.
     * Our fallback mode does not work well with IE's Korean IME,
     * so just use native composition events when Korean IME is used.
     * Although CompositionEvent.locale property is deprecated,
     * it is available in IE, where our fallback mode is enabled.
     *
     * @param {object} nativeEvent
     * @return {boolean}
     */
    function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    }
    // Track the current IME composition status, if any.
    var isComposing = false;
    /**
     * @return {?object} A SyntheticCompositionEvent.
     */
    function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var eventType = void 0;
        var fallbackData = void 0;
        if (canUseCompositionEvent) {
            eventType = getCompositionEventType(topLevelType);
        }
        else if (!isComposing) {
            if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                eventType = eventTypes.compositionStart;
            }
        }
        else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
            eventType = eventTypes.compositionEnd;
        }
        if (!eventType) {
            return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === eventTypes.compositionStart) {
                isComposing = initialize(nativeEventTarget);
            }
            else if (eventType === eventTypes.compositionEnd) {
                if (isComposing) {
                    fallbackData = getData();
                }
            }
        }
        var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
        if (fallbackData) {
            // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
        }
        else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
                event.data = customData;
            }
        }
        accumulateTwoPhaseDispatches(event);
        return event;
    }
    /**
     * @param {TopLevelType} topLevelType Number from `TopLevelType`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The string corresponding to this `beforeInput` event.
     */
    function getNativeBeforeInputChars(topLevelType, nativeEvent) {
        switch (topLevelType) {
            case TOP_COMPOSITION_END:
                return getDataFromCustomEvent(nativeEvent);
            case TOP_KEY_PRESS:
                /**
                 * If native `textInput` events are available, our goal is to make
                 * use of them. However, there is a special case: the spacebar key.
                 * In Webkit, preventing default on a spacebar `textInput` event
                 * cancels character insertion, but it *also* causes the browser
                 * to fall back to its default spacebar behavior of scrolling the
                 * page.
                 *
                 * Tracking at:
                 * https://code.google.com/p/chromium/issues/detail?id=355103
                 *
                 * To avoid this issue, use the keypress event as if no `textInput`
                 * event is available.
                 */
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                    return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case TOP_TEXT_INPUT:
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data;
                // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                    return null;
                }
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
     * For browsers that do not provide the `textInput` event, extract the
     * appropriate string to use for SyntheticInputEvent.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The fallback string for this `beforeInput` event.
     */
    function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch (topLevelType) {
            case TOP_PASTE:
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case TOP_KEY_PRESS:
                /**
                 * As of v27, Firefox may fire keypress events even when no character
                 * will be inserted. A few possibilities:
                 *
                 * - `which` is `0`. Arrow keys, Esc key, etc.
                 *
                 * - `which` is the pressed key code, but no char is available.
                 *   Ex: 'AltGr + d` in Polish. There is no modified character for
                 *   this key combination and no character is inserted into the
                 *   document, but FF fires the keypress for char code `100` anyway.
                 *   No `input` event will occur.
                 *
                 * - `which` is the pressed key code, but a command combination is
                 *   being used. Ex: `Cmd+C`. No character is inserted, and no
                 *   `input` event will occur.
                 */
                if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) {
                        return nativeEvent.char;
                    }
                    else if (nativeEvent.which) {
                        return String.fromCharCode(nativeEvent.which);
                    }
                }
                return null;
            case TOP_COMPOSITION_END:
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
     * Extract a SyntheticInputEvent for `beforeInput`, based on either native
     * `textInput` or fallback behavior.
     *
     * @return {?object} A SyntheticInputEvent.
     */
    function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var chars = void 0;
        if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
        }
        else {
            chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
        }
        // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) {
            return null;
        }
        var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
        event.data = chars;
        accumulateTwoPhaseDispatches(event);
        return event;
    }
    /**
     * Create an `onBeforeInput` event to match
     * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
     *
     * This event plugin is based on the native `textInput` event
     * available in Chrome, Safari, Opera, and IE. This event fires after
     * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
     *
     * `beforeInput` is spec'd but not implemented in any browsers, and
     * the `input` event does not provide any useful information about what has
     * actually been added, contrary to the spec. Thus, `textInput` is the best
     * available event to identify the characters that have actually been inserted
     * into the target node.
     *
     * This plugin is also responsible for emitting `composition` events, thus
     * allowing us to share composition fallback code for both `beforeInput` and
     * `composition` event types.
     */
    var BeforeInputEventPlugin = {
        eventTypes: eventTypes,
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            if (composition === null) {
                return beforeInput;
            }
            if (beforeInput === null) {
                return composition;
            }
            return [composition, beforeInput];
        }
    };
    // Use to restore controlled state after a change event has fired.
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
            // Unmounted
            return;
        }
        !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, props);
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) {
                restoreQueue.push(target);
            }
            else {
                restoreQueue = [target];
            }
        }
        else {
            restoreTarget = target;
        }
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) {
            return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
            }
        }
    }
    // Used as a way to call batchedUpdates when we don't have a reference to
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var _batchedUpdatesImpl = function (fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var _interactiveUpdatesImpl = function (fn, a, b) {
        return fn(a, b);
    };
    var _flushInteractiveUpdatesImpl = function () { };
    var isBatching = false;
    function batchedUpdates(fn, bookkeeping) {
        if (isBatching) {
            // If we are currently inside another batch, we need to wait until it
            // fully completes before restoring state.
            return fn(bookkeeping);
        }
        isBatching = true;
        try {
            return _batchedUpdatesImpl(fn, bookkeeping);
        }
        finally {
            // Here we wait until all updates have propagated, which is important
            // when using controlled components within layers:
            // https://github.com/facebook/react/issues/1698
            // Then we restore state of any controlled component.
            isBatching = false;
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
                // If a controlled event was fired, we may need to restore the state of
                // the DOM node back to the controlled value. This is necessary when React
                // bails out of the update without touching the DOM.
                _flushInteractiveUpdatesImpl();
                restoreStateIfNeeded();
            }
        }
    }
    function interactiveUpdates(fn, a, b) {
        return _interactiveUpdatesImpl(fn, a, b);
    }
    function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
        _batchedUpdatesImpl = batchedUpdatesImpl;
        _interactiveUpdatesImpl = interactiveUpdatesImpl;
        _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
    }
    /**
     * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
     */
    var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') {
            return !!supportedInputTypes[elem.type];
        }
        if (nodeName === 'textarea') {
            return true;
        }
        return false;
    }
    /**
     * HTML nodeType values that represent the type of the node
     */
    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
     * Gets the target node from a native browser event by accounting for
     * inconsistencies in browser DOM APIs.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {DOMEventTarget} Target node.
     */
    function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
        }
        // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
            return false;
        }
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) {
            return value;
        }
        if (isCheckable(node)) {
            value = node.checked ? 'true' : 'false';
        }
        else {
            value = node.value;
        }
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField];
        // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
            return;
        }
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function () {
                return get.call(this);
            },
            set: function (value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        });
        // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function () {
                return currentValue;
            },
            setValue: function (value) {
                currentValue = '' + value;
            },
            stopTracking: function () {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) {
            return;
        }
        // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) {
            return false;
        }
        var tracker = getTracker(node);
        // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) {
            return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // Prevent newer renderers from RTE when used with older react package versions.
    // Current owner and dispatcher used to share the same ref,
    // but PR #14548 split them out to better support the react-debug-tools package.
    if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
        ReactSharedInternals.ReactCurrentDispatcher = {
            current: null
        };
    }
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
    var describeComponentFrame = function (name, source, ownerName) {
        var sourceInfo = '';
        if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, '');
            {
                // In DEV, include code for a common special case:
                // prefer "folder/index.js" instead of just "index.js".
                if (/^index\./.test(fileName)) {
                    var match = path.match(BEFORE_SLASH_RE);
                    if (match) {
                        var pathBeforeSlash = match[1];
                        if (pathBeforeSlash) {
                            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                            fileName = folderName + '/' + fileName;
                        }
                    }
                }
            }
            sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
        }
        else if (ownerName) {
            sourceInfo = ' (created by ' + ownerName + ')';
        }
        return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') {
            return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') {
            return maybeIterator;
        }
        return null;
    }
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function refineResolvedLazyComponent(lazyComponent) {
        return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }
    function getComponentName(type) {
        if (type == null) {
            // Host root, text node or just invalid type.
            return null;
        }
        {
            if (typeof type.tag === 'number') {
                warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
            }
        }
        if (typeof type === 'function') {
            return type.displayName || type.name || null;
        }
        if (typeof type === 'string') {
            return type;
        }
        switch (type) {
            case REACT_CONCURRENT_MODE_TYPE:
                return 'ConcurrentMode';
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
        }
        if (typeof type === 'object') {
            switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                    return 'Context.Consumer';
                case REACT_PROVIDER_TYPE:
                    return 'Context.Provider';
                case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, 'ForwardRef');
                case REACT_MEMO_TYPE:
                    return getComponentName(type.type);
                case REACT_LAZY_TYPE:
                    {
                        var thenable = type;
                        var resolvedThenable = refineResolvedLazyComponent(thenable);
                        if (resolvedThenable) {
                            return getComponentName(resolvedThenable);
                        }
                    }
            }
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function describeFiber(fiber) {
        switch (fiber.tag) {
            case HostRoot:
            case HostPortal:
            case HostText:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
                return '';
            default:
                var owner = fiber._debugOwner;
                var source = fiber._debugSource;
                var name = getComponentName(fiber.type);
                var ownerName = null;
                if (owner) {
                    ownerName = getComponentName(owner.type);
                }
                return describeComponentFrame(name, source, ownerName);
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        var info = '';
        var node = workInProgress;
        do {
            info += describeFiber(node);
            node = node.return;
        } while (node);
        return info;
    }
    var current = null;
    var phase = null;
    function getCurrentFiberOwnerNameInDevOrNull() {
        {
            if (current === null) {
                return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== 'undefined') {
                return getComponentName(owner.type);
            }
        }
        return null;
    }
    function getCurrentFiberStackInDev() {
        {
            if (current === null) {
                return '';
            }
            // Safe because if current fiber exists, we are reconciling,
            // and it is guaranteed to be the work-in-progress version.
            return getStackByFiberInDevAndProd(current);
        }
        return '';
    }
    function resetCurrentFiber() {
        {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            phase = null;
        }
    }
    function setCurrentFiber(fiber) {
        {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            phase = null;
        }
    }
    function setCurrentPhase(lifeCyclePhase) {
        {
            phase = lifeCyclePhase;
        }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */
    var warning = warningWithoutStack$1;
    {
        warning = function (condition, format) {
            if (condition) {
                return;
            }
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            // eslint-disable-next-line react-internal/warning-and-invariant-args
            for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                args[_key - 2] = arguments[_key];
            }
            warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
        };
    }
    var warning$1 = warning;
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0;
    // A simple string attribute.
    // Attributes that aren't in the whitelist are presumed to have this type.
    var STRING = 1;
    // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2;
    // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3;
    // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4;
    // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5;
    // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */
    var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    /* eslint-enable max-len */
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
        }
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
            warning$1(false, 'Invalid attribute name: `%s`', attributeName);
        }
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
            return false;
        }
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
            return true;
        }
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
        }
        switch (typeof value) {
            case 'function':
            // $FlowIssue symbol is perfectly valid here
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                {
                    if (isCustomComponentTag) {
                        return false;
                    }
                    if (propertyInfo !== null) {
                        return !propertyInfo.acceptsBooleans;
                    }
                    else {
                        var prefix = name.toLowerCase().slice(0, 5);
                        return prefix !== 'data-' && prefix !== 'aria-';
                    }
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') {
            return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
        }
        if (isCustomComponentTag) {
            return false;
        }
        if (propertyInfo !== null) {
            switch (propertyInfo.type) {
                case BOOLEAN:
                    return !value;
                case OVERLOADED_BOOLEAN:
                    return value === false;
                case NUMERIC:
                    return isNaN(value);
                case POSITIVE_NUMERIC:
                    return isNaN(value) || value < 1;
            }
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
    }
    // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {};
    // These props are reserved by React. They shouldn't be written to the DOM.
    ['children', 'dangerouslySetInnerHTML',
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
        name, // attributeName
        null);
    } // attributeNamespace
    );
    // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
        attributeName, // attributeName
        null);
    } // attributeNamespace
    );
    // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
        name.toLowerCase(), // attributeName
        null);
    } // attributeNamespace
    );
    // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
        name, // attributeName
        null);
    } // attributeNamespace
    );
    // These are HTML boolean attributes.
    ['allowFullScreen', 'async',
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
        // Microdata
        'itemScope'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
        name.toLowerCase(), // attributeName
        null);
    } // attributeNamespace
    );
    // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    ['checked',
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple', 'muted', 'selected'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
        name, // attributeName
        null);
    } // attributeNamespace
    );
    // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    ['capture', 'download'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
        name, // attributeName
        null);
    } // attributeNamespace
    );
    // These are HTML attributes that must be positive numbers.
    ['cols', 'rows', 'size', 'span'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
        name, // attributeName
        null);
    } // attributeNamespace
    );
    // These are HTML attributes that must be numbers.
    ['rowSpan', 'start'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
        name.toLowerCase(), // attributeName
        null);
    } // attributeNamespace
    );
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function (token) {
        return token[1].toUpperCase();
    };
    // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML whitelist.
    // Some of these attributes can be hard to find. This list was created by
    // scrapping the MDN documentation.
    ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
        attributeName, null);
    } // attributeNamespace
    );
    // String SVG attributes with the xlink namespace.
    ['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
        attributeName, 'http://www.w3.org/1999/xlink');
    });
    // String SVG attributes with the xml namespace.
    ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
        attributeName, 'http://www.w3.org/XML/1998/namespace');
    });
    // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
        attributeName.toLowerCase(), // attributeName
        null);
    } // attributeNamespace
    );
    /**
     * Get the value for a property on a node. Only used in DEV for SSR validation.
     * The "expected" argument is used as a hint of what the expected value is.
     * Some properties have multiple equivalent values.
     */
    function getValueForProperty(node, name, expected, propertyInfo) {
        {
            if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
            }
            else {
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                    if (node.hasAttribute(attributeName)) {
                        var value = node.getAttribute(attributeName);
                        if (value === '') {
                            return true;
                        }
                        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                            return value;
                        }
                        if (value === '' + expected) {
                            return expected;
                        }
                        return value;
                    }
                }
                else if (node.hasAttribute(attributeName)) {
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                        // We had an attribute but shouldn't have had one, so read it
                        // for the error message.
                        return node.getAttribute(attributeName);
                    }
                    if (propertyInfo.type === BOOLEAN) {
                        // If this was a boolean, it doesn't matter what the value is
                        // the fact that we have it is the same as the expected.
                        return expected;
                    }
                    // Even if this property uses a namespace we use getAttribute
                    // because we assume its namespaced name is the same as our config.
                    // To use getAttributeNS we need the local name which we don't have
                    // in our config atm.
                    stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return stringValue === null ? expected : stringValue;
                }
                else if (stringValue === '' + expected) {
                    return expected;
                }
                else {
                    return stringValue;
                }
            }
        }
    }
    /**
     * Get the value for a attribute on a node. Only used in DEV for SSR validation.
     * The third argument is used as a hint of what the expected value is. Some
     * attributes have multiple equivalent values.
     */
    function getValueForAttribute(node, name, expected) {
        {
            if (!isAttributeNameSafe(name)) {
                return;
            }
            if (!node.hasAttribute(name)) {
                return expected === undefined ? undefined : null;
            }
            var value = node.getAttribute(name);
            if (value === '' + expected) {
                return expected;
            }
            return value;
        }
    }
    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */
    function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
        }
        // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                    node.removeAttribute(_attributeName);
                }
                else {
                    node.setAttribute(_attributeName, '' + value);
                }
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            }
            else {
                // Contrary to `setAttribute`, object properties are properly
                // `toString`ed by IE8/9.
                node[propertyName] = value;
            }
            return;
        }
        // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) {
            node.removeAttribute(attributeName);
        }
        else {
            var _type = propertyInfo.type;
            var attributeValue = void 0;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = '';
            }
            else {
                // `setAttribute` with objects becomes only `[object]` in IE8/9,
                // ('' + value) makes it output the correct toString()-value.
                attributeValue = '' + value;
            }
            if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            }
            else {
                node.setAttribute(attributeName, attributeValue);
            }
        }
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch (typeof value) {
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var printWarning = function () { };
    {
        var ReactPropTypesSecret = ReactPropTypesSecret_1;
        var loggedTypeFailures = {};
        printWarning = function (text) {
            var message = 'Warning: ' + text;
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            }
            catch (x) { }
        };
    }
    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        {
            for (var typeSpecName in typeSpecs) {
                if (typeSpecs.hasOwnProperty(typeSpecName)) {
                    var error;
                    // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.
                    try {
                        // This is intentionally an invariant that gets caught. It's the same
                        // behavior as without this statement except with a better message.
                        if (typeof typeSpecs[typeSpecName] !== 'function') {
                            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                                'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                            err.name = 'Invariant Violation';
                            throw err;
                        }
                        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                    }
                    catch (ex) {
                        error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                        printWarning((componentName || 'React class') + ': type specification of ' +
                            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                            'You may have forgotten to pass an argument to the type checker ' +
                            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                            'shape all require an argument).');
                    }
                    if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                        // Only monitor this failure once because there tends to be a lot of the
                        // same error.
                        loggedTypeFailures[error.message] = true;
                        var stack = getStack ? getStack() : '';
                        printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
                    }
                }
            }
        }
    }
    var checkPropTypes_1 = checkPropTypes;
    var ReactDebugCurrentFrame$1 = null;
    var ReactControlledValuePropTypes = {
        checkPropTypes: null
    };
    {
        ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
        };
        var propTypes = {
            value: function (props, propName, componentName) {
                if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
                    return null;
                }
                return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
            },
            checked: function (props, propName, componentName) {
                if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
                    return null;
                }
                return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
            }
        };
        /**
         * Provide a linked `value` attribute for controlled forms. You should not use
         * this outside of the ReactDOM controlled form components.
         */
        ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
            checkPropTypes_1(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
        };
    }
    var enableUserTimingAPI = true;
    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    var debugRenderPhaseSideEffects = false;
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    var debugRenderPhaseSideEffectsForStrictMode = true;
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    var warnAboutDeprecatedLifecycles = false;
    // Gather advanced timing metrics for Profiler subtrees.
    var enableProfilerTimer = true;
    // Trace which interactions trigger each commit.
    var enableSchedulerTracing = true;
    // Only used in www builds.
    var enableSuspenseServerRenderer = false; // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    var disableInputAttributeSyncing = false;
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
    var enableStableConcurrentModeAPIs = false;
    var warnAboutShorthandPropertyCollision = false;
    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
     * Implements an <input> host component that allows setting these optional
     * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
     *
     * If `checked` or `value` are not supplied (or null/undefined), user actions
     * that affect the checked state or value will trigger updates to the element.
     *
     * If they are supplied (and not null/undefined), the rendered element will not
     * trigger updates to the element. Instead, the props must change in order for
     * the rendered element to be updated.
     *
     * The rendered element will be initialized as unchecked (or `defaultChecked`)
     * with an empty value (or `defaultValue`).
     *
     * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
     */
    function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        {
            ReactControlledValuePropTypes.checkPropTypes('input', props);
            if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
                warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
                didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
                warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
                didWarnValueDefaultValue = true;
            }
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) {
            setValueForProperty(node, 'checked', checked, false);
        }
    }
    function updateWrapper(element, props) {
        var node = element;
        {
            var _controlled = isControlled(props);
            if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
                warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
                didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
                warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
                didWarnControlledToUncontrolled = true;
            }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' ||
                    // We explicitly want to coerce to number here if possible.
                    // eslint-disable-next-line
                    node.value != value) {
                    node.value = toString(value);
                }
            }
            else if (node.value !== toString(value)) {
                node.value = toString(value);
            }
        }
        else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        if (disableInputAttributeSyncing) {
            // When not syncing the value attribute, React only assigns a new value
            // whenever the defaultValue React prop has changed. When not present,
            // React does nothing
            if (props.hasOwnProperty('defaultValue')) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
        }
        else {
            // When syncing the value attribute, the value comes from a cascade of
            // properties:
            //  1. The value React property
            //  2. The defaultValue React property
            //  3. Otherwise there should be no change
            if (props.hasOwnProperty('value')) {
                setDefaultValue(node, props.type, value);
            }
            else if (props.hasOwnProperty('defaultValue')) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
        }
        if (disableInputAttributeSyncing) {
            // When not syncing the checked attribute, the attribute is directly
            // controllable from the defaultValue React property. It needs to be
            // updated as new props come in.
            if (props.defaultChecked == null) {
                node.removeAttribute('checked');
            }
            else {
                node.defaultChecked = !!props.defaultChecked;
            }
        }
        else {
            // When syncing the checked attribute, it only changes when it needs
            // to be removed, such as transitioning from a checkbox into a text input
            if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
            }
        }
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element;
        // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset';
            // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) {
                return;
            }
            var _initialValue = toString(node._wrapperState.initialValue);
            // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) {
                if (disableInputAttributeSyncing) {
                    var value = getToStringValue(props.value);
                    // When not syncing the value attribute, the value property points
                    // directly to the React prop. Only assign it if it exists.
                    if (value != null) {
                        // Always assign on buttons so that it is possible to assign an
                        // empty string to clear button text.
                        //
                        // Otherwise, do not re-assign the value property if is empty. This
                        // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
                        // prematurely marking required inputs as invalid. Equality is compared
                        // to the current value in case the browser provided value is not an
                        // empty string.
                        if (isButton || value !== node.value) {
                            node.value = toString(value);
                        }
                    }
                }
                else {
                    // When syncing the value attribute, the value property should use
                    // the wrapperState._initialValue property. This uses:
                    //
                    //   1. The value React property when present
                    //   2. The defaultValue React property when present
                    //   3. An empty string
                    if (_initialValue !== node.value) {
                        node.value = _initialValue;
                    }
                }
            }
            if (disableInputAttributeSyncing) {
                // When not syncing the value attribute, assign the value attribute
                // directly from the defaultValue React property (when present)
                var defaultValue = getToStringValue(props.defaultValue);
                if (defaultValue != null) {
                    node.defaultValue = toString(defaultValue);
                }
            }
            else {
                // Otherwise, the value attribute is synchronized to the property,
                // so we assign defaultValue to the same thing as the value property
                // assignment step above.
                node.defaultValue = _initialValue;
            }
        }
        // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') {
            node.name = '';
        }
        if (disableInputAttributeSyncing) {
            // When not syncing the checked attribute, the checked property
            // never gets assigned. It must be manually set. We don't want
            // to do this when hydrating so that existing user input isn't
            // modified
            if (!isHydrating) {
                updateChecked(element, props);
            }
            // Only assign the checked attribute if it is defined. This saves
            // a DOM write when controlling the checked attribute isn't needed
            // (text inputs, submit/reset)
            if (props.hasOwnProperty('defaultChecked')) {
                node.defaultChecked = !node.defaultChecked;
                node.defaultChecked = !!props.defaultChecked;
            }
        }
        else {
            // When syncing the checked attribute, both the checked property and
            // attribute are assigned at the same time using defaultChecked. This uses:
            //
            //   1. The checked React property when present
            //   2. The defaultChecked React property when present
            //   3. Otherwise, false
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
        }
        if (name !== '') {
            node.name = name;
        }
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
            }
            // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                    continue;
                }
                // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
                !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;
                // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode);
                // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    }
    // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (
        // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
        type !== 'number' || node.ownerDocument.activeElement !== node) {
            if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
            }
            else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
            }
        }
    }
    var eventTypes$1 = {
        change: {
            phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture'
            },
            dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
        }
    };
    function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
        var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
        event.type = 'change';
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        accumulateTwoPhaseDispatches(event);
        return event;
    }
    /**
     * For IE shims
     */
    var activeElement = null;
    var activeElementInst = null;
    /**
     * SECTION: handle `change` event
     */
    function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, event);
    }
    function runEventInBatch(event) {
        runEventsInBatch(event);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance$1(targetInst);
        if (updateValueIfChanged(targetNode)) {
            return targetInst;
        }
    }
    function getTargetInstForChangeEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_CHANGE) {
            return targetInst;
        }
    }
    /**
     * SECTION: handle `input` event
     */
    var isInputEventSupported = false;
    if (canUseDOM) {
        // IE9 claims to support the input event but fails to trigger it when
        // deleting text, so we ignore its input events.
        isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    }
    /**
     * (For IE <=9) Starts tracking propertychange events on the passed-in element
     * and override the value property so that we can distinguish user events from
     * value changes in JS.
     */
    function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
     * (For IE <=9) Removes the event listeners from the currently-tracked element,
     * if any exists.
     */
    function stopWatchingForValueChange() {
        if (!activeElement) {
            return;
        }
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
     * (For IE <=9) Handles a propertychange event, sending a `change` event if
     * the value of the active element has changed.
     */
    function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') {
            return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
        }
    }
    function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
        if (topLevelType === TOP_FOCUS) {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        }
        else if (topLevelType === TOP_BLUR) {
            stopWatchingForValueChange();
        }
    }
    // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
        if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
            // On the selectionchange event, the target is just document which isn't
            // helpful for us so just check activeElement instead.
            //
            // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
            // propertychange on the first input event after setting `value` from a
            // script and fires only keydown, keypress, keyup. Catching keyup usually
            // gets it and catching keydown lets us fire an event for the first
            // keystroke if user does a key repeat (it'll be a little delayed: right
            // before the second keystroke). Other input methods (e.g., paste) seem to
            // fire selectionchange normally.
            return getInstIfValueChanged(activeElementInst);
        }
    }
    /**
     * SECTION: handle `click` event
     */
    function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_CLICK) {
            return getInstIfValueChanged(targetInst);
        }
    }
    function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
        if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
            return getInstIfValueChanged(targetInst);
        }
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') {
            return;
        }
        if (!disableInputAttributeSyncing) {
            // If controlled, assign the value attribute to the current value on blur
            setDefaultValue(node, 'number', node.value);
        }
    }
    /**
     * This plugin creates an `onChange` event that normalizes change events
     * across form elements. This event fires at a time when it's possible to
     * change the element's value without seeing a flicker.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - select
     */
    var ChangeEventPlugin = {
        eventTypes: eventTypes$1,
        _isInputEventSupported: isInputEventSupported,
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            var getTargetInstFunc = void 0, handleEventFunc = void 0;
            if (shouldUseChangeEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForChangeEvent;
            }
            else if (isTextInputElement(targetNode)) {
                if (isInputEventSupported) {
                    getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                }
                else {
                    getTargetInstFunc = getTargetInstForInputEventPolyfill;
                    handleEventFunc = handleEventsForInputEventPolyfill;
                }
            }
            else if (shouldUseClickEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
                var inst = getTargetInstFunc(topLevelType, targetInst);
                if (inst) {
                    var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                    return event;
                }
            }
            if (handleEventFunc) {
                handleEventFunc(topLevelType, targetNode, targetInst);
            }
            // When blurring, set the value attribute for number inputs
            if (topLevelType === TOP_BLUR) {
                handleControlledInputBlur(targetNode);
            }
        }
    };
    /**
     * Module that is injectable into `EventPluginHub`, that specifies a
     * deterministic ordering of `EventPlugin`s. A convenient way to reason about
     * plugins, without having to package every one of them. This is better than
     * having plugins be ordered in the same order that they are injected because
     * that ordering would be influenced by the packaging order.
     * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
     * preventing default on events is convenient in `SimpleEventPlugin` handlers.
     */
    var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
    var SyntheticUIEvent = SyntheticEvent.extend({
        view: null,
        detail: null
    });
    var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    };
    // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    /**
     * Translation from modifier key to the associated property in the event.
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
     */
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    var previousScreenX = 0;
    var previousScreenY = 0;
    // Use flags to signal movementX/Y has already been set
    var isMovementXSet = false;
    var isMovementYSet = false;
    /**
     * @interface MouseEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticMouseEvent = SyntheticUIEvent.extend({
        screenX: null,
        screenY: null,
        clientX: null,
        clientY: null,
        pageX: null,
        pageY: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        getModifierState: getEventModifierState,
        button: null,
        buttons: null,
        relatedTarget: function (event) {
            return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
        },
        movementX: function (event) {
            if ('movementX' in event) {
                return event.movementX;
            }
            var screenX = previousScreenX;
            previousScreenX = event.screenX;
            if (!isMovementXSet) {
                isMovementXSet = true;
                return 0;
            }
            return event.type === 'mousemove' ? event.screenX - screenX : 0;
        },
        movementY: function (event) {
            if ('movementY' in event) {
                return event.movementY;
            }
            var screenY = previousScreenY;
            previousScreenY = event.screenY;
            if (!isMovementYSet) {
                isMovementYSet = true;
                return 0;
            }
            return event.type === 'mousemove' ? event.screenY - screenY : 0;
        }
    });
    /**
     * @interface PointerEvent
     * @see http://www.w3.org/TR/pointerevents/
     */
    var SyntheticPointerEvent = SyntheticMouseEvent.extend({
        pointerId: null,
        width: null,
        height: null,
        pressure: null,
        tangentialPressure: null,
        tiltX: null,
        tiltY: null,
        twist: null,
        pointerType: null,
        isPrimary: null
    });
    var eventTypes$2 = {
        mouseEnter: {
            registrationName: 'onMouseEnter',
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
        },
        mouseLeave: {
            registrationName: 'onMouseLeave',
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
        },
        pointerEnter: {
            registrationName: 'onPointerEnter',
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
        },
        pointerLeave: {
            registrationName: 'onPointerLeave',
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
        }
    };
    var EnterLeaveEventPlugin = {
        eventTypes: eventTypes$2,
        /**
         * For almost every interaction we care about, there will be both a top-level
         * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
         * we do not extract duplicate events. However, moving the mouse into the
         * browser from outside will not fire a `mouseout` event. In this case, we use
         * the `mouseover` top-level event.
         */
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
            var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
            if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
                return null;
            }
            if (!isOutEvent && !isOverEvent) {
                // Must not be a mouse or pointer in or out - ignoring.
                return null;
            }
            var win = void 0;
            if (nativeEventTarget.window === nativeEventTarget) {
                // `nativeEventTarget` is probably a window object.
                win = nativeEventTarget;
            }
            else {
                // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                var doc = nativeEventTarget.ownerDocument;
                if (doc) {
                    win = doc.defaultView || doc.parentWindow;
                }
                else {
                    win = window;
                }
            }
            var from = void 0;
            var to = void 0;
            if (isOutEvent) {
                from = targetInst;
                var related = nativeEvent.relatedTarget || nativeEvent.toElement;
                to = related ? getClosestInstanceFromNode(related) : null;
            }
            else {
                // Moving to a node from outside the window.
                from = null;
                to = targetInst;
            }
            if (from === to) {
                // Nothing pertains to our managed components.
                return null;
            }
            var eventInterface = void 0, leaveEventType = void 0, enterEventType = void 0, eventTypePrefix = void 0;
            if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
                eventInterface = SyntheticMouseEvent;
                leaveEventType = eventTypes$2.mouseLeave;
                enterEventType = eventTypes$2.mouseEnter;
                eventTypePrefix = 'mouse';
            }
            else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
                eventInterface = SyntheticPointerEvent;
                leaveEventType = eventTypes$2.pointerLeave;
                enterEventType = eventTypes$2.pointerEnter;
                eventTypePrefix = 'pointer';
            }
            var fromNode = from == null ? win : getNodeFromInstance$1(from);
            var toNode = to == null ? win : getNodeFromInstance$1(to);
            var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
            leave.type = eventTypePrefix + 'leave';
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
            enter.type = eventTypePrefix + 'enter';
            enter.target = toNode;
            enter.relatedTarget = fromNode;
            accumulateEnterLeaveDispatches(leave, enter, from, to);
            return [leave, enter];
        }
    };
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    /**
     * Performs equality by iterating through keys on an object and returning false
     * when any key has values which are not strictly equal between the arguments.
     * Returns true when the values of all keys are strictly equal.
     */
    function shallowEqual(objA, objB) {
        if (is(objA, objB)) {
            return true;
        }
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
            return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
            return false;
        }
        // Test for A's keys different from B.
        for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
                return false;
            }
        }
        return true;
    }
    /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     *
     * Note that this module is currently shared and assumed to be stateless.
     * If this becomes an actual Map, that will break.
     */
    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */
    function get(key) {
        return key._reactInternalFiber;
    }
    function has(key) {
        return key._reactInternalFiber !== undefined;
    }
    function set(key, value) {
        key._reactInternalFiber = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoEffect = /*              */ 0;
    var PerformedWork = /*         */ 1;
    // You can change the rest (and add more).
    var Placement = /*             */ 2;
    var Update = /*                */ 4;
    var PlacementAndUpdate = /*    */ 6;
    var Deletion = /*              */ 8;
    var ContentReset = /*          */ 16;
    var Callback = /*              */ 32;
    var DidCapture = /*            */ 64;
    var Ref = /*                   */ 128;
    var Snapshot = /*              */ 256;
    var Passive = /*               */ 512;
    // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*   */ 932;
    // Union of all host effects
    var HostEffectMask = /*        */ 1023;
    var Incomplete = /*            */ 1024;
    var ShouldCapture = /*         */ 2048;
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;
    function isFiberMountedImpl(fiber) {
        var node = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            if ((node.effectTag & Placement) !== NoEffect) {
                return MOUNTING;
            }
            while (node.return) {
                node = node.return;
                if ((node.effectTag & Placement) !== NoEffect) {
                    return MOUNTING;
                }
            }
        }
        else {
            while (node.return) {
                node = node.return;
            }
        }
        if (node.tag === HostRoot) {
            // TODO: Check if this was a nested HostRoot when used with
            // renderContainerIntoSubtree.
            return MOUNTED;
        }
        // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return UNMOUNTED;
    }
    function isFiberMounted(fiber) {
        return isFiberMountedImpl(fiber) === MOUNTED;
    }
    function isMounted(component) {
        {
            var owner = ReactCurrentOwner$1.current;
            if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
                instance._warnedAboutRefsInRender = true;
            }
        }
        var fiber = get(component);
        if (!fiber) {
            return false;
        }
        return isFiberMountedImpl(fiber) === MOUNTED;
    }
    function assertIsMounted(fiber) {
        !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var state = isFiberMountedImpl(fiber);
            !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
            if (state === MOUNTING) {
                return null;
            }
            return fiber;
        }
        // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while (true) {
            var parentA = a.return;
            var parentB = parentA ? parentA.alternate : null;
            if (!parentA || !parentB) {
                // We're at the root.
                break;
            }
            // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                }
                // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                invariant(false, 'Unable to find node on an unmounted component.');
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            }
            else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while (_child) {
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
                }
            }
            !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        }
        // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
        if (a.stateNode.current === a) {
            // We've determined that A is the current branch.
            return fiber;
        }
        // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
            return null;
        }
        // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
                return node;
            }
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) {
                return null;
            }
            while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                    return null;
                }
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) {
            return null;
        }
        // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
                return node;
            }
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) {
                return null;
            }
            while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                    return null;
                }
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function addEventBubbleListener(element, eventType, listener) {
        element.addEventListener(eventType, listener, false);
    }
    function addEventCaptureListener(element, eventType, listener) {
        element.addEventListener(eventType, listener, true);
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
     */
    var SyntheticAnimationEvent = SyntheticEvent.extend({
        animationName: null,
        elapsedTime: null,
        pseudoElement: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/clipboard-apis/
     */
    var SyntheticClipboardEvent = SyntheticEvent.extend({
        clipboardData: function (event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    /**
     * @interface FocusEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticFocusEvent = SyntheticUIEvent.extend({
        relatedTarget: null
    });
    /**
     * `charCode` represents the actual "character code" and is safe to use with
     * `String.fromCharCode`. As such, only keys that correspond to printable
     * characters produce a valid `charCode`, the only exception to this is Enter.
     * The Tab-key is considered non-printable and does not have a `charCode`,
     * presumably because it does not produce a tab-character in browsers.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {number} Normalized `charCode` property.
     */
    function getEventCharCode(nativeEvent) {
        var charCode = void 0;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode;
            // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) {
                charCode = 13;
            }
        }
        else {
            // IE8 does not implement `charCode`, but `keyCode` has the correct value.
            charCode = keyCode;
        }
        // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) {
            charCode = 13;
        }
        // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) {
            return charCode;
        }
        return 0;
    }
    /**
     * Normalization of deprecated HTML5 `key` values
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */
    var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
     * Translation from legacy `keyCode` to HTML5 `key`
     * Only special keys supported, all others depend on keyboard layout or browser
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */
    var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `key` property.
     */
    function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') {
                return key;
            }
        }
        // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent);
            // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
            // While user keyboard layout determines the actual meaning of each
            // `keyCode` value, almost all function keys have a universal value.
            return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        }
        return '';
    }
    /**
     * @interface KeyboardEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
        key: getEventKey,
        location: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        repeat: null,
        locale: null,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function (event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') {
                return getEventCharCode(event);
            }
            return 0;
        },
        keyCode: function (event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') {
                return event.keyCode;
            }
            return 0;
        },
        which: function (event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') {
                return getEventCharCode(event);
            }
            if (event.type === 'keydown' || event.type === 'keyup') {
                return event.keyCode;
            }
            return 0;
        }
    });
    /**
     * @interface DragEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticDragEvent = SyntheticMouseEvent.extend({
        dataTransfer: null
    });
    /**
     * @interface TouchEvent
     * @see http://www.w3.org/TR/touch-events/
     */
    var SyntheticTouchEvent = SyntheticUIEvent.extend({
        touches: null,
        targetTouches: null,
        changedTouches: null,
        altKey: null,
        metaKey: null,
        ctrlKey: null,
        shiftKey: null,
        getModifierState: getEventModifierState
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
     */
    var SyntheticTransitionEvent = SyntheticEvent.extend({
        propertyName: null,
        elapsedTime: null,
        pseudoElement: null
    });
    /**
     * @interface WheelEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */
    var SyntheticWheelEvent = SyntheticMouseEvent.extend({
        deltaX: function (event) {
            return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function (event) {
            return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                    'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: null,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: null
    });
    /**
     * Turns
     * ['abort', ...]
     * into
     * eventTypes = {
     *   'abort': {
     *     phasedRegistrationNames: {
     *       bubbled: 'onAbort',
     *       captured: 'onAbortCapture',
     *     },
     *     dependencies: [TOP_ABORT],
     *   },
     *   ...
     * };
     * topLevelEventsToDispatchConfig = new Map([
     *   [TOP_ABORT, { sameConfig }],
     * ]);
     */
    var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
    var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];
    var eventTypes$4 = {};
    var topLevelEventsToDispatchConfig = {};
    function addEventTypeNameToConfig(_ref, isInteractive) {
        var topEvent = _ref[0], event = _ref[1];
        var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
        var onEvent = 'on' + capitalizedEvent;
        var type = {
            phasedRegistrationNames: {
                bubbled: onEvent,
                captured: onEvent + 'Capture'
            },
            dependencies: [topEvent],
            isInteractive: isInteractive
        };
        eventTypes$4[event] = type;
        topLevelEventsToDispatchConfig[topEvent] = type;
    }
    interactiveEventTypeNames.forEach(function (eventTuple) {
        addEventTypeNameToConfig(eventTuple, true);
    });
    nonInteractiveEventTypeNames.forEach(function (eventTuple) {
        addEventTypeNameToConfig(eventTuple, false);
    });
    // Only used in DEV for exhaustiveness validation.
    var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
    var SimpleEventPlugin = {
        eventTypes: eventTypes$4,
        isInteractiveTopLevelEventType: function (topLevelType) {
            var config = topLevelEventsToDispatchConfig[topLevelType];
            return config !== undefined && config.isInteractive === true;
        },
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
            if (!dispatchConfig) {
                return null;
            }
            var EventConstructor = void 0;
            switch (topLevelType) {
                case TOP_KEY_PRESS:
                    // Firefox creates a keypress event for function keys too. This removes
                    // the unwanted keypress events. Enter is however both printable and
                    // non-printable. One would expect Tab to be as well (but it isn't).
                    if (getEventCharCode(nativeEvent) === 0) {
                        return null;
                    }
                /* falls through */
                case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                    EventConstructor = SyntheticKeyboardEvent;
                    break;
                case TOP_BLUR:
                case TOP_FOCUS:
                    EventConstructor = SyntheticFocusEvent;
                    break;
                case TOP_CLICK:
                    // Firefox creates a click event on right mouse clicks. This removes the
                    // unwanted click events.
                    if (nativeEvent.button === 2) {
                        return null;
                    }
                /* falls through */
                case TOP_AUX_CLICK:
                case TOP_DOUBLE_CLICK:
                case TOP_MOUSE_DOWN:
                case TOP_MOUSE_MOVE:
                case TOP_MOUSE_UP:
                // TODO: Disabled elements should not respond to mouse events
                /* falls through */
                case TOP_MOUSE_OUT:
                case TOP_MOUSE_OVER:
                case TOP_CONTEXT_MENU:
                    EventConstructor = SyntheticMouseEvent;
                    break;
                case TOP_DRAG:
                case TOP_DRAG_END:
                case TOP_DRAG_ENTER:
                case TOP_DRAG_EXIT:
                case TOP_DRAG_LEAVE:
                case TOP_DRAG_OVER:
                case TOP_DRAG_START:
                case TOP_DROP:
                    EventConstructor = SyntheticDragEvent;
                    break;
                case TOP_TOUCH_CANCEL:
                case TOP_TOUCH_END:
                case TOP_TOUCH_MOVE:
                case TOP_TOUCH_START:
                    EventConstructor = SyntheticTouchEvent;
                    break;
                case TOP_ANIMATION_END:
                case TOP_ANIMATION_ITERATION:
                case TOP_ANIMATION_START:
                    EventConstructor = SyntheticAnimationEvent;
                    break;
                case TOP_TRANSITION_END:
                    EventConstructor = SyntheticTransitionEvent;
                    break;
                case TOP_SCROLL:
                    EventConstructor = SyntheticUIEvent;
                    break;
                case TOP_WHEEL:
                    EventConstructor = SyntheticWheelEvent;
                    break;
                case TOP_COPY:
                case TOP_CUT:
                case TOP_PASTE:
                    EventConstructor = SyntheticClipboardEvent;
                    break;
                case TOP_GOT_POINTER_CAPTURE:
                case TOP_LOST_POINTER_CAPTURE:
                case TOP_POINTER_CANCEL:
                case TOP_POINTER_DOWN:
                case TOP_POINTER_MOVE:
                case TOP_POINTER_OUT:
                case TOP_POINTER_OVER:
                case TOP_POINTER_UP:
                    EventConstructor = SyntheticPointerEvent;
                    break;
                default:
                    {
                        if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
                        }
                    }
                    // HTML Events
                    // @see http://www.w3.org/TR/html5/index.html#events-0
                    EventConstructor = SyntheticEvent;
                    break;
            }
            var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            accumulateTwoPhaseDispatches(event);
            return event;
        }
    };
    var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;
    var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
    var callbackBookkeepingPool = [];
    /**
     * Find the deepest React component completely containing the root of the
     * passed-in instance (for use when entire React trees are nested within each
     * other). If React trees are not nested, returns null.
     */
    function findRootContainerNode(inst) {
        // TODO: It may be a good idea to cache this to prevent unnecessary DOM
        // traversal, but caching is difficult to do correctly without using a
        // mutation observer to listen for all DOM changes.
        while (inst.return) {
            inst = inst.return;
        }
        if (inst.tag !== HostRoot) {
            // This can happen if we're in a detached tree.
            return null;
        }
        return inst.stateNode.containerInfo;
    }
    // Used to store ancestor hierarchy in top level callback
    function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
        if (callbackBookkeepingPool.length) {
            var instance = callbackBookkeepingPool.pop();
            instance.topLevelType = topLevelType;
            instance.nativeEvent = nativeEvent;
            instance.targetInst = targetInst;
            return instance;
        }
        return {
            topLevelType: topLevelType,
            nativeEvent: nativeEvent,
            targetInst: targetInst,
            ancestors: []
        };
    }
    function releaseTopLevelCallbackBookKeeping(instance) {
        instance.topLevelType = null;
        instance.nativeEvent = null;
        instance.targetInst = null;
        instance.ancestors.length = 0;
        if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
            callbackBookkeepingPool.push(instance);
        }
    }
    function handleTopLevel(bookKeeping) {
        var targetInst = bookKeeping.targetInst;
        // Loop through the hierarchy, in case there's any nested components.
        // It's important that we build the array of ancestors before calling any
        // event handlers, because event handlers can modify the DOM, leading to
        // inconsistencies with ReactMount's node cache. See #1105.
        var ancestor = targetInst;
        do {
            if (!ancestor) {
                bookKeeping.ancestors.push(ancestor);
                break;
            }
            var root = findRootContainerNode(ancestor);
            if (!root) {
                break;
            }
            bookKeeping.ancestors.push(ancestor);
            ancestor = getClosestInstanceFromNode(root);
        } while (ancestor);
        for (var i = 0; i < bookKeeping.ancestors.length; i++) {
            targetInst = bookKeeping.ancestors[i];
            runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
        }
    }
    // TODO: can we stop exporting these?
    var _enabled = true;
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    function trapBubbledEvent(topLevelType, element) {
        if (!element) {
            return null;
        }
        var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
        addEventBubbleListener(element, getRawEventName(topLevelType), 
        // Check if interactive and wrap in interactiveUpdates
        dispatch.bind(null, topLevelType));
    }
    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    function trapCapturedEvent(topLevelType, element) {
        if (!element) {
            return null;
        }
        var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
        addEventCaptureListener(element, getRawEventName(topLevelType), 
        // Check if interactive and wrap in interactiveUpdates
        dispatch.bind(null, topLevelType));
    }
    function dispatchInteractiveEvent(topLevelType, nativeEvent) {
        interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
    }
    function dispatchEvent(topLevelType, nativeEvent) {
        if (!_enabled) {
            return;
        }
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
            // If we get an event (ex: img onload) before committing that
            // component's mount, ignore it for now (that is, treat it as if it was an
            // event on a non-React tree). We might also consider queueing events and
            // dispatching them after the mount.
            targetInst = null;
        }
        var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);
        try {
            // Event queue being processed in the same cycle allows
            // `preventDefault`.
            batchedUpdates(handleTopLevel, bookKeeping);
        }
        finally {
            releaseTopLevelCallbackBookKeeping(bookKeeping);
        }
    }
    /**
     * Summary of `ReactBrowserEventEmitter` event handling:
     *
     *  - Top-level delegation is used to trap most native browser events. This
     *    may only occur in the main thread and is the responsibility of
     *    ReactDOMEventListener, which is injected and can therefore support
     *    pluggable event sources. This is the only work that occurs in the main
     *    thread.
     *
     *  - We normalize and de-duplicate events to account for browser quirks. This
     *    may be done in the worker thread.
     *
     *  - Forward these native events (with the associated top-level type used to
     *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
     *    to extract any synthetic events.
     *
     *  - The `EventPluginHub` will then process each event by annotating them with
     *    "dispatches", a sequence of listeners and IDs that care about that event.
     *
     *  - The `EventPluginHub` then dispatches the events.
     *
     * Overview of React and the event system:
     *
     * +------------+    .
     * |    DOM     |    .
     * +------------+    .
     *       |           .
     *       v           .
     * +------------+    .
     * | ReactEvent |    .
     * |  Listener  |    .
     * +------------+    .                         +-----------+
     *       |           .               +--------+|SimpleEvent|
     *       |           .               |         |Plugin     |
     * +-----|------+    .               v         +-----------+
     * |     |      |    .    +--------------+                    +------------+
     * |     +-----------.--->|EventPluginHub|                    |    Event   |
     * |            |    .    |              |     +-----------+  | Propagators|
     * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
     * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
     * |            |    .    |              |     +-----------+  |  utilities |
     * |     +-----------.--->|              |                    +------------+
     * |     |      |    .    +--------------+
     * +-----|------+    .                ^        +-----------+
     *       |           .                |        |Enter/Leave|
     *       +           .                +-------+|Plugin     |
     * +-------------+   .                         +-----------+
     * | application |   .
     * |-------------|   .
     * |             |   .
     * |             |   .
     * +-------------+   .
     *                   .
     *    React Core     .  General Purpose Event Plugin System
     */
    var alreadyListeningTo = {};
    var reactTopListenersCounter = 0;
    /**
     * To ensure no conflicts with other potential React instances on the page
     */
    var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);
    function getListeningForDocument(mountAt) {
        // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
        // directly.
        if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
            mountAt[topListenersIDKey] = reactTopListenersCounter++;
            alreadyListeningTo[mountAt[topListenersIDKey]] = {};
        }
        return alreadyListeningTo[mountAt[topListenersIDKey]];
    }
    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} mountAt Container where to mount the listener
     */
    function listenTo(registrationName, mountAt) {
        var isListening = getListeningForDocument(mountAt);
        var dependencies = registrationNameDependencies[registrationName];
        for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
                switch (dependency) {
                    case TOP_SCROLL:
                        trapCapturedEvent(TOP_SCROLL, mountAt);
                        break;
                    case TOP_FOCUS:
                    case TOP_BLUR:
                        trapCapturedEvent(TOP_FOCUS, mountAt);
                        trapCapturedEvent(TOP_BLUR, mountAt);
                        // We set the flag for a single dependency later in this function,
                        // but this ensures we mark both as attached rather than just one.
                        isListening[TOP_BLUR] = true;
                        isListening[TOP_FOCUS] = true;
                        break;
                    case TOP_CANCEL:
                    case TOP_CLOSE:
                        if (isEventSupported(getRawEventName(dependency))) {
                            trapCapturedEvent(dependency, mountAt);
                        }
                        break;
                    case TOP_INVALID:
                    case TOP_SUBMIT:
                    case TOP_RESET:
                        // We listen to them on the target DOM elements.
                        // Some of them bubble so we don't want them to fire twice.
                        break;
                    default:
                        // By default, listen on the top level to all non-media events.
                        // Media events don't bubble so adding the listener wouldn't do anything.
                        var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
                        if (!isMediaEvent) {
                            trapBubbledEvent(dependency, mountAt);
                        }
                        break;
                }
                isListening[dependency] = true;
            }
        }
    }
    function isListeningToAllDependencies(registrationName, mountAt) {
        var isListening = getListeningForDocument(mountAt);
        var dependencies = registrationNameDependencies[registrationName];
        for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
                return false;
            }
        }
        return true;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') {
            return null;
        }
        try {
            return doc.activeElement || doc.body;
        }
        catch (e) {
            return doc.body;
        }
    }
    /**
     * Given any node return the first leaf node without children.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {DOMElement|DOMTextNode}
     */
    function getLeafNode(node) {
        while (node && node.firstChild) {
            node = node.firstChild;
        }
        return node;
    }
    /**
     * Get the next sibling within a container. This will walk up the
     * DOM if a node's siblings have been exhausted.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {?DOMElement|DOMTextNode}
     */
    function getSiblingNode(node) {
        while (node) {
            if (node.nextSibling) {
                return node.nextSibling;
            }
            node = node.parentNode;
        }
    }
    /**
     * Get object describing the nodes which contain characters at offset.
     *
     * @param {DOMElement|DOMTextNode} root
     * @param {number} offset
     * @return {?object}
     */
    function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node) {
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                    return {
                        node: node,
                        offset: offset - nodeStart
                    };
                }
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
     * @param {DOMElement} outerNode
     * @return {?object}
     */
    function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
            return null;
        }
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */
            anchorNode.nodeType;
            focusNode.nodeType;
            /* eslint-enable no-unused-expressions */
        }
        catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
     * Returns {start, end} where `start` is the character/codepoint index of
     * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
     * `end` is the index of (focusNode, focusOffset).
     *
     * Returns null if you pass in garbage input but we should probably just crash.
     *
     * Exported only for testing.
     */
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while (true) {
            var next = null;
            while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                    break;
                }
                // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while (true) {
                if (node === outerNode) {
                    // If `outerNode` has children, this is always the second time visiting
                    // it. If it has no children, this is still the first loop, and the only
                    // valid selection is anchorNode and focusNode both equal to this node
                    // and both offsets 0, in which case we will have handled above.
                    break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                }
                if ((next = node.nextSibling) !== null) {
                    break;
                }
                node = parentNode;
                parentNode = node.parentNode;
            }
            // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) {
            // This should never happen. (Would happen if the anchor/focus nodes aren't
            // actually inside the passed-in node.)
            return null;
        }
        return {
            start: start,
            end: end
        };
    }
    /**
     * In modern non-IE browsers, we can support both forward and backward
     * selections.
     *
     * Note: IE10+ supports the Selection object, but it does not support
     * the `extend` method, which means that even in modern IE, it's not possible
     * to programmatically create a backward selection. Thus, for all IE
     * versions, we use the old IE API to create our selections.
     *
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */
    function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) {
            return;
        }
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
        // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            }
            else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
            return false;
        }
        else if (outerNode === innerNode) {
            return true;
        }
        else if (isTextNode(outerNode)) {
            return false;
        }
        else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
        }
        else if ('contains' in outerNode) {
            return outerNode.contains(innerNode);
        }
        else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        }
        else {
            return false;
        }
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute
            try {
                win = element.contentDocument.defaultView;
            }
            catch (e) {
                return element;
            }
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
     * @ReactInputSelection: React input selection module. Based on Selection.js,
     * but modified to be suitable for react and has a couple of bug fixes (doesn't
     * assume buttons have range selections allowed).
     * Input selection module for React.
     */
    /**
     * @hasSelectionCapabilities: we get the element types that support selection
     * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
     * and `selectionEnd` rows.
     */
    function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
        };
    }
    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */
    function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
            }
            // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                    ancestors.push({
                        element: ancestor,
                        left: ancestor.scrollLeft,
                        top: ancestor.scrollTop
                    });
                }
            }
            if (typeof priorFocusedElem.focus === 'function') {
                priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */
    function getSelection$1(input) {
        var selection = void 0;
        if ('selectionStart' in input) {
            // Modern browser with input or textarea.
            selection = {
                start: input.selectionStart,
                end: input.selectionEnd
            };
        }
        else {
            // Content editable or old IE textarea.
            selection = getOffsets(input);
        }
        return selection || { start: 0, end: 0 };
    }
    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */
    function setSelection(input, offsets) {
        var start = offsets.start, end = offsets.end;
        if (end === undefined) {
            end = start;
        }
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        }
        else {
            setOffsets(input, offsets);
        }
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    var eventTypes$3 = {
        select: {
            phasedRegistrationNames: {
                bubbled: 'onSelect',
                captured: 'onSelectCapture'
            },
            dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
        }
    };
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
     * Get an object which is a unique representation of the current selection.
     *
     * The return value will not be consistent across nodes or browsers, but
     * two identical selections on the same node will return identical objects.
     *
     * @param {DOMElement} node
     * @return {object}
     */
    function getSelection(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) {
            return {
                start: node.selectionStart,
                end: node.selectionEnd
            };
        }
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
     * Get document associated with the event target.
     *
     * @param {object} nativeEventTarget
     * @return {Document}
     */
    function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
     * Poll selection to see whether it's changed.
     *
     * @param {object} nativeEvent
     * @param {object} nativeEventTarget
     * @return {?SyntheticEvent}
     */
    function constructSelectEvent(nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return null;
        }
        // Only fire when selection has actually changed.
        var currentSelection = getSelection(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
            syntheticEvent.type = 'select';
            syntheticEvent.target = activeElement$1;
            accumulateTwoPhaseDispatches(syntheticEvent);
            return syntheticEvent;
        }
        return null;
    }
    /**
     * This plugin creates an `onSelect` event that normalizes select events
     * across form elements.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - contentEditable
     *
     * This differs from native browser implementations in the following ways:
     * - Fires on contentEditable fields as well as inputs.
     * - Fires for collapsed selection.
     * - Fires after user input.
     */
    var SelectEventPlugin = {
        eventTypes: eventTypes$3,
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            // Track whether all listeners exists for this plugin. If none exist, we do
            // not extract events. See #3639.
            if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
                return null;
            }
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            switch (topLevelType) {
                // Track the input node that has focus.
                case TOP_FOCUS:
                    if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                        activeElement$1 = targetNode;
                        activeElementInst$1 = targetInst;
                        lastSelection = null;
                    }
                    break;
                case TOP_BLUR:
                    activeElement$1 = null;
                    activeElementInst$1 = null;
                    lastSelection = null;
                    break;
                // Don't fire the event while the user is dragging. This matches the
                // semantics of the native select event.
                case TOP_MOUSE_DOWN:
                    mouseDown = true;
                    break;
                case TOP_CONTEXT_MENU:
                case TOP_MOUSE_UP:
                case TOP_DRAG_END:
                    mouseDown = false;
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
                // Chrome and IE fire non-standard event when selection is changed (and
                // sometimes when it hasn't). IE's event fires out of order with respect
                // to key and input events on deletion, so we discard it.
                //
                // Firefox doesn't support selectionchange, so check selection status
                // after each key entry. The selection changes after keydown and before
                // keyup, but we check on keydown as well in the case of holding down a
                // key, when multiple keydown events are fired but only one keyup is.
                // This is also our approach for IE handling, for the reason above.
                case TOP_SELECTION_CHANGE:
                    if (skipSelectionChangeEvent) {
                        break;
                    }
                // falls through
                case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                    return constructSelectEvent(nativeEvent, nativeEventTarget);
            }
            return null;
        }
    };
    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */
    injection.injectEventPluginOrder(DOMEventPluginOrder);
    setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
    /**
     * Some important event plugins included by default (without having to require
     * them).
     */
    injection.injectEventPluginsByName({
        SimpleEventPlugin: SimpleEventPlugin,
        EnterLeaveEventPlugin: EnterLeaveEventPlugin,
        ChangeEventPlugin: ChangeEventPlugin,
        SelectEventPlugin: SelectEventPlugin,
        BeforeInputEventPlugin: BeforeInputEventPlugin
    });
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = '';
        // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function (child) {
            if (child == null) {
                return;
            }
            content += child;
            // Note: we don't warn about invalid children here.
            // Instead, this is done separately below so that
            // it happens during the hydration codepath too.
        });
        return content;
    }
    /**
     * Implements an <option> host component that warns when `selected` is set.
     */
    function validateProps(element, props) {
        {
            // This mirrors the codepath above, but runs for hydration too.
            // Warn about invalid children here so that client and hydration are consistent.
            // TODO: this seems like it could cause a DEV-only throw for hydration
            // if children contains a non-element object. We should try to avoid that.
            if (typeof props.children === 'object' && props.children !== null) {
                React.Children.forEach(props.children, function (child) {
                    if (child == null) {
                        return;
                    }
                    if (typeof child === 'string' || typeof child === 'number') {
                        return;
                    }
                    if (typeof child.type !== 'string') {
                        return;
                    }
                    if (!didWarnInvalidChild) {
                        didWarnInvalidChild = true;
                        warning$1(false, 'Only strings and numbers are supported as <option> children.');
                    }
                });
            }
            // TODO: Remove support for `selected` in <option>.
            if (props.selected != null && !didWarnSelectedSetOnOption) {
                warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
                didWarnSelectedSetOnOption = true;
            }
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) {
            element.setAttribute('value', toString(getToStringValue(props.value)));
        }
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({ children: undefined }, props);
        var content = flattenChildren(props.children);
        if (content) {
            hostProps.children = content;
        }
        return hostProps;
    }
    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var didWarnValueDefaultValue$1 = void 0;
    {
        didWarnValueDefaultValue$1 = false;
    }
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
            return '\n\nCheck the render method of `' + ownerName + '`.';
        }
        return '';
    }
    var valuePropNames = ['value', 'defaultValue'];
    /**
     * Validation function for `value` and `defaultValue`.
     */
    function checkSelectPropTypes(props) {
        ReactControlledValuePropTypes.checkPropTypes('select', props);
        for (var i = 0; i < valuePropNames.length; i++) {
            var propName = valuePropNames[i];
            if (props[propName] == null) {
                continue;
            }
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) {
                warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
            }
            else if (!props.multiple && isArray) {
                warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
            }
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
                // Prefix to avoid chaos with special keys.
                selectedValue['$' + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options.length; _i++) {
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) {
                    options[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                    options[_i].defaultSelected = true;
                }
            }
        }
        else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options.length; _i2++) {
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) {
                        options[_i2].defaultSelected = true;
                    }
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) {
                    defaultSelected = options[_i2];
                }
            }
            if (defaultSelected !== null) {
                defaultSelected.selected = true;
            }
        }
    }
    /**
     * Implements a <select> host component that allows optionally setting the
     * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
     * stringable. If `multiple` is true, the prop must be an array of stringables.
     *
     * If `value` is not supplied (or null/undefined), user actions that change the
     * selected option will trigger updates to the rendered options.
     *
     * If it is supplied (and not null/undefined), the rendered options will not
     * update in response to user actions. Instead, the `value` prop must change in
     * order for the rendered options to update.
     *
     * If `defaultValue` is provided, any options with the supplied values will be
     * selected.
     */
    function getHostProps$2(element, props) {
        return _assign({}, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        {
            checkSelectPropTypes(props);
        }
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        {
            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
                warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
                didWarnValueDefaultValue$1 = true;
            }
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
        }
        else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
        }
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
        }
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
            else {
                // Revert the select back to its default unselected state.
                updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
            }
        }
    }
    function restoreControlledState$2(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
        }
    }
    var didWarnValDefaultVal = false;
    /**
     * Implements a <textarea> host component that allows setting `value`, and
     * `defaultValue`. This differs from the traditional DOM API because value is
     * usually set as PCDATA children.
     *
     * If `value` is not supplied (or null/undefined), user actions that affect the
     * value will trigger updates to the element.
     *
     * If `value` is supplied (and not null/undefined), the rendered element will
     * not trigger updates to the element. Instead, the `value` prop must change in
     * order for the rendered element to be updated.
     *
     * The rendered element will be initialized with an empty value, the prop
     * `defaultValue` if specified, or the children content (deprecated).
     */
    function getHostProps$3(element, props) {
        var node = element;
        !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;
        // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        {
            ReactControlledValuePropTypes.checkPropTypes('textarea', props);
            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
                warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
                didWarnValDefaultVal = true;
            }
        }
        var initialValue = props.value;
        // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var defaultValue = props.defaultValue;
            // TODO (yungsters): Remove support for children content in <textarea>.
            var children = props.children;
            if (children != null) {
                {
                    warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
                }
                !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
                if (Array.isArray(children)) {
                    !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) {
                defaultValue = '';
            }
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value);
            // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) {
                node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
            }
        }
        if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
        }
    }
    function postMountWrapper$3(element, props) {
        var node = element;
        // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent;
        // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            node.value = textContent;
        }
    }
    function restoreControlledState$3(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE$1,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    };
    // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch (type) {
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE$1;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
            // No (or default) parent namespace: potential entry point.
            return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
            // We're leaving SVG.
            return HTML_NAMESPACE$1;
        }
        // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */
    /**
     * Create a function which has 'unsafe' privileges (required by windows8 apps)
     */
    var createMicrosoftUnsafeLocalFunction = function (func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
            return function (arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function () {
                    return func(arg0, arg1, arg2, arg3);
                });
            };
        }
        else {
            return func;
        }
    };
    // SVG temp container for IE lacking innerHTML
    var reusableSVGContainer = void 0;
    /**
     * Set the innerHTML property of a node
     *
     * @param {DOMElement} node
     * @param {string} html
     * @internal
     */
    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
        // IE does not have innerHTML for SVG nodes, so instead we inject the
        // new markup in a temp node and then move the child nodes across into
        // the target node
        if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement('div');
            reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
            var svgNode = reusableSVGContainer.firstChild;
            while (node.firstChild) {
                node.removeChild(node.firstChild);
            }
            while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
            }
        }
        else {
            node.innerHTML = html;
        }
    });
    /**
     * Set the textContent property of a node. For text updates, it's faster
     * to set the `nodeValue` of the Text node directly instead of using
     * `.textContent` which will remove the existing node and create a new one.
     *
     * @param {DOMElement} node
     * @param {string} text
     * @internal
     */
    var setTextContent = function (node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
        background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
        backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
        border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
        borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
        borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
        borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
        borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
        borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
        borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
        borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
        borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
        borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
        borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
        borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
        borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
        borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
        columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
        columns: ['columnCount', 'columnWidth'],
        flex: ['flexBasis', 'flexGrow', 'flexShrink'],
        flexFlow: ['flexDirection', 'flexWrap'],
        font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
        fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
        gap: ['columnGap', 'rowGap'],
        grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
        gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
        gridColumn: ['gridColumnEnd', 'gridColumnStart'],
        gridColumnGap: ['columnGap'],
        gridGap: ['columnGap', 'rowGap'],
        gridRow: ['gridRowEnd', 'gridRowStart'],
        gridRowGap: ['rowGap'],
        gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
        listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
        margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
        marker: ['markerEnd', 'markerMid', 'markerStart'],
        mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
        maskPosition: ['maskPositionX', 'maskPositionY'],
        outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
        overflow: ['overflowX', 'overflowY'],
        padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
        placeContent: ['alignContent', 'justifyContent'],
        placeItems: ['alignItems', 'justifyItems'],
        placeSelf: ['alignSelf', 'justifySelf'],
        textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
        textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
        transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
        wordWrap: ['overflowWrap']
    };
    /**
     * CSS properties which accept numbers but are not in units of "px".
     */
    var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */
    function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
     * Support style names that may come passed in prefixed by adding permutations
     * of vendor prefixes.
     */
    var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
    // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function (prop) {
        prefixes.forEach(function (prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
     * Convert a value into the proper css writable value. The style name `name`
     * should be logical (no hyphens), as specified
     * in `CSSProperty.isUnitlessNumber`.
     *
     * @param {string} name CSS property name such as `topMargin`.
     * @param {*} value CSS property value such as `10px`.
     * @return {string} Normalized style value with dimensions applied.
     */
    function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) {
            return '';
        }
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        }
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
     * Hyphenates a camelcased CSS property name, for example:
     *
     *   > hyphenateStyleName('backgroundColor')
     *   < "background-color"
     *   > hyphenateStyleName('MozTransition')
     *   < "-moz-transition"
     *   > hyphenateStyleName('msTransition')
     *   < "-ms-transition"
     *
     * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
     * is converted to `-ms-`.
     */
    function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function () { };
    {
        // 'msTransform' is correct, but the other prefixes should be capitalized
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        // style values shouldn't contain a semicolon
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function (string) {
            return string.replace(hyphenPattern, function (_, character) {
                return character.toUpperCase();
            });
        };
        var warnHyphenatedStyleName = function (name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
            }
            warnedStyleNames[name] = true;
            warning$1(false, 'Unsupported style property %s. Did you mean %s?', name, 
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern$1, 'ms-')));
        };
        var warnBadVendoredStyleName = function (name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
            }
            warnedStyleNames[name] = true;
            warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function (name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
            }
            warnedStyleValues[value] = true;
            warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
        };
        var warnStyleValueIsNaN = function (name, value) {
            if (warnedForNaNValue) {
                return;
            }
            warnedForNaNValue = true;
            warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
        };
        var warnStyleValueIsInfinity = function (name, value) {
            if (warnedForInfinityValue) {
                return;
            }
            warnedForInfinityValue = true;
            warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
        };
        warnValidStyle = function (name, value) {
            if (name.indexOf('-') > -1) {
                warnHyphenatedStyleName(name);
            }
            else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
            }
            else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === 'number') {
                if (isNaN(value)) {
                    warnStyleValueIsNaN(name, value);
                }
                else if (!isFinite(value)) {
                    warnStyleValueIsInfinity(name, value);
                }
            }
        };
    }
    var warnValidStyle$1 = warnValidStyle;
    /**
     * Operations for dealing with CSS properties.
     */
    /**
     * This creates a string that is expected to be equivalent to the style
     * attribute generated by server-side rendering. It by-passes warnings and
     * security checks so it's not safe to use this value for anything other than
     * comparison. It is only used in DEV for SSR validation.
     */
    function createDangerousStringForStyles(styles) {
        {
            var serialized = '';
            var delimiter = '';
            for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                    continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                    var isCustomProperty = styleName.indexOf('--') === 0;
                    serialized += delimiter + hyphenateStyleName(styleName) + ':';
                    serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                    delimiter = ';';
                }
            }
            return serialized || null;
        }
    }
    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     */
    function setValueForStyles(node, styles) {
        var style = node.style;
        for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
                continue;
            }
            var isCustomProperty = styleName.indexOf('--') === 0;
            {
                if (!isCustomProperty) {
                    warnValidStyle$1(styleName, styles[styleName]);
                }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') {
                styleName = 'cssFloat';
            }
            if (isCustomProperty) {
                style.setProperty(styleName, styleValue);
            }
            else {
                style[styleName] = styleValue;
            }
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
     * Given {color: 'red', overflow: 'hidden'} returns {
     *   color: 'color',
     *   overflowX: 'overflow',
     *   overflowY: 'overflow',
     * }. This can be read as "the overflowY property was set by the overflow
     * shorthand". That is, the values are the property that each was derived from.
     */
    function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
            }
        }
        return expanded;
    }
    /**
     * When mixing shorthand and longhand property names, we warn during updates if
     * we expect an incorrect result to occur. In particular, we warn for:
     *
     * Updating a shorthand property (longhand gets overwritten):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
     *   becomes .style.font = 'baz'
     * Removing a shorthand property (longhand gets lost too):
     *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
     *   becomes .style.font = ''
     * Removing a longhand property (should revert to shorthand; doesn't):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
     *   becomes .style.fontVariant = ''
     */
    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!warnAboutShorthandPropertyCollision) {
            return;
        }
        if (!nextStyles) {
            return;
        }
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                    continue;
                }
                warnedAbout[warningKey] = true;
                warning$1(false, '%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
        // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // For HTML, certain tags cannot have children. This has the same purpose as
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    // TODO: We can remove this if we add invariantWithStack()
    // or add stack by default to invariants where possible.
    var HTML$1 = '__html';
    var ReactDebugCurrentFrame$2 = null;
    {
        ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
    }
    function assertValidProps(tag, props) {
        if (!props) {
            return;
        }
        // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
        }
        if (props.dangerouslySetInnerHTML != null) {
            !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
            !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
        }
        {
            !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
        }
        !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) {
            return typeof props.is === 'string';
        }
        switch (tagName) {
            // These are reserved SVG and MathML elements.
            // We don't mind this whitelist too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG whitelist, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        'aria-details': 0,
        'aria-disabled': 0,
        'aria-hidden': 0,
        'aria-invalid': 0,
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
        }
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            }
            // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            }
            // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for (var key in props) {
            var isValid = validateProperty(type, key);
            if (!isValid) {
                invalidProps.push(key);
            }
        }
        var unknownPropString = invalidProps.map(function (prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) {
            warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
        }
        else if (invalidProps.length > 1) {
            warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
        }
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
            return;
        }
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') {
            return;
        }
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) {
                warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
            }
            else {
                warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
            }
        }
    }
    var validateProperty$1 = function () { };
    {
        var warnedProperties$1 = {};
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
        var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
        validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
                warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
                warnedProperties$1[name] = true;
                return true;
            }
            // We can't rely on the event system being injected on the server.
            if (canUseEventSystem) {
                if (registrationNameModules.hasOwnProperty(name)) {
                    return true;
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                if (registrationName != null) {
                    warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                    warnedProperties$1[name] = true;
                    return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                    warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
                    warnedProperties$1[name] = true;
                    return true;
                }
            }
            else if (EVENT_NAME_REGEX.test(name)) {
                // If no event plugins have been injected, we are in a server environment.
                // So we can't tell if the event name is correct for sure, but we can filter
                // out known bad ones like `onclick`. We can't suggest a specific replacement though.
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                    warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
                }
                warnedProperties$1[name] = true;
                return true;
            }
            // Let the ARIA attribute hook validate ARIA attributes
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
            }
            if (lowerCasedName === 'innerhtml') {
                warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
                warnedProperties$1[name] = true;
                return true;
            }
            if (lowerCasedName === 'aria') {
                warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
                warnedProperties$1[name] = true;
                return true;
            }
            if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
                warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
                warnedProperties$1[name] = true;
                return true;
            }
            if (typeof value === 'number' && isNaN(value)) {
                warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
                warnedProperties$1[name] = true;
                return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            // Known attributes should match the casing specified in the property config.
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                    warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                    warnedProperties$1[name] = true;
                    return true;
                }
            }
            else if (!isReserved && name !== lowerCasedName) {
                // Unknown attributes should have lowercase casing since that's how they
                // will be cased anyway with server rendering.
                warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                    warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
                }
                else {
                    warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
            }
            // Now that we've validated casing, do not validate
            // data types for reserved props
            if (isReserved) {
                return true;
            }
            // Warn when a known attribute is a bad type
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
            }
            // Warn when passing the strings 'false' or 'true' into a boolean prop
            if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
            }
            return true;
        };
    }
    var warnUnknownProperties = function (type, props, canUseEventSystem) {
        var unknownProps = [];
        for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
            if (!isValid) {
                unknownProps.push(key);
            }
        }
        var unknownPropString = unknownProps.map(function (prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) {
            warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
        }
        else if (unknownProps.length > 1) {
            warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
        }
    };
    function validateProperties$2(type, props, canUseEventSystem) {
        if (isCustomComponent(type, props)) {
            return;
        }
        warnUnknownProperties(type, props, canUseEventSystem);
    }
    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var didWarnInvalidHydration = false;
    var didWarnShadyDOM = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE$1 = 'style';
    var HTML = '__html';
    var HTML_NAMESPACE = Namespaces.html;
    var warnedUnknownTags = void 0;
    var suppressHydrationWarning = void 0;
    var validatePropertiesInDevelopment = void 0;
    var warnForTextDifference = void 0;
    var warnForPropDifference = void 0;
    var warnForExtraAttributes = void 0;
    var warnForInvalidEventListener = void 0;
    var canDiffStyleForHydrationWarning = void 0;
    var normalizeMarkupForTextOrAttribute = void 0;
    var normalizeHTML = void 0;
    {
        warnedUnknownTags = {
            // Chrome is the only major browser not shipping <time>. But as of July
            // 2017 it intends to ship it due to widespread usage. We intentionally
            // *don't* warn for <time> even if it's unrecognized by Chrome because
            // it soon will be, and many apps have been using it anyway.
            time: true,
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
        };
        validatePropertiesInDevelopment = function (type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, /* canUseEventSystem */ true);
        };
        // IE 11 parses & normalizes the style attribute as opposed to other
        // browsers. It adds spaces and sorts the properties in some
        // non-alphabetical order. Handling that would require sorting CSS
        // properties in the client & server versions or applying
        // `expectedStyle` to a temporary DOM node to read its `style` attribute
        // normalized. Since it only affects IE, we're skipping style warnings
        // in that browser completely in favor of doing all that work.
        // See https://github.com/facebook/react/issues/11807
        canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
        // HTML parsing normalizes CR and CRLF to LF.
        // It also can turn \u0000 into \uFFFD inside attributes.
        // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
        // If we have a mismatch, it might be caused by that.
        // We will still patch up in this case but not fire the warning.
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        normalizeMarkupForTextOrAttribute = function (markup) {
            var markupString = typeof markup === 'string' ? markup : '' + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
        };
        warnForTextDifference = function (serverText, clientText) {
            if (didWarnInvalidHydration) {
                return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
                return;
            }
            didWarnInvalidHydration = true;
            warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
        };
        warnForPropDifference = function (propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
                return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
                return;
            }
            didWarnInvalidHydration = true;
            warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function (attributeNames) {
            if (didWarnInvalidHydration) {
                return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function (name) {
                names.push(name);
            });
            warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
        };
        warnForInvalidEventListener = function (registrationName, listener) {
            if (listener === false) {
                warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
            }
            else {
                warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
            }
        };
        // Parse the HTML and read it back to normalize the HTML string so that it
        // can be used for comparison.
        normalizeHTML = function (parent, html) {
            // We could have created a separate document here to avoid
            // re-initializing custom elements if they exist. But this breaks
            // how <noscript> is being handled. So we use the same document.
            // See the discussion in https://github.com/facebook/react/pull/11157.
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
        };
    }
    function ensureListeningTo(rootContainerElement, registrationName) {
        var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
        var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
        listenTo(registrationName, doc);
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() { }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
                continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE$1) {
                {
                    if (nextProp) {
                        // Freeze the next style object so that we can assume it won't be
                        // mutated. We have already warned for this in the past.
                        Object.freeze(nextProp);
                    }
                }
                // Relies on `updateStylesByID` not mutating `styleUpdates`.
                setValueForStyles(domElement, nextProp);
            }
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML] : undefined;
                if (nextHtml != null) {
                    setInnerHTML(domElement, nextHtml);
                }
            }
            else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) {
                        setTextContent(domElement, nextProp);
                    }
                }
                else if (typeof nextProp === 'number') {
                    setTextContent(domElement, '' + nextProp);
                }
            }
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
                // Noop
            }
            else if (propKey === AUTOFOCUS) {
                // We polyfill it separately on the client during commit.
                // We could have excluded it in the property list instead of
                // adding a special case here, but then it wouldn't be emitted
                // on server rendering (but we *do* want to emit it in SSR).
            }
            else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (true && typeof nextProp !== 'function') {
                        warnForInvalidEventListener(propKey, nextProp);
                    }
                    ensureListeningTo(rootContainerElement, propKey);
                }
            }
            else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE$1) {
                setValueForStyles(domElement, propValue);
            }
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
            }
            else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
            }
            else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag = void 0;
        // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement = void 0;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE) {
            {
                isCustomComponentTag = isCustomComponent(type, props);
                // Should this check be gated by parent namespace? Not sure we want to
                // allow <SVG> or <mATH>.
                !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
            }
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            }
            else if (typeof props.is === 'string') {
                // $FlowIssue `createElement` should be updated for Web Components
                domElement = ownerDocument.createElement(type, { is: props.is });
            }
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type);
                // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
                // attribute on `select`s needs to be added before `option`s are inserted. This prevents
                // a bug where the `select` does not scroll to the correct option because singular
                // `select` elements automatically pick the first item.
                // See https://github.com/facebook/react/issues/13222
                if (type === 'select' && props.multiple) {
                    var node = domElement;
                    node.multiple = true;
                }
            }
        }
        else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
            if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                    warnedUnknownTags[type] = true;
                    warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
                }
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
            validatePropertiesInDevelopment(tag, rawProps);
            if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
                didWarnShadyDOM = true;
            }
        }
        // TODO: Make sure that we check isMounted before firing any of these events.
        var props = void 0;
        switch (tag) {
            case 'iframe':
            case 'object':
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // Create listener for each media event
                for (var i = 0; i < mediaEventTypes.length; i++) {
                    trapBubbledEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
            case 'source':
                trapBubbledEvent(TOP_ERROR, domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
            case 'form':
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                props = rawProps;
                break;
            case 'details':
                trapBubbledEvent(TOP_TOGGLE, domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement, rawProps);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                }
                break;
        }
    }
    // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
            validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps = void 0;
        var nextProps = void 0;
        switch (tag) {
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                }
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey = void 0;
        var styleName = void 0;
        var styleUpdates = null;
        for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
            }
            if (propKey === STYLE$1) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                    if (lastStyle.hasOwnProperty(styleName)) {
                        if (!styleUpdates) {
                            styleUpdates = {};
                        }
                        styleUpdates[styleName] = '';
                    }
                }
            }
            else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
                // Noop. This is handled by the clear text mechanism.
            }
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
                // Noop
            }
            else if (propKey === AUTOFOCUS) {
                // Noop. It doesn't work on updates anyway.
            }
            else if (registrationNameModules.hasOwnProperty(propKey)) {
                // This is a special case. If any listener updates we need to ensure
                // that the "current" fiber pointer gets updated so we need a commit
                // to update this element.
                if (!updatePayload) {
                    updatePayload = [];
                }
            }
            else {
                // For all other deleted properties we add it to the queue. We use
                // the whitelist in the commit phase instead.
                (updatePayload = updatePayload || []).push(propKey, null);
            }
        }
        for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
            }
            if (propKey === STYLE$1) {
                {
                    if (nextProp) {
                        // Freeze the next style object so that we can assume it won't be
                        // mutated. We have already warned for this in the past.
                        Object.freeze(nextProp);
                    }
                }
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for (styleName in lastProp) {
                        if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                            if (!styleUpdates) {
                                styleUpdates = {};
                            }
                            styleUpdates[styleName] = '';
                        }
                    }
                    // Update styles that changed since `lastProp`.
                    for (styleName in nextProp) {
                        if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                            if (!styleUpdates) {
                                styleUpdates = {};
                            }
                            styleUpdates[styleName] = nextProp[styleName];
                        }
                    }
                }
                else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) {
                            updatePayload = [];
                        }
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            }
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML] : undefined;
                var lastHtml = lastProp ? lastProp[HTML] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) {
                        (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
                    }
                }
                else {
                    // TODO: It might be too late to clear this if we have children
                    // inserted already.
                }
            }
            else if (propKey === CHILDREN) {
                if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
                    (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
                }
            }
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
                // Noop
            }
            else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (true && typeof nextProp !== 'function') {
                        warnForInvalidEventListener(propKey, nextProp);
                    }
                    ensureListeningTo(rootContainerElement, propKey);
                }
                if (!updatePayload && lastProp !== nextProp) {
                    // This is a special case. If any listener updates we need to ensure
                    // that the "current" props pointer gets updated so we need a commit
                    // to update this element.
                    updatePayload = [];
                }
            }
            else {
                // For any other property we always add it to the queue and then we
                // filter it out using the whitelist during the commit.
                (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
        }
        if (styleUpdates) {
            {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
            }
            (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
        }
        return updatePayload;
    }
    // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch (tag) {
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
        }
        return null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag = void 0;
        var extraAttributeNames = void 0;
        {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
            if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
                warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
                didWarnShadyDOM = true;
            }
        }
        // TODO: Make sure that we check isMounted before firing any of these events.
        switch (tag) {
            case 'iframe':
            case 'object':
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
            case 'video':
            case 'audio':
                // Create listener for each media event
                for (var i = 0; i < mediaEventTypes.length; i++) {
                    trapBubbledEvent(mediaEventTypes[i], domElement);
                }
                break;
            case 'source':
                trapBubbledEvent(TOP_ERROR, domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
            case 'form':
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                break;
            case 'details':
                trapBubbledEvent(TOP_TOGGLE, domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange');
                break;
        }
        assertValidProps(tag, rawProps);
        {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                    // Built-in SSR attribute is whitelisted
                    case 'data-reactroot':
                        break;
                    // Controlled attributes are not validated
                    // TODO: Only ignore them on controlled tags.
                    case 'value':
                        break;
                    case 'checked':
                        break;
                    case 'selected':
                        break;
                    default:
                        // Intentionally use the original name.
                        // See discussion in https://github.com/facebook/react/pull/10676.
                        extraAttributeNames.add(attributes[_i].name);
                }
            }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
                continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (true && !suppressHydrationWarning) {
                            warnForTextDifference(domElement.textContent, nextProp);
                        }
                        updatePayload = [CHILDREN, nextProp];
                    }
                }
                else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (true && !suppressHydrationWarning) {
                            warnForTextDifference(domElement.textContent, nextProp);
                        }
                        updatePayload = [CHILDREN, '' + nextProp];
                    }
                }
            }
            else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (true && typeof nextProp !== 'function') {
                        warnForInvalidEventListener(propKey, nextProp);
                    }
                    ensureListeningTo(rootContainerElement, propKey);
                }
            }
            else if (true &&
                // Convince Flow we've calculated it (it's DEV-only in this method.)
                typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) {
                    // Don't bother comparing. We're ignoring all these warnings.
                }
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
                    // Controlled attributes are not validated
                    // TODO: Only ignore them on controlled tags.
                    propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
                    // Noop
                }
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML] : undefined;
                    var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
                    if (expectedHTML !== serverHTML) {
                        warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                }
                else if (propKey === STYLE$1) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) {
                            warnForPropDifference(propKey, serverValue, expectedStyle);
                        }
                    }
                }
                else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) {
                        warnForPropDifference(propKey, serverValue, nextProp);
                    }
                }
                else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    }
                    else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE) {
                            ownNamespace = getIntrinsicNamespace(tag);
                        }
                        if (ownNamespace === HTML_NAMESPACE) {
                            // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey.toLowerCase());
                        }
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true;
                                // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            }
                            // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                        warnForPropDifference(propKey, serverValue, nextProp);
                    }
                }
            }
        }
        {
            // $FlowFixMe - Should be inferred as not undefined.
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                // $FlowFixMe - Should be inferred as not undefined.
                warnForExtraAttributes(extraAttributeNames);
            }
        }
        switch (tag) {
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement, rawProps);
                break;
            case 'select':
            case 'option':
                // For input and textarea we current always set the value property at
                // post mount to force it to diverge from attributes. However, for
                // option and select we don't quite do the same thing and select
                // is not resilient to the DOM state changing so we don't do that here.
                // TODO: Consider not doing this for input and textarea.
                break;
            default:
                if (typeof rawProps.onClick === 'function') {
                    // TODO: This cast may not be sound for SVG, MathML or custom elements.
                    trapClickOnNonInteractiveElement(domElement);
                }
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        {
            warnForTextDifference(textNode.nodeValue, text);
        }
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        {
            if (didWarnInvalidHydration) {
                return;
            }
            didWarnInvalidHydration = true;
            warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
    }
    function warnForDeletedHydratableText(parentNode, child) {
        {
            if (didWarnInvalidHydration) {
                return;
            }
            didWarnInvalidHydration = true;
            warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
            if (didWarnInvalidHydration) {
                return;
            }
            didWarnInvalidHydration = true;
            warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
        }
    }
    function warnForInsertedHydratedText(parentNode, text) {
        {
            if (text === '') {
                // We expect to insert empty text nodes since they're not represented in
                // the HTML.
                // TODO: Remove this special case if we can just avoid inserting empty
                // text nodes.
                return;
            }
            if (didWarnInvalidHydration) {
                return;
            }
            didWarnInvalidHydration = true;
            warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
    }
    function restoreControlledState$1(domElement, tag, props) {
        switch (tag) {
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$3(domElement, props);
                return;
            case 'select':
                restoreControlledState$2(domElement, props);
                return;
        }
    }
    // TODO: direct imports like some-package/src/* are bad. Fix me.
    var validateDOMNesting = function () { };
    var updatedAncestorInfo = function () { };
    {
        // This validation code was written based on the HTML5 parsing spec:
        // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
        //
        // Note: this does not catch all invalid nesting, nor does it try to (as it's
        // not clear what practical benefit doing so provides); instead, we warn only
        // for cases where the parser will give a parse tree differing from what React
        // intended. For example, <b><div></div></b> is invalid but we don't warn
        // because it still parses correctly; we do warn for other cases like nested
        // <p> tags where the beginning of the second element implicitly closes the
        // first, causing a confusing mess.
        // https://html.spec.whatwg.org/multipage/syntax.html#special
        var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
        // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
        var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            'foreignObject', 'desc', 'title'];
        // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
        var buttonScopeTags = inScopeTags.concat(['button']);
        // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
        var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
        var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function (oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = { tag: tag };
            if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
            }
            // See rules for 'li', 'dd', 'dt' start tags in
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
            if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === 'form') {
                ancestorInfo.formTag = info;
            }
            if (tag === 'a') {
                ancestorInfo.aTagInScope = info;
            }
            if (tag === 'button') {
                ancestorInfo.buttonTagInScope = info;
            }
            if (tag === 'nobr') {
                ancestorInfo.nobrTagInScope = info;
            }
            if (tag === 'p') {
                ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === 'li') {
                ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === 'dd' || tag === 'dt') {
                ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
        };
        /**
         * Returns whether
         */
        var isTagValidWithParent = function (tag, parentTag) {
            // First, let's check if we're in an unusual parsing mode...
            switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case 'select':
                    return tag === 'option' || tag === 'optgroup' || tag === '#text';
                case 'optgroup':
                    return tag === 'option' || tag === '#text';
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case 'option':
                    return tag === '#text';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case 'tr':
                    return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case 'tbody':
                case 'thead':
                case 'tfoot':
                    return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case 'colgroup':
                    return tag === 'col' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case 'table':
                    return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case 'head':
                    return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case 'html':
                    return tag === 'head' || tag === 'body';
                case '#document':
                    return tag === 'html';
            }
            // Probably in the "in body" parsing mode, so we outlaw only tag combos
            // where the parsing rules cause implicit opens or closes to be added.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
            switch (tag) {
                case 'h1':
                case 'h2':
                case 'h3':
                case 'h4':
                case 'h5':
                case 'h6':
                    return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
                case 'rp':
                case 'rt':
                    return impliedEndTags.indexOf(parentTag) === -1;
                case 'body':
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'frame':
                case 'head':
                case 'html':
                case 'tbody':
                case 'td':
                case 'tfoot':
                case 'th':
                case 'thead':
                case 'tr':
                    // These tags are only valid with a few parents that have special child
                    // parsing rules -- if we're down here, then none of those matched and
                    // so we allow it only if we don't know what the parent is, as all other
                    // cases are invalid.
                    return parentTag == null;
            }
            return true;
        };
        /**
         * Returns whether
         */
        var findInvalidAncestorForTag = function (tag, ancestorInfo) {
            switch (tag) {
                case 'address':
                case 'article':
                case 'aside':
                case 'blockquote':
                case 'center':
                case 'details':
                case 'dialog':
                case 'dir':
                case 'div':
                case 'dl':
                case 'fieldset':
                case 'figcaption':
                case 'figure':
                case 'footer':
                case 'header':
                case 'hgroup':
                case 'main':
                case 'menu':
                case 'nav':
                case 'ol':
                case 'p':
                case 'section':
                case 'summary':
                case 'ul':
                case 'pre':
                case 'listing':
                case 'table':
                case 'hr':
                case 'xmp':
                case 'h1':
                case 'h2':
                case 'h3':
                case 'h4':
                case 'h5':
                case 'h6':
                    return ancestorInfo.pTagInButtonScope;
                case 'form':
                    return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case 'li':
                    return ancestorInfo.listItemTagAutoclosing;
                case 'dd':
                case 'dt':
                    return ancestorInfo.dlItemTagAutoclosing;
                case 'button':
                    return ancestorInfo.buttonTagInScope;
                case 'a':
                    // Spec says something about storing a list of markers, but it sounds
                    // equivalent to this check.
                    return ancestorInfo.aTagInScope;
                case 'nobr':
                    return ancestorInfo.nobrTagInScope;
            }
            return null;
        };
        var didWarn = {};
        validateDOMNesting = function (childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
                !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
                childTag = '#text';
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
                return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var addendum = getCurrentFiberStackInDev();
            var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
            if (didWarn[warnKey]) {
                return;
            }
            didWarn[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = '';
            if (childTag === '#text') {
                if (/\S/.test(childText)) {
                    tagDisplayName = 'Text nodes';
                }
                else {
                    tagDisplayName = 'Whitespace text nodes';
                    whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
                }
            }
            else {
                tagDisplayName = '<' + childTag + '>';
            }
            if (invalidParent) {
                var info = '';
                if (ancestorTag === 'table' && childTag === 'tr') {
                    info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
                }
                warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
            }
            else {
                warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
            }
        };
    }
    var ReactInternals$1 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var _ReactInternals$Sched = ReactInternals$1.Scheduler;
    var unstable_cancelCallback = _ReactInternals$Sched.unstable_cancelCallback;
    var unstable_now = _ReactInternals$Sched.unstable_now;
    var unstable_scheduleCallback = _ReactInternals$Sched.unstable_scheduleCallback;
    var unstable_shouldYield = _ReactInternals$Sched.unstable_shouldYield;
    var unstable_getFirstCallbackNode = _ReactInternals$Sched.unstable_getFirstCallbackNode;
    var unstable_runWithPriority = _ReactInternals$Sched.unstable_runWithPriority;
    var unstable_next = _ReactInternals$Sched.unstable_next;
    var unstable_continueExecution = _ReactInternals$Sched.unstable_continueExecution;
    var unstable_pauseExecution = _ReactInternals$Sched.unstable_pauseExecution;
    var unstable_getCurrentPriorityLevel = _ReactInternals$Sched.unstable_getCurrentPriorityLevel;
    var unstable_ImmediatePriority = _ReactInternals$Sched.unstable_ImmediatePriority;
    var unstable_UserBlockingPriority = _ReactInternals$Sched.unstable_UserBlockingPriority;
    var unstable_NormalPriority = _ReactInternals$Sched.unstable_NormalPriority;
    var unstable_LowPriority = _ReactInternals$Sched.unstable_LowPriority;
    var unstable_IdlePriority = _ReactInternals$Sched.unstable_IdlePriority;
    // Renderers that don't support persistence
    // can re-export everything from this module.
    function shim() {
        invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
    }
    // Persistence (when unsupported)
    var supportsPersistence = false;
    var cloneInstance = shim;
    var createContainerChildSet = shim;
    var appendChildToContainerChildSet = shim;
    var finalizeContainerChildren = shim;
    var replaceContainerChildren = shim;
    var cloneHiddenInstance = shim;
    var cloneUnhiddenInstance = shim;
    var createHiddenTextInstance = shim;
    var SUPPRESS_HYDRATION_WARNING = void 0;
    {
        SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    }
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var STYLE = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch (type) {
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type = void 0;
        var namespace = void 0;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                {
                    type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                    var root = rootContainerInstance.documentElement;
                    namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                    break;
                }
            default:
                {
                    var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                    var ownNamespace = container.namespaceURI || null;
                    type = container.tagName;
                    namespace = getChildNamespace(ownNamespace, type);
                    break;
                }
        }
        {
            var validatedTag = type.toLowerCase();
            var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return { namespace: namespace, ancestorInfo: _ancestorInfo };
        }
        return namespace;
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
            var parentHostContextDev = parentHostContext;
            var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
        }
        var parentNamespace = parentHostContext;
        return getChildNamespace(parentNamespace, type);
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        setEnabled(false);
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        selectionInformation = null;
        setEnabled(eventsEnabled);
        eventsEnabled = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace = void 0;
        {
            // TODO: take namespace into account when validating.
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === 'string' || typeof props.children === 'number') {
                var string = '' + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
                var string = '' + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
            }
        }
        return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function shouldDeprioritizeSubtree(type, props) {
        return !!props.hidden;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    var isPrimaryRenderer = true;
    // This initialization code may run even on server environments
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    var schedulePassiveEffects = unstable_scheduleCallback;
    var cancelPassiveEffects = unstable_cancelCallback;
    // -------------------
    //     Mutation
    // -------------------
    var supportsMutation = true;
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
        }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps);
        // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode = void 0;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        }
        else {
            parentNode = container;
            parentNode.appendChild(child);
        }
        // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(parentNode);
        }
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
        }
        else {
            container.insertBefore(child, beforeChild);
        }
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
        }
        else {
            container.removeChild(child);
        }
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance;
        // Delete all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        parentInstance.removeChild(nextNode);
                        return;
                    }
                    else {
                        depth--;
                    }
                }
                else if (data === SUSPENSE_START_DATA) {
                    depth++;
                }
            }
            node = nextNode;
        } while (node);
        // TODO: Warn, we didn't find the end comment boundary.
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
        }
        else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
        }
        else {
            // Document nodes should never contain suspense boundaries.
        }
    }
    function hideInstance(instance) {
        // TODO: Does this work for all element types? What about MathML? Should we
        // pass host context to this method?
        instance = instance;
        instance.style.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    // -------------------
    //     Hydration
    // -------------------
    var supportsHydration = true;
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
        }
        // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) {
            // Empty strings are not parsed by HTML so there won't be a correct match here.
            return null;
        }
        // This has now been refined to a text node.
        return instance;
    }
    function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) {
            // Empty strings are not parsed by HTML so there won't be a correct match here.
            return null;
        }
        // This has now been refined to a suspense node.
        return instance;
    }
    function getNextHydratableSibling(instance) {
        var node = instance.nextSibling;
        // Skip non-hydratable nodes.
        while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || node.nodeType !== COMMENT_NODE || node.data !== SUSPENSE_START_DATA)) {
            node = node.nextSibling;
        }
        return node;
    }
    function getFirstHydratableChild(parentInstance) {
        var next = parentInstance.firstChild;
        // Skip non-hydratable nodes.
        while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || next.nodeType !== COMMENT_NODE || next.data !== SUSPENSE_START_DATA)) {
            next = next.nextSibling;
        }
        return next;
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance);
        // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace = void 0;
        {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
        }
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while (node) {
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        return getNextHydratableSibling(node);
                    }
                    else {
                        depth--;
                    }
                }
                else if (data === SUSPENSE_START_DATA) {
                    depth++;
                }
            }
            node = node.nextSibling;
        }
        // TODO: Warn, we didn't find the end comment boundary.
        return null;
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        {
            warnForUnmatchedText(textInstance, text);
        }
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            warnForUnmatchedText(textInstance, text);
        }
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        {
            if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
            }
            else if (instance.nodeType === COMMENT_NODE) {
                // TODO: warnForDeletedHydratableSuspenseBoundary
            }
            else {
                warnForDeletedHydratableText(parentContainer, instance);
            }
        }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
            }
            else if (instance.nodeType === COMMENT_NODE) {
                // TODO: warnForDeletedHydratableSuspenseBoundary
            }
            else {
                warnForDeletedHydratableText(parentInstance, instance);
            }
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        {
            warnForInsertedHydratedElement(parentContainer, type, props);
        }
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        {
            warnForInsertedHydratedText(parentContainer, text);
        }
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            warnForInsertedHydratedElement(parentInstance, type, props);
        }
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
        }
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            // TODO: warnForInsertedHydratedSuspense(parentInstance);
        }
    }
    // Prefix measurements so that it's possible to filter them.
    // Longer prefixes are hard to read in DevTools.
    var reactEmoji = '\u269B';
    var warningEmoji = '\u26D4';
    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
    // Keep track of current fiber so that we know the path to unwind on pause.
    // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
    var currentFiber = null;
    // If we're in the middle of user code, which fiber and method is it?
    // Reusing `currentFiber` would be confusing for this because user code fiber
    // can change during commit phase too, but we don't need to unwind it (since
    // lifecycles in the commit phase don't resemble a tree).
    var currentPhase = null;
    var currentPhaseFiber = null;
    // Did lifecycle hook schedule an update? This is often a performance problem,
    // so we will keep track of it, and include it in the report.
    // Track commits caused by cascading updates.
    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    var isWaitingForCallback = false;
    // During commits, we only show a measurement once per method name
    // to avoid stretch the commit phase with measurement overhead.
    var labelsInCurrentCommit = new Set();
    var formatMarkName = function (markName) {
        return reactEmoji + ' ' + markName;
    };
    var formatLabel = function (label, warning) {
        var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
        var suffix = warning ? ' Warning: ' + warning : '';
        return '' + prefix + label + suffix;
    };
    var beginMark = function (markName) {
        performance.mark(formatMarkName(markName));
    };
    var clearMark = function (markName) {
        performance.clearMarks(formatMarkName(markName));
    };
    var endMark = function (label, markName, warning) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning);
        try {
            performance.measure(formattedLabel, formattedMarkName);
        }
        catch (err) { }
        // If previous mark was missing for some reason, this will throw.
        // This could only happen if React crashed in an unexpected place earlier.
        // Don't pile on with more errors.
        // Clear marks immediately to avoid growing buffer.
        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
    };
    var getFiberMarkName = function (label, debugID) {
        return label + ' (#' + debugID + ')';
    };
    var getFiberLabel = function (componentName, isMounted, phase) {
        if (phase === null) {
            // These are composite component total time measurements.
            return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
        }
        else {
            // Composite component methods.
            return componentName + '.' + phase;
        }
    };
    var beginFiberMark = function (fiber, phase) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        if (isCommitting && labelsInCurrentCommit.has(label)) {
            // During the commit phase, we don't show duplicate labels because
            // there is a fixed overhead for every measurement, and we don't
            // want to stretch the commit phase beyond necessary.
            return false;
        }
        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
    };
    var clearFiberMark = function (fiber, phase) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
    };
    var endFiberMark = function (fiber, phase, warning) {
        var componentName = getComponentName(fiber.type) || 'Unknown';
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning);
    };
    var shouldIgnoreFiber = function (fiber) {
        // Host components should be skipped in the timeline.
        // We could check typeof fiber.type, but does this work with RN?
        switch (fiber.tag) {
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
            case Mode:
                return true;
            default:
                return false;
        }
    };
    var clearPendingPhaseMeasurement = function () {
        if (currentPhase !== null && currentPhaseFiber !== null) {
            clearFiberMark(currentPhaseFiber, currentPhase);
        }
        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
    };
    var pauseTimers = function () {
        // Stops all currently active measurements so that they can be resumed
        // if we continue in a later deferred loop from the same unit of work.
        var fiber = currentFiber;
        while (fiber) {
            if (fiber._debugIsCurrentlyTiming) {
                endFiberMark(fiber, null, null);
            }
            fiber = fiber.return;
        }
    };
    var resumeTimersRecursively = function (fiber) {
        if (fiber.return !== null) {
            resumeTimersRecursively(fiber.return);
        }
        if (fiber._debugIsCurrentlyTiming) {
            beginFiberMark(fiber, null);
        }
    };
    var resumeTimers = function () {
        // Resumes all measurements that were active during the last deferred loop.
        if (currentFiber !== null) {
            resumeTimersRecursively(currentFiber);
        }
    };
    function recordEffect() {
        if (enableUserTimingAPI) {
            effectCountInCurrentCommit++;
        }
    }
    function recordScheduleUpdate() {
        if (enableUserTimingAPI) {
            if (isCommitting) {
                hasScheduledUpdateInCurrentCommit = true;
            }
            if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
                hasScheduledUpdateInCurrentPhase = true;
            }
        }
    }
    function startRequestCallbackTimer() {
        if (enableUserTimingAPI) {
            if (supportsUserTiming && !isWaitingForCallback) {
                isWaitingForCallback = true;
                beginMark('(Waiting for async callback...)');
            }
        }
    }
    function stopRequestCallbackTimer(didExpire, expirationTime) {
        if (enableUserTimingAPI) {
            if (supportsUserTiming) {
                isWaitingForCallback = false;
                var warning = didExpire ? 'React was blocked by main thread' : null;
                endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
            }
        }
    }
    function startWorkTimer(fiber) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
            }
            // If we pause, this is the fiber to unwind from.
            currentFiber = fiber;
            if (!beginFiberMark(fiber, null)) {
                return;
            }
            fiber._debugIsCurrentlyTiming = true;
        }
    }
    function cancelWorkTimer(fiber) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
            }
            // Remember we shouldn't complete measurement for this fiber.
            // Otherwise flamechart will be deep even for small updates.
            fiber._debugIsCurrentlyTiming = false;
            clearFiberMark(fiber, null);
        }
    }
    function stopWorkTimer(fiber) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
            }
            // If we pause, its parent is the fiber to unwind from.
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
                return;
            }
            fiber._debugIsCurrentlyTiming = false;
            endFiberMark(fiber, null, null);
        }
    }
    function stopFailedWorkTimer(fiber) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
            }
            // If we pause, its parent is the fiber to unwind from.
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
                return;
            }
            fiber._debugIsCurrentlyTiming = false;
            var warning = fiber.tag === SuspenseComponent || fiber.tag === DehydratedSuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
            endFiberMark(fiber, null, warning);
        }
    }
    function startPhaseTimer(fiber, phase) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            clearPendingPhaseMeasurement();
            if (!beginFiberMark(fiber, phase)) {
                return;
            }
            currentPhaseFiber = fiber;
            currentPhase = phase;
        }
    }
    function stopPhaseTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            if (currentPhase !== null && currentPhaseFiber !== null) {
                var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
                endFiberMark(currentPhaseFiber, currentPhase, warning);
            }
            currentPhase = null;
            currentPhaseFiber = null;
        }
    }
    function startWorkLoopTimer(nextUnitOfWork) {
        if (enableUserTimingAPI) {
            currentFiber = nextUnitOfWork;
            if (!supportsUserTiming) {
                return;
            }
            commitCountInCurrentWorkLoop = 0;
            // This is top level call.
            // Any other measurements are performed within.
            beginMark('(React Tree Reconciliation)');
            // Resume any measurements that were in progress during the last loop.
            resumeTimers();
        }
    }
    function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            var warning = null;
            if (interruptedBy !== null) {
                if (interruptedBy.tag === HostRoot) {
                    warning = 'A top-level update interrupted the previous render';
                }
                else {
                    var componentName = getComponentName(interruptedBy.type) || 'Unknown';
                    warning = 'An update to ' + componentName + ' interrupted the previous render';
                }
            }
            else if (commitCountInCurrentWorkLoop > 1) {
                warning = 'There were cascading updates';
            }
            commitCountInCurrentWorkLoop = 0;
            var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
            // Pause any measurements until the next loop.
            pauseTimers();
            endMark(label, '(React Tree Reconciliation)', warning);
        }
    }
    function startCommitTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            isCommitting = true;
            hasScheduledUpdateInCurrentCommit = false;
            labelsInCurrentCommit.clear();
            beginMark('(Committing Changes)');
        }
    }
    function stopCommitTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            var warning = null;
            if (hasScheduledUpdateInCurrentCommit) {
                warning = 'Lifecycle hook scheduled a cascading update';
            }
            else if (commitCountInCurrentWorkLoop > 0) {
                warning = 'Caused by a cascading update in earlier commit';
            }
            hasScheduledUpdateInCurrentCommit = false;
            commitCountInCurrentWorkLoop++;
            isCommitting = false;
            labelsInCurrentCommit.clear();
            endMark('(Committing Changes)', '(Committing Changes)', warning);
        }
    }
    function startCommitSnapshotEffectsTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            effectCountInCurrentCommit = 0;
            beginMark('(Committing Snapshot Effects)');
        }
    }
    function stopCommitSnapshotEffectsTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
        }
    }
    function startCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            effectCountInCurrentCommit = 0;
            beginMark('(Committing Host Effects)');
        }
    }
    function stopCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
        }
    }
    function startCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            effectCountInCurrentCommit = 0;
            beginMark('(Calling Lifecycle Methods)');
        }
    }
    function stopCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
            if (!supportsUserTiming) {
                return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
        }
    }
    var valueStack = [];
    var fiberStack = void 0;
    {
        fiberStack = [];
    }
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            {
                warningWithoutStack$1(false, 'Unexpected pop.');
            }
            return;
        }
        {
            if (fiber !== fiberStack[index]) {
                warningWithoutStack$1(false, 'Unexpected Fiber popped.');
            }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
            fiberStack[index] = null;
        }
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
            fiberStack[index] = fiber;
        }
        cursor.current = value;
    }
    function checkThatStackIsEmpty() {
        {
            if (index !== -1) {
                warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
            }
        }
    }
    function resetStackAfterFatalErrorInDev() {
        {
            index = -1;
            valueStack.length = 0;
            fiberStack.length = 0;
        }
    }
    var warnedAboutMissingGetChildContext = void 0;
    {
        warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
        Object.freeze(emptyContextObject);
    }
    // A cursor to the current merged context object on the stack.
    var contextStackCursor = createCursor(emptyContextObject);
    // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false);
    // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            // If the fiber is a context provider itself, when we read its context
            // we may have already pushed its own child context on the stack. A context
            // provider should not "see" its own child context. Therefore we read the
            // previous (parent) context instead for a context provider.
            return previousContext;
        }
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) {
            return emptyContextObject;
        }
        // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
        }
        var context = {};
        for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
        }
        {
            var name = getComponentName(type) || 'Unknown';
            checkPropTypes_1(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
        }
        // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // Context is created before the class component is instantiated so check for instance.
        if (instance) {
            cacheContext(workInProgress, unmaskedContext, context);
        }
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes;
        // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            {
                var componentName = getComponentName(type) || 'Unknown';
                if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
                }
            }
            return parentContext;
        }
        var childContext = void 0;
        {
            setCurrentPhase('getChildContext');
        }
        startPhaseTimer(fiber, 'getChildContext');
        childContext = instance.getChildContext();
        stopPhaseTimer();
        {
            setCurrentPhase(null);
        }
        for (var contextKey in childContext) {
            !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
        }
        {
            var name = getComponentName(type) || 'Unknown';
            checkPropTypes_1(childContextTypes, childContext, 'child context', name, 
            // In practice, there is one case in which we won't get a stack. It's when
            // somebody calls unstable_renderSubtreeIntoContainer() and we process
            // context from the parent component instance. The stack will be missing
            // because it's outside of the reconciliation, and so the pointer has not
            // been set. This is rare and doesn't matter. We'll also remove that API.
            getCurrentFiberStackInDev);
        }
        return _assign({}, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode;
        // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
        else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var node = fiber;
        do {
            switch (node.tag) {
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    {
                        var Component = node.type;
                        if (isContextProvider(Component)) {
                            return node.stateNode.__reactInternalMemoizedMergedChildContext;
                        }
                        break;
                    }
            }
            node = node.return;
        } while (node !== null);
        invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
    }
    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;
    function catchErrors(fn) {
        return function (arg) {
            try {
                return fn(arg);
            }
            catch (err) {
                if (true && !hasLoggedError) {
                    hasLoggedError = true;
                    warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
                }
            }
        };
    }
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
            // No DevTools
            return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
            // This isn't a real property on the hook, but it can be set to opt out
            // of DevTools integration and associated warnings and logs.
            // https://github.com/facebook/react/issues/3877
            return true;
        }
        if (!hook.supportsFiber) {
            {
                warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
            }
            // DevTools exists, even though it doesn't support Fiber.
            return true;
        }
        try {
            var rendererID = hook.inject(internals);
            // We have successfully injected, so now it is safe to set up hooks.
            onCommitFiberRoot = catchErrors(function (root) {
                return hook.onCommitFiberRoot(rendererID, root);
            });
            onCommitFiberUnmount = catchErrors(function (fiber) {
                return hook.onCommitFiberUnmount(rendererID, fiber);
            });
        }
        catch (err) {
            // Catch all errors because it is unsafe to throw during initialization.
            {
                warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
            }
        }
        // DevTools exists
        return true;
    }
    function onCommitRoot(root) {
        if (typeof onCommitFiberRoot === 'function') {
            onCommitFiberRoot(root);
        }
    }
    function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === 'function') {
            onCommitFiberUnmount(fiber);
        }
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;
    var NoWork = 0;
    var Never = 1;
    var Sync = maxSigned31BitInt;
    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1;
    // 1 unit of expiration time represents 10ms.
    function msToExpirationTime(ms) {
        // Always add an offset so that we don't clash with the magic number for NoWork.
        return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
    }
    function expirationTimeToMs(expirationTime) {
        return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
    }
    function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
    }
    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    }
    var LOW_PRIORITY_EXPIRATION = 5000;
    var LOW_PRIORITY_BATCH_SIZE = 250;
    function computeAsyncExpiration(currentTime) {
        return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
    }
    // We intentionally set a higher expiration time for interactive updates in
    // dev than in production.
    //
    // If the main thread is being blocked so long that you hit the expiration,
    // it's a problem that could be solved with better scheduling.
    //
    // People will be more likely to notice this and fix it with the long
    // expiration time in development.
    //
    // In production we opt for better UX at the risk of masking scheduling
    // problems, by expiring fast.
    var HIGH_PRIORITY_EXPIRATION = 500;
    var HIGH_PRIORITY_BATCH_SIZE = 100;
    function computeInteractiveExpiration(currentTime) {
        return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
    }
    var NoContext = 0;
    var ConcurrentMode = 1;
    var StrictMode = 2;
    var ProfileMode = 4;
    var hasBadMapPolyfill = void 0;
    {
        hasBadMapPolyfill = false;
        try {
            var nonExtensibleObject = Object.preventExtensions({});
            var testMap = new Map([[nonExtensibleObject, null]]);
            var testSet = new Set([nonExtensibleObject]);
            // This is necessary for Rollup to not consider these unused.
            // https://github.com/rollup/rollup/issues/1771
            // TODO: we can remove these if Rollup fixes the bug.
            testMap.set(0, 0);
            testSet.add(0);
        }
        catch (e) {
            // TODO: Consider warning about bad polyfills
            hasBadMapPolyfill = true;
        }
    }
    // A Fiber is work on a Component that needs to be done or was done. There can
    // be more than one per component.
    var debugCounter = void 0;
    {
        debugCounter = 1;
    }
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.contextDependencies = null;
        this.mode = mode;
        // Effects
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.childExpirationTime = NoWork;
        this.alternate = null;
        if (enableProfilerTimer) {
            // Note: The following is done to avoid a v8 performance cliff.
            //
            // Initializing the fields below to smis and later updating them with
            // double values will cause Fibers to end up having separate shapes.
            // This behavior/bug has something to do with Object.preventExtension().
            // Fortunately this only impacts DEV builds.
            // Unfortunately it makes React unusably slow for some applications.
            // To work around this, initialize the fields below with doubles.
            //
            // Learn more about this here:
            // https://github.com/facebook/react/issues/14365
            // https://bugs.chromium.org/p/v8/issues/detail?id=8538
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            // It's okay to replace the initial doubles with smis after initialization.
            // This won't trigger the performance cliff mentioned above,
            // and it simplifies other profiler code (including DevTools).
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
        }
        {
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugIsCurrentlyTiming = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
                Object.preventExtensions(this);
            }
        }
    }
    // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function (tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') {
            return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        }
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
            }
        }
        return IndeterminateComponent;
    }
    // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps, expirationTime) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            {
                // DEV-only fields
                workInProgress._debugID = current._debugID;
                workInProgress._debugSource = current._debugSource;
                workInProgress._debugOwner = current._debugOwner;
                workInProgress._debugHookTypes = current._debugHookTypes;
            }
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        }
        else {
            workInProgress.pendingProps = pendingProps;
            // We already have an alternate.
            // Reset the effect tag.
            workInProgress.effectTag = NoEffect;
            // The effect list is no longer valid.
            workInProgress.nextEffect = null;
            workInProgress.firstEffect = null;
            workInProgress.lastEffect = null;
            if (enableProfilerTimer) {
                // We intentionally reset, rather than copy, actualDuration & actualStartTime.
                // This prevents time from endlessly accumulating in new commits.
                // This has the downside of resetting values for different priority renders,
                // But works for yielding (the common case) and should support resuming.
                workInProgress.actualDuration = 0;
                workInProgress.actualStartTime = -1;
            }
        }
        workInProgress.childExpirationTime = current.childExpirationTime;
        workInProgress.expirationTime = current.expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.contextDependencies = current.contextDependencies;
        // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        if (enableProfilerTimer) {
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(isConcurrent) {
        var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;
        if (enableProfilerTimer && isDevToolsPresent) {
            // Always collect profile timings when DevTools are present.
            // This enables DevTools to start capturing timing at any point–
            // Without some nodes in the tree having empty base times.
            mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, // React$ElementType
    key, pendingProps, owner, mode, expirationTime) {
        var fiber = void 0;
        var fiberTag = IndeterminateComponent;
        // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct(type)) {
                fiberTag = ClassComponent;
            }
        }
        else if (typeof type === 'string') {
            fiberTag = HostComponent;
        }
        else {
            getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
                case REACT_CONCURRENT_MODE_TYPE:
                    return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);
                case REACT_STRICT_MODE_TYPE:
                    return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);
                case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
                case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
                default:
                    {
                        if (typeof type === 'object' && type !== null) {
                            switch (type.$$typeof) {
                                case REACT_PROVIDER_TYPE:
                                    fiberTag = ContextProvider;
                                    break getTag;
                                case REACT_CONTEXT_TYPE:
                                    // This is a consumer
                                    fiberTag = ContextConsumer;
                                    break getTag;
                                case REACT_FORWARD_REF_TYPE:
                                    fiberTag = ForwardRef;
                                    break getTag;
                                case REACT_MEMO_TYPE:
                                    fiberTag = MemoComponent;
                                    break getTag;
                                case REACT_LAZY_TYPE:
                                    fiberTag = LazyComponent;
                                    resolvedType = null;
                                    break getTag;
                            }
                        }
                        var info = '';
                        {
                            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                                info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                            }
                            var ownerName = owner ? getComponentName(owner.type) : null;
                            if (ownerName) {
                                info += '\n\nCheck the render method of `' + ownerName + '`.';
                            }
                        }
                        invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
                    }
            }
        }
        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        {
            owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
        {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
        }
        return fiber;
    }
    function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
        {
            if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
                warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
            }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromMode(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(Mode, pendingProps, key, mode);
        // TODO: The Mode fiber shouldn't have a type. It has a tag.
        var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
        fiber.elementType = type;
        fiber.type = type;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        var type = REACT_SUSPENSE_TYPE;
        fiber.elementType = type;
        fiber.type = type;
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoContext);
        // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
        };
        return fiber;
    }
    // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
            // This Fiber's initial properties will always be overwritten.
            // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
            target = createFiber(IndeterminateComponent, null, null, NoContext);
        }
        // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.contextDependencies = source.contextDependencies;
        target.mode = source.mode;
        target.effectTag = source.effectTag;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.expirationTime = source.expirationTime;
        target.childExpirationTime = source.childExpirationTime;
        target.alternate = source.alternate;
        if (enableProfilerTimer) {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    var ReactInternals$2 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var _ReactInternals$Sched$1 = ReactInternals$2.SchedulerTracing;
    var __interactionsRef = _ReactInternals$Sched$1.__interactionsRef;
    var __subscriberRef = _ReactInternals$Sched$1.__subscriberRef;
    var unstable_clear = _ReactInternals$Sched$1.unstable_clear;
    var unstable_getCurrent = _ReactInternals$Sched$1.unstable_getCurrent;
    var unstable_getThreadID = _ReactInternals$Sched$1.unstable_getThreadID;
    var unstable_subscribe = _ReactInternals$Sched$1.unstable_subscribe;
    var unstable_trace = _ReactInternals$Sched$1.unstable_trace;
    var unstable_unsubscribe = _ReactInternals$Sched$1.unstable_unsubscribe;
    var unstable_wrap = _ReactInternals$Sched$1.unstable_wrap;
    // TODO: This should be lifted into the renderer.
    // The following attributes are only used by interaction tracing builds.
    // They enable interactions to be associated with their async work,
    // And expose interaction metadata to the React DevTools Profiler plugin.
    // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
    // Exported FiberRoot type includes all properties,
    // To avoid requiring potentially error-prone :any casts throughout the project.
    // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
    // The types are defined separately within this file to ensure they stay in sync.
    // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)
    function createFiberRoot(containerInfo, isConcurrent, hydrate) {
        // Cyclic construction. This cheats the type system right now because
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(isConcurrent);
        var root = void 0;
        if (enableSchedulerTracing) {
            root = {
                current: uninitializedFiber,
                containerInfo: containerInfo,
                pendingChildren: null,
                earliestPendingTime: NoWork,
                latestPendingTime: NoWork,
                earliestSuspendedTime: NoWork,
                latestSuspendedTime: NoWork,
                latestPingedTime: NoWork,
                pingCache: null,
                didError: false,
                pendingCommitExpirationTime: NoWork,
                finishedWork: null,
                timeoutHandle: noTimeout,
                context: null,
                pendingContext: null,
                hydrate: hydrate,
                nextExpirationTimeToWorkOn: NoWork,
                expirationTime: NoWork,
                firstBatch: null,
                nextScheduledRoot: null,
                interactionThreadID: unstable_getThreadID(),
                memoizedInteractions: new Set(),
                pendingInteractionMap: new Map()
            };
        }
        else {
            root = {
                current: uninitializedFiber,
                containerInfo: containerInfo,
                pendingChildren: null,
                pingCache: null,
                earliestPendingTime: NoWork,
                latestPendingTime: NoWork,
                earliestSuspendedTime: NoWork,
                latestSuspendedTime: NoWork,
                latestPingedTime: NoWork,
                didError: false,
                pendingCommitExpirationTime: NoWork,
                finishedWork: null,
                timeoutHandle: noTimeout,
                context: null,
                pendingContext: null,
                hydrate: hydrate,
                nextExpirationTimeToWorkOn: NoWork,
                expirationTime: NoWork,
                firstBatch: null,
                nextScheduledRoot: null
            };
        }
        uninitializedFiber.stateNode = root;
        // The reason for the way the Flow types are structured in this file,
        // Is to avoid needing :any casts everywhere interaction tracing fields are used.
        // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
        // $FlowFixMe Remove this :any cast and replace it with something better.
        return root;
    }
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */
    var lowPriorityWarning = function () { };
    {
        var printWarning$1 = function (format) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }
            var argIndex = 0;
            var message = 'Warning: ' + format.replace(/%s/g, function () {
                return args[argIndex++];
            });
            if (typeof console !== 'undefined') {
                console.warn(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            }
            catch (x) { }
        };
        lowPriorityWarning = function (condition, format) {
            if (format === undefined) {
                throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
            }
            if (!condition) {
                for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                    args[_key2 - 2] = arguments[_key2];
                }
                printWarning$1.apply(undefined, [format].concat(args));
            }
        };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    var ReactStrictModeWarnings = {
        discardPendingWarnings: function () { },
        flushPendingDeprecationWarnings: function () { },
        flushPendingUnsafeLifecycleWarnings: function () { },
        recordDeprecationWarnings: function (fiber, instance) { },
        recordUnsafeLifecycleWarnings: function (fiber, instance) { },
        recordLegacyContextWarning: function (fiber, instance) { },
        flushLegacyContextWarning: function () { }
    };
    {
        var LIFECYCLE_SUGGESTIONS = {
            UNSAFE_componentWillMount: 'componentDidMount',
            UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
            UNSAFE_componentWillUpdate: 'componentDidUpdate'
        };
        var pendingComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUnsafeLifecycleWarnings = new Map();
        var pendingLegacyContextWarning = new Map();
        // Tracks components we have already warned about.
        var didWarnAboutDeprecatedLifecycles = new Set();
        var didWarnAboutUnsafeLifecycles = new Set();
        var didWarnAboutLegacyContext = new Set();
        var setToSortedString = function (set) {
            var array = [];
            set.forEach(function (value) {
                array.push(value);
            });
            return array.sort().join(', ');
        };
        ReactStrictModeWarnings.discardPendingWarnings = function () {
            pendingComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUnsafeLifecycleWarnings = new Map();
            pendingLegacyContextWarning = new Map();
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
            pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
                var lifecyclesWarningMessages = [];
                Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
                    var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
                    if (lifecycleWarnings.length > 0) {
                        var componentNames = new Set();
                        lifecycleWarnings.forEach(function (fiber) {
                            componentNames.add(getComponentName(fiber.type) || 'Component');
                            didWarnAboutUnsafeLifecycles.add(fiber.type);
                        });
                        var formatted = lifecycle.replace('UNSAFE_', '');
                        var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
                        var sortedComponentNames = setToSortedString(componentNames);
                        lifecyclesWarningMessages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
                    }
                });
                if (lifecyclesWarningMessages.length > 0) {
                    var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
                    warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMessages.join('\n\n'));
                }
            });
            pendingUnsafeLifecycleWarnings = new Map();
        };
        var findStrictRoot = function (fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
                if (node.mode & StrictMode) {
                    maybeStrictRoot = node;
                }
                node = node.return;
            }
            return maybeStrictRoot;
        };
        ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
            if (pendingComponentWillMountWarnings.length > 0) {
                var uniqueNames = new Set();
                pendingComponentWillMountWarnings.forEach(function (fiber) {
                    uniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutDeprecatedLifecycles.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);
                pendingComponentWillMountWarnings = [];
            }
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
                var _uniqueNames = new Set();
                pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
                    _uniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutDeprecatedLifecycles.add(fiber.type);
                });
                var _sortedNames = setToSortedString(_uniqueNames);
                lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);
                pendingComponentWillReceivePropsWarnings = [];
            }
            if (pendingComponentWillUpdateWarnings.length > 0) {
                var _uniqueNames2 = new Set();
                pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                    _uniqueNames2.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutDeprecatedLifecycles.add(fiber.type);
                });
                var _sortedNames2 = setToSortedString(_uniqueNames2);
                lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);
                pendingComponentWillUpdateWarnings = [];
            }
        };
        ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
            // Dedup strategy: Warn once per component.
            if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
                return;
            }
            // Don't warn about react-lifecycles-compat polyfilled components.
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
            }
        };
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
                warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
                return;
            }
            // Dedup strategy: Warn once per component.
            // This is difficult to track any other way since component names
            // are often vague and are likely to collide between 3rd party libraries.
            // An expand property is probably okay to use here since it's DEV-only,
            // and will only be set in the event of serious warnings.
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
            }
            var warningsForRoot = void 0;
            if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
                warningsForRoot = {
                    UNSAFE_componentWillMount: [],
                    UNSAFE_componentWillReceiveProps: [],
                    UNSAFE_componentWillUpdate: []
                };
                pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
            }
            else {
                warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
            }
            var unsafeLifecycles = [];
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
                unsafeLifecycles.push('UNSAFE_componentWillMount');
            }
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
            }
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
                unsafeLifecycles.push('UNSAFE_componentWillUpdate');
            }
            if (unsafeLifecycles.length > 0) {
                unsafeLifecycles.forEach(function (lifecycle) {
                    warningsForRoot[lifecycle].push(fiber);
                });
            }
        };
        ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
                warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
                return;
            }
            // Dedup strategy: Warn once per component.
            if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
                if (warningsForRoot === undefined) {
                    warningsForRoot = [];
                    pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
            }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function () {
            pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
                var uniqueNames = new Set();
                fiberArray.forEach(function (fiber) {
                    uniqueNames.add(getComponentName(fiber.type) || 'Component');
                    didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
                warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
            });
        };
    }
    // This lets us hook into Fiber to debug what it's doing.
    // See https://github.com/facebook/react/pull/8033.
    // This is not part of the public API, not even for React DevTools.
    // You may only inject a debugTool if you work on React Fiber itself.
    var ReactFiberInstrumentation = {
        debugTool: null
    };
    var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
    // TODO: Offscreen updates should never suspend. However, a promise that
    // suspended inside an offscreen subtree should be able to ping at the priority
    // of the outer render.
    function markPendingPriorityLevel(root, expirationTime) {
        // If there's a gap between completing a failed root and retrying it,
        // additional updates may be scheduled. Clear `didError`, in case the update
        // is sufficient to fix the error.
        root.didError = false;
        // Update the latest and earliest pending times
        var earliestPendingTime = root.earliestPendingTime;
        if (earliestPendingTime === NoWork) {
            // No other pending updates.
            root.earliestPendingTime = root.latestPendingTime = expirationTime;
        }
        else {
            if (earliestPendingTime < expirationTime) {
                // This is the earliest pending update.
                root.earliestPendingTime = expirationTime;
            }
            else {
                var latestPendingTime = root.latestPendingTime;
                if (latestPendingTime > expirationTime) {
                    // This is the latest pending update
                    root.latestPendingTime = expirationTime;
                }
            }
        }
        findNextExpirationTimeToWorkOn(expirationTime, root);
    }
    function markCommittedPriorityLevels(root, earliestRemainingTime) {
        root.didError = false;
        if (earliestRemainingTime === NoWork) {
            // Fast path. There's no remaining work. Clear everything.
            root.earliestPendingTime = NoWork;
            root.latestPendingTime = NoWork;
            root.earliestSuspendedTime = NoWork;
            root.latestSuspendedTime = NoWork;
            root.latestPingedTime = NoWork;
            findNextExpirationTimeToWorkOn(NoWork, root);
            return;
        }
        if (earliestRemainingTime < root.latestPingedTime) {
            root.latestPingedTime = NoWork;
        }
        // Let's see if the previous latest known pending level was just flushed.
        var latestPendingTime = root.latestPendingTime;
        if (latestPendingTime !== NoWork) {
            if (latestPendingTime > earliestRemainingTime) {
                // We've flushed all the known pending levels.
                root.earliestPendingTime = root.latestPendingTime = NoWork;
            }
            else {
                var earliestPendingTime = root.earliestPendingTime;
                if (earliestPendingTime > earliestRemainingTime) {
                    // We've flushed the earliest known pending level. Set this to the
                    // latest pending time.
                    root.earliestPendingTime = root.latestPendingTime;
                }
            }
        }
        // Now let's handle the earliest remaining level in the whole tree. We need to
        // decide whether to treat it as a pending level or as suspended. Check
        // it falls within the range of known suspended levels.
        var earliestSuspendedTime = root.earliestSuspendedTime;
        if (earliestSuspendedTime === NoWork) {
            // There's no suspended work. Treat the earliest remaining level as a
            // pending level.
            markPendingPriorityLevel(root, earliestRemainingTime);
            findNextExpirationTimeToWorkOn(NoWork, root);
            return;
        }
        var latestSuspendedTime = root.latestSuspendedTime;
        if (earliestRemainingTime < latestSuspendedTime) {
            // The earliest remaining level is later than all the suspended work. That
            // means we've flushed all the suspended work.
            root.earliestSuspendedTime = NoWork;
            root.latestSuspendedTime = NoWork;
            root.latestPingedTime = NoWork;
            // There's no suspended work. Treat the earliest remaining level as a
            // pending level.
            markPendingPriorityLevel(root, earliestRemainingTime);
            findNextExpirationTimeToWorkOn(NoWork, root);
            return;
        }
        if (earliestRemainingTime > earliestSuspendedTime) {
            // The earliest remaining time is earlier than all the suspended work.
            // Treat it as a pending update.
            markPendingPriorityLevel(root, earliestRemainingTime);
            findNextExpirationTimeToWorkOn(NoWork, root);
            return;
        }
        // The earliest remaining time falls within the range of known suspended
        // levels. We should treat this as suspended work.
        findNextExpirationTimeToWorkOn(NoWork, root);
    }
    function hasLowerPriorityWork(root, erroredExpirationTime) {
        var latestPendingTime = root.latestPendingTime;
        var latestSuspendedTime = root.latestSuspendedTime;
        var latestPingedTime = root.latestPingedTime;
        return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
    }
    function isPriorityLevelSuspended(root, expirationTime) {
        var earliestSuspendedTime = root.earliestSuspendedTime;
        var latestSuspendedTime = root.latestSuspendedTime;
        return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
    }
    function markSuspendedPriorityLevel(root, suspendedTime) {
        root.didError = false;
        clearPing(root, suspendedTime);
        // First, check the known pending levels and update them if needed.
        var earliestPendingTime = root.earliestPendingTime;
        var latestPendingTime = root.latestPendingTime;
        if (earliestPendingTime === suspendedTime) {
            if (latestPendingTime === suspendedTime) {
                // Both known pending levels were suspended. Clear them.
                root.earliestPendingTime = root.latestPendingTime = NoWork;
            }
            else {
                // The earliest pending level was suspended. Clear by setting it to the
                // latest pending level.
                root.earliestPendingTime = latestPendingTime;
            }
        }
        else if (latestPendingTime === suspendedTime) {
            // The latest pending level was suspended. Clear by setting it to the
            // latest pending level.
            root.latestPendingTime = earliestPendingTime;
        }
        // Finally, update the known suspended levels.
        var earliestSuspendedTime = root.earliestSuspendedTime;
        var latestSuspendedTime = root.latestSuspendedTime;
        if (earliestSuspendedTime === NoWork) {
            // No other suspended levels.
            root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
        }
        else {
            if (earliestSuspendedTime < suspendedTime) {
                // This is the earliest suspended level.
                root.earliestSuspendedTime = suspendedTime;
            }
            else if (latestSuspendedTime > suspendedTime) {
                // This is the latest suspended level
                root.latestSuspendedTime = suspendedTime;
            }
        }
        findNextExpirationTimeToWorkOn(suspendedTime, root);
    }
    function markPingedPriorityLevel(root, pingedTime) {
        root.didError = false;
        // TODO: When we add back resuming, we need to ensure the progressed work
        // is thrown out and not reused during the restarted render. One way to
        // invalidate the progressed work is to restart at expirationTime + 1.
        var latestPingedTime = root.latestPingedTime;
        if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {
            root.latestPingedTime = pingedTime;
        }
        findNextExpirationTimeToWorkOn(pingedTime, root);
    }
    function clearPing(root, completedTime) {
        var latestPingedTime = root.latestPingedTime;
        if (latestPingedTime >= completedTime) {
            root.latestPingedTime = NoWork;
        }
    }
    function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
        var earliestExpirationTime = renderExpirationTime;
        var earliestPendingTime = root.earliestPendingTime;
        var earliestSuspendedTime = root.earliestSuspendedTime;
        if (earliestPendingTime > earliestExpirationTime) {
            earliestExpirationTime = earliestPendingTime;
        }
        if (earliestSuspendedTime > earliestExpirationTime) {
            earliestExpirationTime = earliestSuspendedTime;
        }
        return earliestExpirationTime;
    }
    function didExpireAtExpirationTime(root, currentTime) {
        var expirationTime = root.expirationTime;
        if (expirationTime !== NoWork && currentTime <= expirationTime) {
            // The root has expired. Flush all work up to the current time.
            root.nextExpirationTimeToWorkOn = currentTime;
        }
    }
    function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
        var earliestSuspendedTime = root.earliestSuspendedTime;
        var latestSuspendedTime = root.latestSuspendedTime;
        var earliestPendingTime = root.earliestPendingTime;
        var latestPingedTime = root.latestPingedTime;
        // Work on the earliest pending time. Failing that, work on the latest
        // pinged time.
        var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime;
        // If there is no pending or pinged work, check if there's suspended work
        // that's lower priority than what we just completed.
        if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {
            // The lowest priority suspended work is the work most likely to be
            // committed next. Let's start rendering it again, so that if it times out,
            // it's ready to commit.
            nextExpirationTimeToWorkOn = latestSuspendedTime;
        }
        var expirationTime = nextExpirationTimeToWorkOn;
        if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {
            // Expire using the earliest known expiration time.
            expirationTime = earliestSuspendedTime;
        }
        root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
        root.expirationTime = expirationTime;
    }
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
                if (props[propName] === undefined) {
                    props[propName] = defaultProps[propName];
                }
            }
            return props;
        }
        return baseProps;
    }
    function readLazyComponentType(lazyComponent) {
        var status = lazyComponent._status;
        var result = lazyComponent._result;
        switch (status) {
            case Resolved:
                {
                    var Component = result;
                    return Component;
                }
            case Rejected:
                {
                    var error = result;
                    throw error;
                }
            case Pending:
                {
                    var thenable = result;
                    throw thenable;
                }
            default:
                {
                    lazyComponent._status = Pending;
                    var ctor = lazyComponent._ctor;
                    var _thenable = ctor();
                    _thenable.then(function (moduleObject) {
                        if (lazyComponent._status === Pending) {
                            var defaultExport = moduleObject.default;
                            {
                                if (defaultExport === undefined) {
                                    warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                                }
                            }
                            lazyComponent._status = Resolved;
                            lazyComponent._result = defaultExport;
                        }
                    }, function (error) {
                        if (lazyComponent._status === Pending) {
                            lazyComponent._status = Rejected;
                            lazyComponent._result = error;
                        }
                    });
                    // Handle synchronous thenables.
                    switch (lazyComponent._status) {
                        case Resolved:
                            return lazyComponent._result;
                        case Rejected:
                            throw lazyComponent._result;
                    }
                    lazyComponent._result = _thenable;
                    throw _thenable;
                }
        }
    }
    var fakeInternalInstance = {};
    var isArray$1 = Array.isArray;
    // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent = void 0;
    var didWarnAboutUninitializedState = void 0;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
    var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
    var didWarnAboutUndefinedDerivedState = void 0;
    var warnOnUndefinedDerivedState = void 0;
    var warnOnInvalidCallback$1 = void 0;
    var didWarnAboutDirectlyAssigningPropsToState = void 0;
    var didWarnAboutContextTypeAndContextTypes = void 0;
    var didWarnAboutInvalidateContextType = void 0;
    {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();
        warnOnInvalidCallback$1 = function (callback, callerName) {
            if (callback === null || typeof callback === 'function') {
                return;
            }
            var key = callerName + '_' + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
            }
        };
        warnOnUndefinedDerivedState = function (type, partialState) {
            if (partialState === undefined) {
                var componentName = getComponentName(type) || 'Component';
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                    didWarnAboutUndefinedDerivedState.add(componentName);
                    warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
                }
            }
        };
        // This is so gross but it's at least non-critical and can be removed if
        // it causes problems. This is meant to give a nicer error message for
        // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
        // ...)) which otherwise throws a "_processChildContext is not a function"
        // exception.
        Object.defineProperty(fakeInternalInstance, '_processChildContext', {
            enumerable: false,
            value: function () {
                invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
            }
        });
        Object.freeze(fakeInternalInstance);
    }
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        {
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
            warnOnUndefinedDerivedState(ctor, partialState);
        }
        // Merge the partial state and the previous state.
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState;
        // Once the update queue is empty, persist the derived state onto the
        // base state.
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function (inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTime();
            var expirationTime = computeExpirationForFiber(currentTime, fiber);
            var update = createUpdate(expirationTime);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                {
                    warnOnInvalidCallback$1(callback, 'setState');
                }
                update.callback = callback;
            }
            flushPassiveEffects();
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
        },
        enqueueReplaceState: function (inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTime();
            var expirationTime = computeExpirationForFiber(currentTime, fiber);
            var update = createUpdate(expirationTime);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                {
                    warnOnInvalidCallback$1(callback, 'replaceState');
                }
                update.callback = callback;
            }
            flushPassiveEffects();
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
        },
        enqueueForceUpdate: function (inst, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTime();
            var expirationTime = computeExpirationForFiber(currentTime, fiber);
            var update = createUpdate(expirationTime);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                {
                    warnOnInvalidCallback$1(callback, 'forceUpdate');
                }
                update.callback = callback;
            }
            flushPassiveEffects();
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            startPhaseTimer(workInProgress, 'shouldComponentUpdate');
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            stopPhaseTimer();
            {
                !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
            }
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        {
            var name = getComponentName(ctor) || 'Component';
            var renderPresent = instance.render;
            if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === 'function') {
                    warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
                }
                else {
                    warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
                }
            }
            var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
            !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
            var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
            !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
            var noInstancePropTypes = !instance.propTypes;
            !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
            var noInstanceContextType = !instance.contextType;
            !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;
            var noInstanceContextTypes = !instance.contextTypes;
            !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
            }
            var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
            !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
                warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
            }
            var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
            !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
            var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
            !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
            var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
            !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
            var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
            !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
            var hasMutatedProps = instance.props !== newProps;
            !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
            var noInstanceDefaultProps = !instance.defaultProps;
            !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;
            if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
            }
            var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
            !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
            var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
            !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
            var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
            !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
            var _state = instance.state;
            if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
                warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
            }
            if (typeof instance.getChildContext === 'function') {
                !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
            }
        }
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        {
            instance._reactInternalInstance = fakeInternalInstance;
        }
    }
    function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = null;
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) {
            {
                if (contextType.$$typeof !== REACT_CONTEXT_TYPE && !didWarnAboutInvalidateContextType.has(ctor)) {
                    didWarnAboutInvalidateContextType.add(ctor);
                    warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext(). ' + 'Did you accidentally pass the Context.Provider instead?', getComponentName(ctor) || 'Component');
                }
            }
            context = readContext(contextType);
        }
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        // Instantiate twice to help detect side-effects.
        {
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                new ctor(props, context); // eslint-disable-line no-new
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        {
            if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
                var componentName = getComponentName(ctor) || 'Component';
                if (!didWarnAboutUninitializedState.has(componentName)) {
                    didWarnAboutUninitializedState.add(componentName);
                    warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
                }
            }
            // If new component APIs are defined, "unsafe" lifecycles won't be called.
            // Warn about these lifecycles if they are present.
            // Don't warn about react-lifecycles-compat polyfilled methods though.
            if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                    foundWillMountName = 'componentWillMount';
                }
                else if (typeof instance.UNSAFE_componentWillMount === 'function') {
                    foundWillMountName = 'UNSAFE_componentWillMount';
                }
                if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                    foundWillReceivePropsName = 'componentWillReceiveProps';
                }
                else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
                }
                if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                    foundWillUpdateName = 'componentWillUpdate';
                }
                else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                    var _componentName = getComponentName(ctor) || 'Component';
                    var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                    if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                        didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                        warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
                    }
                }
            }
        }
        // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) {
            cacheContext(workInProgress, unmaskedContext, context);
        }
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        startPhaseTimer(workInProgress, 'componentWillMount');
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
        }
        stopPhaseTimer();
        if (oldState !== instance.state) {
            {
                warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        startPhaseTimer(workInProgress, 'componentWillReceiveProps');
        if (typeof instance.componentWillReceiveProps === 'function') {
            instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        stopPhaseTimer();
        if (instance.state !== oldState) {
            {
                var componentName = getComponentName(workInProgress.type) || 'Component';
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                    didWarnAboutStateAssignmentForComponent.add(componentName);
                    warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
                }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        {
            checkClassInstance(workInProgress, ctor, newProps);
        }
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) {
            instance.context = readContext(contextType);
        }
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        {
            if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || 'Component';
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                    didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                    warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
                }
            }
            if (workInProgress.mode & StrictMode) {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
            }
            if (warnAboutDeprecatedLifecycles) {
                ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
            }
        }
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
            processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
            instance.state = workInProgress.memoizedState;
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        }
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance);
            // If we had additional state updates during this life-cycle, let's
            // process them now.
            updateQueue = workInProgress.updateQueue;
            if (updateQueue !== null) {
                processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
                instance.state = workInProgress.memoizedState;
            }
        }
        if (typeof instance.componentDidMount === 'function') {
            workInProgress.effectTag |= Update;
        }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = void 0;
        if (typeof contextType === 'object' && contextType !== null) {
            nextContext = readContext(contextType);
        }
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
        // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
            }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
            processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
            newState = workInProgress.memoizedState;
        }
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
                workInProgress.effectTag |= Update;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                startPhaseTimer(workInProgress, 'componentWillMount');
                if (typeof instance.componentWillMount === 'function') {
                    instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === 'function') {
                    instance.UNSAFE_componentWillMount();
                }
                stopPhaseTimer();
            }
            if (typeof instance.componentDidMount === 'function') {
                workInProgress.effectTag |= Update;
            }
        }
        else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') {
                workInProgress.effectTag |= Update;
            }
            // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        }
        // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = void 0;
        if (typeof contextType === 'object' && contextType !== null) {
            nextContext = readContext(contextType);
        }
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
        // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
            }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        var updateQueue = workInProgress.updateQueue;
        if (updateQueue !== null) {
            processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
            newState = workInProgress.memoizedState;
        }
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.effectTag |= Update;
                }
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.effectTag |= Snapshot;
                }
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                startPhaseTimer(workInProgress, 'componentWillUpdate');
                if (typeof instance.componentWillUpdate === 'function') {
                    instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                    instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
                stopPhaseTimer();
            }
            if (typeof instance.componentDidUpdate === 'function') {
                workInProgress.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                workInProgress.effectTag |= Snapshot;
            }
        }
        else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.effectTag |= Update;
                }
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                    workInProgress.effectTag |= Snapshot;
                }
            }
            // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        }
        // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps = void 0;
    var didWarnAboutGenerators = void 0;
    var didWarnAboutStringRefInStrictMode = void 0;
    var ownerHasKeyUseWarning = void 0;
    var ownerHasFunctionTypeWarning = void 0;
    var warnForMissingKey = function (child) { };
    {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefInStrictMode = {};
        /**
         * Warn if there's no key explicitly set on dynamic arrays of children or
         * object keys are not valid. This allows us to keep track of children between
         * updates.
         */
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function (child) {
            if (child === null || typeof child !== 'object') {
                return;
            }
            if (!child._store || child._store.validated || child.key != null) {
                return;
            }
            !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            child._store.validated = true;
            var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
        };
    }
    var isArray = Array.isArray;
    function coerceRef(returnFiber, current$$1, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            {
                if (returnFiber.mode & StrictMode) {
                    var componentName = getComponentName(returnFiber.type) || 'Component';
                    if (!didWarnAboutStringRefInStrictMode[componentName]) {
                        warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                        didWarnAboutStringRefInStrictMode[componentName] = true;
                    }
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst = void 0;
                if (owner) {
                    var ownerFiber = owner;
                    !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs. Did you mean to use React.forwardRef()?') : void 0;
                    inst = ownerFiber.stateNode;
                }
                !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
                var stringRef = '' + mixedRef;
                // Check if previous string ref matches new string ref
                if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
                    return current$$1.ref;
                }
                var ref = function (value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) {
                        // This is a lazy pooled frozen object, so we need to initialize.
                        refs = inst.refs = {};
                    }
                    if (value === null) {
                        delete refs[stringRef];
                    }
                    else {
                        refs[stringRef] = value;
                    }
                };
                ref._stringRef = stringRef;
                return ref;
            }
            else {
                !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
                !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') {
            var addendum = '';
            {
                addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
            }
            invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
        }
    }
    function warnOnFunctionType() {
        var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();
        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
            return;
        }
        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
    }
    // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
                // Noop.
                return;
            }
            // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            }
            else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
                // Noop.
                return null;
            }
            // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
                if (existingChild.key !== null) {
                    existingChildren.set(existingChild.key, existingChild);
                }
                else {
                    existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps, expirationTime) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
                // Noop.
                return lastPlacedIndex;
            }
            var current$$1 = newFiber.alternate;
            if (current$$1 !== null) {
                var oldIndex = current$$1.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.effectTag = Placement;
                    return lastPlacedIndex;
                }
                else {
                    // This item can stay in place.
                    return oldIndex;
                }
            }
            else {
                // This is an insertion.
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.effectTag = Placement;
            }
            return newFiber;
        }
        function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
            if (current$$1 === null || current$$1.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
            }
            else {
                // Update
                var existing = useFiber(current$$1, textContent, expirationTime);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current$$1, element, expirationTime) {
            if (current$$1 !== null && current$$1.elementType === element.type) {
                // Move based on index
                var existing = useFiber(current$$1, element.props, expirationTime);
                existing.ref = coerceRef(returnFiber, current$$1, element);
                existing.return = returnFiber;
                {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                }
                return existing;
            }
            else {
                // Insert
                var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
                created.ref = coerceRef(returnFiber, current$$1, element);
                created.return = returnFiber;
                return created;
            }
        }
        function updatePortal(returnFiber, current$$1, portal, expirationTime) {
            if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
            }
            else {
                // Update
                var existing = useFiber(current$$1, portal.children || [], expirationTime);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
            if (current$$1 === null || current$$1.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
                created.return = returnFiber;
                return created;
            }
            else {
                // Update
                var existing = useFiber(current$$1, fragment, expirationTime);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, expirationTime) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        {
                            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                            _created.ref = coerceRef(returnFiber, null, newChild);
                            _created.return = returnFiber;
                            return _created;
                        }
                    case REACT_PORTAL_TYPE:
                        {
                            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                            _created2.return = returnFiber;
                            return _created2;
                        }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
                if (typeof newChild === 'function') {
                    warnOnFunctionType();
                }
            }
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) {
                    return null;
                }
                return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        {
                            if (newChild.key === key) {
                                if (newChild.type === REACT_FRAGMENT_TYPE) {
                                    return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                                }
                                return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                            }
                            else {
                                return null;
                            }
                        }
                    case REACT_PORTAL_TYPE:
                        {
                            if (newChild.key === key) {
                                return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                            }
                            else {
                                return null;
                            }
                        }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) {
                        return null;
                    }
                    return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
                if (typeof newChild === 'function') {
                    warnOnFunctionType();
                }
            }
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        {
                            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                            if (newChild.type === REACT_FRAGMENT_TYPE) {
                                return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                            }
                            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                        }
                    case REACT_PORTAL_TYPE:
                        {
                            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                        }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
                if (typeof newChild === 'function') {
                    warnOnFunctionType();
                }
            }
            return null;
        }
        /**
         * Warns if there is a duplicate or missing key
         */
        function warnOnInvalidKey(child, knownKeys) {
            {
                if (typeof child !== 'object' || child === null) {
                    return knownKeys;
                }
                switch (child.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        warnForMissingKey(child);
                        var key = child.key;
                        if (typeof key !== 'string') {
                            break;
                        }
                        if (knownKeys === null) {
                            knownKeys = new Set();
                            knownKeys.add(key);
                            break;
                        }
                        if (!knownKeys.has(key)) {
                            knownKeys.add(key);
                            break;
                        }
                        warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
                        break;
                    default:
                        break;
                }
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
            // This algorithm can't optimize by searching from both ends since we
            // don't have backpointers on fibers. I'm trying to see how far we can get
            // with that model. If it ends up not being worth the tradeoffs, we can
            // add it later.
            // Even with a two ended optimization, we'd want to optimize for the case
            // where there are few changes and brute force the comparison instead of
            // going for the Map. It'd like to explore hitting that path first in
            // forward-only mode and only go for the Map once we notice that we need
            // lots of look ahead. This doesn't handle reversal as well as two ended
            // search but that's unusual. Besides, for the two ended optimization to
            // work on Iterables, we'd need to copy the whole set.
            // In this first iteration, we'll just live with hitting the bad case
            // (adding everything to a Map) in for every insert/move.
            // If you change this code, also update reconcileChildrenIterator() which
            // uses the same algorithm.
            {
                // First, validate keys.
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                    var child = newChildren[i];
                    knownKeys = warnOnInvalidKey(child, knownKeys);
                }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                }
                else {
                    nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) {
                        oldFiber = nextOldFiber;
                    }
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) {
                        // We matched the slot, but we didn't reuse the existing fiber, so we
                        // need to delete the existing child.
                        deleteChild(returnFiber, oldFiber);
                    }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = newFiber;
                }
                else {
                    // TODO: Defer siblings if we're not at the right index for this slot.
                    // I.e. if we had null values before, then we want to defer this
                    // for each null value. However, we also don't want to call updateSlot
                    // with the previous one.
                    previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for (; newIdx < newChildren.length; newIdx++) {
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                    if (!_newFiber) {
                        continue;
                    }
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = _newFiber;
                    }
                    else {
                        previousNewFiber.sibling = _newFiber;
                    }
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            }
            // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            // Keep scanning and use the map to restore deleted items as moves.
            for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
                if (_newFiber2) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) {
                            // The new fiber is a work in progress, but if there exists a
                            // current, that means that we reused the fiber. We need to delete
                            // it from the child list so that we don't add it to the deletion
                            // list.
                            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                        }
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                        resultingFirstChild = _newFiber2;
                    }
                    else {
                        previousNewFiber.sibling = _newFiber2;
                    }
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) {
                // Any existing children that weren't consumed above were deleted. We need
                // to add them to the deletion list.
                existingChildren.forEach(function (child) {
                    return deleteChild(returnFiber, child);
                });
            }
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            {
                // We don't support rendering Generators because it's a mutation.
                // See https://github.com/facebook/react/issues/12995
                if (typeof Symbol === 'function' &&
                    // $FlowFixMe Flow doesn't know about toStringTag
                    newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                    !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
                    didWarnAboutGenerators = true;
                }
                // Warn about using Maps as children
                if (newChildrenIterable.entries === iteratorFn) {
                    !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
                    didWarnAboutMaps = true;
                }
                // First, validate keys.
                // We'll get a different iterator later for the main pass.
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                    var knownKeys = null;
                    var _step = _newChildren.next();
                    for (; !_step.done; _step = _newChildren.next()) {
                        var child = _step.value;
                        knownKeys = warnOnInvalidKey(child, knownKeys);
                    }
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                }
                else {
                    nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (!oldFiber) {
                        oldFiber = nextOldFiber;
                    }
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) {
                        // We matched the slot, but we didn't reuse the existing fiber, so we
                        // need to delete the existing child.
                        deleteChild(returnFiber, oldFiber);
                    }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = newFiber;
                }
                else {
                    // TODO: Defer siblings if we're not at the right index for this slot.
                    // I.e. if we had null values before, then we want to defer this
                    // for each null value. However, we also don't want to call updateSlot
                    // with the previous one.
                    previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for (; !step.done; newIdx++, step = newChildren.next()) {
                    var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                    if (_newFiber3 === null) {
                        continue;
                    }
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                        // TODO: Move out of the loop. This only happens for the first run.
                        resultingFirstChild = _newFiber3;
                    }
                    else {
                        previousNewFiber.sibling = _newFiber3;
                    }
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            }
            // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            // Keep scanning and use the map to restore deleted items as moves.
            for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) {
                            // The new fiber is a work in progress, but if there exists a
                            // current, that means that we reused the fiber. We need to delete
                            // it from the child list so that we don't add it to the deletion
                            // list.
                            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                        }
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) {
                        resultingFirstChild = _newFiber4;
                    }
                    else {
                        previousNewFiber.sibling = _newFiber4;
                    }
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) {
                // Any existing children that weren't consumed above were deleted. We need
                // to add them to the deletion list.
                existingChildren.forEach(function (child) {
                    return deleteChild(returnFiber, child);
                });
            }
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent, expirationTime);
                existing.return = returnFiber;
                return existing;
            }
            // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                        existing.ref = coerceRef(returnFiber, child, element);
                        existing.return = returnFiber;
                        {
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                        }
                        return existing;
                    }
                    else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                }
                else {
                    deleteChild(returnFiber, child);
                }
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
                created.return = returnFiber;
                return created;
            }
            else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || [], expirationTime);
                        existing.return = returnFiber;
                        return existing;
                    }
                    else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                }
                else {
                    deleteChild(returnFiber, child);
                }
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
        }
        // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
            }
            // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                    case REACT_PORTAL_TYPE:
                        return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
                }
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
            }
            if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
                if (typeof newChild === 'function') {
                    warnOnFunctionType();
                }
            }
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
                // If the new child is undefined, and the return fiber is a composite
                // component, throw an error. If Fiber return types are disabled,
                // we already threw above.
                switch (returnFiber.tag) {
                    case ClassComponent:
                        {
                            {
                                var instance = returnFiber.stateNode;
                                if (instance.render._isMockFunction) {
                                    // We allow auto-mocks to proceed as if they're returning null.
                                    break;
                                }
                            }
                        }
                    // Intentionally fall through to the next case, which handles both
                    // functions and classes
                    // eslint-disable-next-lined no-fallthrough
                    case FunctionComponent:
                        {
                            var Component = returnFiber.type;
                            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
                        }
                }
            }
            // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current$$1, workInProgress) {
        !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;
        if (workInProgress.child === null) {
            return;
        }
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type, rootInstance);
        // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) {
            return;
        }
        // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) {
            return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var NoEffect$1 = /*             */ 0;
    var UnmountSnapshot = /*      */ 2;
    var UnmountMutation = /*      */ 4;
    var MountMutation = /*        */ 8;
    var UnmountLayout = /*        */ 16;
    var MountLayout = /*          */ 32;
    var MountPassive = /*         */ 64;
    var UnmountPassive = /*       */ 128;
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var didWarnAboutMismatchedHooksForComponent = void 0;
    {
        didWarnAboutMismatchedHooksForComponent = new Set();
    }
    // These are set right before calling the component.
    var renderExpirationTime = NoWork;
    // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null;
    // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var nextCurrentHook = null;
    var firstWorkInProgressHook = null;
    var workInProgressHook = null;
    var nextWorkInProgressHook = null;
    var remainingExpirationTime = NoWork;
    var componentUpdateQueue = null;
    var sideEffectTag = 0;
    // Updates scheduled during render will trigger an immediate re-render at the
    // end of the current pass. We can't store these updates on the normal queue,
    // because if the work is aborted, they should be discarded. Because this is
    // a relatively rare case, we also don't want to add an additional field to
    // either the hook or queue object types. So we store them in a lazily create
    // map of queue -> render-phase updates, which are discarded once the component
    // completes without re-rendering.
    // Whether an update was scheduled during the currently executing render pass.
    var didScheduleRenderPhaseUpdate = false;
    // Lazily created map of render-phase updates
    var renderPhaseUpdates = null;
    // Counter to prevent infinite loops.
    var numberOfReRenders = 0;
    var RE_RENDER_LIMIT = 25;
    // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null;
    // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    function mountHookTypesDev() {
        {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
                hookTypesDev = [hookName];
            }
            else {
                hookTypesDev.push(hookName);
            }
        }
    }
    function updateHookTypesDev() {
        {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                    warnOnHookMismatchInDev(hookName);
                }
            }
        }
    }
    function warnOnHookMismatchInDev(currentHookName) {
        {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                    var table = '';
                    var secondColumnStart = 30;
                    for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                        var oldHookName = hookTypesDev[i];
                        var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                        var row = i + 1 + '. ' + oldHookName;
                        // Extra space so second column lines up
                        // lol @ IE not supporting String#repeat
                        while (row.length < secondColumnStart) {
                            row += ' ';
                        }
                        row += newHookName + '\n';
                        table += row;
                    }
                    warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
                }
            }
        }
    }
    function throwInvalidHookError() {
        invariant(false, 'Hooks can only be called inside the body of a function component. (https://fb.me/react-invalid-hook-call)');
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null) {
            {
                warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
            }
            return false;
        }
        {
            // Don't bother comparing lengths in prod because these arrays should be
            // passed inline.
            if (nextDeps.length !== prevDeps.length) {
                warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, '[' + nextDeps.join(', ') + ']', '[' + prevDeps.join(', ') + ']');
            }
        }
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (is(nextDeps[i], prevDeps[i])) {
                continue;
            }
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
        renderExpirationTime = nextRenderExpirationTime;
        currentlyRenderingFiber$1 = workInProgress;
        nextCurrentHook = current !== null ? current.memoizedState : null;
        {
            hookTypesDev = current !== null ? current._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
        }
        // The following should have already been reset
        // currentHook = null;
        // workInProgressHook = null;
        // remainingExpirationTime = NoWork;
        // componentUpdateQueue = null;
        // didScheduleRenderPhaseUpdate = false;
        // renderPhaseUpdates = null;
        // numberOfReRenders = 0;
        // sideEffectTag = 0;
        // TODO Warn if no hooks are used at all during mount, then some are used during update.
        // Currently we will identify the update render as a mount because nextCurrentHook === null.
        // This is tricky because it's valid for certain types of components (e.g. React.lazy)
        // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
        // Non-stateful hooks (e.g. context) don't get added to memoizedState,
        // so nextCurrentHook would be null during updates and mounts.
        {
            if (nextCurrentHook !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            }
            else if (hookTypesDev !== null) {
                // This dispatcher handles an edge case where a component is updating,
                // but no stateful hooks have been used.
                // We want to match the production code behavior (which will use HooksDispatcherOnMount),
                // but with the extra DEV validation to ensure hooks ordering hasn't changed.
                // This dispatcher does that.
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            }
            else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
        }
        var children = Component(props, refOrContext);
        if (didScheduleRenderPhaseUpdate) {
            do {
                didScheduleRenderPhaseUpdate = false;
                numberOfReRenders += 1;
                // Start over from the beginning of the list
                nextCurrentHook = current !== null ? current.memoizedState : null;
                nextWorkInProgressHook = firstWorkInProgressHook;
                currentHook = null;
                workInProgressHook = null;
                componentUpdateQueue = null;
                {
                    // Also validate hook order for cascading updates.
                    hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
                children = Component(props, refOrContext);
            } while (didScheduleRenderPhaseUpdate);
            renderPhaseUpdates = null;
            numberOfReRenders = 0;
        }
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        var renderedWork = currentlyRenderingFiber$1;
        renderedWork.memoizedState = firstWorkInProgressHook;
        renderedWork.expirationTime = remainingExpirationTime;
        renderedWork.updateQueue = componentUpdateQueue;
        renderedWork.effectTag |= sideEffectTag;
        {
            renderedWork._debugHookTypes = hookTypesDev;
        }
        // This check uses currentHook so that it works the same in DEV and prod bundles.
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        nextCurrentHook = null;
        firstWorkInProgressHook = null;
        workInProgressHook = null;
        nextWorkInProgressHook = null;
        {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
        }
        remainingExpirationTime = NoWork;
        componentUpdateQueue = null;
        sideEffectTag = 0;
        // These were reset above
        // didScheduleRenderPhaseUpdate = false;
        // renderPhaseUpdates = null;
        // numberOfReRenders = 0;
        !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;
        return children;
    }
    function bailoutHooks(current, workInProgress, expirationTime) {
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.effectTag &= ~(Passive | Update);
        if (current.expirationTime <= expirationTime) {
            current.expirationTime = NoWork;
        }
    }
    function resetHooks() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        // This is used to reset the state of this module when a component throws.
        // It's also called inside mountIndeterminateComponent if we determine the
        // component is a module-style component.
        renderExpirationTime = NoWork;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        nextCurrentHook = null;
        firstWorkInProgressHook = null;
        workInProgressHook = null;
        nextWorkInProgressHook = null;
        {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
        }
        remainingExpirationTime = NoWork;
        componentUpdateQueue = null;
        sideEffectTag = 0;
        didScheduleRenderPhaseUpdate = false;
        renderPhaseUpdates = null;
        numberOfReRenders = 0;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            queue: null,
            baseUpdate: null,
            next: null
        };
        if (workInProgressHook === null) {
            // This is the first hook in the list
            firstWorkInProgressHook = workInProgressHook = hook;
        }
        else {
            // Append to the end of the list
            workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
            nextCurrentHook = currentHook !== null ? currentHook.next : null;
        }
        else {
            // Clone from the current hook.
            !(nextCurrentHook !== null) ? invariant(false, 'Rendered more hooks than during the previous render.') : void 0;
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                queue: currentHook.queue,
                baseUpdate: currentHook.baseUpdate,
                next: null
            };
            if (workInProgressHook === null) {
                // This is the first hook in the list.
                workInProgressHook = firstWorkInProgressHook = newHook;
            }
            else {
                // Append to the end of the list.
                workInProgressHook = workInProgressHook.next = newHook;
            }
            nextCurrentHook = currentHook.next;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState = void 0;
        if (init !== undefined) {
            initialState = init(initialArg);
        }
        else {
            initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            last: null,
            dispatch: null,
            eagerReducer: reducer,
            eagerState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, 
        // Flow doesn't know this is non-null, but we do.
        currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        !(queue !== null) ? invariant(false, 'Should have a queue. This is likely a bug in React. Please file an issue.') : void 0;
        if (numberOfReRenders > 0) {
            // This is a re-render. Apply the new render phase updates to the previous
            var _dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
                // Render phase updates are stored in a map of queue -> linked list
                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                if (firstRenderPhaseUpdate !== undefined) {
                    renderPhaseUpdates.delete(queue);
                    var newState = hook.memoizedState;
                    var update = firstRenderPhaseUpdate;
                    do {
                        // Process this render phase update. We don't have to check the
                        // priority because it will always be the same as the current
                        // render's.
                        var _action = update.action;
                        newState = reducer(newState, _action);
                        update = update.next;
                    } while (update !== null);
                    // Mark that the fiber performed work, but only if the new state is
                    // different from the current state.
                    if (!is(newState, hook.memoizedState)) {
                        markWorkInProgressReceivedUpdate();
                    }
                    hook.memoizedState = newState;
                    // Don't persist the state accumlated from the render phase updates to
                    // the base state unless the queue is empty.
                    // TODO: Not sure if this is the desired semantics, but it's what we
                    // do for gDSFP. I can't remember why.
                    if (hook.baseUpdate === queue.last) {
                        hook.baseState = newState;
                    }
                    queue.eagerReducer = reducer;
                    queue.eagerState = newState;
                    return [newState, _dispatch];
                }
            }
            return [hook.memoizedState, _dispatch];
        }
        // The last update in the entire queue
        var last = queue.last;
        // The last update that is part of the base state.
        var baseUpdate = hook.baseUpdate;
        var baseState = hook.baseState;
        // Find the first unprocessed update.
        var first = void 0;
        if (baseUpdate !== null) {
            if (last !== null) {
                // For the first update, the queue is a circular linked list where
                // `queue.last.next = queue.first`. Once the first update commits, and
                // the `baseUpdate` is no longer empty, we can unravel the list.
                last.next = null;
            }
            first = baseUpdate.next;
        }
        else {
            first = last !== null ? last.next : null;
        }
        if (first !== null) {
            var _newState = baseState;
            var newBaseState = null;
            var newBaseUpdate = null;
            var prevUpdate = baseUpdate;
            var _update = first;
            var didSkip = false;
            do {
                var updateExpirationTime = _update.expirationTime;
                if (updateExpirationTime < renderExpirationTime) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    if (!didSkip) {
                        didSkip = true;
                        newBaseUpdate = prevUpdate;
                        newBaseState = _newState;
                    }
                    // Update the remaining priority in the queue.
                    if (updateExpirationTime > remainingExpirationTime) {
                        remainingExpirationTime = updateExpirationTime;
                    }
                }
                else {
                    // Process this update.
                    if (_update.eagerReducer === reducer) {
                        // If this update was processed eagerly, and its reducer matches the
                        // current reducer, we can use the eagerly computed state.
                        _newState = _update.eagerState;
                    }
                    else {
                        var _action2 = _update.action;
                        _newState = reducer(_newState, _action2);
                    }
                }
                prevUpdate = _update;
                _update = _update.next;
            } while (_update !== null && _update !== first);
            if (!didSkip) {
                newBaseUpdate = prevUpdate;
                newBaseState = _newState;
            }
            // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!is(_newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = _newState;
            hook.baseUpdate = newBaseUpdate;
            hook.baseState = newBaseState;
            queue.eagerReducer = reducer;
            queue.eagerState = _newState;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') {
            initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            last: null,
            dispatch: null,
            eagerReducer: basicStateReducer,
            eagerState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, 
        // Flow doesn't know this is non-null, but we do.
        currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer, initialState);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            componentUpdateQueue.lastEffect = effect.next = effect;
        }
        else {
            var _lastEffect = componentUpdateQueue.lastEffect;
            if (_lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
            }
            else {
                var firstEffect = _lastEffect.next;
                _lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = { current: initialValue };
        {
            Object.seal(ref);
        }
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        sideEffectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(NoEffect$1, create, destroy, nextDeps);
                    return;
                }
            }
        }
        sideEffectTag |= fiberEffectTag;
        hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }
    function updateEffect(create, deps) {
        return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function () {
                refCallback(null);
            };
        }
        else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            {
                !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function () {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        {
            !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
        }
        // TODO: If deps are provided, should we skip comparing the ref itself?
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        {
            !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
        }
        // TODO: If deps are provided, should we skip comparing the ref itself?
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
        // This hook is normally a no-op.
        // The react-debug-hooks package injects its own implementation
        // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                }
            }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            // Assume these are defined. If they're not, areHookInputsEqual will warn.
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                }
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
    }
    // in a test-like environment, we want to warn if dispatchAction()
    // is called outside of a batchedUpdates/TestUtils.act(...) call.
    var shouldWarnForUnbatchedSetState = false;
    {
        // jest isn't a 'global', it's just exposed to tests via a wrapped function
        // further, this isn't a test file, so flow doesn't recognize the symbol. So...
        // $FlowExpectedError - because requirements don't give a damn about your type sigs.
        if ('undefined' !== typeof jest) {
            shouldWarnForUnbatchedSetState = true;
        }
    }
    function dispatchAction(fiber, queue, action) {
        !(numberOfReRenders < RE_RENDER_LIMIT) ? invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.') : void 0;
        {
            !(arguments.length <= 3) ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
        }
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            // This is a render phase update. Stash it in a lazily-created map of
            // queue -> linked list of updates. After this render pass, we'll restart
            // and apply the stashed updates on top of the work-in-progress hook.
            didScheduleRenderPhaseUpdate = true;
            var update = {
                expirationTime: renderExpirationTime,
                action: action,
                eagerReducer: null,
                eagerState: null,
                next: null
            };
            if (renderPhaseUpdates === null) {
                renderPhaseUpdates = new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === undefined) {
                renderPhaseUpdates.set(queue, update);
            }
            else {
                // Append the update to the end of the list.
                var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
                while (lastRenderPhaseUpdate.next !== null) {
                    lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                }
                lastRenderPhaseUpdate.next = update;
            }
        }
        else {
            flushPassiveEffects();
            var currentTime = requestCurrentTime();
            var _expirationTime = computeExpirationForFiber(currentTime, fiber);
            var _update2 = {
                expirationTime: _expirationTime,
                action: action,
                eagerReducer: null,
                eagerState: null,
                next: null
            };
            // Append the update to the end of the list.
            var _last = queue.last;
            if (_last === null) {
                // This is the first update. Create a circular list.
                _update2.next = _update2;
            }
            else {
                var first = _last.next;
                if (first !== null) {
                    // Still circular.
                    _update2.next = first;
                }
                _last.next = _update2;
            }
            queue.last = _update2;
            if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var _eagerReducer = queue.eagerReducer;
                if (_eagerReducer !== null) {
                    var prevDispatcher = void 0;
                    {
                        prevDispatcher = ReactCurrentDispatcher$1.current;
                        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    }
                    try {
                        var currentState = queue.eagerState;
                        var _eagerState = _eagerReducer(currentState, action);
                        // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        _update2.eagerReducer = _eagerReducer;
                        _update2.eagerState = _eagerState;
                        if (is(_eagerState, currentState)) {
                            // Fast path. We can bail out without scheduling React to re-render.
                            // It's still possible that we'll need to rebase this update later,
                            // if the component re-renders for a different reason and by that
                            // time the reducer has changed.
                            return;
                        }
                    }
                    catch (error) {
                        // Suppress the error. It will throw again in the render phase.
                    }
                    finally {
                        {
                            ReactCurrentDispatcher$1.current = prevDispatcher;
                        }
                    }
                }
            }
            {
                if (shouldWarnForUnbatchedSetState === true) {
                    warnIfNotCurrentlyBatchingInDev(fiber);
                }
            }
            scheduleWork(fiber, _expirationTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    {
        var warnInvalidContextAccess = function () {
            warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
        };
        var warnInvalidHookAccess = function () {
            warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
        };
        HooksDispatcherOnMountInDEV = {
            readContext: function (context, observedBits) {
                return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback';
                mountHookTypesDev();
                return mountCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext';
                mountHookTypesDev();
                return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect';
                mountHookTypesDev();
                return mountEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle';
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect';
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo';
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                    return mountMemo(create, deps);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useReducer: function (reducer, initialArg, init) {
                currentHookNameInDev = 'useReducer';
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                    return mountReducer(reducer, initialArg, init);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useRef: function (initialValue) {
                currentHookNameInDev = 'useRef';
                mountHookTypesDev();
                return mountRef(initialValue);
            },
            useState: function (initialState) {
                currentHookNameInDev = 'useState';
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                    return mountState(initialState);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue';
                mountHookTypesDev();
                return mountDebugValue(value, formatterFn);
            }
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function (context, observedBits) {
                return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback';
                updateHookTypesDev();
                return mountCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext';
                updateHookTypesDev();
                return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect';
                updateHookTypesDev();
                return mountEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle';
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect';
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo';
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                    return mountMemo(create, deps);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useReducer: function (reducer, initialArg, init) {
                currentHookNameInDev = 'useReducer';
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                    return mountReducer(reducer, initialArg, init);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useRef: function (initialValue) {
                currentHookNameInDev = 'useRef';
                updateHookTypesDev();
                return mountRef(initialValue);
            },
            useState: function (initialState) {
                currentHookNameInDev = 'useState';
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                    return mountState(initialState);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue';
                updateHookTypesDev();
                return mountDebugValue(value, formatterFn);
            }
        };
        HooksDispatcherOnUpdateInDEV = {
            readContext: function (context, observedBits) {
                return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback';
                updateHookTypesDev();
                return updateCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext';
                updateHookTypesDev();
                return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect';
                updateHookTypesDev();
                return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle';
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect';
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo';
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                    return updateMemo(create, deps);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useReducer: function (reducer, initialArg, init) {
                currentHookNameInDev = 'useReducer';
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                    return updateReducer(reducer, initialArg, init);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useRef: function (initialValue) {
                currentHookNameInDev = 'useRef';
                updateHookTypesDev();
                return updateRef(initialValue);
            },
            useState: function (initialState) {
                currentHookNameInDev = 'useState';
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                    return updateState(initialState);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue';
                updateHookTypesDev();
                return updateDebugValue(value, formatterFn);
            }
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function (context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback';
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext';
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect';
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle';
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect';
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo';
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                    return mountMemo(create, deps);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useReducer: function (reducer, initialArg, init) {
                currentHookNameInDev = 'useReducer';
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                    return mountReducer(reducer, initialArg, init);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useRef: function (initialValue) {
                currentHookNameInDev = 'useRef';
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
            },
            useState: function (initialState) {
                currentHookNameInDev = 'useState';
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                    return mountState(initialState);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue';
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue(value, formatterFn);
            }
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function (context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
            },
            useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback';
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
            },
            useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext';
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
            },
            useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect';
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
            },
            useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle';
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect';
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
            },
            useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo';
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                    return updateMemo(create, deps);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useReducer: function (reducer, initialArg, init) {
                currentHookNameInDev = 'useReducer';
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                    return updateReducer(reducer, initialArg, init);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useRef: function (initialValue) {
                currentHookNameInDev = 'useRef';
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef(initialValue);
            },
            useState: function (initialState) {
                currentHookNameInDev = 'useState';
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                    return updateState(initialState);
                }
                finally {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                }
            },
            useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue';
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue(value, formatterFn);
            }
        };
    }
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        if (!enableProfilerTimer) {
            return;
        }
        commitTime = unstable_now();
    }
    function startProfilerTimer(fiber) {
        if (!enableProfilerTimer) {
            return;
        }
        profilerStartTime = unstable_now();
        if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = unstable_now();
        }
    }
    function stopProfilerTimerIfRunning(fiber) {
        if (!enableProfilerTimer) {
            return;
        }
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (!enableProfilerTimer) {
            return;
        }
        if (profilerStartTime >= 0) {
            var elapsedTime = unstable_now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
        }
    }
    // The deepest Fiber on the stack involved in a hydration context.
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        if (!supportsHydration) {
            return false;
        }
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber) {
        if (!supportsHydration) {
            return false;
        }
        var suspenseInstance = fiber.stateNode;
        nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
        popToNextHostParent(fiber);
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        {
            switch (returnFiber.tag) {
                case HostRoot:
                    didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                    break;
                case HostComponent:
                    didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                    break;
            }
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.effectTag = Deletion;
        // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        }
        else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag |= Placement;
        {
            switch (returnFiber.tag) {
                case HostRoot:
                    {
                        var parentContainer = returnFiber.stateNode.containerInfo;
                        switch (fiber.tag) {
                            case HostComponent:
                                var type = fiber.type;
                                var props = fiber.pendingProps;
                                didNotFindHydratableContainerInstance(parentContainer, type, props);
                                break;
                            case HostText:
                                var text = fiber.pendingProps;
                                didNotFindHydratableContainerTextInstance(parentContainer, text);
                                break;
                            case SuspenseComponent:
                                break;
                        }
                        break;
                    }
                case HostComponent:
                    {
                        var parentType = returnFiber.type;
                        var parentProps = returnFiber.memoizedProps;
                        var parentInstance = returnFiber.stateNode;
                        switch (fiber.tag) {
                            case HostComponent:
                                var _type = fiber.type;
                                var _props = fiber.pendingProps;
                                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                                break;
                            case HostText:
                                var _text = fiber.pendingProps;
                                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                                break;
                            case SuspenseComponent:
                                didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                                break;
                        }
                        break;
                    }
                default:
                    return;
            }
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
            case HostComponent:
                {
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    var instance = canHydrateInstance(nextInstance, type, props);
                    if (instance !== null) {
                        fiber.stateNode = instance;
                        return true;
                    }
                    return false;
                }
            case HostText:
                {
                    var text = fiber.pendingProps;
                    var textInstance = canHydrateTextInstance(nextInstance, text);
                    if (textInstance !== null) {
                        fiber.stateNode = textInstance;
                        return true;
                    }
                    return false;
                }
            case SuspenseComponent:
                {
                    if (enableSuspenseServerRenderer) {
                        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                        if (suspenseInstance !== null) {
                            // Downgrade the tag to a dehydrated component until we've hydrated it.
                            fiber.tag = DehydratedSuspenseComponent;
                            fiber.stateNode = suspenseInstance;
                            return true;
                        }
                    }
                    return false;
                }
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
            return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            }
            // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        if (!supportsHydration) {
            invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
        }
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload;
        // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) {
            return true;
        }
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        if (!supportsHydration) {
            invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
        }
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        {
            if (shouldUpdate) {
                // We assume that prepareToHydrateHostTextInstance is called in a context where the
                // hydration parent is the parent host component of this host text.
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                    switch (returnFiber.tag) {
                        case HostRoot:
                            {
                                var parentContainer = returnFiber.stateNode.containerInfo;
                                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                                break;
                            }
                        case HostComponent:
                            {
                                var parentType = returnFiber.type;
                                var parentProps = returnFiber.memoizedProps;
                                var parentInstance = returnFiber.stateNode;
                                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                                break;
                            }
                    }
                }
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        if (!supportsHydration) {
            invariant(false, 'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
        }
        var suspenseInstance = fiber.stateNode;
        !suspenseInstance ? invariant(false, 'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== DehydratedSuspenseComponent) {
            parent = parent.return;
        }
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (!supportsHydration) {
            return false;
        }
        if (fiber !== hydrationParentFiber) {
            // We're deeper than the current hydration context, inside an inserted
            // tree.
            return false;
        }
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type;
        // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        if (!supportsHydration) {
            return;
        }
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass = void 0;
    var didWarnAboutContextTypeOnFunctionComponent = void 0;
    var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
    var didWarnAboutFunctionRefs = void 0;
    var didWarnAboutReassigningProps = void 0;
    {
        didWarnAboutBadClass = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
    }
    function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
        if (current$$1 === null) {
            // If this is a fresh new component that hasn't been rendered yet, we
            // won't update its child set by applying minimal side-effects. Instead,
            // we will add them all to the child before it gets rendered. That means
            // we can optimize this reconciliation pass by not tracking side-effects.
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        }
        else {
            // If the current child is the same as the work in progress, it means that
            // we haven't yet started any work on these children. Therefore, we use
            // the clone algorithm to create a copy of all the current children.
            // If we had any progressed work already, that is invalid at this point so
            // let's throw it out.
            workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
        }
    }
    function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
        // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their their
        // identity matches.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    }
    function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
        // TODO: current can be non-null here even if the component
        // hasn't yet mounted. This happens after the first render suspends.
        // We'll need to figure out if this is fine or can cause issues.
        {
            if (workInProgress.type !== workInProgress.elementType) {
                // Lazy component props can't be validated in createElement
                // because they're only guaranteed to be resolved here.
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                    checkPropTypes_1(innerPropTypes, nextProps, // Resolved props
                    'prop', getComponentName(Component), getCurrentFiberStackInDev);
                }
            }
        }
        var render = Component.render;
        var ref = workInProgress.ref;
        // The rest is a fork of updateFunctionComponent
        var nextChildren = void 0;
        prepareToReadContext(workInProgress, renderExpirationTime);
        {
            ReactCurrentOwner$3.current = workInProgress;
            setCurrentPhase('render');
            nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                // Only double-render components with Hooks
                if (workInProgress.memoizedState !== null) {
                    nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
                }
            }
            setCurrentPhase(null);
        }
        if (current$$1 !== null && !didReceiveUpdate) {
            bailoutHooks(current$$1, workInProgress, renderExpirationTime);
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
    }
    function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
        if (current$$1 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null &&
                // SimpleMemoComponent codepath doesn't resolve outer props either.
                Component.defaultProps === undefined) {
                // If this is a plain function component without default props,
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = type;
                {
                    validateFunctionComponentInDev(workInProgress, type);
                }
                return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
            }
            {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                    // Inner memo component props aren't currently validated in createElement.
                    // We could move it there, but we'd still need this for lazy code path.
                    checkPropTypes_1(innerPropTypes, nextProps, // Resolved props
                    'prop', getComponentName(type), getCurrentFiberStackInDev);
                }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
                // Inner memo component props aren't currently validated in createElement.
                // We could move it there, but we'd still need this for lazy code path.
                checkPropTypes_1(_innerPropTypes, nextProps, // Resolved props
                'prop', getComponentName(_type), getCurrentFiberStackInDev);
            }
        }
        var currentChild = current$$1.child; // This is always exactly one child
        if (updateExpirationTime < renderExpirationTime) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps;
            // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
                return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
            }
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
        // TODO: current can be non-null here even if the component
        // hasn't yet mounted. This happens when the inner render suspends.
        // We'll need to figure out if this is fine or can cause issues.
        {
            if (workInProgress.type !== workInProgress.elementType) {
                // Lazy component props can't be validated in createElement
                // because they're only guaranteed to be resolved here.
                var outerMemoType = workInProgress.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                    // We warn when you define propTypes on lazy()
                    // so let's just skip over it to find memo() outer wrapper.
                    // Inner props for memo are validated later.
                    outerMemoType = refineResolvedLazyComponent(outerMemoType);
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                    checkPropTypes_1(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
                    'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
                }
                // Inner propTypes will be validated in the function component path.
            }
        }
        if (current$$1 !== null) {
            var prevProps = current$$1.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
                didReceiveUpdate = false;
                if (updateExpirationTime < renderExpirationTime) {
                    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                }
            }
        }
        return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
    }
    function updateFragment(current$$1, workInProgress, renderExpirationTime) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
    }
    function updateMode(current$$1, workInProgress, renderExpirationTime) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
    }
    function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
        if (enableProfilerTimer) {
            workInProgress.effectTag |= Update;
        }
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
    }
    function markRef(current$$1, workInProgress) {
        var ref = workInProgress.ref;
        if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
            // Schedule a Ref effect
            workInProgress.effectTag |= Ref;
        }
    }
    function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
        {
            if (workInProgress.type !== workInProgress.elementType) {
                // Lazy component props can't be validated in createElement
                // because they're only guaranteed to be resolved here.
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                    checkPropTypes_1(innerPropTypes, nextProps, // Resolved props
                    'prop', getComponentName(Component), getCurrentFiberStackInDev);
                }
            }
        }
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        var context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren = void 0;
        prepareToReadContext(workInProgress, renderExpirationTime);
        {
            ReactCurrentOwner$3.current = workInProgress;
            setCurrentPhase('render');
            nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                // Only double-render components with Hooks
                if (workInProgress.memoizedState !== null) {
                    nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
                }
            }
            setCurrentPhase(null);
        }
        if (current$$1 !== null && !didReceiveUpdate) {
            bailoutHooks(current$$1, workInProgress, renderExpirationTime);
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
    }
    function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
        {
            if (workInProgress.type !== workInProgress.elementType) {
                // Lazy component props can't be validated in createElement
                // because they're only guaranteed to be resolved here.
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                    checkPropTypes_1(innerPropTypes, nextProps, // Resolved props
                    'prop', getComponentName(Component), getCurrentFiberStackInDev);
                }
            }
        }
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext = void 0;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        }
        else {
            hasContext = false;
        }
        prepareToReadContext(workInProgress, renderExpirationTime);
        var instance = workInProgress.stateNode;
        var shouldUpdate = void 0;
        if (instance === null) {
            if (current$$1 !== null) {
                // An class component without an instance only mounts if it suspended
                // inside a non- concurrent tree, in an inconsistent state. We want to
                // tree it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current$$1.alternate = null;
                workInProgress.alternate = null;
                // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.effectTag |= Placement;
            }
            // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
            mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
            shouldUpdate = true;
        }
        else if (current$$1 === null) {
            // In a resume, we'll already have an instance we can reuse.
            shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        }
        else {
            shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
        }
        var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
        {
            var inst = workInProgress.stateNode;
            if (inst.props !== nextProps) {
                !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
                didWarnAboutReassigningProps = true;
            }
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current$$1, workInProgress);
        var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) {
                invalidateContextProvider(workInProgress, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
        var instance = workInProgress.stateNode;
        // Rerender
        ReactCurrentOwner$3.current = workInProgress;
        var nextChildren = void 0;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFrom catch is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            if (enableProfilerTimer) {
                stopProfilerTimerIfRunning(workInProgress);
            }
        }
        else {
            {
                setCurrentPhase('render');
                nextChildren = instance.render();
                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                    instance.render();
                }
                setCurrentPhase(null);
            }
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        if (current$$1 !== null && didCaptureError) {
            // If we're recovering from an error, reconcile without reusing any of
            // the existing children. Conceptually, the normal children and the children
            // that are shown on error are two different sets, so we shouldn't reuse
            // normal children even if their identities match.
            forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
        }
        else {
            reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        }
        // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state;
        // The context might have changed so we need to recalculate it.
        if (hasContext) {
            invalidateContextProvider(workInProgress, Component, true);
        }
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        }
        else if (root.context) {
            // Should always be set
            pushTopLevelContextObject(workInProgress, root.context, false);
        }
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
        var nextState = workInProgress.memoizedState;
        // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            // If the state is the same as before, that's a bailout because we had
            // no work that expires at this time.
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
        var root = workInProgress.stateNode;
        if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
            // If we don't have any current children this might be the first pass.
            // We always try to hydrate. If this isn't a hydration pass there won't
            // be any children to hydrate which is effectively the same thing as
            // not hydrating.
            // This is a bit of a hack. We track the host root as a placement to
            // know that we're currently in a mounting state. That way isMounted
            // works as expected. We must reset this before committing.
            // TODO: Delete this when we delete isMounted and findDOMNode.
            workInProgress.effectTag |= Placement;
            // Ensure that children mount into this root without tracking
            // side-effects. This ensures that we don't store Placement effects on
            // nodes that will be hydrated.
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        }
        else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
        pushHostContext(workInProgress);
        if (current$$1 === null) {
            tryToClaimNextHydratableInstance(workInProgress);
        }
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
            // We special case a direct text child of a host node. This is a common
            // case. We won't handle it as a reified child. We will instead handle
            // this in the host environment that also have access to this prop. That
            // avoids allocating another HostText fiber and traversing it.
            nextChildren = null;
        }
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            // If we're switching from a direct text child to a normal child, or to
            // empty, we need to schedule the text content to be reset.
            workInProgress.effectTag |= ContentReset;
        }
        markRef(current$$1, workInProgress);
        // Check the host config to see if the children are offscreen/hidden.
        if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
            // Schedule this fiber to re-render at offscreen priority. Then bailout.
            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
        }
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        return workInProgress.child;
    }
    function updateHostText(current$$1, workInProgress) {
        if (current$$1 === null) {
            tryToClaimNextHydratableInstance(workInProgress);
        }
        // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
        if (_current !== null) {
            // An lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null;
            // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.effectTag |= Placement;
        }
        var props = workInProgress.pendingProps;
        // We can't start a User Timing measurement with correct label yet.
        // Cancel and resume right after we know the tag.
        cancelWorkTimer(workInProgress);
        var Component = readLazyComponentType(elementType);
        // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        startWorkTimer(workInProgress);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child = void 0;
        switch (resolvedTag) {
            case FunctionComponent:
                {
                    {
                        validateFunctionComponentInDev(workInProgress, Component);
                    }
                    child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
                    break;
                }
            case ClassComponent:
                {
                    child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
                    break;
                }
            case ForwardRef:
                {
                    child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
                    break;
                }
            case MemoComponent:
                {
                    {
                        if (workInProgress.type !== workInProgress.elementType) {
                            var outerPropTypes = Component.propTypes;
                            if (outerPropTypes) {
                                checkPropTypes_1(outerPropTypes, resolvedProps, // Resolved for outer only
                                'prop', getComponentName(Component), getCurrentFiberStackInDev);
                            }
                        }
                    }
                    child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
                    updateExpirationTime, renderExpirationTime);
                    break;
                }
            default:
                {
                    var hint = '';
                    {
                        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
                            hint = ' Did you wrap a component in React.lazy() more than once?';
                        }
                    }
                    // This message intentionally doesn't mention ForwardRef or MemoComponent
                    // because the fact that it's a separate type of work is an
                    // implementation detail.
                    invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Lazy element type must resolve to a class or function.%s', Component, hint);
                }
        }
        return child;
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null;
            // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.effectTag |= Placement;
        }
        // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent;
        // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext = void 0;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        }
        else {
            hasContext = false;
        }
        prepareToReadContext(workInProgress, renderExpirationTime);
        constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null;
            // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.effectTag |= Placement;
        }
        var props = workInProgress.pendingProps;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        var context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderExpirationTime);
        var value = void 0;
        {
            if (Component.prototype && typeof Component.prototype.render === 'function') {
                var componentName = getComponentName(Component) || 'Unknown';
                if (!didWarnAboutBadClass[componentName]) {
                    warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
                    didWarnAboutBadClass[componentName] = true;
                }
            }
            if (workInProgress.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
            }
            ReactCurrentOwner$3.current = workInProgress;
            value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            // Proceed under the assumption that this is a class instance
            workInProgress.tag = ClassComponent;
            // Throw out any hooks that were used.
            resetHooks();
            // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            }
            else {
                hasContext = false;
            }
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderExpirationTime);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
        }
        else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            {
                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                    // Only double-render components with Hooks
                    if (workInProgress.memoizedState !== null) {
                        value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
                    }
                }
            }
            reconcileChildren(null, workInProgress, value, renderExpirationTime);
            {
                validateFunctionComponentInDev(workInProgress, Component);
            }
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
                info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) {
                warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {
                warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', componentName);
                didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName]) {
                warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName);
                didWarnAboutContextTypeOnFunctionComponent[_componentName] = true;
            }
        }
    }
    function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
        var mode = workInProgress.mode;
        var nextProps = workInProgress.pendingProps;
        // We should attempt to render the primary children unless this boundary
        // already suspended during this render (`alreadyCaptured` is true).
        var nextState = workInProgress.memoizedState;
        var nextDidTimeout = void 0;
        if ((workInProgress.effectTag & DidCapture) === NoEffect) {
            // This is the first attempt.
            nextState = null;
            nextDidTimeout = false;
        }
        else {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            nextState = {
                timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
            };
            nextDidTimeout = true;
            workInProgress.effectTag &= ~DidCapture;
        }
        // This next part is a bit confusing. If the children timeout, we switch to
        // showing the fallback children in place of the "primary" children.
        // However, we don't want to delete the primary children because then their
        // state will be lost (both the React state and the host state, e.g.
        // uncontrolled form inputs). Instead we keep them mounted and hide them.
        // Both the fallback children AND the primary children are rendered at the
        // same time. Once the primary children are un-suspended, we can delete
        // the fallback children — don't need to preserve their state.
        //
        // The two sets of children are siblings in the host environment, but
        // semantically, for purposes of reconciliation, they are two separate sets.
        // So we store them using two fragment fibers.
        //
        // However, we want to avoid allocating extra fibers for every placeholder.
        // They're only necessary when the children time out, because that's the
        // only time when both sets are mounted.
        //
        // So, the extra fragment fibers are only used if the children time out.
        // Otherwise, we render the primary children directly. This requires some
        // custom reconciliation logic to preserve the state of the primary
        // children. It's essentially a very basic form of re-parenting.
        // `child` points to the child fiber. In the normal case, this is the first
        // fiber of the primary children set. In the timed-out case, it's a
        // a fragment fiber containing the primary children.
        var child = void 0;
        // `next` points to the next fiber React should render. In the normal case,
        // it's the same as `child`: the first fiber of the primary children set.
        // In the timed-out case, it's a fragment fiber containing the *fallback*
        // children -- we skip over the primary children entirely.
        var next = void 0;
        if (current$$1 === null) {
            if (enableSuspenseServerRenderer) {
                // If we're currently hydrating, try to hydrate this boundary.
                // But only if this has a fallback.
                if (nextProps.fallback !== undefined) {
                    tryToClaimNextHydratableInstance(workInProgress);
                    // This could've changed the tag if this was a dehydrated suspense component.
                    if (workInProgress.tag === DehydratedSuspenseComponent) {
                        return updateDehydratedSuspenseComponent(null, workInProgress, renderExpirationTime);
                    }
                }
            }
            // This is the initial mount. This branch is pretty simple because there's
            // no previous state that needs to be preserved.
            if (nextDidTimeout) {
                // Mount separate fragments for primary and fallback children.
                var nextFallbackChildren = nextProps.fallback;
                var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
                if ((workInProgress.mode & ConcurrentMode) === NoContext) {
                    // Outside of concurrent mode, we commit the effects from the
                    var progressedState = workInProgress.memoizedState;
                    var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
                    primaryChildFragment.child = progressedPrimaryChild;
                }
                var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
                primaryChildFragment.sibling = fallbackChildFragment;
                child = primaryChildFragment;
                // Skip the primary children, and continue working on the
                // fallback children.
                next = fallbackChildFragment;
                child.return = next.return = workInProgress;
            }
            else {
                // Mount the primary children without an intermediate fragment fiber.
                var nextPrimaryChildren = nextProps.children;
                child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
            }
        }
        else {
            // This is an update. This branch is more complicated because we need to
            // ensure the state of the primary children is preserved.
            var prevState = current$$1.memoizedState;
            var prevDidTimeout = prevState !== null;
            if (prevDidTimeout) {
                // The current tree already timed out. That means each child set is
                var currentPrimaryChildFragment = current$$1.child;
                var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                if (nextDidTimeout) {
                    // Still timed out. Reuse the current primary children by cloning
                    // its fragment. We're going to skip over these entirely.
                    var _nextFallbackChildren = nextProps.fallback;
                    var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);
                    if ((workInProgress.mode & ConcurrentMode) === NoContext) {
                        // Outside of concurrent mode, we commit the effects from the
                        var _progressedState = workInProgress.memoizedState;
                        var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
                        if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                            _primaryChildFragment.child = _progressedPrimaryChild;
                        }
                    }
                    // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.
                    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                        // treeBaseDuration is the sum of all the child tree base durations.
                        var treeBaseDuration = 0;
                        var hiddenChild = _primaryChildFragment.child;
                        while (hiddenChild !== null) {
                            treeBaseDuration += hiddenChild.treeBaseDuration;
                            hiddenChild = hiddenChild.sibling;
                        }
                        _primaryChildFragment.treeBaseDuration = treeBaseDuration;
                    }
                    // Clone the fallback child fragment, too. These we'll continue
                    // working on.
                    var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);
                    child = _primaryChildFragment;
                    _primaryChildFragment.childExpirationTime = NoWork;
                    // Skip the primary children, and continue working on the
                    // fallback children.
                    next = _fallbackChildFragment;
                    child.return = next.return = workInProgress;
                }
                else {
                    // No longer suspended. Switch back to showing the primary children,
                    // and remove the intermediate fragment fiber.
                    var _nextPrimaryChildren = nextProps.children;
                    var currentPrimaryChild = currentPrimaryChildFragment.child;
                    var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);
                    // If this render doesn't suspend, we need to delete the fallback
                    // children. Wait until the complete phase, after we've confirmed the
                    // fallback is no longer needed.
                    // TODO: Would it be better to store the fallback fragment on
                    // the stateNode?
                    // Continue rendering the children, like we normally do.
                    child = next = primaryChild;
                }
            }
            else {
                // The current tree has not already timed out. That means the primary
                // children are not wrapped in a fragment fiber.
                var _currentPrimaryChild = current$$1.child;
                if (nextDidTimeout) {
                    // Timed out. Wrap the children in a fragment fiber to keep them
                    // separate from the fallback children.
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _primaryChildFragment2 = createFiberFromFragment(
                    // It shouldn't matter what the pending props are because we aren't
                    // going to render this fragment.
                    null, mode, NoWork, null);
                    _primaryChildFragment2.child = _currentPrimaryChild;
                    // Even though we're creating a new fiber, there are no new children,
                    // because we're reusing an already mounted tree. So we don't need to
                    // schedule a placement.
                    // primaryChildFragment.effectTag |= Placement;
                    if ((workInProgress.mode & ConcurrentMode) === NoContext) {
                        // Outside of concurrent mode, we commit the effects from the
                        var _progressedState2 = workInProgress.memoizedState;
                        var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
                        _primaryChildFragment2.child = _progressedPrimaryChild2;
                    }
                    // Because primaryChildFragment is a new fiber that we're inserting as the
                    // parent of a new tree, we need to set its treeBaseDuration.
                    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                        // treeBaseDuration is the sum of all the child tree base durations.
                        var _treeBaseDuration = 0;
                        var _hiddenChild = _primaryChildFragment2.child;
                        while (_hiddenChild !== null) {
                            _treeBaseDuration += _hiddenChild.treeBaseDuration;
                            _hiddenChild = _hiddenChild.sibling;
                        }
                        _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                    }
                    // Create a fragment from the fallback children, too.
                    var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);
                    _fallbackChildFragment2.effectTag |= Placement;
                    child = _primaryChildFragment2;
                    _primaryChildFragment2.childExpirationTime = NoWork;
                    // Skip the primary children, and continue working on the
                    // fallback children.
                    next = _fallbackChildFragment2;
                    child.return = next.return = workInProgress;
                }
                else {
                    // Still haven't timed out.  Continue rendering the children, like we
                    // normally do.
                    var _nextPrimaryChildren2 = nextProps.children;
                    next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
                }
            }
            workInProgress.stateNode = current$$1.stateNode;
        }
        workInProgress.memoizedState = nextState;
        workInProgress.child = child;
        return next;
    }
    function updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
        if (current$$1 === null) {
            // During the first pass, we'll bail out and not drill into the children.
            // Instead, we'll leave the content in place and try to hydrate it later.
            workInProgress.expirationTime = Never;
            return null;
        }
        // We use childExpirationTime to indicate that a child might depend on context, so if
        // any context has changed, we need to treat is as if the input might have changed.
        var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;
        if (didReceiveUpdate || hasContextChanged$$1) {
            // This boundary has changed since the first render. This means that we are now unable to
            // hydrate it. We might still be able to hydrate it using an earlier expiration time but
            // during this render we can't. Instead, we're going to delete the whole subtree and
            // instead inject a new real Suspense boundary to take its place, which may render content
            // or fallback. The real Suspense boundary will suspend for a while so we have some time
            // to ensure it can produce real content, but all state and pending events will be lost.
            // Detach from the current dehydrated boundary.
            current$$1.alternate = null;
            workInProgress.alternate = null;
            // Insert a deletion in the effect list.
            var returnFiber = workInProgress.return;
            !(returnFiber !== null) ? invariant(false, 'Suspense boundaries are never on the root. This is probably a bug in React.') : void 0;
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = current$$1;
                returnFiber.lastEffect = current$$1;
            }
            else {
                returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
            }
            current$$1.nextEffect = null;
            current$$1.effectTag = Deletion;
            // Upgrade this work in progress to a real Suspense component.
            workInProgress.tag = SuspenseComponent;
            workInProgress.stateNode = null;
            workInProgress.memoizedState = null;
            // This is now an insertion.
            workInProgress.effectTag |= Placement;
            // Retry as a real Suspense component.
            return updateSuspenseComponent(null, workInProgress, renderExpirationTime);
        }
        if ((workInProgress.effectTag & DidCapture) === NoEffect) {
            // This is the first attempt.
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);
            var nextProps = workInProgress.pendingProps;
            var nextChildren = nextProps.children;
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
            return workInProgress.child;
        }
        else {
            // Something suspended. Leave the existing children in place.
            // TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?
            workInProgress.child = null;
            return null;
        }
    }
    function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current$$1 === null) {
            // Portals are special because we don't append the children during mount
            // but at commit. Therefore we need to track insertions which the normal
            // flow doesn't do during mount. This doesn't happen at the root because
            // the root always starts with a "current" with a null child.
            // TODO: Consider unifying this with how the root works.
            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        }
        else {
            reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        }
        return workInProgress.child;
    }
    function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        {
            var providerPropTypes = workInProgress.type.propTypes;
            if (providerPropTypes) {
                checkPropTypes_1(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
            }
        }
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                }
            }
            else {
                // The context value changed. Search for matching consumers and schedule
                // them to update.
                propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
            }
        }
        var newChildren = newProps.children;
        reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
        var context = workInProgress.type;
        // The logic below for Context differs depending on PROD or DEV mode. In
        // DEV mode, we create a separate object for Context.Consumer that acts
        // like a proxy to Context. This proxy object adds unnecessary code in PROD
        // so we use the old behaviour (Context.Consumer references Context) to
        // reduce size and overhead. The separate object references context via
        // a property called "_context", which also gives us the ability to check
        // in DEV mode if this property exists or not and warn if it does not.
        {
            if (context._context === undefined) {
                // This may be because it's a Context (rather than a Consumer).
                // Or it may be because it's older React where they're the same thing.
                // We only want to warn if we're sure it's a new React.
                if (context !== context.Consumer) {
                    if (!hasWarnedAboutUsingContextAsConsumer) {
                        hasWarnedAboutUsingContextAsConsumer = true;
                        warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                    }
                }
            }
            else {
                context = context._context;
            }
        }
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        {
            !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
        }
        prepareToReadContext(workInProgress, renderExpirationTime);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren = void 0;
        {
            ReactCurrentOwner$3.current = workInProgress;
            setCurrentPhase('render');
            newChildren = render(newValue);
            setCurrentPhase(null);
        }
        // React DevTools reads this flag.
        workInProgress.effectTag |= PerformedWork;
        reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
        cancelWorkTimer(workInProgress);
        if (current$$1 !== null) {
            // Reuse previous context list
            workInProgress.contextDependencies = current$$1.contextDependencies;
        }
        if (enableProfilerTimer) {
            // Don't update "base" render times for bailouts.
            stopProfilerTimerIfRunning(workInProgress);
        }
        // Check if the children have any pending work.
        var childExpirationTime = workInProgress.childExpirationTime;
        if (childExpirationTime < renderExpirationTime) {
            // The children don't have any work either. We can skip them.
            // TODO: Once we add back resuming, we should check if the children are
            // a work-in-progress set. If so, we need to transfer their effects.
            return null;
        }
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current$$1, workInProgress);
            return workInProgress.child;
        }
    }
    function beginWork(current$$1, workInProgress, renderExpirationTime) {
        var updateExpirationTime = workInProgress.expirationTime;
        if (current$$1 !== null) {
            var oldProps = current$$1.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged()) {
                // If props or context changed, mark the fiber as having performed work.
                // This may be unset if the props are determined to be equal later (memo).
                didReceiveUpdate = true;
            }
            else if (updateExpirationTime < renderExpirationTime) {
                didReceiveUpdate = false;
                // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch (workInProgress.tag) {
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        {
                            var Component = workInProgress.type;
                            if (isContextProvider(Component)) {
                                pushContextProvider(workInProgress);
                            }
                            break;
                        }
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        {
                            var newValue = workInProgress.memoizedProps.value;
                            pushProvider(workInProgress, newValue);
                            break;
                        }
                    case Profiler:
                        if (enableProfilerTimer) {
                            workInProgress.effectTag |= Update;
                        }
                        break;
                    case SuspenseComponent:
                        {
                            var state = workInProgress.memoizedState;
                            var didTimeout = state !== null;
                            if (didTimeout) {
                                // If this boundary is currently timed out, we need to decide
                                // whether to retry the primary children, or to skip over it and
                                // go straight to the fallback. Check the priority of the primary
                                var primaryChildFragment = workInProgress.child;
                                var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                                if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                                    // The primary children have pending work. Use the normal path
                                    // to attempt to render the primary children again.
                                    return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                                }
                                else {
                                    // The primary children do not have pending work with sufficient
                                    // priority. Bailout.
                                    var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                                    if (child !== null) {
                                        // The fallback children have pending work. Skip over the
                                        // primary children and work on the fallback.
                                        return child.sibling;
                                    }
                                    else {
                                        return null;
                                    }
                                }
                            }
                            break;
                        }
                    case DehydratedSuspenseComponent:
                        {
                            if (enableSuspenseServerRenderer) {
                                // We know that this component will suspend again because if it has
                                // been unsuspended it has committed as a regular Suspense component.
                                // If it needs to be retried, it should have work scheduled on it.
                                workInProgress.effectTag |= DidCapture;
                                break;
                            }
                        }
                }
                return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
            }
        }
        else {
            didReceiveUpdate = false;
        }
        // Before entering the begin phase, clear the expiration time.
        workInProgress.expirationTime = NoWork;
        switch (workInProgress.tag) {
            case IndeterminateComponent:
                {
                    var elementType = workInProgress.elementType;
                    return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);
                }
            case LazyComponent:
                {
                    var _elementType = workInProgress.elementType;
                    return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);
                }
            case FunctionComponent:
                {
                    var _Component = workInProgress.type;
                    var unresolvedProps = workInProgress.pendingProps;
                    var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                    return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
                }
            case ClassComponent:
                {
                    var _Component2 = workInProgress.type;
                    var _unresolvedProps = workInProgress.pendingProps;
                    var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                    return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
                }
            case HostRoot:
                return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
            case HostComponent:
                return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
            case HostText:
                return updateHostText(current$$1, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
            case HostPortal:
                return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
            case ForwardRef:
                {
                    var type = workInProgress.type;
                    var _unresolvedProps2 = workInProgress.pendingProps;
                    var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                    return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
                }
            case Fragment:
                return updateFragment(current$$1, workInProgress, renderExpirationTime);
            case Mode:
                return updateMode(current$$1, workInProgress, renderExpirationTime);
            case Profiler:
                return updateProfiler(current$$1, workInProgress, renderExpirationTime);
            case ContextProvider:
                return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
            case ContextConsumer:
                return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
            case MemoComponent:
                {
                    var _type2 = workInProgress.type;
                    var _unresolvedProps3 = workInProgress.pendingProps;
                    // Resolve outer props first, then resolve inner props.
                    var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                    {
                        if (workInProgress.type !== workInProgress.elementType) {
                            var outerPropTypes = _type2.propTypes;
                            if (outerPropTypes) {
                                checkPropTypes_1(outerPropTypes, _resolvedProps3, // Resolved for outer only
                                'prop', getComponentName(_type2), getCurrentFiberStackInDev);
                            }
                        }
                    }
                    _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                    return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
                }
            case SimpleMemoComponent:
                {
                    return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
                }
            case IncompleteClassComponent:
                {
                    var _Component3 = workInProgress.type;
                    var _unresolvedProps4 = workInProgress.pendingProps;
                    var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                    return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
                }
            case DehydratedSuspenseComponent:
                {
                    if (enableSuspenseServerRenderer) {
                        return updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                    }
                    break;
                }
        }
        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
    var valueCursor = createCursor(null);
    var rendererSigil = void 0;
    {
        // Use this to detect multiple renderers using the same context
        rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependences() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        {
            isDisallowedContextReadInDEV = false;
        }
    }
    function enterDisallowedContextReadInDEV() {
        {
            isDisallowedContextReadInDEV = true;
        }
    }
    function exitDisallowedContextReadInDEV() {
        {
            isDisallowedContextReadInDEV = false;
        }
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        if (isPrimaryRenderer) {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
                !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
                context._currentRenderer = rendererSigil;
            }
        }
        else {
            push(valueCursor, context._currentValue2, providerFiber);
            context._currentValue2 = nextValue;
            {
                !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
                context._currentRenderer2 = rendererSigil;
            }
        }
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        if (isPrimaryRenderer) {
            context._currentValue = currentValue;
        }
        else {
            context._currentValue2 = currentValue;
        }
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (is(oldValue, newValue)) {
            // No change
            return 0;
        }
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;
            {
                !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
            }
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderExpirationTime) {
        // Update the child expiration time of all the ancestors, including
        // the alternates.
        var node = parent;
        while (node !== null) {
            var alternate = node.alternate;
            if (node.childExpirationTime < renderExpirationTime) {
                node.childExpirationTime = renderExpirationTime;
                if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
                    alternate.childExpirationTime = renderExpirationTime;
                }
            }
            else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
                alternate.childExpirationTime = renderExpirationTime;
            }
            else {
                // Neither alternate was updated, which means the rest of the
                // ancestor path already has sufficient priority.
                break;
            }
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
        var fiber = workInProgress.child;
        if (fiber !== null) {
            // Set the return pointer of the child to the work-in-progress fiber.
            fiber.return = workInProgress;
        }
        while (fiber !== null) {
            var nextFiber = void 0;
            // Visit this fiber.
            var list = fiber.contextDependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.first;
                while (dependency !== null) {
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(renderExpirationTime);
                            update.tag = ForceUpdate;
                            // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        if (fiber.expirationTime < renderExpirationTime) {
                            fiber.expirationTime = renderExpirationTime;
                        }
                        var alternate = fiber.alternate;
                        if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                            alternate.expirationTime = renderExpirationTime;
                        }
                        scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
                        // Mark the expiration time on the list, too.
                        if (list.expirationTime < renderExpirationTime) {
                            list.expirationTime = renderExpirationTime;
                        }
                        // Since we already found a match, we can stop traversing the
                        // dependency list.
                        break;
                    }
                    dependency = dependency.next;
                }
            }
            else if (fiber.tag === ContextProvider) {
                // Don't scan deeper if this is a matching provider
                nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            }
            else if (enableSuspenseServerRenderer && fiber.tag === DehydratedSuspenseComponent) {
                // If a dehydrated suspense component is in this subtree, we don't know
                // if it will have any context consumers in it. The best we can do is
                // mark it as having updates on its children.
                if (fiber.expirationTime < renderExpirationTime) {
                    fiber.expirationTime = renderExpirationTime;
                }
                var _alternate = fiber.alternate;
                if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
                    _alternate.expirationTime = renderExpirationTime;
                }
                // This is intentionally passing this fiber as the parent
                // because we want to schedule this fiber as having work
                // on its children. We'll use the childExpirationTime on
                // this fiber to indicate that a context has changed.
                scheduleWorkOnParentPath(fiber, renderExpirationTime);
                nextFiber = fiber.sibling;
            }
            else {
                // Traverse down.
                nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
                // Set the return pointer of the child to the work-in-progress fiber.
                nextFiber.return = fiber;
            }
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while (nextFiber !== null) {
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    }
                    // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderExpirationTime) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var currentDependencies = workInProgress.contextDependencies;
        if (currentDependencies !== null && currentDependencies.expirationTime >= renderExpirationTime) {
            // Context list has a pending update. Mark that this fiber performed work.
            markWorkInProgressReceivedUpdate();
        }
        // Reset the work-in-progress list
        workInProgress.contextDependencies = null;
    }
    function readContext(context, observedBits) {
        {
            // This warning would fire if you read context inside a Hook like useMemo.
            // Unlike the class check below, it's not enforced in production for perf.
            !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
        }
        if (lastContextWithAllBitsObserved === context) {
            // Nothing to do. We already observe everything in this context.
        }
        else if (observedBits === false || observedBits === 0) {
            // Do not observe any updates.
        }
        else {
            var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = maxSigned31BitInt;
            }
            else {
                resolvedObservedBits = observedBits;
            }
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().') : void 0;
                // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.contextDependencies = {
                    first: contextItem,
                    expirationTime: NoWork
                };
            }
            else {
                // Append a new context item.
                lastContextDependency = lastContextDependency.next = contextItem;
            }
        }
        return isPrimaryRenderer ? context._currentValue : context._currentValue2;
    }
    // UpdateQueue is a linked list of prioritized updates.
    //
    // Like fibers, update queues come in pairs: a current queue, which represents
    // the visible state of the screen, and a work-in-progress queue, which can be
    // mutated and processed asynchronously before it is committed — a form of
    // double buffering. If a work-in-progress render is discarded before finishing,
    // we create a new work-in-progress by cloning the current queue.
    //
    // Both queues share a persistent, singly-linked list structure. To schedule an
    // update, we append it to the end of both queues. Each queue maintains a
    // pointer to first update in the persistent list that hasn't been processed.
    // The work-in-progress pointer always has a position equal to or greater than
    // the current queue, since we always work on that one. The current queue's
    // pointer is only updated during the commit phase, when we swap in the
    // work-in-progress.
    //
    // For example:
    //
    //   Current pointer:           A - B - C - D - E - F
    //   Work-in-progress pointer:              D - E - F
    //                                          ^
    //                                          The work-in-progress queue has
    //                                          processed more updates than current.
    //
    // The reason we append to both queues is because otherwise we might drop
    // updates without ever processing them. For example, if we only add updates to
    // the work-in-progress queue, some updates could be lost whenever a work-in
    // -progress render restarts by cloning from current. Similarly, if we only add
    // updates to the current queue, the updates will be lost whenever an already
    // in-progress queue commits and swaps with the current queue. However, by
    // adding to both queues, we guarantee that the update will be part of the next
    // work-in-progress. (And because the work-in-progress queue becomes the
    // current queue once it commits, there's no danger of applying the same
    // update twice.)
    //
    // Prioritization
    // --------------
    //
    // Updates are not sorted by priority, but by insertion; new updates are always
    // appended to the end of the list.
    //
    // The priority is still important, though. When processing the update queue
    // during the render phase, only the updates with sufficient priority are
    // included in the result. If we skip an update because it has insufficient
    // priority, it remains in the queue to be processed later, during a lower
    // priority render. Crucially, all updates subsequent to a skipped update also
    // remain in the queue *regardless of their priority*. That means high priority
    // updates are sometimes processed twice, at two separate priorities. We also
    // keep track of a base state, that represents the state before the first
    // update in the queue is applied.
    //
    // For example:
    //
    //   Given a base state of '', and the following queue of updates
    //
    //     A1 - B2 - C1 - D2
    //
    //   where the number indicates the priority, and the update is applied to the
    //   previous state by appending a letter, React will process these updates as
    //   two separate renders, one per distinct priority level:
    //
    //   First render, at priority 1:
    //     Base state: ''
    //     Updates: [A1, C1]
    //     Result state: 'AC'
    //
    //   Second render, at priority 2:
    //     Base state: 'A'            <-  The base state does not include C1,
    //                                    because B2 was skipped.
    //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
    //     Result state: 'ABCD'
    //
    // Because we process updates in insertion order, and rebase high priority
    // updates when preceding updates are skipped, the final result is deterministic
    // regardless of priority. Intermediate state may vary according to system
    // resources, but the final state is always the same.
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate = void 0;
    var currentlyProcessingQueue = void 0;
    var resetCurrentlyProcessingQueue = void 0;
    {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
        resetCurrentlyProcessingQueue = function () {
            currentlyProcessingQueue = null;
        };
    }
    function createUpdateQueue(baseState) {
        var queue = {
            baseState: baseState,
            firstUpdate: null,
            lastUpdate: null,
            firstCapturedUpdate: null,
            lastCapturedUpdate: null,
            firstEffect: null,
            lastEffect: null,
            firstCapturedEffect: null,
            lastCapturedEffect: null
        };
        return queue;
    }
    function cloneUpdateQueue(currentQueue) {
        var queue = {
            baseState: currentQueue.baseState,
            firstUpdate: currentQueue.firstUpdate,
            lastUpdate: currentQueue.lastUpdate,
            // TODO: With resuming, if we bail out and resuse the child tree, we should
            // keep these effects.
            firstCapturedUpdate: null,
            lastCapturedUpdate: null,
            firstEffect: null,
            lastEffect: null,
            firstCapturedEffect: null,
            lastCapturedEffect: null
        };
        return queue;
    }
    function createUpdate(expirationTime) {
        return {
            expirationTime: expirationTime,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null,
            nextEffect: null
        };
    }
    function appendUpdateToQueue(queue, update) {
        // Append the update to the end of the list.
        if (queue.lastUpdate === null) {
            // Queue is empty
            queue.firstUpdate = queue.lastUpdate = update;
        }
        else {
            queue.lastUpdate.next = update;
            queue.lastUpdate = update;
        }
    }
    function enqueueUpdate(fiber, update) {
        // Update queues are created lazily.
        var alternate = fiber.alternate;
        var queue1 = void 0;
        var queue2 = void 0;
        if (alternate === null) {
            // There's only one fiber.
            queue1 = fiber.updateQueue;
            queue2 = null;
            if (queue1 === null) {
                queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
            }
        }
        else {
            // There are two owners.
            queue1 = fiber.updateQueue;
            queue2 = alternate.updateQueue;
            if (queue1 === null) {
                if (queue2 === null) {
                    // Neither fiber has an update queue. Create new ones.
                    queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
                    queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
                }
                else {
                    // Only one fiber has an update queue. Clone to create a new one.
                    queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
                }
            }
            else {
                if (queue2 === null) {
                    // Only one fiber has an update queue. Clone to create a new one.
                    queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
                }
                else {
                    // Both owners have an update queue.
                }
            }
        }
        if (queue2 === null || queue1 === queue2) {
            // There's only a single queue.
            appendUpdateToQueue(queue1, update);
        }
        else {
            // There are two queues. We need to append the update to both queues,
            // while accounting for the persistent structure of the list — we don't
            // want the same update to be added multiple times.
            if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
                // One of the queues is not empty. We must add the update to both queues.
                appendUpdateToQueue(queue1, update);
                appendUpdateToQueue(queue2, update);
            }
            else {
                // Both queues are non-empty. The last update is the same in both lists,
                // because of structural sharing. So, only append to one of the lists.
                appendUpdateToQueue(queue1, update);
                // But we still need to update the `lastUpdate` pointer of queue2.
                queue2.lastUpdate = update;
            }
        }
        {
            if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
                warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
                didWarnUpdateInsideUpdate = true;
            }
        }
    }
    function enqueueCapturedUpdate(workInProgress, update) {
        // Captured updates go into a separate list, and only on the work-in-
        // progress queue.
        var workInProgressQueue = workInProgress.updateQueue;
        if (workInProgressQueue === null) {
            workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
        }
        else {
            // TODO: I put this here rather than createWorkInProgress so that we don't
            // clone the queue unnecessarily. There's probably a better way to
            // structure this.
            workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
        }
        // Append the update to the end of the list.
        if (workInProgressQueue.lastCapturedUpdate === null) {
            // This is the first render phase update
            workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
        }
        else {
            workInProgressQueue.lastCapturedUpdate.next = update;
            workInProgressQueue.lastCapturedUpdate = update;
        }
    }
    function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
        var current = workInProgress.alternate;
        if (current !== null) {
            // If the work-in-progress queue is equal to the current queue,
            // we need to clone it first.
            if (queue === current.updateQueue) {
                queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
            }
        }
        return queue;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
            case ReplaceState:
                {
                    var _payload = update.payload;
                    if (typeof _payload === 'function') {
                        // Updater function
                        {
                            enterDisallowedContextReadInDEV();
                            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                                _payload.call(instance, prevState, nextProps);
                            }
                        }
                        var nextState = _payload.call(instance, prevState, nextProps);
                        {
                            exitDisallowedContextReadInDEV();
                        }
                        return nextState;
                    }
                    // State object
                    return _payload;
                }
            case CaptureUpdate:
                {
                    workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
                }
            // Intentional fallthrough
            case UpdateState:
                {
                    var _payload2 = update.payload;
                    var partialState = void 0;
                    if (typeof _payload2 === 'function') {
                        // Updater function
                        {
                            enterDisallowedContextReadInDEV();
                            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                                _payload2.call(instance, prevState, nextProps);
                            }
                        }
                        partialState = _payload2.call(instance, prevState, nextProps);
                        {
                            exitDisallowedContextReadInDEV();
                        }
                    }
                    else {
                        // Partial state object
                        partialState = _payload2;
                    }
                    if (partialState === null || partialState === undefined) {
                        // Null and undefined are treated as no-ops.
                        return prevState;
                    }
                    // Merge the partial state and the previous state.
                    return _assign({}, prevState, partialState);
                }
            case ForceUpdate:
                {
                    hasForceUpdate = true;
                    return prevState;
                }
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
        hasForceUpdate = false;
        queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
        {
            currentlyProcessingQueue = queue;
        }
        // These values may change as we process the queue.
        var newBaseState = queue.baseState;
        var newFirstUpdate = null;
        var newExpirationTime = NoWork;
        // Iterate through the list of updates to compute the result.
        var update = queue.firstUpdate;
        var resultState = newBaseState;
        while (update !== null) {
            var updateExpirationTime = update.expirationTime;
            if (updateExpirationTime < renderExpirationTime) {
                // This update does not have sufficient priority. Skip it.
                if (newFirstUpdate === null) {
                    // This is the first skipped update. It will be the first update in
                    // the new list.
                    newFirstUpdate = update;
                    // Since this is the first update that was skipped, the current result
                    // is the new base state.
                    newBaseState = resultState;
                }
                // Since this update will remain in the list, update the remaining
                // expiration time.
                if (newExpirationTime < updateExpirationTime) {
                    newExpirationTime = updateExpirationTime;
                }
            }
            else {
                // This update does have sufficient priority. Process it and compute
                // a new result.
                resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
                var _callback = update.callback;
                if (_callback !== null) {
                    workInProgress.effectTag |= Callback;
                    // Set this to null, in case it was mutated during an aborted render.
                    update.nextEffect = null;
                    if (queue.lastEffect === null) {
                        queue.firstEffect = queue.lastEffect = update;
                    }
                    else {
                        queue.lastEffect.nextEffect = update;
                        queue.lastEffect = update;
                    }
                }
            }
            // Continue to the next update.
            update = update.next;
        }
        // Separately, iterate though the list of captured updates.
        var newFirstCapturedUpdate = null;
        update = queue.firstCapturedUpdate;
        while (update !== null) {
            var _updateExpirationTime = update.expirationTime;
            if (_updateExpirationTime < renderExpirationTime) {
                // This update does not have sufficient priority. Skip it.
                if (newFirstCapturedUpdate === null) {
                    // This is the first skipped captured update. It will be the first
                    // update in the new list.
                    newFirstCapturedUpdate = update;
                    // If this is the first update that was skipped, the current result is
                    // the new base state.
                    if (newFirstUpdate === null) {
                        newBaseState = resultState;
                    }
                }
                // Since this update will remain in the list, update the remaining
                // expiration time.
                if (newExpirationTime < _updateExpirationTime) {
                    newExpirationTime = _updateExpirationTime;
                }
            }
            else {
                // This update does have sufficient priority. Process it and compute
                // a new result.
                resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
                var _callback2 = update.callback;
                if (_callback2 !== null) {
                    workInProgress.effectTag |= Callback;
                    // Set this to null, in case it was mutated during an aborted render.
                    update.nextEffect = null;
                    if (queue.lastCapturedEffect === null) {
                        queue.firstCapturedEffect = queue.lastCapturedEffect = update;
                    }
                    else {
                        queue.lastCapturedEffect.nextEffect = update;
                        queue.lastCapturedEffect = update;
                    }
                }
            }
            update = update.next;
        }
        if (newFirstUpdate === null) {
            queue.lastUpdate = null;
        }
        if (newFirstCapturedUpdate === null) {
            queue.lastCapturedUpdate = null;
        }
        else {
            workInProgress.effectTag |= Callback;
        }
        if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
            // We processed every update, without skipping. That means the new base
            // state is the same as the result state.
            newBaseState = resultState;
        }
        queue.baseState = newBaseState;
        queue.firstUpdate = newFirstUpdate;
        queue.firstCapturedUpdate = newFirstCapturedUpdate;
        // Set the remaining expiration time to be whatever is remaining in the queue.
        // This should be fine because the only two other things that contribute to
        // expiration time are props and context. We're already in the middle of the
        // begin phase by the time we start processing the queue, so we've already
        // dealt with the props. Context in components that specify
        // shouldComponentUpdate is tricky; but we'll have to account for
        // that regardless.
        workInProgress.expirationTime = newExpirationTime;
        workInProgress.memoizedState = resultState;
        {
            currentlyProcessingQueue = null;
        }
    }
    function callCallback(callback, context) {
        !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
        // If the finished render included captured updates, and there are still
        // lower priority updates left over, we need to keep the captured updates
        // in the queue so that they are rebased and not dropped once we process the
        // queue again at the lower priority.
        if (finishedQueue.firstCapturedUpdate !== null) {
            // Join the captured update list to the end of the normal list.
            if (finishedQueue.lastUpdate !== null) {
                finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
                finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
            }
            // Clear the list of captured updates.
            finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
        }
        // Commit the effects
        commitUpdateEffects(finishedQueue.firstEffect, instance);
        finishedQueue.firstEffect = finishedQueue.lastEffect = null;
        commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
        finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
    }
    function commitUpdateEffects(effect, instance) {
        while (effect !== null) {
            var _callback3 = effect.callback;
            if (_callback3 !== null) {
                effect.callback = null;
                callCallback(_callback3, instance);
            }
            effect = effect.nextEffect;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.effectTag |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.effectTag |= Ref;
    }
    var appendAllChildren = void 0;
    var updateHostContainer = void 0;
    var updateHostComponent$1 = void 0;
    var updateHostText$1 = void 0;
    if (supportsMutation) {
        // Mutation mode
        appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            var node = workInProgress.child;
            while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                    appendInitialChild(parent, node.stateNode);
                }
                else if (node.tag === HostPortal) {
                    // If we have a portal child, then we don't want to traverse
                    // down its children. Instead, we'll get insertions from each child in
                    // the portal directly.
                }
                else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === workInProgress) {
                    return;
                }
                while (node.sibling === null) {
                    if (node.return === null || node.return === workInProgress) {
                        return;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        };
        updateHostContainer = function (workInProgress) {
            // Noop
        };
        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
            // If we have an alternate, that means this is an update and we need to
            // schedule a side-effect to do the updates.
            var oldProps = current.memoizedProps;
            if (oldProps === newProps) {
                // In mutation mode, this is sufficient for a bailout because
                // we won't touch this node even if children changed.
                return;
            }
            // If we get updated because one of our children updated, we don't
            // have newProps so we'll have to reuse them.
            // TODO: Split the update API as separate for the props vs. children.
            // Even better would be if children weren't special cased at all tho.
            var instance = workInProgress.stateNode;
            var currentHostContext = getHostContext();
            // TODO: Experiencing an error where oldProps is null. Suggests a host
            // component is hitting the resume path. Figure out why. Possibly
            // related to `hidden`.
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            // TODO: Type this specific to this type of component.
            workInProgress.updateQueue = updatePayload;
            // If the update payload indicates that there is a change or if there
            // is a new ref we mark this as an update. All the work is done in commitWork.
            if (updatePayload) {
                markUpdate(workInProgress);
            }
        };
        updateHostText$1 = function (current, workInProgress, oldText, newText) {
            // If the text differs, mark it as an update. All the work in done in commitWork.
            if (oldText !== newText) {
                markUpdate(workInProgress);
            }
        };
    }
    else if (supportsPersistence) {
        // Persistent host tree mode
        appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            var node = workInProgress.child;
            while (node !== null) {
                // eslint-disable-next-line no-labels
                branches: if (node.tag === HostComponent) {
                    var instance = node.stateNode;
                    if (needsVisibilityToggle) {
                        var props = node.memoizedProps;
                        var type = node.type;
                        if (isHidden) {
                            // This child is inside a timed out tree. Hide it.
                            instance = cloneHiddenInstance(instance, type, props, node);
                        }
                        else {
                            // This child was previously inside a timed out tree. If it was not
                            // updated during this render, it may need to be unhidden. Clone
                            // again to be sure.
                            instance = cloneUnhiddenInstance(instance, type, props, node);
                        }
                        node.stateNode = instance;
                    }
                    appendInitialChild(parent, instance);
                }
                else if (node.tag === HostText) {
                    var _instance = node.stateNode;
                    if (needsVisibilityToggle) {
                        var text = node.memoizedProps;
                        var rootContainerInstance = getRootHostContainer();
                        var currentHostContext = getHostContext();
                        if (isHidden) {
                            _instance = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
                        }
                        else {
                            _instance = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
                        }
                        node.stateNode = _instance;
                    }
                    appendInitialChild(parent, _instance);
                }
                else if (node.tag === HostPortal) {
                    // If we have a portal child, then we don't want to traverse
                    // down its children. Instead, we'll get insertions from each child in
                    // the portal directly.
                }
                else if (node.tag === SuspenseComponent) {
                    var current = node.alternate;
                    if (current !== null) {
                        var oldState = current.memoizedState;
                        var newState = node.memoizedState;
                        var oldIsHidden = oldState !== null;
                        var newIsHidden = newState !== null;
                        if (oldIsHidden !== newIsHidden) {
                            // The placeholder either just timed out or switched back to the normal
                            // children after having previously timed out. Toggle the visibility of
                            // the direct host children.
                            var primaryChildParent = newIsHidden ? node.child : node;
                            if (primaryChildParent !== null) {
                                appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                            }
                            // eslint-disable-next-line no-labels
                            break branches;
                        }
                    }
                    if (node.child !== null) {
                        // Continue traversing like normal
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                }
                else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                // $FlowFixMe This is correct but Flow is confused by the labeled break.
                node = node;
                if (node === workInProgress) {
                    return;
                }
                while (node.sibling === null) {
                    if (node.return === null || node.return === workInProgress) {
                        return;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        };
        // An unfortunate fork of appendAllChildren because we have two different parent types.
        var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
            // We only have the top Fiber that was created but we need recurse down its
            // children to find all the terminal nodes.
            var node = workInProgress.child;
            while (node !== null) {
                // eslint-disable-next-line no-labels
                branches: if (node.tag === HostComponent) {
                    var instance = node.stateNode;
                    if (needsVisibilityToggle) {
                        var props = node.memoizedProps;
                        var type = node.type;
                        if (isHidden) {
                            // This child is inside a timed out tree. Hide it.
                            instance = cloneHiddenInstance(instance, type, props, node);
                        }
                        else {
                            // This child was previously inside a timed out tree. If it was not
                            // updated during this render, it may need to be unhidden. Clone
                            // again to be sure.
                            instance = cloneUnhiddenInstance(instance, type, props, node);
                        }
                        node.stateNode = instance;
                    }
                    appendChildToContainerChildSet(containerChildSet, instance);
                }
                else if (node.tag === HostText) {
                    var _instance2 = node.stateNode;
                    if (needsVisibilityToggle) {
                        var text = node.memoizedProps;
                        var rootContainerInstance = getRootHostContainer();
                        var currentHostContext = getHostContext();
                        if (isHidden) {
                            _instance2 = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
                        }
                        else {
                            _instance2 = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
                        }
                        node.stateNode = _instance2;
                    }
                    appendChildToContainerChildSet(containerChildSet, _instance2);
                }
                else if (node.tag === HostPortal) {
                    // If we have a portal child, then we don't want to traverse
                    // down its children. Instead, we'll get insertions from each child in
                    // the portal directly.
                }
                else if (node.tag === SuspenseComponent) {
                    var current = node.alternate;
                    if (current !== null) {
                        var oldState = current.memoizedState;
                        var newState = node.memoizedState;
                        var oldIsHidden = oldState !== null;
                        var newIsHidden = newState !== null;
                        if (oldIsHidden !== newIsHidden) {
                            // The placeholder either just timed out or switched back to the normal
                            // children after having previously timed out. Toggle the visibility of
                            // the direct host children.
                            var primaryChildParent = newIsHidden ? node.child : node;
                            if (primaryChildParent !== null) {
                                appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                            }
                            // eslint-disable-next-line no-labels
                            break branches;
                        }
                    }
                    if (node.child !== null) {
                        // Continue traversing like normal
                        node.child.return = node;
                        node = node.child;
                        continue;
                    }
                }
                else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                // $FlowFixMe This is correct but Flow is confused by the labeled break.
                node = node;
                if (node === workInProgress) {
                    return;
                }
                while (node.sibling === null) {
                    if (node.return === null || node.return === workInProgress) {
                        return;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        };
        updateHostContainer = function (workInProgress) {
            var portalOrRoot = workInProgress.stateNode;
            var childrenUnchanged = workInProgress.firstEffect === null;
            if (childrenUnchanged) {
                // No changes, just reuse the existing instance.
            }
            else {
                var container = portalOrRoot.containerInfo;
                var newChildSet = createContainerChildSet(container);
                // If children might have changed, we have to add them all to the set.
                appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
                portalOrRoot.pendingChildren = newChildSet;
                // Schedule an update on the container to swap out the container.
                markUpdate(workInProgress);
                finalizeContainerChildren(container, newChildSet);
            }
        };
        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
            var currentInstance = current.stateNode;
            var oldProps = current.memoizedProps;
            // If there are no effects associated with this node, then none of our children had any updates.
            // This guarantees that we can reuse all of them.
            var childrenUnchanged = workInProgress.firstEffect === null;
            if (childrenUnchanged && oldProps === newProps) {
                // No changes, just reuse the existing instance.
                // Note that this might release a previous clone.
                workInProgress.stateNode = currentInstance;
                return;
            }
            var recyclableInstance = workInProgress.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = null;
            if (oldProps !== newProps) {
                updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            }
            if (childrenUnchanged && updatePayload === null) {
                // No changes, just reuse the existing instance.
                // Note that this might release a previous clone.
                workInProgress.stateNode = currentInstance;
                return;
            }
            var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
            if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
                markUpdate(workInProgress);
            }
            workInProgress.stateNode = newInstance;
            if (childrenUnchanged) {
                // If there are no other effects in this tree, we need to flag this node as having one.
                // Even though we're not going to use it for anything.
                // Otherwise parents won't know that there are new children to propagate upwards.
                markUpdate(workInProgress);
            }
            else {
                // If children might have changed, we have to add them all to the set.
                appendAllChildren(newInstance, workInProgress, false, false);
            }
        };
        updateHostText$1 = function (current, workInProgress, oldText, newText) {
            if (oldText !== newText) {
                // If the text content differs, we'll create a new text instance for it.
                var rootContainerInstance = getRootHostContainer();
                var currentHostContext = getHostContext();
                workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
                // We'll have to mark it as having an effect, even though we won't use the effect for anything.
                // This lets the parents know that at least one of their children has changed.
                markUpdate(workInProgress);
            }
        };
    }
    else {
        // No host operations
        updateHostContainer = function (workInProgress) {
            // Noop
        };
        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
            // Noop
        };
        updateHostText$1 = function (current, workInProgress, oldText, newText) {
            // Noop
        };
    }
    function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;
        switch (workInProgress.tag) {
            case IndeterminateComponent:
                break;
            case LazyComponent:
                break;
            case SimpleMemoComponent:
            case FunctionComponent:
                break;
            case ClassComponent:
                {
                    var Component = workInProgress.type;
                    if (isContextProvider(Component)) {
                        popContext(workInProgress);
                    }
                    break;
                }
            case HostRoot:
                {
                    popHostContainer(workInProgress);
                    popTopLevelContextObject(workInProgress);
                    var fiberRoot = workInProgress.stateNode;
                    if (fiberRoot.pendingContext) {
                        fiberRoot.context = fiberRoot.pendingContext;
                        fiberRoot.pendingContext = null;
                    }
                    if (current === null || current.child === null) {
                        // If we hydrated, pop so that we can delete any remaining children
                        // that weren't hydrated.
                        popHydrationState(workInProgress);
                        // This resets the hacky state to fix isMounted before committing.
                        // TODO: Delete this when we delete isMounted and findDOMNode.
                        workInProgress.effectTag &= ~Placement;
                    }
                    updateHostContainer(workInProgress);
                    break;
                }
            case HostComponent:
                {
                    popHostContext(workInProgress);
                    var rootContainerInstance = getRootHostContainer();
                    var type = workInProgress.type;
                    if (current !== null && workInProgress.stateNode != null) {
                        updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                        if (current.ref !== workInProgress.ref) {
                            markRef$1(workInProgress);
                        }
                    }
                    else {
                        if (!newProps) {
                            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                            // This can happen when we abort work.
                            break;
                        }
                        var currentHostContext = getHostContext();
                        // TODO: Move createInstance to beginWork and keep it on a context
                        // "stack" as the parent. Then append children as we go in beginWork
                        // or completeWork depending on we want to add then top->down or
                        // bottom->up. Top->down is faster in IE11.
                        var wasHydrated = popHydrationState(workInProgress);
                        if (wasHydrated) {
                            // TODO: Move this and createInstance step into the beginPhase
                            // to consolidate.
                            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                                // If changes to the hydrated node needs to be applied at the
                                // commit-phase we mark this as such.
                                markUpdate(workInProgress);
                            }
                        }
                        else {
                            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                            appendAllChildren(instance, workInProgress, false, false);
                            // Certain renderers require commit-time effects for initial mount.
                            // (eg DOM renderer supports auto-focus for certain elements).
                            // Make sure such renderers get scheduled for later work.
                            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
                                markUpdate(workInProgress);
                            }
                            workInProgress.stateNode = instance;
                        }
                        if (workInProgress.ref !== null) {
                            // If there is a ref on a host node we need to schedule a callback
                            markRef$1(workInProgress);
                        }
                    }
                    break;
                }
            case HostText:
                {
                    var newText = newProps;
                    if (current && workInProgress.stateNode != null) {
                        var oldText = current.memoizedProps;
                        // If we have an alternate, that means this is an update and we need
                        // to schedule a side-effect to do the updates.
                        updateHostText$1(current, workInProgress, oldText, newText);
                    }
                    else {
                        if (typeof newText !== 'string') {
                            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                            // This can happen when we abort work.
                        }
                        var _rootContainerInstance = getRootHostContainer();
                        var _currentHostContext = getHostContext();
                        var _wasHydrated = popHydrationState(workInProgress);
                        if (_wasHydrated) {
                            if (prepareToHydrateHostTextInstance(workInProgress)) {
                                markUpdate(workInProgress);
                            }
                        }
                        else {
                            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                        }
                    }
                    break;
                }
            case ForwardRef:
                break;
            case SuspenseComponent:
                {
                    var nextState = workInProgress.memoizedState;
                    if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
                        // Something suspended. Re-render with the fallback children.
                        workInProgress.expirationTime = renderExpirationTime;
                        // Do not reset the effect list.
                        return workInProgress;
                    }
                    var nextDidTimeout = nextState !== null;
                    var prevDidTimeout = current !== null && current.memoizedState !== null;
                    if (current !== null && !nextDidTimeout && prevDidTimeout) {
                        // We just switched from the fallback to the normal children. Delete
                        // the fallback.
                        // TODO: Would it be better to store the fallback fragment on
                        var currentFallbackChild = current.child.sibling;
                        if (currentFallbackChild !== null) {
                            // Deletions go at the beginning of the return fiber's effect list
                            var first = workInProgress.firstEffect;
                            if (first !== null) {
                                workInProgress.firstEffect = currentFallbackChild;
                                currentFallbackChild.nextEffect = first;
                            }
                            else {
                                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                                currentFallbackChild.nextEffect = null;
                            }
                            currentFallbackChild.effectTag = Deletion;
                        }
                    }
                    if (nextDidTimeout || prevDidTimeout) {
                        // If the children are hidden, or if they were previous hidden, schedule
                        // an effect to toggle their visibility. This is also used to attach a
                        // retry listener to the promise.
                        workInProgress.effectTag |= Update;
                    }
                    break;
                }
            case Fragment:
                break;
            case Mode:
                break;
            case Profiler:
                break;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                break;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                break;
            case ContextConsumer:
                break;
            case MemoComponent:
                break;
            case IncompleteClassComponent:
                {
                    // Same as class component case. I put it down here so that the tags are
                    // sequential to ensure this switch is compiled to a jump table.
                    var _Component = workInProgress.type;
                    if (isContextProvider(_Component)) {
                        popContext(workInProgress);
                    }
                    break;
                }
            case DehydratedSuspenseComponent:
                {
                    if (enableSuspenseServerRenderer) {
                        if (current === null) {
                            var _wasHydrated2 = popHydrationState(workInProgress);
                            !_wasHydrated2 ? invariant(false, 'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.') : void 0;
                            skipPastDehydratedSuspenseInstance(workInProgress);
                        }
                        else if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                            // This boundary did not suspend so it's now hydrated.
                            // To handle any future suspense cases, we're going to now upgrade it
                            // to a Suspense component. We detach it from the existing current fiber.
                            current.alternate = null;
                            workInProgress.alternate = null;
                            workInProgress.tag = SuspenseComponent;
                            workInProgress.memoizedState = null;
                            workInProgress.stateNode = null;
                        }
                    }
                    break;
                }
            default:
                invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
        }
        return null;
    }
    function shouldCaptureSuspense(workInProgress) {
        // In order to capture, the Suspense component must have a fallback prop.
        if (workInProgress.memoizedProps.fallback === undefined) {
            return false;
        }
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        return nextState === null;
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(capturedError) {
        return true;
    }
    function logCapturedError(capturedError) {
        var logError = showErrorDialog(capturedError);
        // Allow injected showErrorDialog() to prevent default console.error logging.
        // This enables renderers like ReactNative to better manage redbox behavior.
        if (logError === false) {
            return;
        }
        var error = capturedError.error;
        {
            var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
            // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error != null && error._suppressLogging) {
                if (errorBoundaryFound && willRetry) {
                    // The error is recoverable and was silenced.
                    // Ignore it and don't print the stack addendum.
                    // This is handy for testing error boundaries without noise.
                    return;
                }
                // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console.error(error);
                // For a more detailed description of this block, see:
                // https://github.com/facebook/react/pull/13384
            }
            var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage = void 0;
            // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
            if (errorBoundaryFound && errorBoundaryName) {
                if (willRetry) {
                    errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
                }
                else {
                    errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
                }
            }
            else {
                errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
            }
            var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);
            // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console.error(combinedMessage);
        }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    }
    var PossiblyWeakSet$1 = typeof WeakSet === 'function' ? WeakSet : Set;
    function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;
        if (stack === null && source !== null) {
            stack = getStackByFiberInDevAndProd(source);
        }
        var capturedError = {
            componentName: source !== null ? getComponentName(source.type) : null,
            componentStack: stack !== null ? stack : '',
            error: errorInfo.value,
            errorBoundary: null,
            errorBoundaryName: null,
            errorBoundaryFound: false,
            willRetry: false
        };
        if (boundary !== null && boundary.tag === ClassComponent) {
            capturedError.errorBoundary = boundary.stateNode;
            capturedError.errorBoundaryName = getComponentName(boundary.type);
            capturedError.errorBoundaryFound = true;
            capturedError.willRetry = true;
        }
        try {
            logCapturedError(capturedError);
        }
        catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function () {
                throw e;
            });
        }
    }
    var callComponentWillUnmountWithTimer = function (current$$1, instance) {
        startPhaseTimer(current$$1, 'componentWillUnmount');
        instance.props = current$$1.memoizedProps;
        instance.state = current$$1.memoizedState;
        instance.componentWillUnmount();
        stopPhaseTimer();
    };
    // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current$$1, instance) {
        {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
            if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current$$1, unmountError);
            }
        }
    }
    function safelyDetachRef(current$$1) {
        var ref = current$$1.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                {
                    invokeGuardedCallback(null, ref, null, null);
                    if (hasCaughtError()) {
                        var refError = clearCaughtError();
                        captureCommitPhaseError(current$$1, refError);
                    }
                }
            }
            else {
                ref.current = null;
            }
        }
    }
    function safelyCallDestroy(current$$1, destroy) {
        {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
                var error = clearCaughtError();
                captureCommitPhaseError(current$$1, error);
            }
        }
    }
    function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
        switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                {
                    commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
                    return;
                }
            case ClassComponent:
                {
                    if (finishedWork.effectTag & Snapshot) {
                        if (current$$1 !== null) {
                            var prevProps = current$$1.memoizedProps;
                            var prevState = current$$1.memoizedState;
                            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                            var instance = finishedWork.stateNode;
                            // We could update instance props and state here,
                            // but instead we rely on them being set during last render.
                            // TODO: revisit this when we implement resuming.
                            {
                                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                                }
                            }
                            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                            {
                                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                                if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                                    didWarnSet.add(finishedWork.type);
                                    warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                                }
                            }
                            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                            stopPhaseTimer();
                        }
                    }
                    return;
                }
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
            default:
                {
                    invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                }
        }
    }
    function commitHookEffectList(unmountTag, mountTag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & unmountTag) !== NoEffect$1) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) {
                        destroy();
                    }
                }
                if ((effect.tag & mountTag) !== NoEffect$1) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    {
                        var _destroy = effect.destroy;
                        if (_destroy !== undefined && typeof _destroy !== 'function') {
                            var addendum = void 0;
                            if (_destroy === null) {
                                addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                            }
                            else if (typeof _destroy.then === 'function') {
                                addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, you may write an async function separately ' + 'and then call it from inside the effect:\n\n' + 'async function fetchComment(commentId) {\n' + '  // You can await here\n' + '}\n\n' + 'useEffect(() => {\n' + '  fetchComment(commentId);\n' + '}, [commentId]);\n\n' + 'In the future, React will provide a more idiomatic solution for data fetching ' + "that doesn't involve writing effects manually.";
                            }
                            else {
                                addendum = ' You returned: ' + _destroy;
                            }
                            warningWithoutStack$1(false, 'An Effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
                        }
                    }
                }
                effect = effect.next;
            } while (effect !== firstEffect);
        }
    }
    function commitPassiveHookEffects(finishedWork) {
        commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
        commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
    }
    function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
        switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                {
                    commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
                    break;
                }
            case ClassComponent:
                {
                    var instance = finishedWork.stateNode;
                    if (finishedWork.effectTag & Update) {
                        if (current$$1 === null) {
                            startPhaseTimer(finishedWork, 'componentDidMount');
                            // We could update instance props and state here,
                            // but instead we rely on them being set during last render.
                            // TODO: revisit this when we implement resuming.
                            {
                                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                                }
                            }
                            instance.componentDidMount();
                            stopPhaseTimer();
                        }
                        else {
                            var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                            var prevState = current$$1.memoizedState;
                            startPhaseTimer(finishedWork, 'componentDidUpdate');
                            // We could update instance props and state here,
                            // but instead we rely on them being set during last render.
                            // TODO: revisit this when we implement resuming.
                            {
                                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                                }
                            }
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                            stopPhaseTimer();
                        }
                    }
                    var updateQueue = finishedWork.updateQueue;
                    if (updateQueue !== null) {
                        {
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                            }
                        }
                        // We could update instance props and state here,
                        // but instead we rely on them being set during last render.
                        // TODO: revisit this when we implement resuming.
                        commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
                    }
                    return;
                }
            case HostRoot:
                {
                    var _updateQueue = finishedWork.updateQueue;
                    if (_updateQueue !== null) {
                        var _instance = null;
                        if (finishedWork.child !== null) {
                            switch (finishedWork.child.tag) {
                                case HostComponent:
                                    _instance = getPublicInstance(finishedWork.child.stateNode);
                                    break;
                                case ClassComponent:
                                    _instance = finishedWork.child.stateNode;
                                    break;
                            }
                        }
                        commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
                    }
                    return;
                }
            case HostComponent:
                {
                    var _instance2 = finishedWork.stateNode;
                    // Renderers may schedule work to be done after host components are mounted
                    // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                    // These effects should only be committed when components are first mounted,
                    // aka when there is no current/alternate.
                    if (current$$1 === null && finishedWork.effectTag & Update) {
                        var type = finishedWork.type;
                        var props = finishedWork.memoizedProps;
                        commitMount(_instance2, type, props, finishedWork);
                    }
                    return;
                }
            case HostText:
                {
                    // We have no life-cycles associated with text.
                    return;
                }
            case HostPortal:
                {
                    // We have no life-cycles associated with portals.
                    return;
                }
            case Profiler:
                {
                    if (enableProfilerTimer) {
                        var onRender = finishedWork.memoizedProps.onRender;
                        if (enableSchedulerTracing) {
                            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                        }
                        else {
                            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
                        }
                    }
                    return;
                }
            case SuspenseComponent:
                break;
            case IncompleteClassComponent:
                break;
            default:
                {
                    invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                }
        }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        if (supportsMutation) {
            // We only have the top Fiber that was inserted but we need to recurse down its
            var node = finishedWork;
            while (true) {
                if (node.tag === HostComponent) {
                    var instance = node.stateNode;
                    if (isHidden) {
                        hideInstance(instance);
                    }
                    else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                    }
                }
                else if (node.tag === HostText) {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                        hideTextInstance(_instance3);
                    }
                    else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                    }
                }
                else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
                    // Found a nested Suspense component that timed out. Skip over the
                    var fallbackChildFragment = node.child.sibling;
                    fallbackChildFragment.return = node;
                    node = fallbackChildFragment;
                    continue;
                }
                else if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
                if (node === finishedWork) {
                    return;
                }
                while (node.sibling === null) {
                    if (node.return === null || node.return === finishedWork) {
                        return;
                    }
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse = void 0;
            switch (finishedWork.tag) {
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            }
            if (typeof ref === 'function') {
                ref(instanceToUse);
            }
            else {
                {
                    if (!ref.hasOwnProperty('current')) {
                        warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                    }
                }
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current$$1) {
        var currentRef = current$$1.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') {
                currentRef(null);
            }
            else {
                currentRef.current = null;
            }
        }
    }
    // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(current$$1) {
        onCommitUnmount(current$$1);
        switch (current$$1.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                {
                    var updateQueue = current$$1.updateQueue;
                    if (updateQueue !== null) {
                        var lastEffect = updateQueue.lastEffect;
                        if (lastEffect !== null) {
                            var firstEffect = lastEffect.next;
                            var effect = firstEffect;
                            do {
                                var destroy = effect.destroy;
                                if (destroy !== undefined) {
                                    safelyCallDestroy(current$$1, destroy);
                                }
                                effect = effect.next;
                            } while (effect !== firstEffect);
                        }
                    }
                    break;
                }
            case ClassComponent:
                {
                    safelyDetachRef(current$$1);
                    var instance = current$$1.stateNode;
                    if (typeof instance.componentWillUnmount === 'function') {
                        safelyCallComponentWillUnmount(current$$1, instance);
                    }
                    return;
                }
            case HostComponent:
                {
                    safelyDetachRef(current$$1);
                    return;
                }
            case HostPortal:
                {
                    // TODO: this is recursive.
                    // We are also not using this parent because
                    // the portal will get pushed immediately.
                    if (supportsMutation) {
                        unmountHostComponents(current$$1);
                    }
                    else if (supportsPersistence) {
                        emptyPortalContainer(current$$1);
                    }
                    return;
                }
        }
    }
    function commitNestedUnmounts(root) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        var node = root;
        while (true) {
            commitUnmount(node);
            // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && (
            // If we use mutation we drill down into portals using commitUnmount above.
            // If we don't use mutation we drill down into portals here instead.
            !supportsMutation || node.tag !== HostPortal)) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root) {
                return;
            }
            while (node.sibling === null) {
                if (node.return === null || node.return === root) {
                    return;
                }
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiber(current$$1) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        current$$1.return = null;
        current$$1.child = null;
        current$$1.memoizedState = null;
        current$$1.updateQueue = null;
        var alternate = current$$1.alternate;
        if (alternate !== null) {
            alternate.return = null;
            alternate.child = null;
            alternate.memoizedState = null;
            alternate.updateQueue = null;
        }
    }
    function emptyPortalContainer(current$$1) {
        if (!supportsPersistence) {
            return;
        }
        var portal = current$$1.stateNode;
        var containerInfo = portal.containerInfo;
        var emptyChildSet = createContainerChildSet(containerInfo);
        replaceContainerChildren(containerInfo, emptyChildSet);
    }
    function commitContainer(finishedWork) {
        if (!supportsPersistence) {
            return;
        }
        switch (finishedWork.tag) {
            case ClassComponent:
                {
                    return;
                }
            case HostComponent:
                {
                    return;
                }
            case HostText:
                {
                    return;
                }
            case HostRoot:
            case HostPortal:
                {
                    var portalOrRoot = finishedWork.stateNode;
                    var containerInfo = portalOrRoot.containerInfo, _pendingChildren = portalOrRoot.pendingChildren;
                    replaceContainerChildren(containerInfo, _pendingChildren);
                    return;
                }
            default:
                {
                    invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                }
        }
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
            if (isHostParent(parent)) {
                return parent;
            }
            parent = parent.return;
        }
        invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        var node = fiber;
        siblings: while (true) {
            // If we didn't find anything, let's try the next sibling.
            while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                    // If we pop out of the root or hit the parent the fiber we are the
                    // last sibling.
                    return null;
                }
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedSuspenseComponent) {
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.effectTag & Placement) {
                    // If we don't have a child, try the siblings instead.
                    continue siblings;
                }
                // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                }
                else {
                    node.child.return = node;
                    node = node.child;
                }
            }
            // Check if this host node is stable or about to be placed.
            if (!(node.effectTag & Placement)) {
                // Found it!
                return node.stateNode;
            }
        }
    }
    function commitPlacement(finishedWork) {
        if (!supportsMutation) {
            return;
        }
        // Recursively insert all host nodes into the parent.
        var parentFiber = getHostParentFiber(finishedWork);
        // Note: these two variables *must* always be updated together.
        var parent = void 0;
        var isContainer = void 0;
        switch (parentFiber.tag) {
            case HostComponent:
                parent = parentFiber.stateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentFiber.stateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentFiber.stateNode.containerInfo;
                isContainer = true;
                break;
            default:
                invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
        }
        if (parentFiber.effectTag & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent);
            // Clear ContentReset from the effect tag
            parentFiber.effectTag &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork);
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
                if (before) {
                    if (isContainer) {
                        insertInContainerBefore(parent, node.stateNode, before);
                    }
                    else {
                        insertBefore(parent, node.stateNode, before);
                    }
                }
                else {
                    if (isContainer) {
                        appendChildToContainer(parent, node.stateNode);
                    }
                    else {
                        appendChild(parent, node.stateNode);
                    }
                }
            }
            else if (node.tag === HostPortal) {
                // If the insertion itself is a portal, then we don't want to traverse
                // down its children. Instead, we'll get insertions from each child in
                // the portal directly.
            }
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) {
                return;
            }
            while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                    return;
                }
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function unmountHostComponents(current$$1) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        var node = current$$1;
        // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false;
        // Note: these two variables *must* always be updated together.
        var currentParent = void 0;
        var currentParentIsContainer = void 0;
        while (true) {
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while (true) {
                    !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    switch (parent.tag) {
                        case HostComponent:
                            currentParent = parent.stateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parent.stateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parent.stateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(node);
                // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) {
                    removeChildFromContainer(currentParent, node.stateNode);
                }
                else {
                    removeChild(currentParent, node.stateNode);
                }
                // Don't visit children because we already visited them.
            }
            else if (enableSuspenseServerRenderer && node.tag === DehydratedSuspenseComponent) {
                // Delete the dehydrated suspense boundary and all of its content.
                if (currentParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
                }
                else {
                    clearSuspenseBoundary(currentParent, node.stateNode);
                }
            }
            else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            else {
                commitUnmount(node);
                // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current$$1) {
                return;
            }
            while (node.sibling === null) {
                if (node.return === null || node.return === current$$1) {
                    return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                    // When we go out of the portal, we need to restore the parent.
                    // Since we don't keep a stack of them, we will search for it.
                    currentParentIsValid = false;
                }
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(current$$1) {
        if (supportsMutation) {
            // Recursively delete all host nodes from the parent.
            // Detach refs and call componentWillUnmount() on the whole subtree.
            unmountHostComponents(current$$1);
        }
        else {
            // Detach refs and call componentWillUnmount() on the whole subtree.
            commitNestedUnmounts(current$$1);
        }
        detachFiber(current$$1);
    }
    function commitWork(current$$1, finishedWork) {
        if (!supportsMutation) {
            switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    {
                        // Note: We currently never use MountMutation, but useLayout uses
                        // UnmountMutation.
                        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
                        return;
                    }
            }
            commitContainer(finishedWork);
            return;
        }
        switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                {
                    // Note: We currently never use MountMutation, but useLayout uses
                    // UnmountMutation.
                    commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
                    return;
                }
            case ClassComponent:
                {
                    return;
                }
            case HostComponent:
                {
                    var instance = finishedWork.stateNode;
                    if (instance != null) {
                        // Commit the work prepared earlier.
                        var newProps = finishedWork.memoizedProps;
                        // For hydration we reuse the update path but we treat the oldProps
                        // as the newProps. The updatePayload will contain the real change in
                        // this case.
                        var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
                        var type = finishedWork.type;
                        // TODO: Type the updateQueue to be specific to host components.
                        var updatePayload = finishedWork.updateQueue;
                        finishedWork.updateQueue = null;
                        if (updatePayload !== null) {
                            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                        }
                    }
                    return;
                }
            case HostText:
                {
                    !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
                    commitTextUpdate(textInstance, oldText, newText);
                    return;
                }
            case HostRoot:
                {
                    return;
                }
            case Profiler:
                {
                    return;
                }
            case SuspenseComponent:
                {
                    var newState = finishedWork.memoizedState;
                    var newDidTimeout = void 0;
                    var primaryChildParent = finishedWork;
                    if (newState === null) {
                        newDidTimeout = false;
                    }
                    else {
                        newDidTimeout = true;
                        primaryChildParent = finishedWork.child;
                        if (newState.timedOutAt === NoWork) {
                            // If the children had not already timed out, record the time.
                            // This is used to compute the elapsed time during subsequent
                            // attempts to render the children.
                            newState.timedOutAt = requestCurrentTime();
                        }
                    }
                    if (primaryChildParent !== null) {
                        hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
                    }
                    // If this boundary just timed out, then it will have a set of thenables.
                    // For each thenable, attach a listener so that when it resolves, React
                    // attempts to re-render the boundary in the primary (pre-timeout) state.
                    var thenables = finishedWork.updateQueue;
                    if (thenables !== null) {
                        finishedWork.updateQueue = null;
                        var retryCache = finishedWork.stateNode;
                        if (retryCache === null) {
                            retryCache = finishedWork.stateNode = new PossiblyWeakSet$1();
                        }
                        thenables.forEach(function (thenable) {
                            // Memoize using the boundary fiber to prevent redundant listeners.
                            var retry = retryTimedOutBoundary.bind(null, finishedWork, thenable);
                            if (enableSchedulerTracing) {
                                retry = unstable_wrap(retry);
                            }
                            if (!retryCache.has(thenable)) {
                                retryCache.add(thenable);
                                thenable.then(retry, retry);
                            }
                        });
                    }
                    return;
                }
            case IncompleteClassComponent:
                {
                    return;
                }
            default:
                {
                    invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
                }
        }
    }
    function commitResetTextContent(current$$1) {
        if (!supportsMutation) {
            return;
        }
        resetTextContent(current$$1.stateNode);
    }
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime);
        // Unmount the root by rendering null.
        update.tag = CaptureUpdate;
        // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = { element: null };
        var error = errorInfo.value;
        update.callback = function () {
            onUncaughtError(error);
            logError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
        var update = createUpdate(expirationTime);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error = errorInfo.value;
            update.payload = function () {
                return getDerivedStateFromError(error);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') {
            update.callback = function callback() {
                if (typeof getDerivedStateFromError !== 'function') {
                    // To preserve the preexisting retry behavior of error boundaries,
                    // we keep track of which ones already failed during this batch.
                    // This gets reset before we yield back to the browser.
                    // TODO: Warn in strict mode if getDerivedStateFromError is
                    // not defined.
                    markLegacyErrorBoundaryAsFailed(this);
                }
                var error = errorInfo.value;
                var stack = errorInfo.stack;
                logError(fiber, errorInfo);
                this.componentDidCatch(error, {
                    componentStack: stack !== null ? stack : ''
                });
                {
                    if (typeof getDerivedStateFromError !== 'function') {
                        // If componentDidCatch is the only error boundary method defined,
                        // then it needs to call setState to recover from errors.
                        // If no state update is scheduled then the boundary will swallow the error.
                        !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
                    }
                }
            };
        }
        return update;
    }
    function attachPingListener(root, renderExpirationTime, thenable) {
        // Attach a listener to the promise to "ping" the root and retry. But
        // only if one does not already exist for the current render expiration
        // time (which acts like a "thread ID" here).
        var pingCache = root.pingCache;
        var threadIDs = void 0;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap();
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
        }
        else {
            threadIDs = pingCache.get(thenable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(thenable, threadIDs);
            }
        }
        if (!threadIDs.has(renderExpirationTime)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(renderExpirationTime);
            var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
            if (enableSchedulerTracing) {
                ping = unstable_wrap(ping);
            }
            thenable.then(ping, ping);
        }
    }
    function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
        // The source fiber did not complete.
        sourceFiber.effectTag |= Incomplete;
        // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a thenable.
            var thenable = value;
            // Find the earliest timeout threshold of all the placeholders in the
            // ancestor path. We could avoid this traversal by storing the thresholds on
            // the stack, but we choose not to because we only hit this path if we're
            // IO-bound (i.e. if something suspends). Whereas the stack is used even in
            // the non-IO- bound case.
            var _workInProgress = returnFiber;
            var earliestTimeoutMs = -1;
            var startTimeMs = -1;
            do {
                if (_workInProgress.tag === SuspenseComponent) {
                    var current$$1 = _workInProgress.alternate;
                    if (current$$1 !== null) {
                        var currentState = current$$1.memoizedState;
                        if (currentState !== null) {
                            // Reached a boundary that already timed out. Do not search
                            // any further.
                            var timedOutAt = currentState.timedOutAt;
                            startTimeMs = expirationTimeToMs(timedOutAt);
                            // Do not search any further.
                            break;
                        }
                    }
                    var timeoutPropMs = _workInProgress.pendingProps.maxDuration;
                    if (typeof timeoutPropMs === 'number') {
                        if (timeoutPropMs <= 0) {
                            earliestTimeoutMs = 0;
                        }
                        else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
                            earliestTimeoutMs = timeoutPropMs;
                        }
                    }
                }
                // If there is a DehydratedSuspenseComponent we don't have to do anything because
                // if something suspends inside it, we will simply leave that as dehydrated. It
                // will never timeout.
                _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            // Schedule the nearest Suspense to re-render the timed out view.
            _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    var thenables = _workInProgress.updateQueue;
                    if (thenables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(thenable);
                        _workInProgress.updateQueue = updateQueue;
                    }
                    else {
                        thenables.add(thenable);
                    }
                    // If the boundary is outside of concurrent mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a concurrent mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
                        _workInProgress.effectTag |= DidCapture;
                        // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) {
                                // This is a new mount. Change the tag so it's not mistaken for a
                                // completed class component. For example, we should not call
                                // componentWillUnmount if it is deleted.
                                sourceFiber.tag = IncompleteClassComponent;
                            }
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force updte to
                                // prevent a bail out.
                                var update = createUpdate(Sync);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        }
                        // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.expirationTime = Sync;
                        // Exit without suspending.
                        return;
                    }
                    // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    attachPingListener(root, renderExpirationTime, thenable);
                    var absoluteTimeoutMs = void 0;
                    if (earliestTimeoutMs === -1) {
                        // If no explicit threshold is given, default to an arbitrarily large
                        // value. The actual size doesn't matter because the threshold for the
                        // whole tree will be clamped to the expiration time.
                        absoluteTimeoutMs = maxSigned31BitInt;
                    }
                    else {
                        if (startTimeMs === -1) {
                            // This suspend happened outside of any already timed-out
                            // placeholders. We don't know exactly when the update was
                            // scheduled, but we can infer an approximate start time from the
                            // expiration time. First, find the earliest uncommitted expiration
                            // time in the tree, including work that is suspended. Then subtract
                            // the offset used to compute an async update's expiration time.
                            // This will cause high priority (interactive) work to expire
                            // earlier than necessary, but we can account for this by adjusting
                            // for the Just Noticeable Difference.
                            var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
                            var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
                            startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
                        }
                        absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
                    }
                    // Mark the earliest timeout in the suspended fiber's ancestor path.
                    // After completing the root, we'll take the largest of all the
                    // suspended fiber's timeouts and use it to compute a timeout for the
                    // whole tree.
                    renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);
                    _workInProgress.effectTag |= ShouldCapture;
                    _workInProgress.expirationTime = renderExpirationTime;
                    return;
                }
                else if (enableSuspenseServerRenderer && _workInProgress.tag === DehydratedSuspenseComponent) {
                    attachPingListener(root, renderExpirationTime, thenable);
                    // Since we already have a current fiber, we can eagerly add a retry listener.
                    var retryCache = _workInProgress.memoizedState;
                    if (retryCache === null) {
                        retryCache = _workInProgress.memoizedState = new PossiblyWeakSet();
                        var _current = _workInProgress.alternate;
                        !_current ? invariant(false, 'A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.') : void 0;
                        _current.memoizedState = retryCache;
                    }
                    // Memoize using the boundary fiber to prevent redundant listeners.
                    if (!retryCache.has(thenable)) {
                        retryCache.add(thenable);
                        var retry = retryTimedOutBoundary.bind(null, _workInProgress, thenable);
                        if (enableSchedulerTracing) {
                            retry = unstable_wrap(retry);
                        }
                        thenable.then(retry, retry);
                    }
                    _workInProgress.effectTag |= ShouldCapture;
                    _workInProgress.expirationTime = renderExpirationTime;
                    return;
                }
                // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
        }
        // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch (workInProgress.tag) {
                case HostRoot:
                    {
                        var _errorInfo = value;
                        workInProgress.effectTag |= ShouldCapture;
                        workInProgress.expirationTime = renderExpirationTime;
                        var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
                        enqueueCapturedUpdate(workInProgress, _update);
                        return;
                    }
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.effectTag |= ShouldCapture;
                        workInProgress.expirationTime = renderExpirationTime;
                        // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
                default:
                    break;
            }
            workInProgress = workInProgress.return;
        } while (workInProgress !== null);
    }
    function unwindWork(workInProgress, renderExpirationTime) {
        switch (workInProgress.tag) {
            case ClassComponent:
                {
                    var Component = workInProgress.type;
                    if (isContextProvider(Component)) {
                        popContext(workInProgress);
                    }
                    var effectTag = workInProgress.effectTag;
                    if (effectTag & ShouldCapture) {
                        workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
                        return workInProgress;
                    }
                    return null;
                }
            case HostRoot:
                {
                    popHostContainer(workInProgress);
                    popTopLevelContextObject(workInProgress);
                    var _effectTag = workInProgress.effectTag;
                    !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
                    workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
                    return workInProgress;
                }
            case HostComponent:
                {
                    // TODO: popHydrationState
                    popHostContext(workInProgress);
                    return null;
                }
            case SuspenseComponent:
                {
                    var _effectTag2 = workInProgress.effectTag;
                    if (_effectTag2 & ShouldCapture) {
                        workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                        // Captured a suspense effect. Re-render the boundary.
                        return workInProgress;
                    }
                    return null;
                }
            case DehydratedSuspenseComponent:
                {
                    if (enableSuspenseServerRenderer) {
                        // TODO: popHydrationState
                        var _effectTag3 = workInProgress.effectTag;
                        if (_effectTag3 & ShouldCapture) {
                            workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture;
                            // Captured a suspense effect. Re-render the boundary.
                            return workInProgress;
                        }
                    }
                    return null;
                }
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
            case ClassComponent:
                {
                    var childContextTypes = interruptedWork.type.childContextTypes;
                    if (childContextTypes !== null && childContextTypes !== undefined) {
                        popContext(interruptedWork);
                    }
                    break;
                }
            case HostRoot:
                {
                    popHostContainer(interruptedWork);
                    popTopLevelContextObject(interruptedWork);
                    break;
                }
            case HostComponent:
                {
                    popHostContext(interruptedWork);
                    break;
                }
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            default:
                break;
        }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
    var didWarnAboutStateTransition = void 0;
    var didWarnSetStateChildContext = void 0;
    var warnAboutUpdateOnUnmounted = void 0;
    var warnAboutInvalidUpdates = void 0;
    if (enableSchedulerTracing) {
        // Provide explicit error message when production+profiling bundle of e.g. react-dom
        // is used with production (non-profiling) bundle of scheduler/tracing
        !(__interactionsRef != null && __interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
    }
    {
        didWarnAboutStateTransition = false;
        didWarnSetStateChildContext = false;
        var didWarnStateUpdateForUnmountedComponent = {};
        warnAboutUpdateOnUnmounted = function (fiber, isClass) {
            // We show the whole stack but dedupe on the top component's name because
            // the problematic code almost always lies inside that component.
            var componentName = getComponentName(fiber.type) || 'ReactComponent';
            if (didWarnStateUpdateForUnmountedComponent[componentName]) {
                return;
            }
            warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
            didWarnStateUpdateForUnmountedComponent[componentName] = true;
        };
        warnAboutInvalidUpdates = function (instance) {
            switch (phase) {
                case 'getChildContext':
                    if (didWarnSetStateChildContext) {
                        return;
                    }
                    warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
                    didWarnSetStateChildContext = true;
                    break;
                case 'render':
                    if (didWarnAboutStateTransition) {
                        return;
                    }
                    warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
                    didWarnAboutStateTransition = true;
                    break;
            }
        };
    }
    // Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.
    var lastUniqueAsyncExpiration = Sync - 1;
    var isWorking = false;
    // The next work in progress fiber that we're currently working on.
    var nextUnitOfWork = null;
    var nextRoot = null;
    // The time at which we're currently rendering work.
    var nextRenderExpirationTime = NoWork;
    var nextLatestAbsoluteTimeoutMs = -1;
    var nextRenderDidError = false;
    // The next fiber with an effect that we're currently committing.
    var nextEffect = null;
    var isCommitting$1 = false;
    var rootWithPendingPassiveEffects = null;
    var passiveEffectCallbackHandle = null;
    var passiveEffectCallback = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    // Used for performance tracking.
    var interruptedBy = null;
    var stashedWorkInProgressProperties = void 0;
    var replayUnitOfWork = void 0;
    var mayReplayFailedUnitOfWork = void 0;
    var isReplayingFailedUnitOfWork = void 0;
    var originalReplayError = void 0;
    var rethrowOriginalError = void 0;
    if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        stashedWorkInProgressProperties = null;
        mayReplayFailedUnitOfWork = true;
        isReplayingFailedUnitOfWork = false;
        originalReplayError = null;
        replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
            if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
                // Don't replay promises. Treat everything else like an error.
                // TODO: Need to figure out a different strategy if/when we add
                // support for catching other types.
                return;
            }
            // Restore the original state of the work-in-progress
            if (stashedWorkInProgressProperties === null) {
                // This should never happen. Don't throw because this code is DEV-only.
                warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
                return;
            }
            assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);
            switch (failedUnitOfWork.tag) {
                case HostRoot:
                    popHostContainer(failedUnitOfWork);
                    popTopLevelContextObject(failedUnitOfWork);
                    break;
                case HostComponent:
                    popHostContext(failedUnitOfWork);
                    break;
                case ClassComponent:
                    {
                        var Component = failedUnitOfWork.type;
                        if (isContextProvider(Component)) {
                            popContext(failedUnitOfWork);
                        }
                        break;
                    }
                case HostPortal:
                    popHostContainer(failedUnitOfWork);
                    break;
                case ContextProvider:
                    popProvider(failedUnitOfWork);
                    break;
            }
            // Replay the begin phase.
            isReplayingFailedUnitOfWork = true;
            originalReplayError = thrownValue;
            invokeGuardedCallback(null, workLoop, null, isYieldy);
            isReplayingFailedUnitOfWork = false;
            originalReplayError = null;
            if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (replayError != null && thrownValue != null) {
                    try {
                        // Reading the expando property is intentionally
                        // inside `try` because it might be a getter or Proxy.
                        if (replayError._suppressLogging) {
                            // Also suppress logging for the original error.
                            thrownValue._suppressLogging = true;
                        }
                    }
                    catch (inner) {
                        // Ignore.
                    }
                }
            }
            else {
                // If the begin phase did not fail the second time, set this pointer
                // back to the original value.
                nextUnitOfWork = failedUnitOfWork;
            }
        };
        rethrowOriginalError = function () {
            throw originalReplayError;
        };
    }
    function resetStack() {
        if (nextUnitOfWork !== null) {
            var interruptedWork = nextUnitOfWork.return;
            while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        {
            ReactStrictModeWarnings.discardPendingWarnings();
            checkThatStackIsEmpty();
        }
        nextRoot = null;
        nextRenderExpirationTime = NoWork;
        nextLatestAbsoluteTimeoutMs = -1;
        nextRenderDidError = false;
        nextUnitOfWork = null;
    }
    function commitAllHostEffects() {
        while (nextEffect !== null) {
            {
                setCurrentFiber(nextEffect);
            }
            recordEffect();
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset) {
                commitResetTextContent(nextEffect);
            }
            if (effectTag & Ref) {
                var current$$1 = nextEffect.alternate;
                if (current$$1 !== null) {
                    commitDetachRef(current$$1);
                }
            }
            // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every
            // possible bitmap value, we remove the secondary effects from the
            // effect tag and switch on that value.
            var primaryEffectTag = effectTag & (Placement | Update | Deletion);
            switch (primaryEffectTag) {
                case Placement:
                    {
                        commitPlacement(nextEffect);
                        // Clear the "placement" from effect tag so that we know that this is inserted, before
                        // any life-cycles like componentDidMount gets called.
                        // TODO: findDOMNode doesn't rely on this any more but isMounted
                        // does and isMounted is deprecated anyway so we should be able
                        // to kill this.
                        nextEffect.effectTag &= ~Placement;
                        break;
                    }
                case PlacementAndUpdate:
                    {
                        // Placement
                        commitPlacement(nextEffect);
                        // Clear the "placement" from effect tag so that we know that this is inserted, before
                        // any life-cycles like componentDidMount gets called.
                        nextEffect.effectTag &= ~Placement;
                        // Update
                        var _current = nextEffect.alternate;
                        commitWork(_current, nextEffect);
                        break;
                    }
                case Update:
                    {
                        var _current2 = nextEffect.alternate;
                        commitWork(_current2, nextEffect);
                        break;
                    }
                case Deletion:
                    {
                        commitDeletion(nextEffect);
                        break;
                    }
            }
            nextEffect = nextEffect.nextEffect;
        }
        {
            resetCurrentFiber();
        }
    }
    function commitBeforeMutationLifecycles() {
        while (nextEffect !== null) {
            {
                setCurrentFiber(nextEffect);
            }
            var effectTag = nextEffect.effectTag;
            if (effectTag & Snapshot) {
                recordEffect();
                var current$$1 = nextEffect.alternate;
                commitBeforeMutationLifeCycles(current$$1, nextEffect);
            }
            nextEffect = nextEffect.nextEffect;
        }
        {
            resetCurrentFiber();
        }
    }
    function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
        {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            ReactStrictModeWarnings.flushLegacyContextWarning();
            if (warnAboutDeprecatedLifecycles) {
                ReactStrictModeWarnings.flushPendingDeprecationWarnings();
            }
        }
        while (nextEffect !== null) {
            {
                setCurrentFiber(nextEffect);
            }
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
                recordEffect();
                var current$$1 = nextEffect.alternate;
                commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
            }
            if (effectTag & Ref) {
                recordEffect();
                commitAttachRef(nextEffect);
            }
            if (effectTag & Passive) {
                rootWithPendingPassiveEffects = finishedRoot;
            }
            nextEffect = nextEffect.nextEffect;
        }
        {
            resetCurrentFiber();
        }
    }
    function commitPassiveEffects(root, firstEffect) {
        rootWithPendingPassiveEffects = null;
        passiveEffectCallbackHandle = null;
        passiveEffectCallback = null;
        // Set this to true to prevent re-entrancy
        var previousIsRendering = isRendering;
        isRendering = true;
        var effect = firstEffect;
        do {
            {
                setCurrentFiber(effect);
            }
            if (effect.effectTag & Passive) {
                var didError = false;
                var error = void 0;
                {
                    invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);
                    if (hasCaughtError()) {
                        didError = true;
                        error = clearCaughtError();
                    }
                }
                if (didError) {
                    captureCommitPhaseError(effect, error);
                }
            }
            effect = effect.nextEffect;
        } while (effect !== null);
        {
            resetCurrentFiber();
        }
        isRendering = previousIsRendering;
        // Check if work was scheduled by one of the effects
        var rootExpirationTime = root.expirationTime;
        if (rootExpirationTime !== NoWork) {
            requestWork(root, rootExpirationTime);
        }
        // Flush any sync work that was scheduled by effects
        if (!isBatchingUpdates && !isRendering) {
            performSyncWork();
        }
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        }
        else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
    }
    function flushPassiveEffects() {
        if (passiveEffectCallbackHandle !== null) {
            cancelPassiveEffects(passiveEffectCallbackHandle);
        }
        if (passiveEffectCallback !== null) {
            // We call the scheduled callback instead of commitPassiveEffects directly
            // to ensure tracing works correctly.
            passiveEffectCallback();
        }
    }
    function commitRoot(root, finishedWork) {
        isWorking = true;
        isCommitting$1 = true;
        startCommitTimer();
        !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var committedExpirationTime = root.pendingCommitExpirationTime;
        !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        root.pendingCommitExpirationTime = NoWork;
        // Update the pending priority levels to account for the work that we are
        // about to commit. This needs to happen before calling the lifecycles, since
        // they may schedule additional updates.
        var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
        var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
        var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
        markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);
        var prevInteractions = null;
        if (enableSchedulerTracing) {
            // Restore any pending interactions at this point,
            // So that cascading work triggered during the render phase will be accounted for.
            prevInteractions = __interactionsRef.current;
            __interactionsRef.current = root.memoizedInteractions;
        }
        // Reset this to null before calling lifecycles
        ReactCurrentOwner$2.current = null;
        var firstEffect = void 0;
        if (finishedWork.effectTag > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if
            // it had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            }
            else {
                firstEffect = finishedWork;
            }
        }
        else {
            // There is no effect on the root.
            firstEffect = finishedWork.firstEffect;
        }
        prepareForCommit(root.containerInfo);
        // Invoke instances of getSnapshotBeforeUpdate before mutation.
        nextEffect = firstEffect;
        startCommitSnapshotEffectsTimer();
        while (nextEffect !== null) {
            var didError = false;
            var error = void 0;
            {
                invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);
                if (hasCaughtError()) {
                    didError = true;
                    error = clearCaughtError();
                }
            }
            if (didError) {
                !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                captureCommitPhaseError(nextEffect, error);
                // Clean-up
                if (nextEffect !== null) {
                    nextEffect = nextEffect.nextEffect;
                }
            }
        }
        stopCommitSnapshotEffectsTimer();
        if (enableProfilerTimer) {
            // Mark the current commit time to be shared by all Profilers in this batch.
            // This enables them to be grouped later.
            recordCommitTime();
        }
        // Commit all the side-effects within a tree. We'll do this in two passes.
        // The first pass performs all the host insertions, updates, deletions and
        // ref unmounts.
        nextEffect = firstEffect;
        startCommitHostEffectsTimer();
        while (nextEffect !== null) {
            var _didError = false;
            var _error = void 0;
            {
                invokeGuardedCallback(null, commitAllHostEffects, null);
                if (hasCaughtError()) {
                    _didError = true;
                    _error = clearCaughtError();
                }
            }
            if (_didError) {
                !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                captureCommitPhaseError(nextEffect, _error);
                // Clean-up
                if (nextEffect !== null) {
                    nextEffect = nextEffect.nextEffect;
                }
            }
        }
        stopCommitHostEffectsTimer();
        resetAfterCommit(root.containerInfo);
        // The work-in-progress tree is now the current tree. This must come after
        // the first pass of the commit phase, so that the previous tree is still
        // current during componentWillUnmount, but before the second pass, so that
        // the finished work is current during componentDidMount/Update.
        root.current = finishedWork;
        // In the second pass we'll perform all life-cycles and ref callbacks.
        // Life-cycles happen as a separate pass so that all placements, updates,
        // and deletions in the entire tree have already been invoked.
        // This pass also triggers any renderer-specific initial effects.
        nextEffect = firstEffect;
        startCommitLifeCyclesTimer();
        while (nextEffect !== null) {
            var _didError2 = false;
            var _error2 = void 0;
            {
                invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);
                if (hasCaughtError()) {
                    _didError2 = true;
                    _error2 = clearCaughtError();
                }
            }
            if (_didError2) {
                !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                captureCommitPhaseError(nextEffect, _error2);
                if (nextEffect !== null) {
                    nextEffect = nextEffect.nextEffect;
                }
            }
        }
        if (firstEffect !== null && rootWithPendingPassiveEffects !== null) {
            // This commit included a passive effect. These do not need to fire until
            // after the next paint. Schedule an callback to fire them in an async
            // event. To ensure serial execution, the callback will be flushed early if
            // we enter rootWithPendingPassiveEffects commit phase before then.
            var callback = commitPassiveEffects.bind(null, root, firstEffect);
            if (enableSchedulerTracing) {
                // TODO: Avoid this extra callback by mutating the tracing ref directly,
                // like we do at the beginning of commitRoot. I've opted not to do that
                // here because that code is still in flux.
                callback = unstable_wrap(callback);
            }
            passiveEffectCallbackHandle = unstable_runWithPriority(unstable_NormalPriority, function () {
                return schedulePassiveEffects(callback);
            });
            passiveEffectCallback = callback;
        }
        isCommitting$1 = false;
        isWorking = false;
        stopCommitLifeCyclesTimer();
        stopCommitTimer();
        onCommitRoot(finishedWork.stateNode);
        if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
        }
        var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
        var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
        var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;
        if (earliestRemainingTimeAfterCommit === NoWork) {
            // If there's no remaining work, we can clear the set of already failed
            // error boundaries.
            legacyErrorBoundariesThatAlreadyFailed = null;
        }
        onCommit(root, earliestRemainingTimeAfterCommit);
        if (enableSchedulerTracing) {
            __interactionsRef.current = prevInteractions;
            var subscriber = void 0;
            try {
                subscriber = __subscriberRef.current;
                if (subscriber !== null && root.memoizedInteractions.size > 0) {
                    var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
                    subscriber.onWorkStopped(root.memoizedInteractions, threadID);
                }
            }
            catch (error) {
                // It's not safe for commitRoot() to throw.
                // Store the error for now and we'll re-throw in finishRendering().
                if (!hasUnhandledError) {
                    hasUnhandledError = true;
                    unhandledError = error;
                }
            }
            finally {
                // Clear completed interactions from the pending Map.
                // Unless the render was suspended or cascading work was scheduled,
                // In which case– leave pending interactions until the subsequent render.
                var pendingInteractionMap = root.pendingInteractionMap;
                pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
                    // Only decrement the pending interaction count if we're done.
                    // If there's still work at the current priority,
                    // That indicates that we are waiting for suspense data.
                    if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                        pendingInteractionMap.delete(scheduledExpirationTime);
                        scheduledInteractions.forEach(function (interaction) {
                            interaction.__count--;
                            if (subscriber !== null && interaction.__count === 0) {
                                try {
                                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                                }
                                catch (error) {
                                    // It's not safe for commitRoot() to throw.
                                    // Store the error for now and we'll re-throw in finishRendering().
                                    if (!hasUnhandledError) {
                                        hasUnhandledError = true;
                                        unhandledError = error;
                                    }
                                }
                            }
                        });
                    }
                });
            }
        }
    }
    function resetChildExpirationTime(workInProgress, renderTime) {
        if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
            // The children of this component are hidden. Don't bubble their
            // expiration times.
            return;
        }
        var newChildExpirationTime = NoWork;
        // Bubble up the earliest expiration time.
        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
            // We're in profiling mode.
            // Let's use this same traversal to update the render durations.
            var actualDuration = workInProgress.actualDuration;
            var treeBaseDuration = workInProgress.selfBaseDuration;
            // When a fiber is cloned, its actualDuration is reset to 0.
            // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration.
            // If the fiber has not been cloned though, (meaning no work was done),
            // Then this value will reflect the amount of time spent working on a previous render.
            // In that case it should not bubble.
            // We determine whether it was cloned by comparing the child pointer.
            var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;
            var child = workInProgress.child;
            while (child !== null) {
                var childUpdateExpirationTime = child.expirationTime;
                var childChildExpirationTime = child.childExpirationTime;
                if (childUpdateExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = childUpdateExpirationTime;
                }
                if (childChildExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = childChildExpirationTime;
                }
                if (shouldBubbleActualDurations) {
                    actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            workInProgress.actualDuration = actualDuration;
            workInProgress.treeBaseDuration = treeBaseDuration;
        }
        else {
            var _child = workInProgress.child;
            while (_child !== null) {
                var _childUpdateExpirationTime = _child.expirationTime;
                var _childChildExpirationTime = _child.childExpirationTime;
                if (_childUpdateExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = _childUpdateExpirationTime;
                }
                if (_childChildExpirationTime > newChildExpirationTime) {
                    newChildExpirationTime = _childChildExpirationTime;
                }
                _child = _child.sibling;
            }
        }
        workInProgress.childExpirationTime = newChildExpirationTime;
    }
    function completeUnitOfWork(workInProgress) {
        // Attempt to complete the current unit of work, then move to the
        // next sibling. If there are no more siblings, return to the
        // parent fiber.
        while (true) {
            // The current, flushed, state of this fiber is the alternate.
            // Ideally nothing should rely on this, but relying on it here
            // means that we don't need an additional field on the work in
            // progress.
            var current$$1 = workInProgress.alternate;
            {
                setCurrentFiber(workInProgress);
            }
            var returnFiber = workInProgress.return;
            var siblingFiber = workInProgress.sibling;
            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
                if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                    // Don't replay if it fails during completion phase.
                    mayReplayFailedUnitOfWork = false;
                }
                // This fiber completed.
                // Remember we're completing this unit so we can find a boundary if it fails.
                nextUnitOfWork = workInProgress;
                if (enableProfilerTimer) {
                    if (workInProgress.mode & ProfileMode) {
                        startProfilerTimer(workInProgress);
                    }
                    nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
                    if (workInProgress.mode & ProfileMode) {
                        // Update render duration assuming we didn't error.
                        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                    }
                }
                else {
                    nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
                }
                if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                    // We're out of completion phase so replaying is fine now.
                    mayReplayFailedUnitOfWork = true;
                }
                stopWorkTimer(workInProgress);
                resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
                {
                    resetCurrentFiber();
                }
                if (nextUnitOfWork !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    return nextUnitOfWork;
                }
                if (returnFiber !== null &&
                    // Do not append effects to parents if a sibling failed to complete
                    (returnFiber.effectTag & Incomplete) === NoEffect) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) {
                        returnFiber.firstEffect = workInProgress.firstEffect;
                    }
                    if (workInProgress.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) {
                            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                        }
                        returnFiber.lastEffect = workInProgress.lastEffect;
                    }
                    // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if
                    // needed, by doing multiple passes over the effect list. We don't want
                    // to schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var effectTag = workInProgress.effectTag;
                    // Skip both NoWork and PerformedWork tags when creating the effect list.
                    // PerformedWork effect is read by React DevTools but shouldn't be committed.
                    if (effectTag > PerformedWork) {
                        if (returnFiber.lastEffect !== null) {
                            returnFiber.lastEffect.nextEffect = workInProgress;
                        }
                        else {
                            returnFiber.firstEffect = workInProgress;
                        }
                        returnFiber.lastEffect = workInProgress;
                    }
                }
                if (true && ReactFiberInstrumentation_1.debugTool) {
                    ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                }
                if (siblingFiber !== null) {
                    // If there is more work to do in this returnFiber, do that next.
                    return siblingFiber;
                }
                else if (returnFiber !== null) {
                    // If there's no more work in this returnFiber. Complete the returnFiber.
                    workInProgress = returnFiber;
                    continue;
                }
                else {
                    // We've reached the root.
                    return null;
                }
            }
            else {
                if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                    // Include the time spent working on failed children before continuing.
                    var actualDuration = workInProgress.actualDuration;
                    var child = workInProgress.child;
                    while (child !== null) {
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    workInProgress.actualDuration = actualDuration;
                }
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var next = unwindWork(workInProgress, nextRenderExpirationTime);
                // Because this fiber did not complete, don't reset its expiration time.
                if (workInProgress.effectTag & DidCapture) {
                    // Restarting an error boundary
                    stopFailedWorkTimer(workInProgress);
                }
                else {
                    stopWorkTimer(workInProgress);
                }
                {
                    resetCurrentFiber();
                }
                if (next !== null) {
                    stopWorkTimer(workInProgress);
                    if (true && ReactFiberInstrumentation_1.debugTool) {
                        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                    }
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    next.effectTag &= HostEffectMask;
                    return next;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.effectTag |= Incomplete;
                }
                if (true && ReactFiberInstrumentation_1.debugTool) {
                    ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                }
                if (siblingFiber !== null) {
                    // If there is more work to do in this returnFiber, do that next.
                    return siblingFiber;
                }
                else if (returnFiber !== null) {
                    // If there's no more work in this returnFiber. Complete the returnFiber.
                    workInProgress = returnFiber;
                    continue;
                }
                else {
                    return null;
                }
            }
        }
        // Without this explicit null return Flow complains of invalid return type
        // TODO Remove the above while(true) loop
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function performUnitOfWork(workInProgress) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current$$1 = workInProgress.alternate;
        // See if beginning this work spawns more work.
        startWorkTimer(workInProgress);
        {
            setCurrentFiber(workInProgress);
        }
        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
        }
        var next = void 0;
        if (enableProfilerTimer) {
            if (workInProgress.mode & ProfileMode) {
                startProfilerTimer(workInProgress);
            }
            next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
            workInProgress.memoizedProps = workInProgress.pendingProps;
            if (workInProgress.mode & ProfileMode) {
                // Record the render duration assuming we didn't bailout (or error).
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
            }
        }
        else {
            next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
            workInProgress.memoizedProps = workInProgress.pendingProps;
        }
        {
            resetCurrentFiber();
            if (isReplayingFailedUnitOfWork) {
                // Currently replaying a failed unit of work. This should be unreachable,
                // because the render phase is meant to be idempotent, and it should
                // have thrown again. Since it didn't, rethrow the original error, so
                // React's internal stack is not misaligned.
                rethrowOriginalError();
            }
        }
        if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
        }
        if (next === null) {
            // If this doesn't spawn new work, complete the current work.
            next = completeUnitOfWork(workInProgress);
        }
        ReactCurrentOwner$2.current = null;
        return next;
    }
    function workLoop(isYieldy) {
        if (!isYieldy) {
            // Flush work without yielding
            while (nextUnitOfWork !== null) {
                nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
        }
        else {
            // Flush asynchronous work until there's a higher priority event
            while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
                nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
        }
    }
    function renderRoot(root, isYieldy) {
        !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        flushPassiveEffects();
        isWorking = true;
        var previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        var expirationTime = root.nextExpirationTimeToWorkOn;
        // Check if we're starting from a fresh stack, or if we're resuming from
        // previously yielded work.
        if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
            // Reset the stack and start working from the root.
            resetStack();
            nextRoot = root;
            nextRenderExpirationTime = expirationTime;
            nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
            root.pendingCommitExpirationTime = NoWork;
            if (enableSchedulerTracing) {
                // Determine which interactions this batch of work currently includes,
                // So that we can accurately attribute time spent working on it,
                var interactions = new Set();
                root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
                    if (scheduledExpirationTime >= expirationTime) {
                        scheduledInteractions.forEach(function (interaction) {
                            return interactions.add(interaction);
                        });
                    }
                });
                // Store the current set of interactions on the FiberRoot for a few reasons:
                // We can re-use it in hot functions like renderRoot() without having to recalculate it.
                // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
                // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
                root.memoizedInteractions = interactions;
                if (interactions.size > 0) {
                    var subscriber = __subscriberRef.current;
                    if (subscriber !== null) {
                        var threadID = computeThreadID(expirationTime, root.interactionThreadID);
                        try {
                            subscriber.onWorkStarted(interactions, threadID);
                        }
                        catch (error) {
                            // Work thrown by an interaction tracing subscriber should be rethrown,
                            // But only once it's safe (to avoid leaving the scheduler in an invalid state).
                            // Store the error for now and we'll re-throw in finishRendering().
                            if (!hasUnhandledError) {
                                hasUnhandledError = true;
                                unhandledError = error;
                            }
                        }
                    }
                }
            }
        }
        var prevInteractions = null;
        if (enableSchedulerTracing) {
            // We're about to start new traced work.
            // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
            prevInteractions = __interactionsRef.current;
            __interactionsRef.current = root.memoizedInteractions;
        }
        var didFatal = false;
        startWorkLoopTimer(nextUnitOfWork);
        do {
            try {
                workLoop(isYieldy);
            }
            catch (thrownValue) {
                resetContextDependences();
                resetHooks();
                // Reset in case completion throws.
                // This is only used in DEV and when replaying is on.
                var mayReplay = void 0;
                if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                    mayReplay = mayReplayFailedUnitOfWork;
                    mayReplayFailedUnitOfWork = true;
                }
                if (nextUnitOfWork === null) {
                    // This is a fatal error.
                    didFatal = true;
                    onUncaughtError(thrownValue);
                }
                else {
                    if (enableProfilerTimer && nextUnitOfWork.mode & ProfileMode) {
                        // Record the time spent rendering before an error was thrown.
                        // This avoids inaccurate Profiler durations in the case of a suspended render.
                        stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
                    }
                    {
                        // Reset global debug state
                        // We assume this is defined in DEV
                        resetCurrentlyProcessingQueue();
                    }
                    if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                        if (mayReplay) {
                            var failedUnitOfWork = nextUnitOfWork;
                            replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
                        }
                    }
                    // TODO: we already know this isn't true in some cases.
                    // At least this shows a nicer error message until we figure out the cause.
                    // https://github.com/facebook/react/issues/12449#issuecomment-386727431
                    !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;
                    var sourceFiber = nextUnitOfWork;
                    var returnFiber = sourceFiber.return;
                    if (returnFiber === null) {
                        // This is the root. The root could capture its own errors. However,
                        // we don't know if it errors before or after we pushed the host
                        // context. This information is needed to avoid a stack mismatch.
                        // Because we're not sure, treat this as a fatal error. We could track
                        // which phase it fails in, but doesn't seem worth it. At least
                        // for now.
                        didFatal = true;
                        onUncaughtError(thrownValue);
                    }
                    else {
                        throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
                        nextUnitOfWork = completeUnitOfWork(sourceFiber);
                        continue;
                    }
                }
            }
            break;
        } while (true);
        if (enableSchedulerTracing) {
            // Traced work is done for now; restore the previous interactions.
            __interactionsRef.current = prevInteractions;
        }
        // We're done performing work. Time to clean up.
        isWorking = false;
        ReactCurrentDispatcher.current = previousDispatcher;
        resetContextDependences();
        resetHooks();
        // Yield back to main thread.
        if (didFatal) {
            var _didCompleteRoot = false;
            stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
            interruptedBy = null;
            // There was a fatal error.
            {
                resetStackAfterFatalErrorInDev();
            }
            // `nextRoot` points to the in-progress root. A non-null value indicates
            // that we're in the middle of an async render. Set it to null to indicate
            // there's no more work to be done in the current batch.
            nextRoot = null;
            onFatal(root);
            return;
        }
        if (nextUnitOfWork !== null) {
            // There's still remaining async work in this tree, but we ran out of time
            // in the current frame. Yield back to the renderer. Unless we're
            // interrupted by a higher priority update, we'll continue later from where
            // we left off.
            var _didCompleteRoot2 = false;
            stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
            interruptedBy = null;
            onYield(root);
            return;
        }
        // We completed the whole tree.
        var didCompleteRoot = true;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        var rootWorkInProgress = root.current.alternate;
        !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        // `nextRoot` points to the in-progress root. A non-null value indicates
        // that we're in the middle of an async render. Set it to null to indicate
        // there's no more work to be done in the current batch.
        nextRoot = null;
        interruptedBy = null;
        if (nextRenderDidError) {
            // There was an error
            if (hasLowerPriorityWork(root, expirationTime)) {
                // There's lower priority work. If so, it may have the effect of fixing
                // the exception that was just thrown. Exit without committing. This is
                // similar to a suspend, but without a timeout because we're not waiting
                // for a promise to resolve. React will restart at the lower
                // priority level.
                markSuspendedPriorityLevel(root, expirationTime);
                var suspendedExpirationTime = expirationTime;
                var rootExpirationTime = root.expirationTime;
                onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
                );
                return;
            }
            else if (
            // There's no lower priority work, but we're rendering asynchronously.
            // Synchronously attempt to render the same level one more time. This is
            // similar to a suspend, but without a timeout because we're not waiting
            // for a promise to resolve.
            !root.didError && isYieldy) {
                root.didError = true;
                var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;
                var _rootExpirationTime = root.expirationTime = Sync;
                onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
                );
                return;
            }
        }
        if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
            // The tree was suspended.
            var _suspendedExpirationTime2 = expirationTime;
            markSuspendedPriorityLevel(root, _suspendedExpirationTime2);
            // Find the earliest uncommitted expiration time in the tree, including
            // work that is suspended. The timeout threshold cannot be longer than
            // the overall expiration.
            var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
            var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
            if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
                nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
            }
            // Subtract the current time from the absolute timeout to get the number
            // of milliseconds until the timeout. In other words, convert an absolute
            // timestamp to a relative time. This is the value that is passed
            // to `setTimeout`.
            var currentTimeMs = expirationTimeToMs(requestCurrentTime());
            var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
            msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout;
            // TODO: Account for the Just Noticeable Difference
            var _rootExpirationTime2 = root.expirationTime;
            onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
            return;
        }
        // Ready to commit.
        onComplete(root, rootWorkInProgress, expirationTime);
    }
    function captureCommitPhaseError(sourceFiber, value) {
        var expirationTime = Sync;
        var fiber = sourceFiber.return;
        while (fiber !== null) {
            switch (fiber.tag) {
                case ClassComponent:
                    var ctor = fiber.type;
                    var instance = fiber.stateNode;
                    if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                        var errorInfo = createCapturedValue(value, sourceFiber);
                        var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
                        enqueueUpdate(fiber, update);
                        scheduleWork(fiber, expirationTime);
                        return;
                    }
                    break;
                case HostRoot:
                    {
                        var _errorInfo = createCapturedValue(value, sourceFiber);
                        var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
                        enqueueUpdate(fiber, _update);
                        scheduleWork(fiber, expirationTime);
                        return;
                    }
            }
            fiber = fiber.return;
        }
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            var rootFiber = sourceFiber;
            var _errorInfo2 = createCapturedValue(value, rootFiber);
            var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
            enqueueUpdate(rootFiber, _update2);
            scheduleWork(rootFiber, expirationTime);
        }
    }
    function computeThreadID(expirationTime, interactionThreadID) {
        // Interaction threads are unique per root and expiration time.
        return expirationTime * 1000 + interactionThreadID;
    }
    // Creates a unique async expiration time.
    function computeUniqueAsyncExpiration() {
        var currentTime = requestCurrentTime();
        var result = computeAsyncExpiration(currentTime);
        if (result >= lastUniqueAsyncExpiration) {
            // Since we assume the current time monotonically increases, we only hit
            // this branch when computeUniqueAsyncExpiration is fired multiple times
            // within a 200ms window (or whatever the async bucket size is).
            result = lastUniqueAsyncExpiration - 1;
        }
        lastUniqueAsyncExpiration = result;
        return lastUniqueAsyncExpiration;
    }
    function computeExpirationForFiber(currentTime, fiber) {
        var priorityLevel = unstable_getCurrentPriorityLevel();
        var expirationTime = void 0;
        if ((fiber.mode & ConcurrentMode) === NoContext) {
            // Outside of concurrent mode, updates are always synchronous.
            expirationTime = Sync;
        }
        else if (isWorking && !isCommitting$1) {
            // During render phase, updates expire during as the current render.
            expirationTime = nextRenderExpirationTime;
        }
        else {
            switch (priorityLevel) {
                case unstable_ImmediatePriority:
                    expirationTime = Sync;
                    break;
                case unstable_UserBlockingPriority:
                    expirationTime = computeInteractiveExpiration(currentTime);
                    break;
                case unstable_NormalPriority:
                    // This is a normal, concurrent update
                    expirationTime = computeAsyncExpiration(currentTime);
                    break;
                case unstable_LowPriority:
                case unstable_IdlePriority:
                    expirationTime = Never;
                    break;
                default:
                    invariant(false, 'Unknown priority level. This error is likely caused by a bug in React. Please file an issue.');
            }
            // If we're in the middle of rendering a tree, do not update at the same
            // expiration time that is already rendering.
            if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
                expirationTime -= 1;
            }
        }
        // Keep track of the lowest pending interactive expiration time. This
        // allows us to synchronously flush all interactive updates
        // when needed.
        // TODO: Move this to renderer?
        if (priorityLevel === unstable_UserBlockingPriority && (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime)) {
            lowestPriorityPendingInteractiveExpirationTime = expirationTime;
        }
        return expirationTime;
    }
    function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
        // Schedule the timeout.
        if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
            nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
        }
    }
    function renderDidError() {
        nextRenderDidError = true;
    }
    function pingSuspendedRoot(root, thenable, pingTime) {
        // A promise that previously suspended React from committing has resolved.
        // If React is still suspended, try again at the previous level (pingTime).
        var pingCache = root.pingCache;
        if (pingCache !== null) {
            // The thenable resolved, so we no longer need to memoize, because it will
            // never be thrown again.
            pingCache.delete(thenable);
        }
        if (nextRoot !== null && nextRenderExpirationTime === pingTime) {
            // Received a ping at the same priority level at which we're currently
            // rendering. Restart from the root.
            nextRoot = null;
        }
        else {
            // Confirm that the root is still suspended at this level. Otherwise exit.
            if (isPriorityLevelSuspended(root, pingTime)) {
                // Ping at the original level
                markPingedPriorityLevel(root, pingTime);
                var rootExpirationTime = root.expirationTime;
                if (rootExpirationTime !== NoWork) {
                    requestWork(root, rootExpirationTime);
                }
            }
        }
    }
    function retryTimedOutBoundary(boundaryFiber, thenable) {
        // The boundary fiber (a Suspense component) previously timed out and was
        // rendered in its fallback state. One of the promises that suspended it has
        // resolved, which means at least part of the tree was likely unblocked. Try
        var retryCache = void 0;
        if (enableSuspenseServerRenderer) {
            switch (boundaryFiber.tag) {
                case SuspenseComponent:
                    retryCache = boundaryFiber.stateNode;
                    break;
                case DehydratedSuspenseComponent:
                    retryCache = boundaryFiber.memoizedState;
                    break;
                default:
                    invariant(false, 'Pinged unknown suspense boundary type. This is probably a bug in React.');
            }
        }
        else {
            retryCache = boundaryFiber.stateNode;
        }
        if (retryCache !== null) {
            // The thenable resolved, so we no longer need to memoize, because it will
            // never be thrown again.
            retryCache.delete(thenable);
        }
        var currentTime = requestCurrentTime();
        var retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
        var root = scheduleWorkToRoot(boundaryFiber, retryTime);
        if (root !== null) {
            markPendingPriorityLevel(root, retryTime);
            var rootExpirationTime = root.expirationTime;
            if (rootExpirationTime !== NoWork) {
                requestWork(root, rootExpirationTime);
            }
        }
    }
    function scheduleWorkToRoot(fiber, expirationTime) {
        recordScheduleUpdate();
        {
            if (fiber.tag === ClassComponent) {
                var instance = fiber.stateNode;
                warnAboutInvalidUpdates(instance);
            }
        }
        // Update the source fiber's expiration time
        if (fiber.expirationTime < expirationTime) {
            fiber.expirationTime = expirationTime;
        }
        var alternate = fiber.alternate;
        if (alternate !== null && alternate.expirationTime < expirationTime) {
            alternate.expirationTime = expirationTime;
        }
        // Walk the parent path to the root and update the child expiration time.
        var node = fiber.return;
        var root = null;
        if (node === null && fiber.tag === HostRoot) {
            root = fiber.stateNode;
        }
        else {
            while (node !== null) {
                alternate = node.alternate;
                if (node.childExpirationTime < expirationTime) {
                    node.childExpirationTime = expirationTime;
                    if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                        alternate.childExpirationTime = expirationTime;
                    }
                }
                else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                    alternate.childExpirationTime = expirationTime;
                }
                if (node.return === null && node.tag === HostRoot) {
                    root = node.stateNode;
                    break;
                }
                node = node.return;
            }
        }
        if (enableSchedulerTracing) {
            if (root !== null) {
                var interactions = __interactionsRef.current;
                if (interactions.size > 0) {
                    var pendingInteractionMap = root.pendingInteractionMap;
                    var pendingInteractions = pendingInteractionMap.get(expirationTime);
                    if (pendingInteractions != null) {
                        interactions.forEach(function (interaction) {
                            if (!pendingInteractions.has(interaction)) {
                                // Update the pending async work count for previously unscheduled interaction.
                                interaction.__count++;
                            }
                            pendingInteractions.add(interaction);
                        });
                    }
                    else {
                        pendingInteractionMap.set(expirationTime, new Set(interactions));
                        // Update the pending async work count for the current interactions.
                        interactions.forEach(function (interaction) {
                            interaction.__count++;
                        });
                    }
                    var subscriber = __subscriberRef.current;
                    if (subscriber !== null) {
                        var threadID = computeThreadID(expirationTime, root.interactionThreadID);
                        subscriber.onWorkScheduled(interactions, threadID);
                    }
                }
            }
        }
        return root;
    }
    function warnIfNotCurrentlyBatchingInDev(fiber) {
        {
            if (isRendering === false && isBatchingUpdates === false) {
                warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see in the browser." + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
        }
    }
    function scheduleWork(fiber, expirationTime) {
        var root = scheduleWorkToRoot(fiber, expirationTime);
        if (root === null) {
            {
                switch (fiber.tag) {
                    case ClassComponent:
                        warnAboutUpdateOnUnmounted(fiber, true);
                        break;
                    case FunctionComponent:
                    case ForwardRef:
                    case MemoComponent:
                    case SimpleMemoComponent:
                        warnAboutUpdateOnUnmounted(fiber, false);
                        break;
                }
            }
            return;
        }
        if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
            // This is an interruption. (Used for performance tracking.)
            interruptedBy = fiber;
            resetStack();
        }
        markPendingPriorityLevel(root, expirationTime);
        if (
        // If we're in the render phase, we don't need to schedule this root
        // for an update, because we'll do it before we exit...
        !isWorking || isCommitting$1 ||
            // ...unless this is a different root than the one we're rendering.
            nextRoot !== root) {
            var rootExpirationTime = root.expirationTime;
            requestWork(root, rootExpirationTime);
        }
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            // Reset this back to zero so subsequent updates don't throw.
            nestedUpdateCount = 0;
            invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
        }
    }
    function syncUpdates(fn, a, b, c, d) {
        return unstable_runWithPriority(unstable_ImmediatePriority, function () {
            return fn(a, b, c, d);
        });
    }
    // TODO: Everything below this is written as if it has been lifted to the
    // renderers. I'll do this in a follow-up.
    // Linked-list of roots
    var firstScheduledRoot = null;
    var lastScheduledRoot = null;
    var callbackExpirationTime = NoWork;
    var callbackID = void 0;
    var isRendering = false;
    var nextFlushedRoot = null;
    var nextFlushedExpirationTime = NoWork;
    var lowestPriorityPendingInteractiveExpirationTime = NoWork;
    var hasUnhandledError = false;
    var unhandledError = null;
    var isBatchingUpdates = false;
    var isUnbatchingUpdates = false;
    var completedBatches = null;
    var originalStartTimeMs = unstable_now();
    var currentRendererTime = msToExpirationTime(originalStartTimeMs);
    var currentSchedulerTime = currentRendererTime;
    // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var lastCommittedRootDuringThisBatch = null;
    function recomputeCurrentRendererTime() {
        var currentTimeMs = unstable_now() - originalStartTimeMs;
        currentRendererTime = msToExpirationTime(currentTimeMs);
    }
    function scheduleCallbackWithExpirationTime(root, expirationTime) {
        if (callbackExpirationTime !== NoWork) {
            // A callback is already scheduled. Check its expiration time (timeout).
            if (expirationTime < callbackExpirationTime) {
                // Existing callback has sufficient timeout. Exit.
                return;
            }
            else {
                if (callbackID !== null) {
                    // Existing callback has insufficient timeout. Cancel and schedule a
                    // new one.
                    unstable_cancelCallback(callbackID);
                }
            }
            // The request callback timer is already running. Don't start a new one.
        }
        else {
            startRequestCallbackTimer();
        }
        callbackExpirationTime = expirationTime;
        var currentMs = unstable_now() - originalStartTimeMs;
        var expirationTimeMs = expirationTimeToMs(expirationTime);
        var timeout = expirationTimeMs - currentMs;
        callbackID = unstable_scheduleCallback(performAsyncWork, { timeout: timeout });
    }
    // For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
    // onYield is called upon exiting. We use these in lieu of returning a tuple.
    // I've also chosen not to inline them into renderRoot because these will
    // eventually be lifted into the renderer.
    function onFatal(root) {
        root.finishedWork = null;
    }
    function onComplete(root, finishedWork, expirationTime) {
        root.pendingCommitExpirationTime = expirationTime;
        root.finishedWork = finishedWork;
    }
    function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
        root.expirationTime = rootExpirationTime;
        if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
            // Don't wait an additional tick. Commit the tree immediately.
            root.pendingCommitExpirationTime = suspendedExpirationTime;
            root.finishedWork = finishedWork;
        }
        else if (msUntilTimeout > 0) {
            // Wait `msUntilTimeout` milliseconds before committing.
            root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
        }
    }
    function onYield(root) {
        root.finishedWork = null;
    }
    function onTimeout(root, finishedWork, suspendedExpirationTime) {
        // The root timed out. Commit it.
        root.pendingCommitExpirationTime = suspendedExpirationTime;
        root.finishedWork = finishedWork;
        // Read the current time before entering the commit phase. We can be
        // certain this won't cause tearing related to batching of event updates
        // because we're at the top of a timer event.
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;
        flushRoot(root, suspendedExpirationTime);
    }
    function onCommit(root, expirationTime) {
        root.expirationTime = expirationTime;
        root.finishedWork = null;
    }
    function requestCurrentTime() {
        // requestCurrentTime is called by the scheduler to compute an expiration
        // time.
        //
        // Expiration times are computed by adding to the current time (the start
        // time). However, if two updates are scheduled within the same event, we
        // should treat their start times as simultaneous, even if the actual clock
        // time has advanced between the first and second call.
        // In other words, because expiration times determine how updates are batched,
        // we want all updates of like priority that occur within the same event to
        // receive the same expiration time. Otherwise we get tearing.
        //
        // We keep track of two separate times: the current "renderer" time and the
        // current "scheduler" time. The renderer time can be updated whenever; it
        // only exists to minimize the calls performance.now.
        //
        // But the scheduler time can only be updated if there's no pending work, or
        // if we know for certain that we're not in the middle of an event.
        if (isRendering) {
            // We're already rendering. Return the most recently read time.
            return currentSchedulerTime;
        }
        // Check if there's pending work.
        findHighestPriorityRoot();
        if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
            // If there's no pending work, or if the pending work is offscreen, we can
            // read the current time without risk of tearing.
            recomputeCurrentRendererTime();
            currentSchedulerTime = currentRendererTime;
            return currentSchedulerTime;
        }
        // There's already pending work. We might be in the middle of a browser
        // event. If we were to read the current time, it could cause multiple updates
        // within the same event to receive different expiration times, leading to
        // tearing. Return the last read time. During the next idle callback, the
        // time will be updated.
        return currentSchedulerTime;
    }
    // requestWork is called by the scheduler whenever a root receives an update.
    // It's up to the renderer to call renderRoot at some point in the future.
    function requestWork(root, expirationTime) {
        addRootToSchedule(root, expirationTime);
        if (isRendering) {
            // Prevent reentrancy. Remaining work will be scheduled at the end of
            // the currently rendering batch.
            return;
        }
        if (isBatchingUpdates) {
            // Flush work at the end of the batch.
            if (isUnbatchingUpdates) {
                // ...unless we're inside unbatchedUpdates, in which case we should
                // flush it now.
                nextFlushedRoot = root;
                nextFlushedExpirationTime = Sync;
                performWorkOnRoot(root, Sync, false);
            }
            return;
        }
        // TODO: Get rid of Sync and use current time?
        if (expirationTime === Sync) {
            performSyncWork();
        }
        else {
            scheduleCallbackWithExpirationTime(root, expirationTime);
        }
    }
    function addRootToSchedule(root, expirationTime) {
        // Add the root to the schedule.
        // Check if this root is already part of the schedule.
        if (root.nextScheduledRoot === null) {
            // This root is not already scheduled. Add it.
            root.expirationTime = expirationTime;
            if (lastScheduledRoot === null) {
                firstScheduledRoot = lastScheduledRoot = root;
                root.nextScheduledRoot = root;
            }
            else {
                lastScheduledRoot.nextScheduledRoot = root;
                lastScheduledRoot = root;
                lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            }
        }
        else {
            // This root is already scheduled, but its priority may have increased.
            var remainingExpirationTime = root.expirationTime;
            if (expirationTime > remainingExpirationTime) {
                // Update the priority.
                root.expirationTime = expirationTime;
            }
        }
    }
    function findHighestPriorityRoot() {
        var highestPriorityWork = NoWork;
        var highestPriorityRoot = null;
        if (lastScheduledRoot !== null) {
            var previousScheduledRoot = lastScheduledRoot;
            var root = firstScheduledRoot;
            while (root !== null) {
                var remainingExpirationTime = root.expirationTime;
                if (remainingExpirationTime === NoWork) {
                    // This root no longer has work. Remove it from the scheduler.
                    // TODO: This check is redudant, but Flow is confused by the branch
                    // below where we set lastScheduledRoot to null, even though we break
                    // from the loop right after.
                    !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
                    if (root === root.nextScheduledRoot) {
                        // This is the only root in the list.
                        root.nextScheduledRoot = null;
                        firstScheduledRoot = lastScheduledRoot = null;
                        break;
                    }
                    else if (root === firstScheduledRoot) {
                        // This is the first root in the list.
                        var next = root.nextScheduledRoot;
                        firstScheduledRoot = next;
                        lastScheduledRoot.nextScheduledRoot = next;
                        root.nextScheduledRoot = null;
                    }
                    else if (root === lastScheduledRoot) {
                        // This is the last root in the list.
                        lastScheduledRoot = previousScheduledRoot;
                        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                        root.nextScheduledRoot = null;
                        break;
                    }
                    else {
                        previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
                        root.nextScheduledRoot = null;
                    }
                    root = previousScheduledRoot.nextScheduledRoot;
                }
                else {
                    if (remainingExpirationTime > highestPriorityWork) {
                        // Update the priority, if it's higher
                        highestPriorityWork = remainingExpirationTime;
                        highestPriorityRoot = root;
                    }
                    if (root === lastScheduledRoot) {
                        break;
                    }
                    if (highestPriorityWork === Sync) {
                        // Sync is highest priority by definition so
                        // we can stop searching.
                        break;
                    }
                    previousScheduledRoot = root;
                    root = root.nextScheduledRoot;
                }
            }
        }
        nextFlushedRoot = highestPriorityRoot;
        nextFlushedExpirationTime = highestPriorityWork;
    }
    // TODO: This wrapper exists because many of the older tests (the ones that use
    // flushDeferredPri) rely on the number of times `shouldYield` is called. We
    // should get rid of it.
    var didYield = false;
    function shouldYieldToRenderer() {
        if (didYield) {
            return true;
        }
        if (unstable_shouldYield()) {
            didYield = true;
            return true;
        }
        return false;
    }
    function performAsyncWork() {
        try {
            if (!shouldYieldToRenderer()) {
                // The callback timed out. That means at least one update has expired.
                // Iterate through the root schedule. If they contain expired work, set
                // the next render expiration time to the current time. This has the effect
                // of flushing all expired work in a single batch, instead of flushing each
                // level one at a time.
                if (firstScheduledRoot !== null) {
                    recomputeCurrentRendererTime();
                    var root = firstScheduledRoot;
                    do {
                        didExpireAtExpirationTime(root, currentRendererTime);
                        // The root schedule is circular, so this is never null.
                        root = root.nextScheduledRoot;
                    } while (root !== firstScheduledRoot);
                }
            }
            performWork(NoWork, true);
        }
        finally {
            didYield = false;
        }
    }
    function performSyncWork() {
        performWork(Sync, false);
    }
    function performWork(minExpirationTime, isYieldy) {
        // Keep working on roots until there's no more work, or until there's a higher
        // priority event.
        findHighestPriorityRoot();
        if (isYieldy) {
            recomputeCurrentRendererTime();
            currentSchedulerTime = currentRendererTime;
            if (enableUserTimingAPI) {
                var didExpire = nextFlushedExpirationTime > currentRendererTime;
                var timeout = expirationTimeToMs(nextFlushedExpirationTime);
                stopRequestCallbackTimer(didExpire, timeout);
            }
            while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {
                performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
                findHighestPriorityRoot();
                recomputeCurrentRendererTime();
                currentSchedulerTime = currentRendererTime;
            }
        }
        else {
            while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {
                performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
                findHighestPriorityRoot();
            }
        }
        // We're done flushing work. Either we ran out of time in this callback,
        // or there's no more work left with sufficient priority.
        // If we're inside a callback, set this to false since we just completed it.
        if (isYieldy) {
            callbackExpirationTime = NoWork;
            callbackID = null;
        }
        // If there's work left over, schedule a new callback.
        if (nextFlushedExpirationTime !== NoWork) {
            scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
        }
        // Clean-up.
        finishRendering();
    }
    function flushRoot(root, expirationTime) {
        !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
        // Perform work on root as if the given expiration time is the current time.
        // This has the effect of synchronously flushing all work up to and
        // including the given time.
        nextFlushedRoot = root;
        nextFlushedExpirationTime = expirationTime;
        performWorkOnRoot(root, expirationTime, false);
        // Flush any sync work that was scheduled by lifecycles
        performSyncWork();
    }
    function finishRendering() {
        nestedUpdateCount = 0;
        lastCommittedRootDuringThisBatch = null;
        if (completedBatches !== null) {
            var batches = completedBatches;
            completedBatches = null;
            for (var i = 0; i < batches.length; i++) {
                var batch = batches[i];
                try {
                    batch._onComplete();
                }
                catch (error) {
                    if (!hasUnhandledError) {
                        hasUnhandledError = true;
                        unhandledError = error;
                    }
                }
            }
        }
        if (hasUnhandledError) {
            var error = unhandledError;
            unhandledError = null;
            hasUnhandledError = false;
            throw error;
        }
    }
    function performWorkOnRoot(root, expirationTime, isYieldy) {
        !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        isRendering = true;
        // Check if this is async work or sync/expired work.
        if (!isYieldy) {
            // Flush work without yielding.
            // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
            // may want to perform some work without yielding, but also without
            // requiring the root to complete (by triggering placeholders).
            var finishedWork = root.finishedWork;
            if (finishedWork !== null) {
                // This root is already complete. We can commit it.
                completeRoot(root, finishedWork, expirationTime);
            }
            else {
                root.finishedWork = null;
                // If this root previously suspended, clear its existing timeout, since
                // we're about to try rendering again.
                var timeoutHandle = root.timeoutHandle;
                if (timeoutHandle !== noTimeout) {
                    root.timeoutHandle = noTimeout;
                    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
                    cancelTimeout(timeoutHandle);
                }
                renderRoot(root, isYieldy);
                finishedWork = root.finishedWork;
                if (finishedWork !== null) {
                    // We've completed the root. Commit it.
                    completeRoot(root, finishedWork, expirationTime);
                }
            }
        }
        else {
            // Flush async work.
            var _finishedWork = root.finishedWork;
            if (_finishedWork !== null) {
                // This root is already complete. We can commit it.
                completeRoot(root, _finishedWork, expirationTime);
            }
            else {
                root.finishedWork = null;
                // If this root previously suspended, clear its existing timeout, since
                // we're about to try rendering again.
                var _timeoutHandle = root.timeoutHandle;
                if (_timeoutHandle !== noTimeout) {
                    root.timeoutHandle = noTimeout;
                    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
                    cancelTimeout(_timeoutHandle);
                }
                renderRoot(root, isYieldy);
                _finishedWork = root.finishedWork;
                if (_finishedWork !== null) {
                    // We've completed the root. Check the if we should yield one more time
                    // before committing.
                    if (!shouldYieldToRenderer()) {
                        // Still time left. Commit the root.
                        completeRoot(root, _finishedWork, expirationTime);
                    }
                    else {
                        // There's no time left. Mark this root as complete. We'll come
                        // back and commit it later.
                        root.finishedWork = _finishedWork;
                    }
                }
            }
        }
        isRendering = false;
    }
    function completeRoot(root, finishedWork, expirationTime) {
        // Check if there's a batch that matches this expiration time.
        var firstBatch = root.firstBatch;
        if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
            if (completedBatches === null) {
                completedBatches = [firstBatch];
            }
            else {
                completedBatches.push(firstBatch);
            }
            if (firstBatch._defer) {
                // This root is blocked from committing by a batch. Unschedule it until
                // we receive another update.
                root.finishedWork = finishedWork;
                root.expirationTime = NoWork;
                return;
            }
        }
        // Commit the root.
        root.finishedWork = null;
        // Check if this is a nested update (a sync update scheduled during the
        // commit phase).
        if (root === lastCommittedRootDuringThisBatch) {
            // If the next root is the same as the previous root, this is a nested
            // update. To prevent an infinite loop, increment the nested update count.
            nestedUpdateCount++;
        }
        else {
            // Reset whenever we switch roots.
            lastCommittedRootDuringThisBatch = root;
            nestedUpdateCount = 0;
        }
        unstable_runWithPriority(unstable_ImmediatePriority, function () {
            commitRoot(root, finishedWork);
        });
    }
    function onUncaughtError(error) {
        !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        // Unschedule this root so we don't work on it again until there's
        // another update.
        nextFlushedRoot.expirationTime = NoWork;
        if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
        }
    }
    // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.
    function batchedUpdates$1(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;
        try {
            return fn(a);
        }
        finally {
            isBatchingUpdates = previousIsBatchingUpdates;
            if (!isBatchingUpdates && !isRendering) {
                performSyncWork();
            }
        }
    }
    // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.
    function unbatchedUpdates(fn, a) {
        if (isBatchingUpdates && !isUnbatchingUpdates) {
            isUnbatchingUpdates = true;
            try {
                return fn(a);
            }
            finally {
                isUnbatchingUpdates = false;
            }
        }
        return fn(a);
    }
    // TODO: Batching should be implemented at the renderer level, not within
    // the reconciler.
    function flushSync(fn, a) {
        !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;
        try {
            return syncUpdates(fn, a);
        }
        finally {
            isBatchingUpdates = previousIsBatchingUpdates;
            performSyncWork();
        }
    }
    function interactiveUpdates$1(fn, a, b) {
        // If there are any pending interactive updates, synchronously flush them.
        // This needs to happen before we read any handlers, because the effect of
        // the previous event may influence which handlers are called during
        // this event.
        if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
            // Synchronously flush pending interactive updates.
            performWork(lowestPriorityPendingInteractiveExpirationTime, false);
            lowestPriorityPendingInteractiveExpirationTime = NoWork;
        }
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;
        try {
            return unstable_runWithPriority(unstable_UserBlockingPriority, function () {
                return fn(a, b);
            });
        }
        finally {
            isBatchingUpdates = previousIsBatchingUpdates;
            if (!isBatchingUpdates && !isRendering) {
                performSyncWork();
            }
        }
    }
    function flushInteractiveUpdates$1() {
        if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
            // Synchronously flush pending interactive updates.
            performWork(lowestPriorityPendingInteractiveExpirationTime, false);
            lowestPriorityPendingInteractiveExpirationTime = NoWork;
        }
    }
    function flushControlled(fn) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = true;
        try {
            syncUpdates(fn);
        }
        finally {
            isBatchingUpdates = previousIsBatchingUpdates;
            if (!isBatchingUpdates && !isRendering) {
                performSyncWork();
            }
        }
    }
    // 0 is PROD, 1 is DEV.
    // Might add PROFILE later.
    var didWarnAboutNestedUpdates = void 0;
    var didWarnAboutFindNodeInStrictMode = void 0;
    {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
    }
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
            return emptyContextObject;
        }
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
            }
        }
        return parentContext;
    }
    function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
        {
            if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
            }
        }
        var update = createUpdate(expirationTime);
        // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = { element: element };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
            update.callback = callback;
        }
        flushPassiveEffects();
        enqueueUpdate(current$$1, update);
        scheduleWork(current$$1, expirationTime);
        return expirationTime;
    }
    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
        // TODO: If this is a nested container, this won't be the root.
        var current$$1 = container.current;
        {
            if (ReactFiberInstrumentation_1.debugTool) {
                if (current$$1.alternate === null) {
                    ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
                }
                else if (element === null) {
                    ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
                }
                else {
                    ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
                }
            }
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
            container.context = context;
        }
        else {
            container.pendingContext = context;
        }
        return scheduleRootUpdate(current$$1, element, expirationTime, callback);
    }
    function findHostInstance(component) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') {
                invariant(false, 'Unable to find node on an unmounted component.');
            }
            else {
                invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
            }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
            return null;
        }
        return hostFiber.stateNode;
    }
    function findHostInstanceWithWarning(component, methodName) {
        {
            var fiber = get(component);
            if (fiber === undefined) {
                if (typeof component.render === 'function') {
                    invariant(false, 'Unable to find node on an unmounted component.');
                }
                else {
                    invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
                }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
                return null;
            }
            if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || 'Component';
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                    didWarnAboutFindNodeInStrictMode[componentName] = true;
                    if (fiber.mode & StrictMode) {
                        warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                    }
                    else {
                        warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                    }
                }
            }
            return hostFiber.stateNode;
        }
        return findHostInstance(component);
    }
    function createContainer(containerInfo, isConcurrent, hydrate) {
        return createFiberRoot(containerInfo, isConcurrent, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        var current$$1 = container.current;
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, current$$1);
        return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
            return null;
        }
        switch (containerFiber.child.tag) {
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
            return null;
        }
        return hostFiber.stateNode;
    }
    var overrideProps = null;
    {
        var copyWithSetImpl = function (obj, path, idx, value) {
            if (idx >= path.length) {
                return value;
            }
            var key = path[idx];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            // $FlowFixMe number or string is fine here
            updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
            return updated;
        };
        var copyWithSet = function (obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
        };
        // Support DevTools props for function components, forwardRef, memo, host components, etc.
        overrideProps = function (fiber, path, value) {
            flushPassiveEffects();
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleWork(fiber, Sync);
        };
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals(_assign({}, devToolsConfig, {
            overrideProps: overrideProps,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: function (fiber) {
                var hostFiber = findCurrentHostFiber(fiber);
                if (hostFiber === null) {
                    return null;
                }
                return hostFiber.stateNode;
            },
            findFiberByHostInstance: function (instance) {
                if (!findFiberByHostInstance) {
                    // Might not be implemented by the renderer.
                    return null;
                }
                return findFiberByHostInstance(instance);
            }
        }));
    }
    // This file intentionally does *not* have the Flow annotation.
    // Don't add it. See `./inline-typed.js` for an explanation.
    function createPortal$1(children, containerInfo, 
    // TODO: figure out the API for cross-renderer implementation.
    implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '16.8.4';
    // TODO: This type is shared between the reconciler and ReactDOM, but will
    // eventually be lifted out to the renderer.
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings = void 0;
    var warnOnInvalidCallback = void 0;
    var didWarnAboutUnstableCreatePortal = false;
    {
        if (typeof Map !== 'function' ||
            // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
            // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
            warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
        topLevelUpdateWarnings = function (container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                    !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
                }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
            !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
            !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
        };
        warnOnInvalidCallback = function (callback, callerName) {
            !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
        };
    }
    setRestoreImplementation(restoreControlledState$1);
    function ReactBatch(root) {
        var expirationTime = computeUniqueAsyncExpiration();
        this._expirationTime = expirationTime;
        this._root = root;
        this._next = null;
        this._callbacks = null;
        this._didComplete = false;
        this._hasChildren = false;
        this._children = null;
        this._defer = true;
    }
    ReactBatch.prototype.render = function (children) {
        !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
        this._hasChildren = true;
        this._children = children;
        var internalRoot = this._root._internalRoot;
        var expirationTime = this._expirationTime;
        var work = new ReactWork();
        updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
        return work;
    };
    ReactBatch.prototype.then = function (onComplete) {
        if (this._didComplete) {
            onComplete();
            return;
        }
        var callbacks = this._callbacks;
        if (callbacks === null) {
            callbacks = this._callbacks = [];
        }
        callbacks.push(onComplete);
    };
    ReactBatch.prototype.commit = function () {
        var internalRoot = this._root._internalRoot;
        var firstBatch = internalRoot.firstBatch;
        !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
        if (!this._hasChildren) {
            // This batch is empty. Return.
            this._next = null;
            this._defer = false;
            return;
        }
        var expirationTime = this._expirationTime;
        // Ensure this is the first batch in the list.
        if (firstBatch !== this) {
            // This batch is not the earliest batch. We need to move it to the front.
            // Update its expiration time to be the expiration time of the earliest
            // batch, so that we can flush it without flushing the other batches.
            if (this._hasChildren) {
                expirationTime = this._expirationTime = firstBatch._expirationTime;
                // Rendering this batch again ensures its children will be the final state
                // when we flush (updates are processed in insertion order: last
                // update wins).
                // TODO: This forces a restart. Should we print a warning?
                this.render(this._children);
            }
            // Remove the batch from the list.
            var previous = null;
            var batch = firstBatch;
            while (batch !== this) {
                previous = batch;
                batch = batch._next;
            }
            !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
            previous._next = batch._next;
            // Add it to the front.
            this._next = firstBatch;
            firstBatch = internalRoot.firstBatch = this;
        }
        // Synchronously flush all the work up to this batch's expiration time.
        this._defer = false;
        flushRoot(internalRoot, expirationTime);
        // Pop the batch from the list.
        var next = this._next;
        this._next = null;
        firstBatch = internalRoot.firstBatch = next;
        // Append the next earliest batch's children to the update queue.
        if (firstBatch !== null && firstBatch._hasChildren) {
            firstBatch.render(firstBatch._children);
        }
    };
    ReactBatch.prototype._onComplete = function () {
        if (this._didComplete) {
            return;
        }
        this._didComplete = true;
        var callbacks = this._callbacks;
        if (callbacks === null) {
            return;
        }
        // TODO: Error handling.
        for (var i = 0; i < callbacks.length; i++) {
            var _callback = callbacks[i];
            _callback();
        }
    };
    function ReactWork() {
        this._callbacks = null;
        this._didCommit = false;
        // TODO: Avoid need to bind by replacing callbacks in the update queue with
        // list of Work objects.
        this._onCommit = this._onCommit.bind(this);
    }
    ReactWork.prototype.then = function (onCommit) {
        if (this._didCommit) {
            onCommit();
            return;
        }
        var callbacks = this._callbacks;
        if (callbacks === null) {
            callbacks = this._callbacks = [];
        }
        callbacks.push(onCommit);
    };
    ReactWork.prototype._onCommit = function () {
        if (this._didCommit) {
            return;
        }
        this._didCommit = true;
        var callbacks = this._callbacks;
        if (callbacks === null) {
            return;
        }
        // TODO: Error handling.
        for (var i = 0; i < callbacks.length; i++) {
            var _callback2 = callbacks[i];
            !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
            _callback2();
        }
    };
    function ReactRoot(container, isConcurrent, hydrate) {
        var root = createContainer(container, isConcurrent, hydrate);
        this._internalRoot = root;
    }
    ReactRoot.prototype.render = function (children, callback) {
        var root = this._internalRoot;
        var work = new ReactWork();
        callback = callback === undefined ? null : callback;
        {
            warnOnInvalidCallback(callback, 'render');
        }
        if (callback !== null) {
            work.then(callback);
        }
        updateContainer(children, root, null, work._onCommit);
        return work;
    };
    ReactRoot.prototype.unmount = function (callback) {
        var root = this._internalRoot;
        var work = new ReactWork();
        callback = callback === undefined ? null : callback;
        {
            warnOnInvalidCallback(callback, 'render');
        }
        if (callback !== null) {
            work.then(callback);
        }
        updateContainer(null, root, null, work._onCommit);
        return work;
    };
    ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
        var root = this._internalRoot;
        var work = new ReactWork();
        callback = callback === undefined ? null : callback;
        {
            warnOnInvalidCallback(callback, 'render');
        }
        if (callback !== null) {
            work.then(callback);
        }
        updateContainer(children, root, parentComponent, work._onCommit);
        return work;
    };
    ReactRoot.prototype.createBatch = function () {
        var batch = new ReactBatch(this);
        var expirationTime = batch._expirationTime;
        var internalRoot = this._internalRoot;
        var firstBatch = internalRoot.firstBatch;
        if (firstBatch === null) {
            internalRoot.firstBatch = batch;
            batch._next = null;
        }
        else {
            // Insert sorted by expiration time then insertion order
            var insertAfter = null;
            var insertBefore = firstBatch;
            while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
                insertAfter = insertBefore;
                insertBefore = insertBefore._next;
            }
            batch._next = insertBefore;
            if (insertAfter !== null) {
                insertAfter._next = batch;
            }
        }
        return batch;
    };
    /**
     * True if the supplied DOM node is a valid node element.
     *
     * @param {?DOMElement} node The candidate DOM node.
     * @return {boolean} True if the DOM is a valid DOM node.
     * @internal
     */
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    function getReactRootElementInContainer(container) {
        if (!container) {
            return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
        }
        else {
            return container.firstChild;
        }
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);
    var warnedAboutHydrateAPI = false;
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
        // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling = void 0;
            while (rootSibling = container.lastChild) {
                {
                    if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                        warned = true;
                        warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
                    }
                }
                container.removeChild(rootSibling);
            }
        }
        {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
            }
        }
        // Legacy roots are not async by default.
        var isConcurrent = false;
        return new ReactRoot(container, isConcurrent, shouldHydrate);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
            topLevelUpdateWarnings(container);
        }
        // TODO: Without `any` type, Flow says "Property cannot be accessed on any
        // member of intersection type." Whyyyyyy.
        var root = container._reactRootContainer;
        if (!root) {
            // Initial mount
            root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function () {
                    var instance = getPublicRootInstance(root._internalRoot);
                    originalCallback.call(instance);
                };
            }
            // Initial mount should not be batched.
            unbatchedUpdates(function () {
                if (parentComponent != null) {
                    root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
                }
                else {
                    root.render(children, callback);
                }
            });
        }
        else {
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function () {
                    var instance = getPublicRootInstance(root._internalRoot);
                    _originalCallback.call(instance);
                };
            }
            // Update
            if (parentComponent != null) {
                root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
            }
            else {
                root.render(children, callback);
            }
        }
        return getPublicRootInstance(root._internalRoot);
    }
    function createPortal$$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        // TODO: pass ReactDOM portal implementation as third argument
        return createPortal$1(children, container, null, key);
    }
    var ReactDOM = {
        createPortal: createPortal$$1,
        findDOMNode: function (componentOrElement) {
            {
                var owner = ReactCurrentOwner.current;
                if (owner !== null && owner.stateNode !== null) {
                    var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                    !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
                    owner.stateNode._warnedAboutRefsInRender = true;
                }
            }
            if (componentOrElement == null) {
                return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
                return componentOrElement;
            }
            {
                return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
            }
            return findHostInstance(componentOrElement);
        },
        hydrate: function (element, container, callback) {
            !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
            {
                !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
            }
            // TODO: throw or warn if we couldn't hydrate?
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        },
        render: function (element, container, callback) {
            !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
            {
                !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call root.render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        },
        unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
            !isValidContainer(containerNode) ? invariant(false, 'Target container is not a DOM element.') : void 0;
            !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        },
        unmountComponentAtNode: function (container) {
            !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;
            {
                !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
            }
            if (container._reactRootContainer) {
                {
                    var rootEl = getReactRootElementInContainer(container);
                    var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
                    !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
                }
                // Unmount should not be batched.
                unbatchedUpdates(function () {
                    legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
                        container._reactRootContainer = null;
                    });
                });
                // If you call unmountComponentAtNode twice in quick succession, you'll
                // get `true` twice. That's probably fine?
                return true;
            }
            else {
                {
                    var _rootEl = getReactRootElementInContainer(container);
                    var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
                    // Check if the container itself is a React root node.
                    var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                    !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
                }
                return false;
            }
        },
        // Temporary alias since we already shipped React 16 RC with it.
        // TODO: remove in React 17.
        unstable_createPortal: function () {
            if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
            }
            return createPortal$$1.apply(undefined, arguments);
        },
        unstable_batchedUpdates: batchedUpdates$1,
        unstable_interactiveUpdates: interactiveUpdates$1,
        flushSync: flushSync,
        unstable_createRoot: createRoot,
        unstable_flushControlled: flushControlled,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
            // Keep in sync with ReactDOMUnstableNativeDependencies.js
            // and ReactTestUtils.js. This is an array for better minification.
            Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
        }
    };
    function createRoot(container, options) {
        var functionName = enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot';
        !isValidContainer(container) ? invariant(false, '%s(...): Target container is not a DOM element.', functionName) : void 0;
        {
            !!container._reactRootContainer ? warningWithoutStack$1(false, 'You are calling ReactDOM.%s() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
            container._reactHasBeenPassedToCreateRootDEV = true;
        }
        var hydrate = options != null && options.hydrate === true;
        return new ReactRoot(container, true, hydrate);
    }
    if (enableStableConcurrentModeAPIs) {
        ReactDOM.createRoot = createRoot;
        ReactDOM.unstable_createRoot = undefined;
    }
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
            // If we're in Chrome or Firefox, provide a download link if not installed.
            if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
                var protocol = window.location.protocol;
                // Don't warn in exotic cases like chrome-extension://.
                if (/^(https?|file):$/.test(protocol)) {
                    console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
                }
            }
        }
    }
    var ReactDOM$2 = Object.freeze({
        default: ReactDOM
    });
    var ReactDOM$3 = (ReactDOM$2 && ReactDOM) || ReactDOM$2;
    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.
    var reactDom = ReactDOM$3.default || ReactDOM$3;
    return reactDom;
})));
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('popper.js')) :
        typeof define === 'function' && define.amd ? define('react-popper', ['exports', 'react', 'popper.js'], factory) :
            (factory((global.ReactPopper = {}), global.React, global.Popper));
}(this, (function (exports, React, PopperJS) {
    'use strict';
    var React__default = 'default' in React ? React['default'] : React;
    PopperJS = PopperJS && PopperJS.hasOwnProperty('default') ? PopperJS['default'] : PopperJS;
    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        }
        else {
            obj[key] = value;
        }
        return obj;
    }
    function _extends() {
        _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        return _extends.apply(this, arguments);
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
            return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
                continue;
            target[key] = source[key];
        }
        return target;
    }
    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
    function unwrapExports(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }
    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
        return Object(val);
    }
    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            }
            // Detect buggy property enumeration order in older V8 versions.
            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
            }
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
            });
            if (order2.join('') !== '0123456789') {
                return false;
            }
            // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !==
                'abcdefghijklmnopqrst') {
                return false;
            }
            return true;
        }
        catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }
    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
            if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
        return to;
    };
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    var ReactPropTypesSecret_1 = ReactPropTypesSecret;
    var printWarning = function () { };
    {
        var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
        var loggedTypeFailures = {};
        printWarning = function (text) {
            var message = 'Warning: ' + text;
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            }
            catch (x) { }
        };
    }
    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        {
            for (var typeSpecName in typeSpecs) {
                if (typeSpecs.hasOwnProperty(typeSpecName)) {
                    var error;
                    // Prop type validation may throw. In case they do, we don't want to
                    // fail the render phase where it didn't fail before. So we log it.
                    // After these have been cleaned up, we'll let them throw.
                    try {
                        // This is intentionally an invariant that gets caught. It's the same
                        // behavior as without this statement except with a better message.
                        if (typeof typeSpecs[typeSpecName] !== 'function') {
                            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                                'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
                            err.name = 'Invariant Violation';
                            throw err;
                        }
                        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
                    }
                    catch (ex) {
                        error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                        printWarning((componentName || 'React class') + ': type specification of ' +
                            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                            'You may have forgotten to pass an argument to the type checker ' +
                            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                            'shape all require an argument).');
                    }
                    if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                        // Only monitor this failure once because there tends to be a lot of the
                        // same error.
                        loggedTypeFailures[error.message] = true;
                        var stack = getStack ? getStack() : '';
                        printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
                    }
                }
            }
        }
    }
    var checkPropTypes_1 = checkPropTypes;
    var printWarning$1 = function () { };
    {
        printWarning$1 = function (text) {
            var message = 'Warning: ' + text;
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            }
            catch (x) { }
        };
    }
    function emptyFunctionThatReturnsNull() {
        return null;
    }
    var factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
        /* global Symbol */
        var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
        /**
         * Returns the iterator method function contained on the iterable object.
         *
         * Be sure to invoke the function with the iterable as context:
         *
         *     var iteratorFn = getIteratorFn(myIterable);
         *     if (iteratorFn) {
         *       var iterator = iteratorFn.call(myIterable);
         *       ...
         *     }
         *
         * @param {?object} maybeIterable
         * @return {?function}
         */
        function getIteratorFn(maybeIterable) {
            var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === 'function') {
                return iteratorFn;
            }
        }
        /**
         * Collection of methods that allow declaration and validation of props that are
         * supplied to React components. Example usage:
         *
         *   var Props = require('ReactPropTypes');
         *   var MyArticle = React.createClass({
         *     propTypes: {
         *       // An optional string prop named "description".
         *       description: Props.string,
         *
         *       // A required enum prop named "category".
         *       category: Props.oneOf(['News','Photos']).isRequired,
         *
         *       // A prop named "dialog" that requires an instance of Dialog.
         *       dialog: Props.instanceOf(Dialog).isRequired
         *     },
         *     render: function() { ... }
         *   });
         *
         * A more formal specification of how these methods are used:
         *
         *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
         *   decl := ReactPropTypes.{type}(.isRequired)?
         *
         * Each and every declaration produces a function with the same signature. This
         * allows the creation of custom validation functions. For example:
         *
         *  var MyLink = React.createClass({
         *    propTypes: {
         *      // An optional string or URI prop named "href".
         *      href: function(props, propName, componentName) {
         *        var propValue = props[propName];
         *        if (propValue != null && typeof propValue !== 'string' &&
         *            !(propValue instanceof URI)) {
         *          return new Error(
         *            'Expected a string or an URI for ' + propName + ' in ' +
         *            componentName
         *          );
         *        }
         *      }
         *    },
         *    render: function() {...}
         *  });
         *
         * @internal
         */
        var ANONYMOUS = '<<anonymous>>';
        // Important!
        // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
        var ReactPropTypes = {
            array: createPrimitiveTypeChecker('array'),
            bool: createPrimitiveTypeChecker('boolean'),
            func: createPrimitiveTypeChecker('function'),
            number: createPrimitiveTypeChecker('number'),
            object: createPrimitiveTypeChecker('object'),
            string: createPrimitiveTypeChecker('string'),
            symbol: createPrimitiveTypeChecker('symbol'),
            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker,
            exact: createStrictShapeTypeChecker,
        };
        /**
         * inlined Object.is polyfill to avoid requiring consumers ship their own
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
         */
        /*eslint-disable no-self-compare*/
        function is(x, y) {
            // SameValue algorithm
            if (x === y) {
                // Steps 1-5, 7-10
                // Steps 6.b-6.e: +0 != -0
                return x !== 0 || 1 / x === 1 / y;
            }
            else {
                // Step 6.a: NaN == NaN
                return x !== x && y !== y;
            }
        }
        /*eslint-enable no-self-compare*/
        /**
         * We use an Error-like object for backward compatibility as people may call
         * PropTypes directly and inspect their output. However, we don't use real
         * Errors anymore. We don't inspect their stack anyway, and creating them
         * is prohibitively expensive if they are created too often, such as what
         * happens in oneOfType() for any type before the one that matched.
         */
        function PropTypeError(message) {
            this.message = message;
            this.stack = '';
        }
        // Make `instanceof Error` still work for returned errors.
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
            {
                var manualPropTypeCallCache = {};
                var manualPropTypeWarningCount = 0;
            }
            function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                componentName = componentName || ANONYMOUS;
                propFullName = propFullName || propName;
                if (secret !== ReactPropTypesSecret_1) {
                    if (throwOnDirectAccess) {
                        // New behavior only for users of `prop-types` package
                        var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                            'Use `PropTypes.checkPropTypes()` to call them. ' +
                            'Read more at http://fb.me/use-check-prop-types');
                        err.name = 'Invariant Violation';
                        throw err;
                    }
                    else if (typeof console !== 'undefined') {
                        // Old behavior for people using React.PropTypes
                        var cacheKey = componentName + ':' + propName;
                        if (!manualPropTypeCallCache[cacheKey] &&
                            // Avoid spamming the console because they are often not actionable except for lib authors
                            manualPropTypeWarningCount < 3) {
                            printWarning$1('You are manually calling a React.PropTypes validation ' +
                                'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
                                'and will throw in the standalone `prop-types` package. ' +
                                'You may be seeing this warning due to a third-party PropTypes ' +
                                'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                            manualPropTypeCallCache[cacheKey] = true;
                            manualPropTypeWarningCount++;
                        }
                    }
                }
                if (props[propName] == null) {
                    if (isRequired) {
                        if (props[propName] === null) {
                            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                        }
                        return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                    }
                    return null;
                }
                else {
                    return validate(props, propName, componentName, location, propFullName);
                }
            }
            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);
            return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
            function validate(props, propName, componentName, location, propFullName, secret) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== expectedType) {
                    // `propValue` being instance of, say, date/regexp, pass the 'object'
                    // check, but we can offer a more precise error message here rather than
                    // 'of type `object`'.
                    var preciseType = getPreciseType(propValue);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== 'function') {
                    return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
                }
                var propValue = props[propName];
                if (!Array.isArray(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
                }
                for (var i = 0; i < propValue.length; i++) {
                    var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
                    if (error instanceof Error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                if (!isValidElement(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
            function validate(props, propName, componentName, location, propFullName) {
                if (!(props[propName] instanceof expectedClass)) {
                    var expectedClassName = expectedClass.name || ANONYMOUS;
                    var actualClassName = getClassName(props[propName]);
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
                printWarning$1('Invalid argument supplied to oneOf, expected an instance of array.');
                return emptyFunctionThatReturnsNull;
            }
            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                for (var i = 0; i < expectedValues.length; i++) {
                    if (is(propValue, expectedValues[i])) {
                        return null;
                    }
                }
                var valuesString = JSON.stringify(expectedValues);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
            }
            return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== 'function') {
                    return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
                }
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== 'object') {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
                }
                for (var key in propValue) {
                    if (propValue.hasOwnProperty(key)) {
                        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
                        if (error instanceof Error) {
                            return error;
                        }
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
                printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.');
                return emptyFunctionThatReturnsNull;
            }
            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                if (typeof checker !== 'function') {
                    printWarning$1('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
                        'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                    return emptyFunctionThatReturnsNull;
                }
            }
            function validate(props, propName, componentName, location, propFullName) {
                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                    var checker = arrayOfTypeCheckers[i];
                    if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
                        return null;
                    }
                }
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
            }
            return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
                if (!isNode(props[propName])) {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }
        function createShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== 'object') {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                }
                for (var key in shapeTypes) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                        continue;
                    }
                    var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
                    if (error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== 'object') {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
                }
                // We need to check all keys in case some are required but missing from
                // props.
                var allKeys = objectAssign({}, props[propName], shapeTypes);
                for (var key in allKeys) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                    }
                    var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
                    if (error) {
                        return error;
                    }
                }
                return null;
            }
            return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
            switch (typeof propValue) {
                case 'number':
                case 'string':
                case 'undefined':
                    return true;
                case 'boolean':
                    return !propValue;
                case 'object':
                    if (Array.isArray(propValue)) {
                        return propValue.every(isNode);
                    }
                    if (propValue === null || isValidElement(propValue)) {
                        return true;
                    }
                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                        var iterator = iteratorFn.call(propValue);
                        var step;
                        if (iteratorFn !== propValue.entries) {
                            while (!(step = iterator.next()).done) {
                                if (!isNode(step.value)) {
                                    return false;
                                }
                            }
                        }
                        else {
                            // Iterator will provide entry [k,v] tuples rather than values.
                            while (!(step = iterator.next()).done) {
                                var entry = step.value;
                                if (entry) {
                                    if (!isNode(entry[1])) {
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        return false;
                    }
                    return true;
                default:
                    return false;
            }
        }
        function isSymbol(propType, propValue) {
            // Native Symbol.
            if (propType === 'symbol') {
                return true;
            }
            // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
            if (propValue['@@toStringTag'] === 'Symbol') {
                return true;
            }
            // Fallback for non-spec compliant Symbols which are polyfilled.
            if (typeof Symbol === 'function' && propValue instanceof Symbol) {
                return true;
            }
            return false;
        }
        // Equivalent of `typeof` but with special handling for array and regexp.
        function getPropType(propValue) {
            var propType = typeof propValue;
            if (Array.isArray(propValue)) {
                return 'array';
            }
            if (propValue instanceof RegExp) {
                // Old webkits (at least until Android 4.0) return 'function' rather than
                // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
                // passes PropTypes.object.
                return 'object';
            }
            if (isSymbol(propType, propValue)) {
                return 'symbol';
            }
            return propType;
        }
        // This handles more types than `getPropType`. Only used for error messages.
        // See `createPrimitiveTypeChecker`.
        function getPreciseType(propValue) {
            if (typeof propValue === 'undefined' || propValue === null) {
                return '' + propValue;
            }
            var propType = getPropType(propValue);
            if (propType === 'object') {
                if (propValue instanceof Date) {
                    return 'date';
                }
                else if (propValue instanceof RegExp) {
                    return 'regexp';
                }
            }
            return propType;
        }
        // Returns a string that is postfixed to a warning about an invalid type.
        // For example, "undefined" or "of type array"
        function getPostfixForTypeWarning(value) {
            var type = getPreciseType(value);
            switch (type) {
                case 'array':
                case 'object':
                    return 'an ' + type;
                case 'boolean':
                case 'date':
                case 'regexp':
                    return 'a ' + type;
                default:
                    return type;
            }
        }
        // Returns class name of the object, if any.
        function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
                return ANONYMOUS;
            }
            return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes_1;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
    };
    var propTypes = createCommonjsModule(function (module) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        {
            var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
                Symbol.for &&
                Symbol.for('react.element')) ||
                0xeac7;
            var isValidElement = function (object) {
                return typeof object === 'object' &&
                    object !== null &&
                    object.$$typeof === REACT_ELEMENT_TYPE;
            };
            // By explicitly using `prop-types` you are opting into new development behavior.
            // http://fb.me/prop-types-in-prod
            var throwOnDirectAccess = true;
            module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
        }
    });
    var key = '__global_unique_id__';
    var gud = function () {
        return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
    };
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *
     */
    function makeEmptyFunction(arg) {
        return function () {
            return arg;
        };
    }
    /**
     * This function accepts and discards inputs; it has no side effects. This is
     * primarily useful idiomatically for overridable function endpoints which
     * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
     */
    var emptyFunction$1 = function emptyFunction() { };
    emptyFunction$1.thatReturns = makeEmptyFunction;
    emptyFunction$1.thatReturnsFalse = makeEmptyFunction(false);
    emptyFunction$1.thatReturnsTrue = makeEmptyFunction(true);
    emptyFunction$1.thatReturnsNull = makeEmptyFunction(null);
    emptyFunction$1.thatReturnsThis = function () {
        return this;
    };
    emptyFunction$1.thatReturnsArgument = function (arg) {
        return arg;
    };
    var emptyFunction_1 = emptyFunction$1;
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */
    var warning = emptyFunction_1;
    {
        var printWarning$2 = function printWarning(format) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }
            var argIndex = 0;
            var message = 'Warning: ' + format.replace(/%s/g, function () {
                return args[argIndex++];
            });
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            }
            catch (x) { }
        };
        warning = function warning(condition, format) {
            if (format === undefined) {
                throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
            }
            if (format.indexOf('Failed Composite propType: ') === 0) {
                return; // Ignore CompositeComponent proptype check.
            }
            if (!condition) {
                for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                    args[_key2 - 2] = arguments[_key2];
                }
                printWarning$2.apply(undefined, [format].concat(args));
            }
        };
    }
    var warning_1 = warning;
    var implementation = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        var _react2 = _interopRequireDefault(React__default);
        var _propTypes2 = _interopRequireDefault(propTypes);
        var _gud2 = _interopRequireDefault(gud);
        var _warning2 = _interopRequireDefault(warning_1);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        } }
        function _possibleConstructorReturn(self, call) { if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        // Inlined Object.is polyfill.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        function objectIs(x, y) {
            if (x === y) {
                return x !== 0 || 1 / x === 1 / y;
            }
            else {
                return x !== x && y !== y;
            }
        }
        function createEventEmitter(value) {
            var handlers = [];
            return {
                on: function on(handler) {
                    handlers.push(handler);
                },
                off: function off(handler) {
                    handlers = handlers.filter(function (h) {
                        return h !== handler;
                    });
                },
                get: function get() {
                    return value;
                },
                set: function set(newValue, changedBits) {
                    value = newValue;
                    handlers.forEach(function (handler) {
                        return handler(value, changedBits);
                    });
                }
            };
        }
        function onlyChild(children) {
            return Array.isArray(children) ? children[0] : children;
        }
        function createReactContext(defaultValue, calculateChangedBits) {
            var _Provider$childContex, _Consumer$contextType;
            var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';
            var Provider = function (_Component) {
                _inherits(Provider, _Component);
                function Provider() {
                    var _temp, _this, _ret;
                    _classCallCheck(this, Provider);
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.emitter = createEventEmitter(_this.props.value), _temp), _possibleConstructorReturn(_this, _ret);
                }
                Provider.prototype.getChildContext = function getChildContext() {
                    var _ref;
                    return _ref = {}, _ref[contextProp] = this.emitter, _ref;
                };
                Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                    if (this.props.value !== nextProps.value) {
                        var oldValue = this.props.value;
                        var newValue = nextProps.value;
                        var changedBits = void 0;
                        if (objectIs(oldValue, newValue)) {
                            changedBits = 0; // No change
                        }
                        else {
                            changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                            {
                                (0, _warning2.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
                            }
                            changedBits |= 0;
                            if (changedBits !== 0) {
                                this.emitter.set(nextProps.value, changedBits);
                            }
                        }
                    }
                };
                Provider.prototype.render = function render() {
                    return this.props.children;
                };
                return Provider;
            }(React__default.Component);
            Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);
            var Consumer = function (_Component2) {
                _inherits(Consumer, _Component2);
                function Consumer() {
                    var _temp2, _this2, _ret2;
                    _classCallCheck(this, Consumer);
                    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args[_key2] = arguments[_key2];
                    }
                    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.state = {
                        value: _this2.getValue()
                    }, _this2.onUpdate = function (newValue, changedBits) {
                        var observedBits = _this2.observedBits | 0;
                        if ((observedBits & changedBits) !== 0) {
                            _this2.setState({ value: _this2.getValue() });
                        }
                    }, _temp2), _possibleConstructorReturn(_this2, _ret2);
                }
                Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
                    var observedBits = nextProps.observedBits;
                    this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
                        : observedBits;
                };
                Consumer.prototype.componentDidMount = function componentDidMount() {
                    if (this.context[contextProp]) {
                        this.context[contextProp].on(this.onUpdate);
                    }
                    var observedBits = this.props.observedBits;
                    this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
                        : observedBits;
                };
                Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
                    if (this.context[contextProp]) {
                        this.context[contextProp].off(this.onUpdate);
                    }
                };
                Consumer.prototype.getValue = function getValue() {
                    if (this.context[contextProp]) {
                        return this.context[contextProp].get();
                    }
                    else {
                        return defaultValue;
                    }
                };
                Consumer.prototype.render = function render() {
                    return onlyChild(this.props.children)(this.state.value);
                };
                return Consumer;
            }(React__default.Component);
            Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);
            return {
                Provider: Provider,
                Consumer: Consumer
            };
        }
        exports.default = createReactContext;
        module.exports = exports['default'];
    });
    unwrapExports(implementation);
    var lib = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        var _react2 = _interopRequireDefault(React__default);
        var _implementation2 = _interopRequireDefault(implementation);
        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
        exports.default = _react2.default.createContext || _implementation2.default;
        module.exports = exports['default'];
    });
    var createContext = unwrapExports(lib);
    var ManagerContext = createContext({
        setReferenceNode: undefined,
        referenceNode: undefined
    });
    var Manager = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(Manager, _React$Component);
        function Manager() {
            var _this;
            _this = _React$Component.call(this) || this;
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setReferenceNode", function (referenceNode) {
                if (!referenceNode || _this.state.context.referenceNode === referenceNode) {
                    return;
                }
                _this.setState(function (_ref) {
                    var context = _ref.context;
                    return {
                        context: _extends({}, context, {
                            referenceNode: referenceNode
                        })
                    };
                });
            });
            _this.state = {
                context: {
                    setReferenceNode: _this.setReferenceNode,
                    referenceNode: undefined
                }
            };
            return _this;
        }
        var _proto = Manager.prototype;
        _proto.render = function render() {
            return React.createElement(ManagerContext.Provider, {
                value: this.state.context
            }, this.props.children);
        };
        return Manager;
    }(React.Component);
    /**
     * Takes an argument and if it's an array, returns the first item in the array,
     * otherwise returns the argument. Used for Preact compatibility.
     */
    var unwrapArray = function unwrapArray(arg) {
        return Array.isArray(arg) ? arg[0] : arg;
    };
    /**
     * Takes a maybe-undefined function and arbitrary args and invokes the function
     * only if it is defined.
     */
    var safeInvoke = function safeInvoke(fn) {
        if (typeof fn === "function") {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }
            return fn.apply(void 0, args);
        }
    };
    var initialStyle = {
        position: 'absolute',
        top: 0,
        left: 0,
        opacity: 0,
        pointerEvents: 'none'
    };
    var initialArrowStyle = {};
    var InnerPopper = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(InnerPopper, _React$Component);
        function InnerPopper() {
            var _this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
                data: undefined,
                placement: undefined
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "popperInstance", void 0);
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "popperNode", null);
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "arrowNode", null);
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setPopperNode", function (popperNode) {
                if (!popperNode || _this.popperNode === popperNode)
                    return;
                safeInvoke(_this.props.innerRef, popperNode);
                _this.popperNode = popperNode;
                _this.updatePopperInstance();
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setArrowNode", function (arrowNode) {
                _this.arrowNode = arrowNode;
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateStateModifier", {
                enabled: true,
                order: 900,
                fn: function fn(data) {
                    var placement = data.placement;
                    _this.setState({
                        data: data,
                        placement: placement
                    });
                    return data;
                }
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getOptions", function () {
                return {
                    placement: _this.props.placement,
                    eventsEnabled: _this.props.eventsEnabled,
                    positionFixed: _this.props.positionFixed,
                    modifiers: _extends({}, _this.props.modifiers, {
                        arrow: _extends({}, _this.props.modifiers && _this.props.modifiers.arrow, {
                            enabled: !!_this.arrowNode,
                            element: _this.arrowNode
                        }),
                        applyStyle: {
                            enabled: false
                        },
                        updateStateModifier: _this.updateStateModifier
                    })
                };
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getPopperStyle", function () {
                return !_this.popperNode || !_this.state.data ? initialStyle : _extends({
                    position: _this.state.data.offsets.popper.position
                }, _this.state.data.styles);
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getPopperPlacement", function () {
                return !_this.state.data ? undefined : _this.state.placement;
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getArrowStyle", function () {
                return !_this.arrowNode || !_this.state.data ? initialArrowStyle : _this.state.data.arrowStyles;
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getOutOfBoundariesState", function () {
                return _this.state.data ? _this.state.data.hide : undefined;
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "destroyPopperInstance", function () {
                if (!_this.popperInstance)
                    return;
                _this.popperInstance.destroy();
                _this.popperInstance = null;
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updatePopperInstance", function () {
                _this.destroyPopperInstance();
                var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)), popperNode = _assertThisInitialize.popperNode;
                var referenceElement = _this.props.referenceElement;
                if (!referenceElement || !popperNode)
                    return;
                _this.popperInstance = new PopperJS(referenceElement, popperNode, _this.getOptions());
            });
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "scheduleUpdate", function () {
                if (_this.popperInstance) {
                    _this.popperInstance.scheduleUpdate();
                }
            });
            return _this;
        }
        var _proto = InnerPopper.prototype;
        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
            // If the Popper.js options have changed, update the instance (destroy + create)
            if (this.props.placement !== prevProps.placement || this.props.referenceElement !== prevProps.referenceElement || this.props.positionFixed !== prevProps.positionFixed) {
                this.updatePopperInstance();
            }
            else if (this.props.eventsEnabled !== prevProps.eventsEnabled && this.popperInstance) {
                this.props.eventsEnabled ? this.popperInstance.enableEventListeners() : this.popperInstance.disableEventListeners();
            } // A placement difference in state means popper determined a new placement
            // apart from the props value. By the time the popper element is rendered with
            // the new position Popper has already measured it, if the place change triggers
            // a size change it will result in a misaligned popper. So we schedule an update to be sure.
            if (prevState.placement !== this.state.placement) {
                this.scheduleUpdate();
            }
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            safeInvoke(this.props.innerRef, null);
            this.destroyPopperInstance();
        };
        _proto.render = function render() {
            return unwrapArray(this.props.children)({
                ref: this.setPopperNode,
                style: this.getPopperStyle(),
                placement: this.getPopperPlacement(),
                outOfBoundaries: this.getOutOfBoundariesState(),
                scheduleUpdate: this.scheduleUpdate,
                arrowProps: {
                    ref: this.setArrowNode,
                    style: this.getArrowStyle()
                }
            });
        };
        return InnerPopper;
    }(React.Component);
    _defineProperty(InnerPopper, "defaultProps", {
        placement: 'bottom',
        eventsEnabled: true,
        referenceElement: undefined,
        positionFixed: false
    });
    var placements = PopperJS.placements;
    function Popper(_ref) {
        var referenceElement = _ref.referenceElement, props = _objectWithoutPropertiesLoose(_ref, ["referenceElement"]);
        return React.createElement(ManagerContext.Consumer, null, function (_ref2) {
            var referenceNode = _ref2.referenceNode;
            return React.createElement(InnerPopper, _extends({
                referenceElement: referenceElement !== undefined ? referenceElement : referenceNode
            }, props));
        });
    }
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var warning$1 = function () { };
    {
        var printWarning$3 = function printWarning(format, args) {
            var len = arguments.length;
            args = new Array(len > 2 ? len - 2 : 0);
            for (var key = 2; key < len; key++) {
                args[key - 2] = arguments[key];
            }
            var argIndex = 0;
            var message = 'Warning: ' +
                format.replace(/%s/g, function () {
                    return args[argIndex++];
                });
            if (typeof console !== 'undefined') {
                console.error(message);
            }
            try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message);
            }
            catch (x) { }
        };
        warning$1 = function (condition, format, args) {
            var len = arguments.length;
            args = new Array(len > 2 ? len - 2 : 0);
            for (var key = 2; key < len; key++) {
                args[key - 2] = arguments[key];
            }
            if (format === undefined) {
                throw new Error('`warning(condition, format, ...args)` requires a warning ' +
                    'message argument');
            }
            if (!condition) {
                printWarning$3.apply(null, [format].concat(args));
            }
        };
    }
    var warning_1$1 = warning$1;
    var InnerReference = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(InnerReference, _React$Component);
        function InnerReference() {
            var _this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
            _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "refHandler", function (node) {
                safeInvoke(_this.props.innerRef, node);
                safeInvoke(_this.props.setReferenceNode, node);
            });
            return _this;
        }
        var _proto = InnerReference.prototype;
        _proto.render = function render() {
            warning_1$1(Boolean(this.props.setReferenceNode), '`Reference` should not be used outside of a `Manager` component.');
            return unwrapArray(this.props.children)({
                ref: this.refHandler
            });
        };
        return InnerReference;
    }(React.Component);
    function Reference(props) {
        return React.createElement(ManagerContext.Consumer, null, function (_ref) {
            var setReferenceNode = _ref.setReferenceNode;
            return React.createElement(InnerReference, _extends({
                setReferenceNode: setReferenceNode
            }, props));
        });
    }
    // Public components
    // Public types
    exports.Popper = Popper;
    exports.placements = placements;
    exports.Manager = Manager;
    exports.Reference = Reference;
    Object.defineProperty(exports, '__esModule', { value: true });
})));
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom'), require('react-popper')) :
        typeof define === 'function' && define.amd ? define('reactstrap', ['exports', 'react', 'react-dom', 'react-popper'], factory) :
            (global = global || self, factory(global.Reactstrap = {}, global.React, global.ReactDOM, global.ReactPopper));
}(this, function (exports, React, ReactDOM, reactPopper) {
    'use strict';
    var React__default = 'default' in React ? React['default'] : React;
    ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;
    function _extends() {
        _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        return _extends.apply(this, arguments);
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
            return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
                continue;
            target[key] = source[key];
        }
        return target;
    }
    function _assertThisInitialized(self) {
        if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
    }
    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
    function unwrapExports(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
    }
    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
        return Object(val);
    }
    function shouldUseNative() {
        try {
            if (!Object.assign) {
                return false;
            } // Detect buggy property enumeration order in older V8 versions.
            // https://bugs.chromium.org/p/v8/issues/detail?id=4118
            var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
            test1[5] = 'de';
            if (Object.getOwnPropertyNames(test1)[0] === '5') {
                return false;
            } // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test2 = {};
            for (var i = 0; i < 10; i++) {
                test2['_' + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                return test2[n];
            });
            if (order2.join('') !== '0123456789') {
                return false;
            } // https://bugs.chromium.org/p/v8/issues/detail?id=3056
            var test3 = {};
            'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
                return false;
            }
            return true;
        }
        catch (err) {
            // We don't expect any of the above to throw, but better to be safe.
            return false;
        }
    }
    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
            if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
        return to;
    };
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    var ReactPropTypesSecret_1 = ReactPropTypesSecret;
    function emptyFunction() { }
    var factoryWithThrowingShims = function factoryWithThrowingShims() {
        function shim(props, propName, componentName, location, propFullName, secret) {
            if (secret === ReactPropTypesSecret_1) {
                // It is still safe when called from React.
                return;
            }
            var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
            err.name = 'Invariant Violation';
            throw err;
        }
        shim.isRequired = shim;
        function getShim() {
            return shim;
        }
        // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
        var ReactPropTypes = {
            array: shim,
            bool: shim,
            func: shim,
            number: shim,
            object: shim,
            string: shim,
            symbol: shim,
            any: shim,
            arrayOf: getShim,
            element: shim,
            instanceOf: getShim,
            node: shim,
            objectOf: getShim,
            oneOf: getShim,
            oneOfType: getShim,
            shape: getShim,
            exact: getShim
        };
        ReactPropTypes.checkPropTypes = emptyFunction;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
    };
    var propTypes = createCommonjsModule(function (module) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        {
            // By explicitly using `prop-types` you are opting into new production behavior.
            // http://fb.me/prop-types-in-prod
            module.exports = factoryWithThrowingShims();
        }
    });
    var classnames = createCommonjsModule(function (module) {
        /*!
          Copyright (c) 2017 Jed Watson.
          Licensed under the MIT License (MIT), see
          http://jedwatson.github.io/classnames
        */
        /* global define */
        (function () {
            var hasOwn = {}.hasOwnProperty;
            function classNames() {
                var classes = [];
                for (var i = 0; i < arguments.length; i++) {
                    var arg = arguments[i];
                    if (!arg)
                        continue;
                    var argType = typeof arg;
                    if (argType === 'string' || argType === 'number') {
                        classes.push(arg);
                    }
                    else if (Array.isArray(arg) && arg.length) {
                        var inner = classNames.apply(null, arg);
                        if (inner) {
                            classes.push(inner);
                        }
                    }
                    else if (argType === 'object') {
                        for (var key in arg) {
                            if (hasOwn.call(arg, key) && arg[key]) {
                                classes.push(key);
                            }
                        }
                    }
                }
                return classes.join(' ');
            }
            if (module.exports) {
                classNames.default = classNames;
                module.exports = classNames;
            }
            else {
                window.classNames = classNames;
            }
        })();
    });
    /**
     * Lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright JS Foundation and other contributors <https://js.foundation/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */
    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', nullTag = '[object Null]', proxyTag = '[object Proxy]', undefinedTag = '[object Undefined]';
    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();
    /** Used for built-in method references. */
    var objectProto = Object.prototype;
    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto.hasOwnProperty;
    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;
    /** Built-in value references. */
    var Symbol$1 = root.Symbol, symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
        if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
        var isOwn = hasOwnProperty$1.call(value, symToStringTag), tag = value[symToStringTag];
        try {
            value[symToStringTag] = undefined;
            var unmasked = true;
        }
        catch (e) { }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
            if (isOwn) {
                value[symToStringTag] = tag;
            }
            else {
                delete value[symToStringTag];
            }
        }
        return result;
    }
    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
        return nativeObjectToString.call(value);
    }
    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
        if (!isObject(value)) {
            return false;
        } // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
    }
    var lodash_isfunction = isFunction;
    function getScrollbarWidth() {
        var scrollDiv = document.createElement('div'); // .modal-scrollbar-measure styles // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.4/scss/_modal.scss#L106-L113
        scrollDiv.style.position = 'absolute';
        scrollDiv.style.top = '-9999px';
        scrollDiv.style.width = '50px';
        scrollDiv.style.height = '50px';
        scrollDiv.style.overflow = 'scroll';
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarWidth;
    }
    function setScrollbarWidth(padding) {
        document.body.style.paddingRight = padding > 0 ? padding + "px" : null;
    }
    function isBodyOverflowing() {
        return document.body.clientWidth < window.innerWidth;
    }
    function getOriginalBodyPadding() {
        var style = window.getComputedStyle(document.body, null);
        return parseInt(style && style.getPropertyValue('padding-right') || 0, 10);
    }
    function conditionallyUpdateScrollbar() {
        var scrollbarWidth = getScrollbarWidth(); // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.6/js/src/modal.js#L433
        var fixedContent = document.querySelectorAll('.fixed-top, .fixed-bottom, .is-fixed, .sticky-top')[0];
        var bodyPadding = fixedContent ? parseInt(fixedContent.style.paddingRight || 0, 10) : 0;
        if (isBodyOverflowing()) {
            setScrollbarWidth(bodyPadding + scrollbarWidth);
        }
    }
    var globalCssModule;
    function setGlobalCssModule(cssModule) {
        globalCssModule = cssModule;
    }
    function mapToCssModules(className, cssModule) {
        if (className === void 0) {
            className = '';
        }
        if (cssModule === void 0) {
            cssModule = globalCssModule;
        }
        if (!cssModule)
            return className;
        return className.split(' ').map(function (c) {
            return cssModule[c] || c;
        }).join(' ');
    }
    /**
     * Returns a new object with the key/value pairs from `obj` that are not in the array `omitKeys`.
     */
    function omit(obj, omitKeys) {
        var result = {};
        Object.keys(obj).forEach(function (key) {
            if (omitKeys.indexOf(key) === -1) {
                result[key] = obj[key];
            }
        });
        return result;
    }
    /**
     * Returns a filtered copy of an object with only the specified keys.
     */
    function pick(obj, keys) {
        var pickKeys = Array.isArray(keys) ? keys : [keys];
        var length = pickKeys.length;
        var key;
        var result = {};
        while (length > 0) {
            length -= 1;
            key = pickKeys[length];
            result[key] = obj[key];
        }
        return result;
    }
    var warned = {};
    function warnOnce(message) {
        if (!warned[message]) {
            /* istanbul ignore else */
            if (typeof console !== 'undefined') {
                console.error(message); // eslint-disable-line no-console
            }
            warned[message] = true;
        }
    }
    function deprecated(propType, explanation) {
        return function validate(props, propName, componentName) {
            if (props[propName] !== null && typeof props[propName] !== 'undefined') {
                warnOnce("\"" + propName + "\" property of \"" + componentName + "\" has been deprecated.\n" + explanation);
            }
            for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
                rest[_key - 3] = arguments[_key];
            }
            return propType.apply(void 0, [props, propName, componentName].concat(rest));
        };
    }
    function DOMElement(props, propName, componentName) {
        if (!(props[propName] instanceof Element)) {
            return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`. Expected prop to be an instance of Element. Validation failed.');
        }
    }
    var targetPropType = propTypes.oneOfType([propTypes.string, propTypes.func, DOMElement, propTypes.shape({
            current: propTypes.any
        })]);
    var tagPropType = propTypes.oneOfType([propTypes.func, propTypes.string, propTypes.shape({
            $$typeof: propTypes.symbol,
            render: propTypes.func
        }), propTypes.arrayOf(propTypes.oneOfType([propTypes.func, propTypes.string, propTypes.shape({
                $$typeof: propTypes.symbol,
                render: propTypes.func
            })]))]);
    /* eslint key-spacing: ["error", { afterColon: true, align: "value" }] */
    // These are all setup to match what is in the bootstrap _variables.scss
    // https://github.com/twbs/bootstrap/blob/v4-dev/scss/_variables.scss
    var TransitionTimeouts = {
        Fade: 150,
        // $transition-fade
        Collapse: 350,
        // $transition-collapse
        Modal: 300,
        // $modal-transition
        Carousel: 600 // $carousel-transition
    }; // Duplicated Transition.propType keys to ensure that Reactstrap builds
    // for distribution properly exclude these keys for nested child HTML attributes
    // since `react-transition-group` removes propTypes in production builds.
    var TransitionPropTypeKeys = ['in', 'mountOnEnter', 'unmountOnExit', 'appear', 'enter', 'exit', 'timeout', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'];
    var TransitionStatuses = {
        ENTERING: 'entering',
        ENTERED: 'entered',
        EXITING: 'exiting',
        EXITED: 'exited'
    };
    var keyCodes = {
        esc: 27,
        space: 32,
        enter: 13,
        tab: 9,
        up: 38,
        down: 40,
        home: 36,
        end: 35,
        n: 78,
        p: 80
    };
    var PopperPlacements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];
    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    function isReactRefObj(target) {
        if (target && typeof target === 'object') {
            return 'current' in target;
        }
        return false;
    }
    function findDOMElements(target) {
        if (isReactRefObj(target)) {
            return target.current;
        }
        if (lodash_isfunction(target)) {
            return target();
        }
        if (typeof target === 'string' && canUseDOM) {
            var selection = document.querySelectorAll(target);
            if (!selection.length) {
                selection = document.querySelectorAll("#" + target);
            }
            if (!selection.length) {
                throw new Error("The target '" + target + "' could not be identified in the dom, tip: check spelling");
            }
            return selection;
        }
        return target;
    }
    function isArrayOrNodeList(els) {
        if (els === null) {
            return false;
        }
        return Array.isArray(els) || canUseDOM && typeof els.length === 'number';
    }
    function getTarget(target) {
        var els = findDOMElements(target);
        if (isArrayOrNodeList(els)) {
            return els[0];
        }
        return els;
    }
    var defaultToggleEvents = ['touchstart', 'click'];
    function addMultipleEventListeners(_els, handler, _events, useCapture) {
        var els = _els;
        if (!isArrayOrNodeList(els)) {
            els = [els];
        }
        var events = _events;
        if (typeof events === 'string') {
            events = events.split(/\s+/);
        }
        if (!isArrayOrNodeList(els) || typeof handler !== 'function' || !Array.isArray(events)) {
            throw new Error("\n      The first argument of this function must be DOM node or an array on DOM nodes or NodeList.\n      The second must be a function.\n      The third is a string or an array of strings that represents DOM events\n    ");
        }
        Array.prototype.forEach.call(events, function (event) {
            Array.prototype.forEach.call(els, function (el) {
                el.addEventListener(event, handler, useCapture);
            });
        });
        return function removeEvents() {
            Array.prototype.forEach.call(events, function (event) {
                Array.prototype.forEach.call(els, function (el) {
                    el.removeEventListener(event, handler, useCapture);
                });
            });
        };
    }
    var focusableElements = ['a[href]', 'area[href]', 'input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'object', 'embed', '[tabindex]:not(.modal)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'];
    var utils = /*#__PURE__*/ Object.freeze({
        getScrollbarWidth: getScrollbarWidth,
        setScrollbarWidth: setScrollbarWidth,
        isBodyOverflowing: isBodyOverflowing,
        getOriginalBodyPadding: getOriginalBodyPadding,
        conditionallyUpdateScrollbar: conditionallyUpdateScrollbar,
        setGlobalCssModule: setGlobalCssModule,
        mapToCssModules: mapToCssModules,
        omit: omit,
        pick: pick,
        warnOnce: warnOnce,
        deprecated: deprecated,
        DOMElement: DOMElement,
        targetPropType: targetPropType,
        tagPropType: tagPropType,
        TransitionTimeouts: TransitionTimeouts,
        TransitionPropTypeKeys: TransitionPropTypeKeys,
        TransitionStatuses: TransitionStatuses,
        keyCodes: keyCodes,
        PopperPlacements: PopperPlacements,
        canUseDOM: canUseDOM,
        isReactRefObj: isReactRefObj,
        findDOMElements: findDOMElements,
        isArrayOrNodeList: isArrayOrNodeList,
        getTarget: getTarget,
        defaultToggleEvents: defaultToggleEvents,
        addMultipleEventListeners: addMultipleEventListeners,
        focusableElements: focusableElements
    });
    var propTypes$1 = {
        tag: tagPropType,
        fluid: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps = {
        tag: 'div'
    };
    var Container = function Container(props) {
        var className = props.className, cssModule = props.cssModule, fluid = props.fluid, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "fluid", "tag"]);
        var classes = mapToCssModules(classnames(className, fluid ? 'container-fluid' : 'container'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    Container.propTypes = propTypes$1;
    Container.defaultProps = defaultProps;
    var propTypes$2 = {
        tag: tagPropType,
        noGutters: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object,
        form: propTypes.bool
    };
    var defaultProps$1 = {
        tag: 'div'
    };
    var Row = function Row(props) {
        var className = props.className, cssModule = props.cssModule, noGutters = props.noGutters, Tag = props.tag, form = props.form, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "noGutters", "tag", "form"]);
        var classes = mapToCssModules(classnames(className, noGutters ? 'no-gutters' : null, form ? 'form-row' : 'row'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    Row.propTypes = propTypes$2;
    Row.defaultProps = defaultProps$1;
    /**
     * lodash 3.0.2 (Custom Build) <https://lodash.com/>
     * Build: `lodash modern modularize exports="npm" -o ./`
     * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     * Available under MIT license <https://lodash.com/license>
     */
    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject$1(value) {
        // Avoid a V8 JIT bug in Chrome 19-20.
        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
    }
    var lodash_isobject = isObject$1;
    var colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];
    var stringOrNumberProp = propTypes.oneOfType([propTypes.number, propTypes.string]);
    var columnProps = propTypes.oneOfType([propTypes.bool, propTypes.number, propTypes.string, propTypes.shape({
            size: propTypes.oneOfType([propTypes.bool, propTypes.number, propTypes.string]),
            push: deprecated(stringOrNumberProp, 'Please use the prop "order"'),
            pull: deprecated(stringOrNumberProp, 'Please use the prop "order"'),
            order: stringOrNumberProp,
            offset: stringOrNumberProp
        })]);
    var propTypes$3 = {
        tag: tagPropType,
        xs: columnProps,
        sm: columnProps,
        md: columnProps,
        lg: columnProps,
        xl: columnProps,
        className: propTypes.string,
        cssModule: propTypes.object,
        widths: propTypes.array
    };
    var defaultProps$2 = {
        tag: 'div',
        widths: colWidths
    };
    var getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {
        if (colSize === true || colSize === '') {
            return isXs ? 'col' : "col-" + colWidth;
        }
        else if (colSize === 'auto') {
            return isXs ? 'col-auto' : "col-" + colWidth + "-auto";
        }
        return isXs ? "col-" + colSize : "col-" + colWidth + "-" + colSize;
    };
    var Col = function Col(props) {
        var className = props.className, cssModule = props.cssModule, widths = props.widths, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "widths", "tag"]);
        var colClasses = [];
        widths.forEach(function (colWidth, i) {
            var columnProp = props[colWidth];
            delete attributes[colWidth];
            if (!columnProp && columnProp !== '') {
                return;
            }
            var isXs = !i;
            if (lodash_isobject(columnProp)) {
                var _classNames;
                var colSizeInterfix = isXs ? '-' : "-" + colWidth + "-";
                var colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);
                colClasses.push(mapToCssModules(classnames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames["order" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames["offset" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames)), cssModule));
            }
            else {
                var _colClass = getColumnSizeClass(isXs, colWidth, columnProp);
                colClasses.push(_colClass);
            }
        });
        if (!colClasses.length) {
            colClasses.push('col');
        }
        var classes = mapToCssModules(classnames(className, colClasses), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    Col.propTypes = propTypes$3;
    Col.defaultProps = defaultProps$2;
    var propTypes$4 = {
        light: propTypes.bool,
        dark: propTypes.bool,
        inverse: deprecated(propTypes.bool, 'Please use the prop "dark"'),
        full: propTypes.bool,
        fixed: propTypes.string,
        sticky: propTypes.string,
        color: propTypes.string,
        role: propTypes.string,
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object,
        toggleable: deprecated(propTypes.oneOfType([propTypes.bool, propTypes.string]), 'Please use the prop "expand"'),
        expand: propTypes.oneOfType([propTypes.bool, propTypes.string])
    };
    var defaultProps$3 = {
        tag: 'nav',
        expand: false
    };
    var getExpandClass = function getExpandClass(expand) {
        if (expand === false) {
            return false;
        }
        else if (expand === true || expand === 'xs') {
            return 'navbar-expand';
        }
        return "navbar-expand-" + expand;
    }; // To better maintain backwards compatibility while toggleable is deprecated.
    // We must map breakpoints to the next breakpoint so that toggleable and expand do the same things at the same breakpoint.
    var toggleableToExpand = {
        xs: 'sm',
        sm: 'md',
        md: 'lg',
        lg: 'xl'
    };
    var getToggleableClass = function getToggleableClass(toggleable) {
        if (toggleable === undefined || toggleable === 'xl') {
            return false;
        }
        else if (toggleable === false) {
            return 'navbar-expand';
        }
        return "navbar-expand-" + (toggleable === true ? 'sm' : toggleableToExpand[toggleable] || toggleable);
    };
    var Navbar = function Navbar(props) {
        var _classNames;
        var toggleable = props.toggleable, expand = props.expand, className = props.className, cssModule = props.cssModule, light = props.light, dark = props.dark, inverse = props.inverse, fixed = props.fixed, sticky = props.sticky, color = props.color, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["toggleable", "expand", "className", "cssModule", "light", "dark", "inverse", "fixed", "sticky", "color", "tag"]);
        var classes = mapToCssModules(classnames(className, 'navbar', getExpandClass(expand) || getToggleableClass(toggleable), (_classNames = {
            'navbar-light': light,
            'navbar-dark': inverse || dark
        }, _classNames["bg-" + color] = color, _classNames["fixed-" + fixed] = fixed, _classNames["sticky-" + sticky] = sticky, _classNames)), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    Navbar.propTypes = propTypes$4;
    Navbar.defaultProps = defaultProps$3;
    var propTypes$5 = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$4 = {
        tag: 'a'
    };
    var NavbarBrand = function NavbarBrand(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'navbar-brand'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    NavbarBrand.propTypes = propTypes$5;
    NavbarBrand.defaultProps = defaultProps$4;
    var propTypes$6 = {
        tag: tagPropType,
        type: propTypes.string,
        className: propTypes.string,
        cssModule: propTypes.object,
        children: propTypes.node
    };
    var defaultProps$5 = {
        tag: 'button',
        type: 'button'
    };
    var NavbarToggler = function NavbarToggler(props) {
        var className = props.className, cssModule = props.cssModule, children = props.children, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "children", "tag"]);
        var classes = mapToCssModules(classnames(className, 'navbar-toggler'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }), children || React__default.createElement("span", {
            className: mapToCssModules('navbar-toggler-icon', cssModule)
        }));
    };
    NavbarToggler.propTypes = propTypes$6;
    NavbarToggler.defaultProps = defaultProps$5;
    var propTypes$7 = {
        tabs: propTypes.bool,
        pills: propTypes.bool,
        vertical: propTypes.oneOfType([propTypes.bool, propTypes.string]),
        horizontal: propTypes.string,
        justified: propTypes.bool,
        fill: propTypes.bool,
        navbar: propTypes.bool,
        card: propTypes.bool,
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$6 = {
        tag: 'ul',
        vertical: false
    };
    var getVerticalClass = function getVerticalClass(vertical) {
        if (vertical === false) {
            return false;
        }
        else if (vertical === true || vertical === 'xs') {
            return 'flex-column';
        }
        return "flex-" + vertical + "-column";
    };
    var Nav = function Nav(props) {
        var className = props.className, cssModule = props.cssModule, tabs = props.tabs, pills = props.pills, vertical = props.vertical, horizontal = props.horizontal, justified = props.justified, fill = props.fill, navbar = props.navbar, card = props.card, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tabs", "pills", "vertical", "horizontal", "justified", "fill", "navbar", "card", "tag"]);
        var classes = mapToCssModules(classnames(className, navbar ? 'navbar-nav' : 'nav', horizontal ? "justify-content-" + horizontal : false, getVerticalClass(vertical), {
            'nav-tabs': tabs,
            'card-header-tabs': card && tabs,
            'nav-pills': pills,
            'card-header-pills': card && pills,
            'nav-justified': justified,
            'nav-fill': fill
        }), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    Nav.propTypes = propTypes$7;
    Nav.defaultProps = defaultProps$6;
    var propTypes$8 = {
        tag: tagPropType,
        active: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$7 = {
        tag: 'li'
    };
    var NavItem = function NavItem(props) {
        var className = props.className, cssModule = props.cssModule, active = props.active, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "active", "tag"]);
        var classes = mapToCssModules(classnames(className, 'nav-item', active ? 'active' : false), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    NavItem.propTypes = propTypes$8;
    NavItem.defaultProps = defaultProps$7;
    var propTypes$9 = {
        disabled: propTypes.bool,
        dropup: deprecated(propTypes.bool, 'Please use the prop "direction" with the value "up".'),
        direction: propTypes.oneOf(['up', 'down', 'left', 'right']),
        group: propTypes.bool,
        isOpen: propTypes.bool,
        nav: propTypes.bool,
        active: propTypes.bool,
        addonType: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['prepend', 'append'])]),
        size: propTypes.string,
        tag: tagPropType,
        toggle: propTypes.func,
        children: propTypes.node,
        className: propTypes.string,
        cssModule: propTypes.object,
        inNavbar: propTypes.bool,
        setActiveFromChild: propTypes.bool
    };
    var defaultProps$8 = {
        isOpen: false,
        direction: 'down',
        nav: false,
        active: false,
        addonType: false,
        inNavbar: false,
        setActiveFromChild: false
    };
    var childContextTypes = {
        toggle: propTypes.func.isRequired,
        isOpen: propTypes.bool.isRequired,
        direction: propTypes.oneOf(['up', 'down', 'left', 'right']).isRequired,
        inNavbar: propTypes.bool.isRequired
    };
    var Dropdown = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(Dropdown, _React$Component);
        function Dropdown(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.addEvents = _this.addEvents.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.handleDocumentClick = _this.handleDocumentClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.removeEvents = _this.removeEvents.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = Dropdown.prototype;
        _proto.getChildContext = function getChildContext() {
            return {
                toggle: this.props.toggle,
                isOpen: this.props.isOpen,
                direction: this.props.direction === 'down' && this.props.dropup ? 'up' : this.props.direction,
                inNavbar: this.props.inNavbar
            };
        };
        _proto.componentDidMount = function componentDidMount() {
            this.handleProps();
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
            if (this.props.isOpen !== prevProps.isOpen) {
                this.handleProps();
            }
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this.removeEvents();
        };
        _proto.getContainer = function getContainer() {
            if (this._$container)
                return this._$container;
            this._$container = ReactDOM.findDOMNode(this);
            return ReactDOM.findDOMNode(this);
        };
        _proto.getMenuCtrl = function getMenuCtrl() {
            if (this._$menuCtrl)
                return this._$menuCtrl;
            this._$menuCtrl = this.getContainer().querySelector('[aria-expanded]');
            return this._$menuCtrl;
        };
        _proto.getMenuItems = function getMenuItems() {
            return [].slice.call(this.getContainer().querySelectorAll('[role="menuitem"]'));
        };
        _proto.addEvents = function addEvents() {
            var _this2 = this;
            ['click', 'touchstart', 'keyup'].forEach(function (event) {
                return document.addEventListener(event, _this2.handleDocumentClick, true);
            });
        };
        _proto.removeEvents = function removeEvents() {
            var _this3 = this;
            ['click', 'touchstart', 'keyup'].forEach(function (event) {
                return document.removeEventListener(event, _this3.handleDocumentClick, true);
            });
        };
        _proto.handleDocumentClick = function handleDocumentClick(e) {
            if (e && (e.which === 3 || e.type === 'keyup' && e.which !== keyCodes.tab))
                return;
            var container = this.getContainer();
            if (container.contains(e.target) && container !== e.target && (e.type !== 'keyup' || e.which === keyCodes.tab)) {
                return;
            }
            this.toggle(e);
        };
        _proto.handleKeyDown = function handleKeyDown(e) {
            var _this4 = this;
            if (/input|textarea/i.test(e.target.tagName) || keyCodes.tab === e.which && e.target.getAttribute('role') !== 'menuitem') {
                return;
            }
            e.preventDefault();
            if (this.props.disabled)
                return;
            if (this.getMenuCtrl() === e.target) {
                if (!this.props.isOpen && [keyCodes.space, keyCodes.enter, keyCodes.up, keyCodes.down].indexOf(e.which) > -1) {
                    this.toggle(e);
                    setTimeout(function () {
                        return _this4.getMenuItems()[0].focus();
                    });
                }
            }
            if (this.props.isOpen && e.target.getAttribute('role') === 'menuitem') {
                if ([keyCodes.tab, keyCodes.esc].indexOf(e.which) > -1) {
                    this.toggle(e);
                    this.getMenuCtrl().focus();
                }
                else if ([keyCodes.space, keyCodes.enter].indexOf(e.which) > -1) {
                    e.target.click();
                    this.getMenuCtrl().focus();
                }
                else if ([keyCodes.down, keyCodes.up].indexOf(e.which) > -1 || [keyCodes.n, keyCodes.p].indexOf(e.which) > -1 && e.ctrlKey) {
                    var $menuitems = this.getMenuItems();
                    var index = $menuitems.indexOf(e.target);
                    if (keyCodes.up === e.which || keyCodes.p === e.which && e.ctrlKey) {
                        index = index !== 0 ? index - 1 : $menuitems.length - 1;
                    }
                    else if (keyCodes.down === e.which || keyCodes.n === e.which && e.ctrlKey) {
                        index = index === $menuitems.length - 1 ? 0 : index + 1;
                    }
                    $menuitems[index].focus();
                }
                else if (keyCodes.end === e.which) {
                    var _$menuitems = this.getMenuItems();
                    _$menuitems[_$menuitems.length - 1].focus();
                }
                else if (keyCodes.home === e.which) {
                    var _$menuitems2 = this.getMenuItems();
                    _$menuitems2[0].focus();
                }
                else if (e.which >= 48 && e.which <= 90) {
                    var _$menuitems3 = this.getMenuItems();
                    var charPressed = String.fromCharCode(e.which).toLowerCase();
                    for (var i = 0; i < _$menuitems3.length; i += 1) {
                        var firstLetter = _$menuitems3[i].textContent && _$menuitems3[i].textContent[0].toLowerCase();
                        if (firstLetter === charPressed) {
                            _$menuitems3[i].focus();
                            break;
                        }
                    }
                }
            }
        };
        _proto.handleProps = function handleProps() {
            if (this.props.isOpen) {
                this.addEvents();
            }
            else {
                this.removeEvents();
            }
        };
        _proto.toggle = function toggle(e) {
            if (this.props.disabled) {
                return e && e.preventDefault();
            }
            return this.props.toggle(e);
        };
        _proto.render = function render() {
            var _classNames;
            var _omit = omit(this.props, ['toggle', 'disabled', 'inNavbar', 'direction']), className = _omit.className, cssModule = _omit.cssModule, dropup = _omit.dropup, isOpen = _omit.isOpen, group = _omit.group, size = _omit.size, nav = _omit.nav, setActiveFromChild = _omit.setActiveFromChild, active = _omit.active, addonType = _omit.addonType, attrs = _objectWithoutPropertiesLoose(_omit, ["className", "cssModule", "dropup", "isOpen", "group", "size", "nav", "setActiveFromChild", "active", "addonType"]);
            var direction = this.props.direction === 'down' && dropup ? 'up' : this.props.direction;
            attrs.tag = attrs.tag || (nav ? 'li' : 'div');
            var subItemIsActive = false;
            if (setActiveFromChild) {
                React__default.Children.map(this.props.children[1].props.children, function (dropdownItem) {
                    if (dropdownItem && dropdownItem.props.active)
                        subItemIsActive = true;
                });
            }
            var classes = mapToCssModules(classnames(className, direction !== 'down' && "drop" + direction, nav && active ? 'active' : false, setActiveFromChild && subItemIsActive ? 'active' : false, (_classNames = {}, _classNames["input-group-" + addonType] = addonType, _classNames['btn-group'] = group, _classNames["btn-group-" + size] = !!size, _classNames.dropdown = !group && !addonType, _classNames.show = isOpen, _classNames['nav-item'] = nav, _classNames)), cssModule);
            return React__default.createElement(reactPopper.Manager, _extends({}, attrs, {
                className: classes,
                onKeyDown: this.handleKeyDown
            }));
        };
        return Dropdown;
    }(React__default.Component);
    Dropdown.propTypes = propTypes$9;
    Dropdown.defaultProps = defaultProps$8;
    Dropdown.childContextTypes = childContextTypes;
    function NavDropdown(props) {
        warnOnce('The "NavDropdown" component has been deprecated.\nPlease use component "Dropdown" with nav prop.');
        return React__default.createElement(Dropdown, _extends({
            nav: true
        }, props));
    }
    var propTypes$a = {
        tag: tagPropType,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.string]),
        disabled: propTypes.bool,
        active: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object,
        onClick: propTypes.func,
        href: propTypes.any
    };
    var defaultProps$9 = {
        tag: 'a'
    };
    var NavLink = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(NavLink, _React$Component);
        function NavLink(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = NavLink.prototype;
        _proto.onClick = function onClick(e) {
            if (this.props.disabled) {
                e.preventDefault();
                return;
            }
            if (this.props.href === '#') {
                e.preventDefault();
            }
            if (this.props.onClick) {
                this.props.onClick(e);
            }
        };
        _proto.render = function render() {
            var _this$props = this.props, className = _this$props.className, cssModule = _this$props.cssModule, active = _this$props.active, Tag = _this$props.tag, innerRef = _this$props.innerRef, attributes = _objectWithoutPropertiesLoose(_this$props, ["className", "cssModule", "active", "tag", "innerRef"]);
            var classes = mapToCssModules(classnames(className, 'nav-link', {
                disabled: attributes.disabled,
                active: active
            }), cssModule);
            return React__default.createElement(Tag, _extends({}, attributes, {
                ref: innerRef,
                onClick: this.onClick,
                className: classes
            }));
        };
        return NavLink;
    }(React__default.Component);
    NavLink.propTypes = propTypes$a;
    NavLink.defaultProps = defaultProps$9;
    var propTypes$b = {
        tag: tagPropType,
        listTag: tagPropType,
        className: propTypes.string,
        listClassName: propTypes.string,
        cssModule: propTypes.object,
        children: propTypes.node,
        'aria-label': propTypes.string
    };
    var defaultProps$a = {
        tag: 'nav',
        listTag: 'ol',
        'aria-label': 'breadcrumb'
    };
    var Breadcrumb = function Breadcrumb(props) {
        var className = props.className, listClassName = props.listClassName, cssModule = props.cssModule, children = props.children, Tag = props.tag, ListTag = props.listTag, label = props['aria-label'], attributes = _objectWithoutPropertiesLoose(props, ["className", "listClassName", "cssModule", "children", "tag", "listTag", "aria-label"]);
        var classes = mapToCssModules(classnames(className), cssModule);
        var listClasses = mapToCssModules(classnames('breadcrumb', listClassName), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes,
            "aria-label": label
        }), React__default.createElement(ListTag, {
            className: listClasses
        }, children));
    };
    Breadcrumb.propTypes = propTypes$b;
    Breadcrumb.defaultProps = defaultProps$a;
    var propTypes$c = {
        tag: tagPropType,
        active: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$b = {
        tag: 'li'
    };
    var BreadcrumbItem = function BreadcrumbItem(props) {
        var className = props.className, cssModule = props.cssModule, active = props.active, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "active", "tag"]);
        var classes = mapToCssModules(classnames(className, active ? 'active' : false, 'breadcrumb-item'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes,
            "aria-current": active ? 'page' : undefined
        }));
    };
    BreadcrumbItem.propTypes = propTypes$c;
    BreadcrumbItem.defaultProps = defaultProps$b;
    var propTypes$d = {
        active: propTypes.bool,
        'aria-label': propTypes.string,
        block: propTypes.bool,
        color: propTypes.string,
        disabled: propTypes.bool,
        outline: propTypes.bool,
        tag: tagPropType,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.string]),
        onClick: propTypes.func,
        size: propTypes.string,
        children: propTypes.node,
        className: propTypes.string,
        cssModule: propTypes.object,
        close: propTypes.bool
    };
    var defaultProps$c = {
        color: 'secondary',
        tag: 'button'
    };
    var Button = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(Button, _React$Component);
        function Button(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = Button.prototype;
        _proto.onClick = function onClick(e) {
            if (this.props.disabled) {
                e.preventDefault();
                return;
            }
            if (this.props.onClick) {
                this.props.onClick(e);
            }
        };
        _proto.render = function render() {
            var _this$props = this.props, active = _this$props.active, ariaLabel = _this$props['aria-label'], block = _this$props.block, className = _this$props.className, close = _this$props.close, cssModule = _this$props.cssModule, color = _this$props.color, outline = _this$props.outline, size = _this$props.size, Tag = _this$props.tag, innerRef = _this$props.innerRef, attributes = _objectWithoutPropertiesLoose(_this$props, ["active", "aria-label", "block", "className", "close", "cssModule", "color", "outline", "size", "tag", "innerRef"]);
            if (close && typeof attributes.children === 'undefined') {
                attributes.children = React__default.createElement("span", {
                    "aria-hidden": true
                }, "\xD7");
            }
            var btnOutlineColor = "btn" + (outline ? '-outline' : '') + "-" + color;
            var classes = mapToCssModules(classnames(className, {
                close: close
            }, close || 'btn', close || btnOutlineColor, size ? "btn-" + size : false, block ? 'btn-block' : false, {
                active: active,
                disabled: this.props.disabled
            }), cssModule);
            if (attributes.href && Tag === 'button') {
                Tag = 'a';
            }
            var defaultAriaLabel = close ? 'Close' : null;
            return React__default.createElement(Tag, _extends({
                type: Tag === 'button' && attributes.onClick ? 'button' : undefined
            }, attributes, {
                className: classes,
                ref: innerRef,
                onClick: this.onClick,
                "aria-label": ariaLabel || defaultAriaLabel
            }));
        };
        return Button;
    }(React__default.Component);
    Button.propTypes = propTypes$d;
    Button.defaultProps = defaultProps$c;
    var propTypes$e = {
        children: propTypes.node
    };
    var ButtonDropdown = function ButtonDropdown(props) {
        return React__default.createElement(Dropdown, _extends({
            group: true
        }, props));
    };
    ButtonDropdown.propTypes = propTypes$e;
    var propTypes$f = {
        tag: tagPropType,
        'aria-label': propTypes.string,
        className: propTypes.string,
        cssModule: propTypes.object,
        role: propTypes.string,
        size: propTypes.string,
        vertical: propTypes.bool
    };
    var defaultProps$d = {
        tag: 'div',
        role: 'group'
    };
    var ButtonGroup = function ButtonGroup(props) {
        var className = props.className, cssModule = props.cssModule, size = props.size, vertical = props.vertical, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "size", "vertical", "tag"]);
        var classes = mapToCssModules(classnames(className, size ? 'btn-group-' + size : false, vertical ? 'btn-group-vertical' : 'btn-group'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    ButtonGroup.propTypes = propTypes$f;
    ButtonGroup.defaultProps = defaultProps$d;
    var propTypes$g = {
        tag: tagPropType,
        'aria-label': propTypes.string,
        className: propTypes.string,
        cssModule: propTypes.object,
        role: propTypes.string
    };
    var defaultProps$e = {
        tag: 'div',
        role: 'toolbar'
    };
    var ButtonToolbar = function ButtonToolbar(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'btn-toolbar'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    ButtonToolbar.propTypes = propTypes$g;
    ButtonToolbar.defaultProps = defaultProps$e;
    var propTypes$h = {
        children: propTypes.node,
        active: propTypes.bool,
        disabled: propTypes.bool,
        divider: propTypes.bool,
        tag: tagPropType,
        header: propTypes.bool,
        onClick: propTypes.func,
        className: propTypes.string,
        cssModule: propTypes.object,
        toggle: propTypes.bool
    };
    var contextTypes = {
        toggle: propTypes.func
    };
    var defaultProps$f = {
        tag: 'button',
        toggle: true
    };
    var DropdownItem = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(DropdownItem, _React$Component);
        function DropdownItem(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.getTabIndex = _this.getTabIndex.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = DropdownItem.prototype;
        _proto.onClick = function onClick(e) {
            if (this.props.disabled || this.props.header || this.props.divider) {
                e.preventDefault();
                return;
            }
            if (this.props.onClick) {
                this.props.onClick(e);
            }
            if (this.props.toggle) {
                this.context.toggle(e);
            }
        };
        _proto.getTabIndex = function getTabIndex() {
            if (this.props.disabled || this.props.header || this.props.divider) {
                return '-1';
            }
            return '0';
        };
        _proto.render = function render() {
            var tabIndex = this.getTabIndex();
            var role = tabIndex > -1 ? 'menuitem' : undefined;
            var _omit = omit(this.props, ['toggle']), className = _omit.className, cssModule = _omit.cssModule, divider = _omit.divider, Tag = _omit.tag, header = _omit.header, active = _omit.active, props = _objectWithoutPropertiesLoose(_omit, ["className", "cssModule", "divider", "tag", "header", "active"]);
            var classes = mapToCssModules(classnames(className, {
                disabled: props.disabled,
                'dropdown-item': !divider && !header,
                active: active,
                'dropdown-header': header,
                'dropdown-divider': divider
            }), cssModule);
            if (Tag === 'button') {
                if (header) {
                    Tag = 'h6';
                }
                else if (divider) {
                    Tag = 'div';
                }
                else if (props.href) {
                    Tag = 'a';
                }
            }
            return React__default.createElement(Tag, _extends({
                type: Tag === 'button' && (props.onClick || this.props.toggle) ? 'button' : undefined
            }, props, {
                tabIndex: tabIndex,
                role: role,
                className: classes,
                onClick: this.onClick
            }));
        };
        return DropdownItem;
    }(React__default.Component);
    DropdownItem.propTypes = propTypes$h;
    DropdownItem.defaultProps = defaultProps$f;
    DropdownItem.contextTypes = contextTypes;
    var propTypes$i = {
        tag: tagPropType,
        children: propTypes.node.isRequired,
        right: propTypes.bool,
        flip: propTypes.bool,
        modifiers: propTypes.object,
        className: propTypes.string,
        cssModule: propTypes.object,
        persist: propTypes.bool
    };
    var defaultProps$g = {
        tag: 'div',
        flip: true
    };
    var contextTypes$1 = {
        isOpen: propTypes.bool.isRequired,
        direction: propTypes.oneOf(['up', 'down', 'left', 'right']).isRequired,
        inNavbar: propTypes.bool.isRequired
    };
    var noFlipModifier = {
        flip: {
            enabled: false
        }
    };
    var directionPositionMap = {
        up: 'top',
        left: 'left',
        right: 'right',
        down: 'bottom'
    };
    var DropdownMenu = function DropdownMenu(props, context) {
        var className = props.className, cssModule = props.cssModule, right = props.right, tag = props.tag, flip = props.flip, modifiers = props.modifiers, persist = props.persist, attrs = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "right", "tag", "flip", "modifiers", "persist"]);
        var classes = mapToCssModules(classnames(className, 'dropdown-menu', {
            'dropdown-menu-right': right,
            show: context.isOpen
        }), cssModule);
        var Tag = tag;
        if (persist || context.isOpen && !context.inNavbar) {
            Tag = reactPopper.Popper;
            var position1 = directionPositionMap[context.direction] || 'bottom';
            var position2 = right ? 'end' : 'start';
            attrs.placement = position1 + "-" + position2;
            attrs.component = tag;
            attrs.modifiers = !flip ? _extends({}, modifiers, noFlipModifier) : modifiers;
        }
        return React__default.createElement(Tag, _extends({
            tabIndex: "-1",
            role: "menu"
        }, attrs, {
            "aria-hidden": !context.isOpen,
            className: classes,
            "x-placement": attrs.placement
        }));
    };
    DropdownMenu.propTypes = propTypes$i;
    DropdownMenu.defaultProps = defaultProps$g;
    DropdownMenu.contextTypes = contextTypes$1;
    var propTypes$j = {
        caret: propTypes.bool,
        color: propTypes.string,
        children: propTypes.node,
        className: propTypes.string,
        cssModule: propTypes.object,
        disabled: propTypes.bool,
        onClick: propTypes.func,
        'aria-haspopup': propTypes.bool,
        split: propTypes.bool,
        tag: tagPropType,
        nav: propTypes.bool
    };
    var defaultProps$h = {
        'aria-haspopup': true,
        color: 'secondary'
    };
    var contextTypes$2 = {
        isOpen: propTypes.bool.isRequired,
        toggle: propTypes.func.isRequired,
        inNavbar: propTypes.bool.isRequired
    };
    var DropdownToggle = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(DropdownToggle, _React$Component);
        function DropdownToggle(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = DropdownToggle.prototype;
        _proto.onClick = function onClick(e) {
            if (this.props.disabled) {
                e.preventDefault();
                return;
            }
            if (this.props.nav && !this.props.tag) {
                e.preventDefault();
            }
            if (this.props.onClick) {
                this.props.onClick(e);
            }
            this.context.toggle(e);
        };
        _proto.render = function render() {
            var _this$props = this.props, className = _this$props.className, color = _this$props.color, cssModule = _this$props.cssModule, caret = _this$props.caret, split = _this$props.split, nav = _this$props.nav, tag = _this$props.tag, props = _objectWithoutPropertiesLoose(_this$props, ["className", "color", "cssModule", "caret", "split", "nav", "tag"]);
            var ariaLabel = props['aria-label'] || 'Toggle Dropdown';
            var classes = mapToCssModules(classnames(className, {
                'dropdown-toggle': caret || split,
                'dropdown-toggle-split': split,
                'nav-link': nav
            }), cssModule);
            var children = props.children || React__default.createElement("span", {
                className: "sr-only"
            }, ariaLabel);
            var Tag;
            if (nav && !tag) {
                Tag = 'a';
                props.href = '#';
            }
            else if (!tag) {
                Tag = Button;
                props.color = color;
                props.cssModule = cssModule;
            }
            else {
                Tag = tag;
            }
            if (this.context.inNavbar) {
                return React__default.createElement(Tag, _extends({}, props, {
                    className: classes,
                    onClick: this.onClick,
                    "aria-expanded": this.context.isOpen,
                    children: children
                }));
            }
            return React__default.createElement(reactPopper.Target, _extends({}, props, {
                className: classes,
                component: Tag,
                onClick: this.onClick,
                "aria-expanded": this.context.isOpen,
                children: children
            }));
        };
        return DropdownToggle;
    }(React__default.Component);
    DropdownToggle.propTypes = propTypes$j;
    DropdownToggle.defaultProps = defaultProps$h;
    DropdownToggle.contextTypes = contextTypes$2;
    var interopRequireDefault = createCommonjsModule(function (module) {
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        module.exports = _interopRequireDefault;
    });
    unwrapExports(interopRequireDefault);
    var hasClass_1 = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        exports.default = hasClass;
        function hasClass(element, className) {
            if (element.classList)
                return !!className && element.classList.contains(className);
            else
                return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
        }
        module.exports = exports["default"];
    });
    unwrapExports(hasClass_1);
    var addClass_1 = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        exports.default = addClass;
        var _hasClass = interopRequireDefault(hasClass_1);
        function addClass(element, className) {
            if (element.classList)
                element.classList.add(className);
            else if (!(0, _hasClass.default)(element, className))
                if (typeof element.className === 'string')
                    element.className = element.className + ' ' + className;
                else
                    element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
        }
        module.exports = exports["default"];
    });
    unwrapExports(addClass_1);
    function replaceClassName(origClass, classToRemove) {
        return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
    }
    var removeClass = function removeClass(element, className) {
        if (element.classList)
            element.classList.remove(className);
        else if (typeof element.className === 'string')
            element.className = replaceClassName(element.className, className);
        else
            element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
    };
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    function componentWillMount() {
        // Call this.constructor.gDSFP to support sub-classes.
        var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
        if (state !== null && state !== undefined) {
            this.setState(state);
        }
    }
    function componentWillReceiveProps(nextProps) {
        // Call this.constructor.gDSFP to support sub-classes.
        // Use the setState() updater to ensure state isn't stale in certain edge cases.
        function updater(prevState) {
            var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
            return state !== null && state !== undefined ? state : null;
        } // Binding "this" is important for shallow renderer support.
        this.setState(updater.bind(this));
    }
    function componentWillUpdate(nextProps, nextState) {
        try {
            var prevProps = this.props;
            var prevState = this.state;
            this.props = nextProps;
            this.state = nextState;
            this.__reactInternalSnapshotFlag = true;
            this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
        }
        finally {
            this.props = prevProps;
            this.state = prevState;
        }
    } // React may warn about cWM/cWRP/cWU methods being deprecated.
    // Add a flag to suppress these warnings for this special case.
    componentWillMount.__suppressDeprecationWarning = true;
    componentWillReceiveProps.__suppressDeprecationWarning = true;
    componentWillUpdate.__suppressDeprecationWarning = true;
    function polyfill(Component) {
        var prototype = Component.prototype;
        if (!prototype || !prototype.isReactComponent) {
            throw new Error('Can only polyfill class components');
        }
        if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {
            return Component;
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Error if any of these lifecycles are present,
        // Because they would work differently between older and newer (16.3+) versions of React.
        var foundWillMountName = null;
        var foundWillReceivePropsName = null;
        var foundWillUpdateName = null;
        if (typeof prototype.componentWillMount === 'function') {
            foundWillMountName = 'componentWillMount';
        }
        else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
            foundWillMountName = 'UNSAFE_componentWillMount';
        }
        if (typeof prototype.componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'componentWillReceiveProps';
        }
        else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
        }
        if (typeof prototype.componentWillUpdate === 'function') {
            foundWillUpdateName = 'componentWillUpdate';
        }
        else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
            foundWillUpdateName = 'UNSAFE_componentWillUpdate';
        }
        if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var componentName = Component.displayName || Component.name;
            var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
            throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
        } // React <= 16.2 does not support static getDerivedStateFromProps.
        // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
        // Newer versions of React will ignore these lifecycles if gDSFP exists.
        if (typeof Component.getDerivedStateFromProps === 'function') {
            prototype.componentWillMount = componentWillMount;
            prototype.componentWillReceiveProps = componentWillReceiveProps;
        } // React <= 16.2 does not support getSnapshotBeforeUpdate.
        // As a workaround, use cWU to invoke the new lifecycle.
        // Newer versions of React will ignore that lifecycle if gSBU exists.
        if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
            if (typeof prototype.componentDidUpdate !== 'function') {
                throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
            }
            prototype.componentWillUpdate = componentWillUpdate;
            var componentDidUpdate = prototype.componentDidUpdate;
            prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
                // 16.3+ will not execute our will-update method;
                // It will pass a snapshot value to did-update though.
                // Older versions will require our polyfilled will-update value.
                // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
                // Because for <= 15.x versions this might be a "prevContext" object.
                // We also can't just check "__reactInternalSnapshot",
                // Because get-snapshot might return a falsy value.
                // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
                var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
                componentDidUpdate.call(this, prevProps, prevState, snapshot);
            };
        }
        return Component;
    }
    var reactLifecyclesCompat_es = /*#__PURE__*/ Object.freeze({
        polyfill: polyfill
    });
    var PropTypes = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        exports.transitionTimeout = transitionTimeout;
        exports.classNamesShape = exports.timeoutsShape = void 0;
        var _propTypes = _interopRequireDefault(propTypes);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function transitionTimeout(transitionType) {
            var timeoutPropName = 'transition' + transitionType + 'Timeout';
            var enabledPropName = 'transition' + transitionType;
            return function (props) {
                // If the transition is enabled
                if (props[enabledPropName]) {
                    // If no timeout duration is provided
                    if (props[timeoutPropName] == null) {
                        return new Error(timeoutPropName + ' wasn\'t supplied to CSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.'); // If the duration isn't a number
                    }
                    else if (typeof props[timeoutPropName] !== 'number') {
                        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
                    }
                }
                return null;
            };
        }
        var timeoutsShape = _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
                enter: _propTypes.default.number,
                exit: _propTypes.default.number
            }).isRequired]);
        exports.timeoutsShape = timeoutsShape;
        var classNamesShape = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
                enter: _propTypes.default.string,
                exit: _propTypes.default.string,
                active: _propTypes.default.string
            }), _propTypes.default.shape({
                enter: _propTypes.default.string,
                enterDone: _propTypes.default.string,
                enterActive: _propTypes.default.string,
                exit: _propTypes.default.string,
                exitDone: _propTypes.default.string,
                exitActive: _propTypes.default.string
            })]);
        exports.classNamesShape = classNamesShape;
    });
    unwrapExports(PropTypes);
    var PropTypes_1 = PropTypes.transitionTimeout;
    var PropTypes_2 = PropTypes.classNamesShape;
    var PropTypes_3 = PropTypes.timeoutsShape;
    var Transition_1 = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;
        var PropTypes$$1 = _interopRequireWildcard(propTypes);
        var _react = _interopRequireDefault(React__default);
        var _reactDom = _interopRequireDefault(ReactDOM);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            }
                            else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
            if (source == null)
                return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;
            for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0)
                    continue;
                target[key] = source[key];
            }
            return target;
        }
        function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
        }
        var UNMOUNTED = 'unmounted';
        exports.UNMOUNTED = UNMOUNTED;
        var EXITED = 'exited';
        exports.EXITED = EXITED;
        var ENTERING = 'entering';
        exports.ENTERING = ENTERING;
        var ENTERED = 'entered';
        exports.ENTERED = ENTERED;
        var EXITING = 'exiting';
        /**
         * The Transition component lets you describe a transition from one component
         * state to another _over time_ with a simple declarative API. Most commonly
         * it's used to animate the mounting and unmounting of a component, but can also
         * be used to describe in-place transition states as well.
         *
         * By default the `Transition` component does not alter the behavior of the
         * component it renders, it only tracks "enter" and "exit" states for the components.
         * It's up to you to give meaning and effect to those states. For example we can
         * add styles to a component when it enters or exits:
         *
         * ```jsx
         * import Transition from 'react-transition-group/Transition';
         *
         * const duration = 300;
         *
         * const defaultStyle = {
         *   transition: `opacity ${duration}ms ease-in-out`,
         *   opacity: 0,
         * }
         *
         * const transitionStyles = {
         *   entering: { opacity: 0 },
         *   entered:  { opacity: 1 },
         * };
         *
         * const Fade = ({ in: inProp }) => (
         *   <Transition in={inProp} timeout={duration}>
         *     {(state) => (
         *       <div style={{
         *         ...defaultStyle,
         *         ...transitionStyles[state]
         *       }}>
         *         I'm a fade Transition!
         *       </div>
         *     )}
         *   </Transition>
         * );
         * ```
         *
         * As noted the `Transition` component doesn't _do_ anything by itself to its child component.
         * What it does do is track transition states over time so you can update the
         * component (such as by adding styles or classes) when it changes states.
         *
         * There are 4 main states a Transition can be in:
         *  - `'entering'`
         *  - `'entered'`
         *  - `'exiting'`
         *  - `'exited'`
         *
         * Transition state is toggled via the `in` prop. When `true` the component begins the
         * "Enter" stage. During this stage, the component will shift from its current transition state,
         * to `'entering'` for the duration of the transition and then to the `'entered'` stage once
         * it's complete. Let's take the following example:
         *
         * ```jsx
         * state = { in: false };
         *
         * toggleEnterState = () => {
         *   this.setState({ in: true });
         * }
         *
         * render() {
         *   return (
         *     <div>
         *       <Transition in={this.state.in} timeout={500} />
         *       <button onClick={this.toggleEnterState}>Click to Enter</button>
         *     </div>
         *   );
         * }
         * ```
         *
         * When the button is clicked the component will shift to the `'entering'` state and
         * stay there for 500ms (the value of `timeout`) before it finally switches to `'entered'`.
         *
         * When `in` is `false` the same thing happens except the state moves from `'exiting'` to `'exited'`.
         *
         * ## Timing
         *
         * Timing is often the trickiest part of animation, mistakes can result in slight delays
         * that are hard to pin down. A common example is when you want to add an exit transition,
         * you should set the desired final styles when the state is `'exiting'`. That's when the
         * transition to those styles will start and, if you matched the `timeout` prop with the
         * CSS Transition duration, it will end exactly when the state changes to `'exited'`.
         *
         * > **Note**: For simpler transitions the `Transition` component might be enough, but
         * > take into account that it's platform-agnostic, while the `CSSTransition` component
         * > [forces reflows](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
         * > in order to make more complex transitions more predictable. For example, even though
         * > classes `example-enter` and `example-enter-active` are applied immediately one after
         * > another, you can still transition from one to the other because of the forced reflow
         * > (read [this issue](https://github.com/reactjs/react-transition-group/issues/159#issuecomment-322761171)
         * > for more info). Take this into account when choosing between `Transition` and
         * > `CSSTransition`.
         */
        exports.EXITING = EXITING;
        var Transition = 
        /*#__PURE__*/
        function (_React$Component) {
            _inheritsLoose(Transition, _React$Component);
            function Transition(props, context) {
                var _this;
                _this = _React$Component.call(this, props, context) || this;
                var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears
                var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
                var initialStatus;
                _this.appearStatus = null;
                if (props.in) {
                    if (appear) {
                        initialStatus = EXITED;
                        _this.appearStatus = ENTERING;
                    }
                    else {
                        initialStatus = ENTERED;
                    }
                }
                else {
                    if (props.unmountOnExit || props.mountOnEnter) {
                        initialStatus = UNMOUNTED;
                    }
                    else {
                        initialStatus = EXITED;
                    }
                }
                _this.state = {
                    status: initialStatus
                };
                _this.nextCallback = null;
                return _this;
            }
            var _proto = Transition.prototype;
            _proto.getChildContext = function getChildContext() {
                return {
                    transitionGroup: null // allows for nested Transitions
                };
            };
            Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
                var nextIn = _ref.in;
                if (nextIn && prevState.status === UNMOUNTED) {
                    return {
                        status: EXITED
                    };
                }
                return null;
            }; // getSnapshotBeforeUpdate(prevProps) {
            //   let nextStatus = null
            //   if (prevProps !== this.props) {
            //     const { status } = this.state
            //     if (this.props.in) {
            //       if (status !== ENTERING && status !== ENTERED) {
            //         nextStatus = ENTERING
            //       }
            //     } else {
            //       if (status === ENTERING || status === ENTERED) {
            //         nextStatus = EXITING
            //       }
            //     }
            //   }
            //   return { nextStatus }
            // }
            _proto.componentDidMount = function componentDidMount() {
                this.updateStatus(true, this.appearStatus);
            };
            _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
                var nextStatus = null;
                if (prevProps !== this.props) {
                    var status = this.state.status;
                    if (this.props.in) {
                        if (status !== ENTERING && status !== ENTERED) {
                            nextStatus = ENTERING;
                        }
                    }
                    else {
                        if (status === ENTERING || status === ENTERED) {
                            nextStatus = EXITING;
                        }
                    }
                }
                this.updateStatus(false, nextStatus);
            };
            _proto.componentWillUnmount = function componentWillUnmount() {
                this.cancelNextCallback();
            };
            _proto.getTimeouts = function getTimeouts() {
                var timeout = this.props.timeout;
                var exit, enter, appear;
                exit = enter = appear = timeout;
                if (timeout != null && typeof timeout !== 'number') {
                    exit = timeout.exit;
                    enter = timeout.enter;
                    appear = timeout.appear;
                }
                return {
                    exit: exit,
                    enter: enter,
                    appear: appear
                };
            };
            _proto.updateStatus = function updateStatus(mounting, nextStatus) {
                if (mounting === void 0) {
                    mounting = false;
                }
                if (nextStatus !== null) {
                    // nextStatus will always be ENTERING or EXITING.
                    this.cancelNextCallback();
                    var node = _reactDom.default.findDOMNode(this);
                    if (nextStatus === ENTERING) {
                        this.performEnter(node, mounting);
                    }
                    else {
                        this.performExit(node);
                    }
                }
                else if (this.props.unmountOnExit && this.state.status === EXITED) {
                    this.setState({
                        status: UNMOUNTED
                    });
                }
            };
            _proto.performEnter = function performEnter(node, mounting) {
                var _this2 = this;
                var enter = this.props.enter;
                var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
                var timeouts = this.getTimeouts(); // no enter animation skip right to ENTERED
                // if we are mounting and running this it means appear _must_ be set
                if (!mounting && !enter) {
                    this.safeSetState({
                        status: ENTERED
                    }, function () {
                        _this2.props.onEntered(node);
                    });
                    return;
                }
                this.props.onEnter(node, appearing);
                this.safeSetState({
                    status: ENTERING
                }, function () {
                    _this2.props.onEntering(node, appearing); // FIXME: appear timeout?
                    _this2.onTransitionEnd(node, timeouts.enter, function () {
                        _this2.safeSetState({
                            status: ENTERED
                        }, function () {
                            _this2.props.onEntered(node, appearing);
                        });
                    });
                });
            };
            _proto.performExit = function performExit(node) {
                var _this3 = this;
                var exit = this.props.exit;
                var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED
                if (!exit) {
                    this.safeSetState({
                        status: EXITED
                    }, function () {
                        _this3.props.onExited(node);
                    });
                    return;
                }
                this.props.onExit(node);
                this.safeSetState({
                    status: EXITING
                }, function () {
                    _this3.props.onExiting(node);
                    _this3.onTransitionEnd(node, timeouts.exit, function () {
                        _this3.safeSetState({
                            status: EXITED
                        }, function () {
                            _this3.props.onExited(node);
                        });
                    });
                });
            };
            _proto.cancelNextCallback = function cancelNextCallback() {
                if (this.nextCallback !== null) {
                    this.nextCallback.cancel();
                    this.nextCallback = null;
                }
            };
            _proto.safeSetState = function safeSetState(nextState, callback) {
                // This shouldn't be necessary, but there are weird race conditions with
                // setState callbacks and unmounting in testing, so always make sure that
                // we can cancel any pending setState callbacks after we unmount.
                callback = this.setNextCallback(callback);
                this.setState(nextState, callback);
            };
            _proto.setNextCallback = function setNextCallback(callback) {
                var _this4 = this;
                var active = true;
                this.nextCallback = function (event) {
                    if (active) {
                        active = false;
                        _this4.nextCallback = null;
                        callback(event);
                    }
                };
                this.nextCallback.cancel = function () {
                    active = false;
                };
                return this.nextCallback;
            };
            _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
                this.setNextCallback(handler);
                if (node) {
                    if (this.props.addEndListener) {
                        this.props.addEndListener(node, this.nextCallback);
                    }
                    if (timeout != null) {
                        setTimeout(this.nextCallback, timeout);
                    }
                }
                else {
                    setTimeout(this.nextCallback, 0);
                }
            };
            _proto.render = function render() {
                var status = this.state.status;
                if (status === UNMOUNTED) {
                    return null;
                }
                var _this$props = this.props, children = _this$props.children, childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition
                delete childProps.in;
                delete childProps.mountOnEnter;
                delete childProps.unmountOnExit;
                delete childProps.appear;
                delete childProps.enter;
                delete childProps.exit;
                delete childProps.timeout;
                delete childProps.addEndListener;
                delete childProps.onEnter;
                delete childProps.onEntering;
                delete childProps.onEntered;
                delete childProps.onExit;
                delete childProps.onExiting;
                delete childProps.onExited;
                if (typeof children === 'function') {
                    return children(status, childProps);
                }
                var child = _react.default.Children.only(children);
                return _react.default.cloneElement(child, childProps);
            };
            return Transition;
        }(_react.default.Component);
        Transition.contextTypes = {
            transitionGroup: PropTypes$$1.object
        };
        Transition.childContextTypes = {
            transitionGroup: function transitionGroup() { }
        };
        Transition.propTypes = {};
        function noop() { }
        Transition.defaultProps = {
            in: false,
            mountOnEnter: false,
            unmountOnExit: false,
            appear: false,
            enter: true,
            exit: true,
            onEnter: noop,
            onEntering: noop,
            onEntered: noop,
            onExit: noop,
            onExiting: noop,
            onExited: noop
        };
        Transition.UNMOUNTED = 0;
        Transition.EXITED = 1;
        Transition.ENTERING = 2;
        Transition.ENTERED = 3;
        Transition.EXITING = 4;
        var _default = (0, reactLifecyclesCompat_es.polyfill)(Transition);
        exports.default = _default;
    });
    unwrapExports(Transition_1);
    var Transition_2 = Transition_1.EXITING;
    var Transition_3 = Transition_1.ENTERED;
    var Transition_4 = Transition_1.ENTERING;
    var Transition_5 = Transition_1.EXITED;
    var Transition_6 = Transition_1.UNMOUNTED;
    var CSSTransition_1 = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        exports.default = void 0;
        var PropTypes$$1 = _interopRequireWildcard(propTypes);
        var _addClass = _interopRequireDefault(addClass_1);
        var _removeClass = _interopRequireDefault(removeClass);
        var _react = _interopRequireDefault(React__default);
        var _Transition = _interopRequireDefault(Transition_1);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
                return obj;
            }
            else {
                var newObj = {};
                if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                            if (desc.get || desc.set) {
                                Object.defineProperty(newObj, key, desc);
                            }
                            else {
                                newObj[key] = obj[key];
                            }
                        }
                    }
                }
                newObj.default = obj;
                return newObj;
            }
        }
        function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
        }
        function _extends() {
            _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };
            return _extends.apply(this, arguments);
        }
        var addClass = function addClass(node, classes) {
            return node && classes && classes.split(' ').forEach(function (c) {
                return (0, _addClass.default)(node, c);
            });
        };
        var removeClass$$1 = function removeClass$$1(node, classes) {
            return node && classes && classes.split(' ').forEach(function (c) {
                return (0, _removeClass.default)(node, c);
            });
        };
        /**
         * A `Transition` component using CSS transitions and animations.
         * It's inspired by the excellent [ng-animate](http://www.nganimate.org/) library.
         *
         * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
         * and `exit` stages of the transition. The first class is applied and then a
         * second "active" class in order to activate the css animation. After the animation,
         * matching `done` class names are applied to persist the animation state.
         *
         * When the `in` prop is toggled to `true` the Component will get
         * the `example-enter` CSS class and the `example-enter-active` CSS class
         * added in the next tick. This is a convention based on the `classNames` prop.
         */
        var CSSTransition = 
        /*#__PURE__*/
        function (_React$Component) {
            _inheritsLoose(CSSTransition, _React$Component);
            function CSSTransition() {
                var _this;
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }
                _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
                _this.onEnter = function (node, appearing) {
                    var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'), className = _this$getClassNames.className;
                    _this.removeClasses(node, 'exit');
                    addClass(node, className);
                    if (_this.props.onEnter) {
                        _this.props.onEnter(node, appearing);
                    }
                };
                _this.onEntering = function (node, appearing) {
                    var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'), activeClassName = _this$getClassNames2.activeClassName;
                    _this.reflowAndAddClass(node, activeClassName);
                    if (_this.props.onEntering) {
                        _this.props.onEntering(node, appearing);
                    }
                };
                _this.onEntered = function (node, appearing) {
                    var _this$getClassNames3 = _this.getClassNames('enter'), doneClassName = _this$getClassNames3.doneClassName;
                    _this.removeClasses(node, appearing ? 'appear' : 'enter');
                    addClass(node, doneClassName);
                    if (_this.props.onEntered) {
                        _this.props.onEntered(node, appearing);
                    }
                };
                _this.onExit = function (node) {
                    var _this$getClassNames4 = _this.getClassNames('exit'), className = _this$getClassNames4.className;
                    _this.removeClasses(node, 'appear');
                    _this.removeClasses(node, 'enter');
                    addClass(node, className);
                    if (_this.props.onExit) {
                        _this.props.onExit(node);
                    }
                };
                _this.onExiting = function (node) {
                    var _this$getClassNames5 = _this.getClassNames('exit'), activeClassName = _this$getClassNames5.activeClassName;
                    _this.reflowAndAddClass(node, activeClassName);
                    if (_this.props.onExiting) {
                        _this.props.onExiting(node);
                    }
                };
                _this.onExited = function (node) {
                    var _this$getClassNames6 = _this.getClassNames('exit'), doneClassName = _this$getClassNames6.doneClassName;
                    _this.removeClasses(node, 'exit');
                    addClass(node, doneClassName);
                    if (_this.props.onExited) {
                        _this.props.onExited(node);
                    }
                };
                _this.getClassNames = function (type) {
                    var classNames = _this.props.classNames;
                    var className = typeof classNames !== 'string' ? classNames[type] : classNames + '-' + type;
                    var activeClassName = typeof classNames !== 'string' ? classNames[type + 'Active'] : className + '-active';
                    var doneClassName = typeof classNames !== 'string' ? classNames[type + 'Done'] : className + '-done';
                    return {
                        className: className,
                        activeClassName: activeClassName,
                        doneClassName: doneClassName
                    };
                };
                return _this;
            }
            var _proto = CSSTransition.prototype;
            _proto.removeClasses = function removeClasses(node, type) {
                var _this$getClassNames7 = this.getClassNames(type), className = _this$getClassNames7.className, activeClassName = _this$getClassNames7.activeClassName, doneClassName = _this$getClassNames7.doneClassName;
                className && removeClass$$1(node, className);
                activeClassName && removeClass$$1(node, activeClassName);
                doneClassName && removeClass$$1(node, doneClassName);
            };
            _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
                // This is for to force a repaint,
                // which is necessary in order to transition styles when adding a class name.
                if (className) {
                    /* eslint-disable no-unused-expressions */
                    node && node.scrollTop;
                    /* eslint-enable no-unused-expressions */
                    addClass(node, className);
                }
            };
            _proto.render = function render() {
                var props = _extends({}, this.props);
                delete props.classNames;
                return _react.default.createElement(_Transition.default, _extends({}, props, {
                    onEnter: this.onEnter,
                    onEntered: this.onEntered,
                    onEntering: this.onEntering,
                    onExit: this.onExit,
                    onExiting: this.onExiting,
                    onExited: this.onExited
                }));
            };
            return CSSTransition;
        }(_react.default.Component);
        CSSTransition.propTypes = {};
        var _default = CSSTransition;
        exports.default = _default;
        module.exports = exports["default"];
    });
    unwrapExports(CSSTransition_1);
    var ChildMapping = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        exports.getChildMapping = getChildMapping;
        exports.mergeChildMappings = mergeChildMappings;
        exports.getInitialChildMapping = getInitialChildMapping;
        exports.getNextChildMapping = getNextChildMapping;
        /**
         * Given `this.props.children`, return an object mapping key to child.
         *
         * @param {*} children `this.props.children`
         * @return {object} Mapping of key to child
         */
        function getChildMapping(children, mapFn) {
            var mapper = function mapper(child) {
                return mapFn && (0, React__default.isValidElement)(child) ? mapFn(child) : child;
            };
            var result = Object.create(null);
            if (children)
                React__default.Children.map(children, function (c) {
                    return c;
                }).forEach(function (child) {
                    // run the map function here instead so that the key is the computed one
                    result[child.key] = mapper(child);
                });
            return result;
        }
        /**
         * When you're adding or removing children some may be added or removed in the
         * same render pass. We want to show *both* since we want to simultaneously
         * animate elements in and out. This function takes a previous set of keys
         * and a new set of keys and merges them with its best guess of the correct
         * ordering. In the future we may expose some of the utilities in
         * ReactMultiChild to make this easy, but for now React itself does not
         * directly have this concept of the union of prevChildren and nextChildren
         * so we implement it here.
         *
         * @param {object} prev prev children as returned from
         * `ReactTransitionChildMapping.getChildMapping()`.
         * @param {object} next next children as returned from
         * `ReactTransitionChildMapping.getChildMapping()`.
         * @return {object} a key set that contains all keys in `prev` and all keys
         * in `next` in a reasonable order.
         */
        function mergeChildMappings(prev, next) {
            prev = prev || {};
            next = next || {};
            function getValueForKey(key) {
                return key in next ? next[key] : prev[key];
            } // For each key of `next`, the list of keys to insert before that key in
            // the combined list
            var nextKeysPending = Object.create(null);
            var pendingKeys = [];
            for (var prevKey in prev) {
                if (prevKey in next) {
                    if (pendingKeys.length) {
                        nextKeysPending[prevKey] = pendingKeys;
                        pendingKeys = [];
                    }
                }
                else {
                    pendingKeys.push(prevKey);
                }
            }
            var i;
            var childMapping = {};
            for (var nextKey in next) {
                if (nextKeysPending[nextKey]) {
                    for (i = 0; i < nextKeysPending[nextKey].length; i++) {
                        var pendingNextKey = nextKeysPending[nextKey][i];
                        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
                    }
                }
                childMapping[nextKey] = getValueForKey(nextKey);
            } // Finally, add the keys which didn't appear before any key in `next`
            for (i = 0; i < pendingKeys.length; i++) {
                childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
            }
            return childMapping;
        }
        function getProp(child, prop, props) {
            return props[prop] != null ? props[prop] : child.props[prop];
        }
        function getInitialChildMapping(props, onExited) {
            return getChildMapping(props.children, function (child) {
                return (0, React__default.cloneElement)(child, {
                    onExited: onExited.bind(null, child),
                    in: true,
                    appear: getProp(child, 'appear', props),
                    enter: getProp(child, 'enter', props),
                    exit: getProp(child, 'exit', props)
                });
            });
        }
        function getNextChildMapping(nextProps, prevChildMapping, onExited) {
            var nextChildMapping = getChildMapping(nextProps.children);
            var children = mergeChildMappings(prevChildMapping, nextChildMapping);
            Object.keys(children).forEach(function (key) {
                var child = children[key];
                if (!(0, React__default.isValidElement)(child))
                    return;
                var hasPrev = key in prevChildMapping;
                var hasNext = key in nextChildMapping;
                var prevChild = prevChildMapping[key];
                var isLeaving = (0, React__default.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)
                if (hasNext && (!hasPrev || isLeaving)) {
                    // console.log('entering', key)
                    children[key] = (0, React__default.cloneElement)(child, {
                        onExited: onExited.bind(null, child),
                        in: true,
                        exit: getProp(child, 'exit', nextProps),
                        enter: getProp(child, 'enter', nextProps)
                    });
                }
                else if (!hasNext && hasPrev && !isLeaving) {
                    // item is old (exiting)
                    // console.log('leaving', key)
                    children[key] = (0, React__default.cloneElement)(child, {
                        in: false
                    });
                }
                else if (hasNext && hasPrev && (0, React__default.isValidElement)(prevChild)) {
                    // item hasn't changed transition states
                    // copy over the last transition props;
                    // console.log('unchanged', key)
                    children[key] = (0, React__default.cloneElement)(child, {
                        onExited: onExited.bind(null, child),
                        in: prevChild.props.in,
                        exit: getProp(child, 'exit', nextProps),
                        enter: getProp(child, 'enter', nextProps)
                    });
                }
            });
            return children;
        }
    });
    unwrapExports(ChildMapping);
    var ChildMapping_1 = ChildMapping.getChildMapping;
    var ChildMapping_2 = ChildMapping.mergeChildMappings;
    var ChildMapping_3 = ChildMapping.getInitialChildMapping;
    var ChildMapping_4 = ChildMapping.getNextChildMapping;
    var TransitionGroup_1 = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        exports.default = void 0;
        var _propTypes = _interopRequireDefault(propTypes);
        var _react = _interopRequireDefault(React__default);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
            if (source == null)
                return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;
            for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0)
                    continue;
                target[key] = source[key];
            }
            return target;
        }
        function _extends() {
            _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };
            return _extends.apply(this, arguments);
        }
        function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
        }
        function _assertThisInitialized(self) {
            if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self;
        }
        var values = Object.values || function (obj) {
            return Object.keys(obj).map(function (k) {
                return obj[k];
            });
        };
        var defaultProps = {
            component: 'div',
            childFactory: function childFactory(child) {
                return child;
            }
            /**
             * The `<TransitionGroup>` component manages a set of transition components
             * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
             * components, `<TransitionGroup>` is a state machine for managing the mounting
             * and unmounting of components over time.
             *
             * Consider the example below. As items are removed or added to the TodoList the
             * `in` prop is toggled automatically by the `<TransitionGroup>`.
             *
             * Note that `<TransitionGroup>`  does not define any animation behavior!
             * Exactly _how_ a list item animates is up to the individual transition
             * component. This means you can mix and match animations across different list
             * items.
             */
        };
        var TransitionGroup = 
        /*#__PURE__*/
        function (_React$Component) {
            _inheritsLoose(TransitionGroup, _React$Component);
            function TransitionGroup(props, context) {
                var _this;
                _this = _React$Component.call(this, props, context) || this;
                var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear
                _this.state = {
                    handleExited: handleExited,
                    firstRender: true
                };
                return _this;
            }
            var _proto = TransitionGroup.prototype;
            _proto.getChildContext = function getChildContext() {
                return {
                    transitionGroup: {
                        isMounting: !this.appeared
                    }
                };
            };
            _proto.componentDidMount = function componentDidMount() {
                this.appeared = true;
                this.mounted = true;
            };
            _proto.componentWillUnmount = function componentWillUnmount() {
                this.mounted = false;
            };
            TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
                var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
                return {
                    children: firstRender ? (0, ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
                    firstRender: false
                };
            };
            _proto.handleExited = function handleExited(child, node) {
                var currentChildMapping = (0, ChildMapping.getChildMapping)(this.props.children);
                if (child.key in currentChildMapping)
                    return;
                if (child.props.onExited) {
                    child.props.onExited(node);
                }
                if (this.mounted) {
                    this.setState(function (state) {
                        var children = _extends({}, state.children);
                        delete children[child.key];
                        return {
                            children: children
                        };
                    });
                }
            };
            _proto.render = function render() {
                var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
                var children = values(this.state.children).map(childFactory);
                delete props.appear;
                delete props.enter;
                delete props.exit;
                if (Component === null) {
                    return children;
                }
                return _react.default.createElement(Component, props, children);
            };
            return TransitionGroup;
        }(_react.default.Component);
        TransitionGroup.childContextTypes = {
            transitionGroup: _propTypes.default.object.isRequired
        };
        TransitionGroup.propTypes = {};
        TransitionGroup.defaultProps = defaultProps;
        var _default = (0, reactLifecyclesCompat_es.polyfill)(TransitionGroup);
        exports.default = _default;
        module.exports = exports["default"];
    });
    unwrapExports(TransitionGroup_1);
    var ReplaceTransition_1 = createCommonjsModule(function (module, exports) {
        exports.__esModule = true;
        exports.default = void 0;
        var _propTypes = _interopRequireDefault(propTypes);
        var _react = _interopRequireDefault(React__default);
        var _TransitionGroup = _interopRequireDefault(TransitionGroup_1);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
            if (source == null)
                return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;
            for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0)
                    continue;
                target[key] = source[key];
            }
            return target;
        }
        function _inheritsLoose(subClass, superClass) {
            subClass.prototype = Object.create(superClass.prototype);
            subClass.prototype.constructor = subClass;
            subClass.__proto__ = superClass;
        }
        /**
         * The `<ReplaceTransition>` component is a specialized `Transition` component
         * that animates between two children.
         *
         * ```jsx
         * <ReplaceTransition in>
         *   <Fade><div>I appear first</div></Fade>
         *   <Fade><div>I replace the above</div></Fade>
         * </ReplaceTransition>
         * ```
         */
        var ReplaceTransition = 
        /*#__PURE__*/
        function (_React$Component) {
            _inheritsLoose(ReplaceTransition, _React$Component);
            function ReplaceTransition() {
                var _this;
                for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
                    _args[_key] = arguments[_key];
                }
                _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
                _this.handleEnter = function () {
                    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args[_key2] = arguments[_key2];
                    }
                    return _this.handleLifecycle('onEnter', 0, args);
                };
                _this.handleEntering = function () {
                    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                        args[_key3] = arguments[_key3];
                    }
                    return _this.handleLifecycle('onEntering', 0, args);
                };
                _this.handleEntered = function () {
                    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                        args[_key4] = arguments[_key4];
                    }
                    return _this.handleLifecycle('onEntered', 0, args);
                };
                _this.handleExit = function () {
                    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                        args[_key5] = arguments[_key5];
                    }
                    return _this.handleLifecycle('onExit', 1, args);
                };
                _this.handleExiting = function () {
                    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                        args[_key6] = arguments[_key6];
                    }
                    return _this.handleLifecycle('onExiting', 1, args);
                };
                _this.handleExited = function () {
                    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                        args[_key7] = arguments[_key7];
                    }
                    return _this.handleLifecycle('onExited', 1, args);
                };
                return _this;
            }
            var _proto = ReplaceTransition.prototype;
            _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
                var _child$props;
                var children = this.props.children;
                var child = _react.default.Children.toArray(children)[idx];
                if (child.props[handler])
                    (_child$props = child.props)[handler].apply(_child$props, originalArgs);
                if (this.props[handler])
                    this.props[handler]((0, ReactDOM.findDOMNode)(this));
            };
            _proto.render = function render() {
                var _this$props = this.props, children = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
                var _React$Children$toArr = _react.default.Children.toArray(children), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
                delete props.onEnter;
                delete props.onEntering;
                delete props.onEntered;
                delete props.onExit;
                delete props.onExiting;
                delete props.onExited;
                return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
                    key: 'first',
                    onEnter: this.handleEnter,
                    onEntering: this.handleEntering,
                    onEntered: this.handleEntered
                }) : _react.default.cloneElement(second, {
                    key: 'second',
                    onEnter: this.handleExit,
                    onEntering: this.handleExiting,
                    onEntered: this.handleExited
                }));
            };
            return ReplaceTransition;
        }(_react.default.Component);
        ReplaceTransition.propTypes = {};
        var _default = ReplaceTransition;
        exports.default = _default;
        module.exports = exports["default"];
    });
    unwrapExports(ReplaceTransition_1);
    var reactTransitionGroup = createCommonjsModule(function (module) {
        var _CSSTransition = _interopRequireDefault(CSSTransition_1);
        var _ReplaceTransition = _interopRequireDefault(ReplaceTransition_1);
        var _TransitionGroup = _interopRequireDefault(TransitionGroup_1);
        var _Transition = _interopRequireDefault(Transition_1);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        module.exports = {
            Transition: _Transition.default,
            TransitionGroup: _TransitionGroup.default,
            ReplaceTransition: _ReplaceTransition.default,
            CSSTransition: _CSSTransition.default
        };
    });
    unwrapExports(reactTransitionGroup);
    var reactTransitionGroup_1 = reactTransitionGroup.Transition;
    var reactTransitionGroup_2 = reactTransitionGroup.TransitionGroup;
    var reactTransitionGroup_3 = reactTransitionGroup.ReplaceTransition;
    var reactTransitionGroup_4 = reactTransitionGroup.CSSTransition;
    var propTypes$k = _extends({}, reactTransitionGroup_1.propTypes, {
        children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
        tag: tagPropType,
        baseClass: propTypes.string,
        baseClassActive: propTypes.string,
        className: propTypes.string,
        cssModule: propTypes.object,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.string, propTypes.func])
    });
    var defaultProps$i = _extends({}, reactTransitionGroup_1.defaultProps, {
        tag: 'div',
        baseClass: 'fade',
        baseClassActive: 'show',
        timeout: TransitionTimeouts.Fade,
        appear: true,
        enter: true,
        exit: true,
        in: true
    });
    function Fade(props) {
        var Tag = props.tag, baseClass = props.baseClass, baseClassActive = props.baseClassActive, className = props.className, cssModule = props.cssModule, children = props.children, innerRef = props.innerRef, otherProps = _objectWithoutPropertiesLoose(props, ["tag", "baseClass", "baseClassActive", "className", "cssModule", "children", "innerRef"]);
        var transitionProps = pick(otherProps, TransitionPropTypeKeys);
        var childProps = omit(otherProps, TransitionPropTypeKeys);
        return React__default.createElement(reactTransitionGroup_1, transitionProps, function (status) {
            var isActive = status === 'entered';
            var classes = mapToCssModules(classnames(className, baseClass, isActive && baseClassActive), cssModule);
            return React__default.createElement(Tag, _extends({
                className: classes
            }, childProps, {
                ref: innerRef
            }), children);
        });
    }
    Fade.propTypes = propTypes$k;
    Fade.defaultProps = defaultProps$i;
    var propTypes$l = {
        color: propTypes.string,
        pill: propTypes.bool,
        tag: tagPropType,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.string]),
        children: propTypes.node,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$j = {
        color: 'secondary',
        pill: false,
        tag: 'span'
    };
    var Badge = function Badge(props) {
        var className = props.className, cssModule = props.cssModule, color = props.color, innerRef = props.innerRef, pill = props.pill, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "color", "innerRef", "pill", "tag"]);
        var classes = mapToCssModules(classnames(className, 'badge', 'badge-' + color, pill ? 'badge-pill' : false), cssModule);
        if (attributes.href && Tag === 'span') {
            Tag = 'a';
        }
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes,
            ref: innerRef
        }));
    };
    Badge.propTypes = propTypes$l;
    Badge.defaultProps = defaultProps$j;
    var propTypes$m = {
        tag: tagPropType,
        inverse: propTypes.bool,
        color: propTypes.string,
        block: deprecated(propTypes.bool, 'Please use the props "body"'),
        body: propTypes.bool,
        outline: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.string, propTypes.func])
    };
    var defaultProps$k = {
        tag: 'div'
    };
    var Card = function Card(props) {
        var className = props.className, cssModule = props.cssModule, color = props.color, block = props.block, body = props.body, inverse = props.inverse, outline = props.outline, Tag = props.tag, innerRef = props.innerRef, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "color", "block", "body", "inverse", "outline", "tag", "innerRef"]);
        var classes = mapToCssModules(classnames(className, 'card', inverse ? 'text-white' : false, block || body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + "-" + color : false), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes,
            ref: innerRef
        }));
    };
    Card.propTypes = propTypes$m;
    Card.defaultProps = defaultProps$k;
    var propTypes$n = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$l = {
        tag: 'div'
    };
    var CardGroup = function CardGroup(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-group'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardGroup.propTypes = propTypes$n;
    CardGroup.defaultProps = defaultProps$l;
    var propTypes$o = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$m = {
        tag: 'div'
    };
    var CardDeck = function CardDeck(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-deck'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardDeck.propTypes = propTypes$o;
    CardDeck.defaultProps = defaultProps$m;
    var propTypes$p = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$n = {
        tag: 'div'
    };
    var CardColumns = function CardColumns(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-columns'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardColumns.propTypes = propTypes$p;
    CardColumns.defaultProps = defaultProps$n;
    var propTypes$q = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.string, propTypes.func])
    };
    var defaultProps$o = {
        tag: 'div'
    };
    var CardBody = function CardBody(props) {
        var className = props.className, cssModule = props.cssModule, innerRef = props.innerRef, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "innerRef", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-body'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes,
            ref: innerRef
        }));
    };
    CardBody.propTypes = propTypes$q;
    CardBody.defaultProps = defaultProps$o;
    function CardBlock(props) {
        warnOnce('The "CardBlock" component has been deprecated.\nPlease use component "CardBody".');
        return React__default.createElement(CardBody, props);
    }
    var propTypes$r = {
        tag: tagPropType,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.string]),
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$p = {
        tag: 'a'
    };
    var CardLink = function CardLink(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, innerRef = props.innerRef, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag", "innerRef"]);
        var classes = mapToCssModules(classnames(className, 'card-link'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            ref: innerRef,
            className: classes
        }));
    };
    CardLink.propTypes = propTypes$r;
    CardLink.defaultProps = defaultProps$p;
    var propTypes$s = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$q = {
        tag: 'div'
    };
    var CardFooter = function CardFooter(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-footer'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardFooter.propTypes = propTypes$s;
    CardFooter.defaultProps = defaultProps$q;
    var propTypes$t = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$r = {
        tag: 'div'
    };
    var CardHeader = function CardHeader(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-header'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardHeader.propTypes = propTypes$t;
    CardHeader.defaultProps = defaultProps$r;
    var propTypes$u = {
        tag: tagPropType,
        top: propTypes.bool,
        bottom: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$s = {
        tag: 'img'
    };
    var CardImg = function CardImg(props) {
        var className = props.className, cssModule = props.cssModule, top = props.top, bottom = props.bottom, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "top", "bottom", "tag"]);
        var cardImgClassName = 'card-img';
        if (top) {
            cardImgClassName = 'card-img-top';
        }
        if (bottom) {
            cardImgClassName = 'card-img-bottom';
        }
        var classes = mapToCssModules(classnames(className, cardImgClassName), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardImg.propTypes = propTypes$u;
    CardImg.defaultProps = defaultProps$s;
    var propTypes$v = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$t = {
        tag: 'div'
    };
    var CardImgOverlay = function CardImgOverlay(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-img-overlay'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardImgOverlay.propTypes = propTypes$v;
    CardImgOverlay.defaultProps = defaultProps$t;
    var CarouselItem = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(CarouselItem, _React$Component);
        function CarouselItem(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.state = {
                startAnimation: false
            };
            _this.onEnter = _this.onEnter.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onEntering = _this.onEntering.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onExit = _this.onExit.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onExiting = _this.onExiting.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onExited = _this.onExited.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = CarouselItem.prototype;
        _proto.onEnter = function onEnter(node, isAppearing) {
            this.setState({
                startAnimation: false
            });
            this.props.onEnter(node, isAppearing);
        };
        _proto.onEntering = function onEntering(node, isAppearing) {
            // getting this variable triggers a reflow
            var offsetHeight = node.offsetHeight;
            this.setState({
                startAnimation: true
            });
            this.props.onEntering(node, isAppearing);
            return offsetHeight;
        };
        _proto.onExit = function onExit(node) {
            this.setState({
                startAnimation: false
            });
            this.props.onExit(node);
        };
        _proto.onExiting = function onExiting(node) {
            this.setState({
                startAnimation: true
            });
            node.dispatchEvent(new CustomEvent('slide.bs.carousel'));
            this.props.onExiting(node);
        };
        _proto.onExited = function onExited(node) {
            node.dispatchEvent(new CustomEvent('slid.bs.carousel'));
            this.props.onExited(node);
        };
        _proto.render = function render() {
            var _this2 = this;
            var _this$props = this.props, isIn = _this$props.in, children = _this$props.children, cssModule = _this$props.cssModule, slide = _this$props.slide, Tag = _this$props.tag, className = _this$props.className, transitionProps = _objectWithoutPropertiesLoose(_this$props, ["in", "children", "cssModule", "slide", "tag", "className"]);
            return React__default.createElement(reactTransitionGroup_1, _extends({}, transitionProps, {
                enter: slide,
                exit: slide,
                in: isIn,
                onEnter: this.onEnter,
                onEntering: this.onEntering,
                onExit: this.onExit,
                onExiting: this.onExiting,
                onExited: this.onExited
            }), function (status) {
                var direction = _this2.context.direction;
                var isActive = status === TransitionStatuses.ENTERED || status === TransitionStatuses.EXITING;
                var directionClassName = (status === TransitionStatuses.ENTERING || status === TransitionStatuses.EXITING) && _this2.state.startAnimation && (direction === 'right' ? 'carousel-item-left' : 'carousel-item-right');
                var orderClassName = status === TransitionStatuses.ENTERING && (direction === 'right' ? 'carousel-item-next' : 'carousel-item-prev');
                var itemClasses = mapToCssModules(classnames(className, 'carousel-item', isActive && 'active', directionClassName, orderClassName), cssModule);
                return React__default.createElement(Tag, {
                    className: itemClasses
                }, children);
            });
        };
        return CarouselItem;
    }(React__default.Component);
    CarouselItem.propTypes = _extends({}, reactTransitionGroup_1.propTypes, {
        tag: tagPropType,
        in: propTypes.bool,
        cssModule: propTypes.object,
        children: propTypes.node,
        slide: propTypes.bool,
        className: propTypes.string
    });
    CarouselItem.defaultProps = _extends({}, reactTransitionGroup_1.defaultProps, {
        tag: 'div',
        timeout: TransitionTimeouts.Carousel,
        slide: true
    });
    CarouselItem.contextTypes = {
        direction: propTypes.string
    };
    var Carousel = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(Carousel, _React$Component);
        function Carousel(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.handleKeyPress = _this.handleKeyPress.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.renderItems = _this.renderItems.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.hoverStart = _this.hoverStart.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.hoverEnd = _this.hoverEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.state = {
                direction: 'right',
                indicatorClicked: false
            };
            return _this;
        }
        var _proto = Carousel.prototype;
        _proto.getChildContext = function getChildContext() {
            return {
                direction: this.state.direction
            };
        };
        _proto.componentDidMount = function componentDidMount() {
            // Set up the cycle
            if (this.props.ride === 'carousel') {
                this.setInterval();
            } // TODO: move this to the specific carousel like bootstrap. Currently it will trigger ALL carousels on the page.
            document.addEventListener('keyup', this.handleKeyPress);
        };
        _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            this.setInterval(nextProps); // Calculate the direction to turn
            if (this.props.activeIndex + 1 === nextProps.activeIndex) {
                this.setState({
                    direction: 'right'
                });
            }
            else if (this.props.activeIndex - 1 === nextProps.activeIndex) {
                this.setState({
                    direction: 'left'
                });
            }
            else if (this.props.activeIndex > nextProps.activeIndex) {
                this.setState({
                    direction: this.state.indicatorClicked ? 'left' : 'right'
                });
            }
            else if (this.props.activeIndex !== nextProps.activeIndex) {
                this.setState({
                    direction: this.state.indicatorClicked ? 'right' : 'left'
                });
            }
            this.setState({
                indicatorClicked: false
            });
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this.clearInterval();
            document.removeEventListener('keyup', this.handleKeyPress);
        };
        _proto.setInterval = function (_setInterval) {
            function setInterval() {
                return _setInterval.apply(this, arguments);
            }
            setInterval.toString = function () {
                return _setInterval.toString();
            };
            return setInterval;
        }(function (props) {
            if (props === void 0) {
                props = this.props;
            }
            // make sure not to have multiple intervals going...
            this.clearInterval();
            if (props.interval) {
                this.cycleInterval = setInterval(function () {
                    props.next();
                }, parseInt(props.interval, 10));
            }
        });
        _proto.clearInterval = function (_clearInterval) {
            function clearInterval() {
                return _clearInterval.apply(this, arguments);
            }
            clearInterval.toString = function () {
                return _clearInterval.toString();
            };
            return clearInterval;
        }(function () {
            clearInterval(this.cycleInterval);
        });
        _proto.hoverStart = function hoverStart() {
            if (this.props.pause === 'hover') {
                this.clearInterval();
            }
            if (this.props.mouseEnter) {
                var _this$props;
                (_this$props = this.props).mouseEnter.apply(_this$props, arguments);
            }
        };
        _proto.hoverEnd = function hoverEnd() {
            if (this.props.pause === 'hover') {
                this.setInterval();
            }
            if (this.props.mouseLeave) {
                var _this$props2;
                (_this$props2 = this.props).mouseLeave.apply(_this$props2, arguments);
            }
        };
        _proto.handleKeyPress = function handleKeyPress(evt) {
            if (this.props.keyboard) {
                if (evt.keyCode === 37) {
                    this.props.previous();
                }
                else if (evt.keyCode === 39) {
                    this.props.next();
                }
            }
        };
        _proto.renderItems = function renderItems(carouselItems, className) {
            var _this2 = this;
            var slide = this.props.slide;
            return React__default.createElement("div", {
                role: "listbox",
                className: className
            }, carouselItems.map(function (item, index) {
                var isIn = index === _this2.props.activeIndex;
                return React__default.cloneElement(item, {
                    in: isIn,
                    slide: slide
                });
            }));
        };
        _proto.render = function render() {
            var _this3 = this;
            var _this$props3 = this.props, cssModule = _this$props3.cssModule, slide = _this$props3.slide, className = _this$props3.className;
            var outerClasses = mapToCssModules(classnames(className, 'carousel', slide && 'slide'), cssModule);
            var innerClasses = mapToCssModules(classnames('carousel-inner'), cssModule); // filter out booleans, null, or undefined
            var children = this.props.children.filter(function (child) {
                return child !== null && child !== undefined && typeof child !== 'boolean';
            });
            var slidesOnly = children.every(function (child) {
                return child.type === CarouselItem;
            }); // Rendering only slides
            if (slidesOnly) {
                return React__default.createElement("div", {
                    className: outerClasses,
                    onMouseEnter: this.hoverStart,
                    onMouseLeave: this.hoverEnd
                }, this.renderItems(children, innerClasses));
            } // Rendering slides and controls
            if (children[0] instanceof Array) {
                var _carouselItems = children[0];
                var _controlLeft = children[1];
                var _controlRight = children[2];
                return React__default.createElement("div", {
                    className: outerClasses,
                    onMouseEnter: this.hoverStart,
                    onMouseLeave: this.hoverEnd
                }, this.renderItems(_carouselItems, innerClasses), _controlLeft, _controlRight);
            } // Rendering indicators, slides and controls
            var indicators = children[0];
            var wrappedOnClick = function wrappedOnClick(e) {
                if (typeof indicators.props.onClickHandler === 'function') {
                    _this3.setState({
                        indicatorClicked: true
                    }, function () {
                        return indicators.props.onClickHandler(e);
                    });
                }
            };
            var wrappedIndicators = React__default.cloneElement(indicators, {
                onClickHandler: wrappedOnClick
            });
            var carouselItems = children[1];
            var controlLeft = children[2];
            var controlRight = children[3];
            return React__default.createElement("div", {
                className: outerClasses,
                onMouseEnter: this.hoverStart,
                onMouseLeave: this.hoverEnd
            }, wrappedIndicators, this.renderItems(carouselItems, innerClasses), controlLeft, controlRight);
        };
        return Carousel;
    }(React__default.Component);
    Carousel.propTypes = {
        // the current active slide of the carousel
        activeIndex: propTypes.number,
        // a function which should advance the carousel to the next slide (via activeIndex)
        next: propTypes.func.isRequired,
        // a function which should advance the carousel to the previous slide (via activeIndex)
        previous: propTypes.func.isRequired,
        // controls if the left and right arrow keys should control the carousel
        keyboard: propTypes.bool,
        /* If set to "hover", pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on
         * mouseleave. If set to false, hovering over the carousel won't pause it. (default: "hover")
         */
        pause: propTypes.oneOf(['hover', false]),
        // Autoplays the carousel after the user manually cycles the first item. If "carousel", autoplays the carousel on load.
        // This is how bootstrap defines it... I would prefer a bool named autoplay or something...
        ride: propTypes.oneOf(['carousel']),
        // the interval at which the carousel automatically cycles (default: 5000)
        // eslint-disable-next-line react/no-unused-prop-types
        interval: propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.bool]),
        children: propTypes.array,
        // called when the mouse enters the Carousel
        mouseEnter: propTypes.func,
        // called when the mouse exits the Carousel
        mouseLeave: propTypes.func,
        // controls whether the slide animation on the Carousel works or not
        slide: propTypes.bool,
        cssModule: propTypes.object,
        className: propTypes.string
    };
    Carousel.defaultProps = {
        interval: 5000,
        pause: 'hover',
        keyboard: true,
        slide: true
    };
    Carousel.childContextTypes = {
        direction: propTypes.string
    };
    var CarouselControl = function CarouselControl(props) {
        var direction = props.direction, onClickHandler = props.onClickHandler, cssModule = props.cssModule, directionText = props.directionText, className = props.className;
        var anchorClasses = mapToCssModules(classnames(className, "carousel-control-" + direction), cssModule);
        var iconClasses = mapToCssModules(classnames("carousel-control-" + direction + "-icon"), cssModule);
        var screenReaderClasses = mapToCssModules(classnames('sr-only'), cssModule);
        return React__default.createElement("a", {
            className: anchorClasses,
            role: "button",
            tabIndex: "0",
            onClick: function onClick(e) {
                e.preventDefault();
                onClickHandler();
            }
        }, React__default.createElement("span", {
            className: iconClasses,
            "aria-hidden": "true"
        }), React__default.createElement("span", {
            className: screenReaderClasses
        }, directionText || direction));
    };
    CarouselControl.propTypes = {
        direction: propTypes.oneOf(['prev', 'next']).isRequired,
        onClickHandler: propTypes.func.isRequired,
        cssModule: propTypes.object,
        directionText: propTypes.string,
        className: propTypes.string
    };
    var CarouselIndicators = function CarouselIndicators(props) {
        var items = props.items, activeIndex = props.activeIndex, cssModule = props.cssModule, onClickHandler = props.onClickHandler, className = props.className;
        var listClasses = mapToCssModules(classnames(className, 'carousel-indicators'), cssModule);
        var indicators = items.map(function (item, idx) {
            var indicatorClasses = mapToCssModules(classnames({
                active: activeIndex === idx
            }), cssModule);
            return React__default.createElement("li", {
                key: "" + (item.key || Object.values(item).join('')),
                onClick: function onClick(e) {
                    e.preventDefault();
                    onClickHandler(idx);
                },
                className: indicatorClasses
            });
        });
        return React__default.createElement("ol", {
            className: listClasses
        }, indicators);
    };
    CarouselIndicators.propTypes = {
        items: propTypes.array.isRequired,
        activeIndex: propTypes.number.isRequired,
        cssModule: propTypes.object,
        onClickHandler: propTypes.func.isRequired,
        className: propTypes.string
    };
    var CarouselCaption = function CarouselCaption(props) {
        var captionHeader = props.captionHeader, captionText = props.captionText, cssModule = props.cssModule, className = props.className;
        var classes = mapToCssModules(classnames(className, 'carousel-caption', 'd-none', 'd-md-block'), cssModule);
        return React__default.createElement("div", {
            className: classes
        }, React__default.createElement("h3", null, captionHeader), React__default.createElement("p", null, captionText));
    };
    CarouselCaption.propTypes = {
        captionHeader: propTypes.string,
        captionText: propTypes.string.isRequired,
        cssModule: propTypes.object,
        className: propTypes.string
    };
    var propTypes$w = {
        items: propTypes.array.isRequired,
        indicators: propTypes.bool,
        controls: propTypes.bool,
        autoPlay: propTypes.bool,
        defaultActiveIndex: propTypes.number,
        activeIndex: propTypes.number,
        next: propTypes.func,
        previous: propTypes.func,
        goToIndex: propTypes.func
    };
    var UncontrolledCarousel = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(UncontrolledCarousel, _Component);
        function UncontrolledCarousel(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.animating = false;
            _this.state = {
                activeIndex: props.defaultActiveIndex || 0
            };
            _this.next = _this.next.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.previous = _this.previous.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.goToIndex = _this.goToIndex.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onExiting = _this.onExiting.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onExited = _this.onExited.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = UncontrolledCarousel.prototype;
        _proto.onExiting = function onExiting() {
            this.animating = true;
        };
        _proto.onExited = function onExited() {
            this.animating = false;
        };
        _proto.next = function next() {
            if (this.animating)
                return;
            var nextIndex = this.state.activeIndex === this.props.items.length - 1 ? 0 : this.state.activeIndex + 1;
            this.setState({
                activeIndex: nextIndex
            });
        };
        _proto.previous = function previous() {
            if (this.animating)
                return;
            var nextIndex = this.state.activeIndex === 0 ? this.props.items.length - 1 : this.state.activeIndex - 1;
            this.setState({
                activeIndex: nextIndex
            });
        };
        _proto.goToIndex = function goToIndex(newIndex) {
            if (this.animating)
                return;
            this.setState({
                activeIndex: newIndex
            });
        };
        _proto.render = function render() {
            var _this2 = this;
            var _this$props = this.props, defaultActiveIndex = _this$props.defaultActiveIndex, autoPlay = _this$props.autoPlay, indicators = _this$props.indicators, controls = _this$props.controls, items = _this$props.items, goToIndex = _this$props.goToIndex, props = _objectWithoutPropertiesLoose(_this$props, ["defaultActiveIndex", "autoPlay", "indicators", "controls", "items", "goToIndex"]);
            var activeIndex = this.state.activeIndex;
            var slides = items.map(function (item) {
                return React__default.createElement(CarouselItem, {
                    onExiting: _this2.onExiting,
                    onExited: _this2.onExited,
                    key: item.src
                }, React__default.createElement("img", {
                    className: "d-block w-100",
                    src: item.src,
                    alt: item.altText
                }), React__default.createElement(CarouselCaption, {
                    captionText: item.caption,
                    captionHeader: item.header || item.caption
                }));
            });
            return React__default.createElement(Carousel, _extends({
                activeIndex: activeIndex,
                next: this.next,
                previous: this.previous,
                ride: autoPlay ? 'carousel' : undefined
            }, props), indicators && React__default.createElement(CarouselIndicators, {
                items: items,
                activeIndex: props.activeIndex || activeIndex,
                onClickHandler: goToIndex || this.goToIndex
            }), slides, controls && React__default.createElement(CarouselControl, {
                direction: "prev",
                directionText: "Previous",
                onClickHandler: props.previous || this.previous
            }), controls && React__default.createElement(CarouselControl, {
                direction: "next",
                directionText: "Next",
                onClickHandler: props.next || this.next
            }));
        };
        return UncontrolledCarousel;
    }(React.Component);
    UncontrolledCarousel.propTypes = propTypes$w;
    UncontrolledCarousel.defaultProps = {
        controls: true,
        indicators: true,
        autoPlay: true
    };
    var propTypes$x = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$u = {
        tag: 'div'
    };
    var CardSubtitle = function CardSubtitle(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-subtitle'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardSubtitle.propTypes = propTypes$x;
    CardSubtitle.defaultProps = defaultProps$u;
    var propTypes$y = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$v = {
        tag: 'p'
    };
    var CardText = function CardText(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-text'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardText.propTypes = propTypes$y;
    CardText.defaultProps = defaultProps$v;
    var propTypes$z = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$w = {
        tag: 'div'
    };
    var CardTitle = function CardTitle(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'card-title'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    CardTitle.propTypes = propTypes$z;
    CardTitle.defaultProps = defaultProps$w;
    var propTypes$A = {
        className: propTypes.string,
        id: propTypes.oneOfType([propTypes.string, propTypes.number]).isRequired,
        type: propTypes.string.isRequired,
        label: propTypes.node,
        inline: propTypes.bool,
        valid: propTypes.bool,
        invalid: propTypes.bool,
        bsSize: propTypes.string,
        cssModule: propTypes.object,
        children: propTypes.oneOfType([propTypes.node, propTypes.array, propTypes.func]),
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.string, propTypes.func])
    };
    function CustomInput(props) {
        var className = props.className, label = props.label, inline = props.inline, valid = props.valid, invalid = props.invalid, cssModule = props.cssModule, children = props.children, bsSize = props.bsSize, innerRef = props.innerRef, attributes = _objectWithoutPropertiesLoose(props, ["className", "label", "inline", "valid", "invalid", "cssModule", "children", "bsSize", "innerRef"]);
        var type = attributes.type;
        var customClass = mapToCssModules(classnames(className, "custom-" + type, bsSize ? "custom-" + type + "-" + bsSize : false), cssModule);
        var validationClassNames = mapToCssModules(classnames(invalid && 'is-invalid', valid && 'is-valid'), cssModule);
        if (type === 'select') {
            return React__default.createElement("select", _extends({}, attributes, {
                ref: innerRef,
                className: classnames(validationClassNames, customClass)
            }), children);
        }
        if (type === 'file') {
            return React__default.createElement("div", {
                className: customClass
            }, React__default.createElement("input", _extends({}, attributes, {
                ref: innerRef,
                className: classnames(validationClassNames, mapToCssModules('custom-file-input', cssModule))
            })), React__default.createElement("label", {
                className: mapToCssModules('custom-file-label', cssModule),
                htmlFor: attributes.id
            }, label || 'Choose file'));
        }
        if (type !== 'checkbox' && type !== 'radio' && type !== 'switch') {
            return React__default.createElement("input", _extends({}, attributes, {
                ref: innerRef,
                className: classnames(validationClassNames, customClass)
            }));
        }
        var wrapperClasses = classnames(customClass, mapToCssModules(classnames('custom-control', {
            'custom-control-inline': inline
        }), cssModule));
        return React__default.createElement("div", {
            className: wrapperClasses
        }, React__default.createElement("input", _extends({}, attributes, {
            type: type === 'switch' ? 'checkbox' : type,
            ref: innerRef,
            className: classnames(validationClassNames, mapToCssModules('custom-control-input', cssModule))
        })), React__default.createElement("label", {
            className: mapToCssModules('custom-control-label', cssModule),
            htmlFor: attributes.id
        }, label), children);
    }
    CustomInput.propTypes = propTypes$A;
    var propTypes$B = {
        children: propTypes.node.isRequired,
        className: propTypes.string,
        placement: propTypes.string,
        placementPrefix: propTypes.string,
        arrowClassName: propTypes.string,
        hideArrow: propTypes.bool,
        tag: tagPropType,
        isOpen: propTypes.bool.isRequired,
        cssModule: propTypes.object,
        offset: propTypes.oneOfType([propTypes.string, propTypes.number]),
        fallbackPlacement: propTypes.oneOfType([propTypes.string, propTypes.array]),
        flip: propTypes.bool,
        container: targetPropType,
        target: targetPropType.isRequired,
        modifiers: propTypes.object,
        boundariesElement: propTypes.oneOfType([propTypes.string, DOMElement])
    };
    var defaultProps$x = {
        boundariesElement: 'scrollParent',
        placement: 'auto',
        hideArrow: false,
        isOpen: false,
        offset: 0,
        fallbackPlacement: 'flip',
        flip: true,
        container: 'body',
        modifiers: {}
    };
    var childContextTypes$1 = {
        popperManager: propTypes.object.isRequired
    };
    var PopperContent = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(PopperContent, _React$Component);
        function PopperContent(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.handlePlacementChange = _this.handlePlacementChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.setTargetNode = _this.setTargetNode.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.getTargetNode = _this.getTargetNode.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.getRef = _this.getRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.state = {};
            return _this;
        }
        var _proto = PopperContent.prototype;
        _proto.getChildContext = function getChildContext() {
            return {
                popperManager: {
                    setTargetNode: this.setTargetNode,
                    getTargetNode: this.getTargetNode
                }
            };
        };
        _proto.componentDidUpdate = function componentDidUpdate() {
            if (this._element && this._element.childNodes && this._element.childNodes[0] && this._element.childNodes[0].focus) {
                this._element.childNodes[0].focus();
            }
        };
        _proto.setTargetNode = function setTargetNode(node) {
            this.targetNode = node;
        };
        _proto.getTargetNode = function getTargetNode() {
            return this.targetNode;
        };
        _proto.getContainerNode = function getContainerNode() {
            return getTarget(this.props.container);
        };
        _proto.getRef = function getRef(ref) {
            this._element = ref;
        };
        _proto.handlePlacementChange = function handlePlacementChange(data) {
            if (this.state.placement !== data.placement) {
                this.setState({
                    placement: data.placement
                });
            }
            return data;
        };
        _proto.renderChildren = function renderChildren() {
            var _this$props = this.props, cssModule = _this$props.cssModule, children = _this$props.children, isOpen = _this$props.isOpen, flip = _this$props.flip, target = _this$props.target, offset = _this$props.offset, fallbackPlacement = _this$props.fallbackPlacement, placementPrefix = _this$props.placementPrefix, _arrowClassName = _this$props.arrowClassName, hideArrow = _this$props.hideArrow, className = _this$props.className, tag = _this$props.tag, container = _this$props.container, modifiers = _this$props.modifiers, boundariesElement = _this$props.boundariesElement, attrs = _objectWithoutPropertiesLoose(_this$props, ["cssModule", "children", "isOpen", "flip", "target", "offset", "fallbackPlacement", "placementPrefix", "arrowClassName", "hideArrow", "className", "tag", "container", "modifiers", "boundariesElement"]);
            var arrowClassName = mapToCssModules(classnames('arrow', _arrowClassName), cssModule);
            var placement = (this.state.placement || attrs.placement).split('-')[0];
            var popperClassName = mapToCssModules(classnames(className, placementPrefix ? placementPrefix + "-" + placement : placement), this.props.cssModule);
            var extendedModifiers = _extends({
                offset: {
                    offset: offset
                },
                flip: {
                    enabled: flip,
                    behavior: fallbackPlacement
                },
                preventOverflow: {
                    boundariesElement: boundariesElement
                },
                update: {
                    enabled: true,
                    order: 950,
                    fn: this.handlePlacementChange
                }
            }, modifiers);
            return React__default.createElement(reactPopper.Popper, _extends({
                modifiers: extendedModifiers
            }, attrs, {
                component: tag,
                className: popperClassName,
                "x-placement": this.state.placement || attrs.placement
            }), children, !hideArrow && React__default.createElement(reactPopper.Arrow, {
                className: arrowClassName
            }));
        };
        _proto.render = function render() {
            this.setTargetNode(getTarget(this.props.target));
            if (this.props.isOpen) {
                return this.props.container === 'inline' ? this.renderChildren() : ReactDOM.createPortal(React__default.createElement("div", {
                    ref: this.getRef
                }, this.renderChildren()), this.getContainerNode());
            }
            return null;
        };
        return PopperContent;
    }(React__default.Component);
    PopperContent.propTypes = propTypes$B;
    PopperContent.defaultProps = defaultProps$x;
    PopperContent.childContextTypes = childContextTypes$1;
    var PopperTargetHelper = function PopperTargetHelper(props, context) {
        context.popperManager.setTargetNode(getTarget(props.target));
        return null;
    };
    PopperTargetHelper.contextTypes = {
        popperManager: propTypes.object.isRequired
    };
    PopperTargetHelper.propTypes = {
        target: targetPropType.isRequired
    };
    var propTypes$C = {
        placement: propTypes.oneOf(PopperPlacements),
        target: targetPropType.isRequired,
        container: targetPropType,
        isOpen: propTypes.bool,
        disabled: propTypes.bool,
        hideArrow: propTypes.bool,
        boundariesElement: propTypes.oneOfType([propTypes.string, DOMElement]),
        className: propTypes.string,
        innerClassName: propTypes.string,
        arrowClassName: propTypes.string,
        cssModule: propTypes.object,
        toggle: propTypes.func,
        autohide: propTypes.bool,
        placementPrefix: propTypes.string,
        delay: propTypes.oneOfType([propTypes.shape({
                show: propTypes.number,
                hide: propTypes.number
            }), propTypes.number]),
        modifiers: propTypes.object,
        offset: propTypes.oneOfType([propTypes.string, propTypes.number]),
        innerRef: propTypes.oneOfType([propTypes.func, propTypes.string, propTypes.object]),
        trigger: propTypes.string
    };
    var DEFAULT_DELAYS = {
        show: 0,
        hide: 250
    };
    var defaultProps$y = {
        isOpen: false,
        hideArrow: false,
        autohide: false,
        delay: DEFAULT_DELAYS,
        toggle: function toggle() { },
        trigger: 'click'
    };
    function isInDOMSubtree(element, subtreeRoot) {
        return subtreeRoot && (element === subtreeRoot || subtreeRoot.contains(element));
    }
    var TooltipPopoverWrapper = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(TooltipPopoverWrapper, _React$Component);
        function TooltipPopoverWrapper(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this._target = null;
            _this.addTargetEvents = _this.addTargetEvents.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.handleDocumentClick = _this.handleDocumentClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.removeTargetEvents = _this.removeTargetEvents.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.showWithDelay = _this.showWithDelay.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.hideWithDelay = _this.hideWithDelay.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onMouseOverTooltipContent = _this.onMouseOverTooltipContent.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onMouseLeaveTooltipContent = _this.onMouseLeaveTooltipContent.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.show = _this.show.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.hide = _this.hide.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onEscKeyDown = _this.onEscKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.getRef = _this.getRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = TooltipPopoverWrapper.prototype;
        _proto.componentDidMount = function componentDidMount() {
            this.updateTarget();
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this.removeTargetEvents();
        };
        _proto.onMouseOverTooltipContent = function onMouseOverTooltipContent() {
            if (this.props.trigger.indexOf('hover') > -1 && !this.props.autohide) {
                if (this._hideTimeout) {
                    this.clearHideTimeout();
                }
            }
        };
        _proto.onMouseLeaveTooltipContent = function onMouseLeaveTooltipContent(e) {
            if (this.props.trigger.indexOf('hover') > -1 && !this.props.autohide) {
                if (this._showTimeout) {
                    this.clearShowTimeout();
                }
                e.persist();
                this._hideTimeout = setTimeout(this.hide.bind(this, e), this.getDelay('hide'));
            }
        };
        _proto.onEscKeyDown = function onEscKeyDown(e) {
            if (e.key === 'Escape') {
                this.hide(e);
            }
        };
        _proto.getRef = function getRef(ref) {
            var innerRef = this.props.innerRef;
            if (innerRef) {
                if (typeof innerRef === 'function') {
                    innerRef(ref);
                }
                else if (typeof innerRef === 'object') {
                    innerRef.current = ref;
                }
            }
            this._popover = ref;
        };
        _proto.getDelay = function getDelay(key) {
            var delay = this.props.delay;
            if (typeof delay === 'object') {
                return isNaN(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];
            }
            return delay;
        };
        _proto.show = function show(e) {
            if (!this.props.isOpen) {
                this.clearShowTimeout();
                this.toggle(e);
            }
        };
        _proto.showWithDelay = function showWithDelay(e) {
            if (this._hideTimeout) {
                this.clearHideTimeout();
            }
            this._showTimeout = setTimeout(this.show.bind(this, e), this.getDelay('show'));
        };
        _proto.hide = function hide(e) {
            if (this.props.isOpen) {
                this.clearHideTimeout();
                this.toggle(e);
            }
        };
        _proto.hideWithDelay = function hideWithDelay(e) {
            if (this._showTimeout) {
                this.clearShowTimeout();
            }
            this._hideTimeout = setTimeout(this.hide.bind(this, e), this.getDelay('hide'));
        };
        _proto.clearShowTimeout = function clearShowTimeout() {
            clearTimeout(this._showTimeout);
            this._showTimeout = undefined;
        };
        _proto.clearHideTimeout = function clearHideTimeout() {
            clearTimeout(this._hideTimeout);
            this._hideTimeout = undefined;
        };
        _proto.handleDocumentClick = function handleDocumentClick(e) {
            var triggers = this.props.trigger.split(' ');
            if (triggers.indexOf('legacy') > -1 && (this.props.isOpen || isInDOMSubtree(e.target, this._target))) {
                if (this._hideTimeout) {
                    this.clearHideTimeout();
                }
                if (this.props.isOpen && !isInDOMSubtree(e.target, this._popover)) {
                    this.hideWithDelay(e);
                }
                else {
                    this.showWithDelay(e);
                }
            }
            else if (triggers.indexOf('click') > -1 && isInDOMSubtree(e.target, this._target)) {
                if (this._hideTimeout) {
                    this.clearHideTimeout();
                }
                if (!this.props.isOpen) {
                    this.showWithDelay(e);
                }
                else {
                    this.hideWithDelay(e);
                }
            }
        };
        _proto.addTargetEvents = function addTargetEvents() {
            var _this2 = this;
            if (this.props.trigger) {
                var triggers = this.props.trigger.split(' ');
                if (triggers.indexOf('manual') === -1) {
                    if (triggers.indexOf('click') > -1 || triggers.indexOf('legacy') > -1) {
                        ['click', 'touchstart'].forEach(function (event) {
                            return document.addEventListener(event, _this2.handleDocumentClick, true);
                        });
                    }
                    if (this._target) {
                        if (triggers.indexOf('hover') > -1) {
                            this._target.addEventListener('mouseover', this.showWithDelay, true);
                            this._target.addEventListener('mouseout', this.hideWithDelay, true);
                        }
                        if (triggers.indexOf('focus') > -1) {
                            this._target.addEventListener('focusin', this.show, true);
                            this._target.addEventListener('focusout', this.hide, true);
                        }
                        this._target.addEventListener('keydown', this.onEscKeyDown, true);
                    }
                }
            }
        };
        _proto.removeTargetEvents = function removeTargetEvents() {
            var _this3 = this;
            if (this._target) {
                this._target.removeEventListener('mouseover', this.showWithDelay, true);
                this._target.removeEventListener('mouseout', this.hideWithDelay, true);
                this._target.removeEventListener('keydown', this.onEscKeyDown, true);
                this._target.removeEventListener('focusin', this.show, true);
                this._target.removeEventListener('focusout', this.hide, true);
            }
            ['click', 'touchstart'].forEach(function (event) {
                return document.removeEventListener(event, _this3.handleDocumentClick, true);
            });
        };
        _proto.updateTarget = function updateTarget() {
            var newTarget = getTarget(this.props.target);
            if (newTarget !== this._target) {
                this.removeTargetEvents();
                this._target = newTarget;
                this.addTargetEvents();
            }
        };
        _proto.toggle = function toggle(e) {
            if (this.props.disabled) {
                return e && e.preventDefault();
            }
            return this.props.toggle(e);
        };
        _proto.render = function render() {
            if (!this.props.isOpen) {
                return null;
            }
            this.updateTarget();
            var _this$props = this.props, className = _this$props.className, cssModule = _this$props.cssModule, innerClassName = _this$props.innerClassName, target = _this$props.target, isOpen = _this$props.isOpen, hideArrow = _this$props.hideArrow, boundariesElement = _this$props.boundariesElement, placement = _this$props.placement, placementPrefix = _this$props.placementPrefix, arrowClassName = _this$props.arrowClassName, container = _this$props.container, modifiers = _this$props.modifiers, offset = _this$props.offset;
            var attributes = omit(this.props, Object.keys(propTypes$C));
            var popperClasses = mapToCssModules(className, cssModule);
            var classes = mapToCssModules(innerClassName, cssModule);
            return React__default.createElement(PopperContent, {
                className: popperClasses,
                target: target,
                isOpen: isOpen,
                hideArrow: hideArrow,
                boundariesElement: boundariesElement,
                placement: placement,
                placementPrefix: placementPrefix,
                arrowClassName: arrowClassName,
                container: container,
                modifiers: modifiers,
                offset: offset,
                cssModule: cssModule
            }, React__default.createElement("div", _extends({}, attributes, {
                ref: this.getRef,
                className: classes,
                role: "tooltip",
                "aria-hidden": isOpen,
                onMouseOver: this.onMouseOverTooltipContent,
                onMouseLeave: this.onMouseLeaveTooltipContent,
                onKeyDown: this.onEscKeyDown
            })));
        };
        return TooltipPopoverWrapper;
    }(React__default.Component);
    TooltipPopoverWrapper.propTypes = propTypes$C;
    TooltipPopoverWrapper.defaultProps = defaultProps$y;
    var defaultProps$z = {
        placement: 'right',
        placementPrefix: 'bs-popover',
        trigger: 'click'
    };
    var Popover = function Popover(props) {
        var popperClasses = classnames('popover', 'show', props.className);
        var classes = classnames('popover-inner', props.innerClassName);
        return React__default.createElement(TooltipPopoverWrapper, _extends({}, props, {
            className: popperClasses,
            innerClassName: classes
        }));
    };
    Popover.propTypes = propTypes$C;
    Popover.defaultProps = defaultProps$z;
    var omitKeys = ['defaultOpen'];
    var UncontrolledPopover = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(UncontrolledPopover, _Component);
        function UncontrolledPopover(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.state = {
                isOpen: props.defaultOpen || false
            };
            _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = UncontrolledPopover.prototype;
        _proto.toggle = function toggle() {
            this.setState({
                isOpen: !this.state.isOpen
            });
        };
        _proto.render = function render() {
            return React__default.createElement(Popover, _extends({
                isOpen: this.state.isOpen,
                toggle: this.toggle
            }, omit(this.props, omitKeys)));
        };
        return UncontrolledPopover;
    }(React.Component);
    UncontrolledPopover.propTypes = _extends({
        defaultOpen: propTypes.bool
    }, Popover.propTypes);
    var propTypes$D = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$A = {
        tag: 'h3'
    };
    var PopoverHeader = function PopoverHeader(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'popover-header'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    PopoverHeader.propTypes = propTypes$D;
    PopoverHeader.defaultProps = defaultProps$A;
    function PopoverTitle(props) {
        warnOnce('The "PopoverTitle" component has been deprecated.\nPlease use component "PopoverHeader".');
        return React__default.createElement(PopoverHeader, props);
    }
    var propTypes$E = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$B = {
        tag: 'div'
    };
    var PopoverBody = function PopoverBody(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'popover-body'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    PopoverBody.propTypes = propTypes$E;
    PopoverBody.defaultProps = defaultProps$B;
    function PopoverContent(props) {
        warnOnce('The "PopoverContent" component has been deprecated.\nPlease use component "PopoverBody".');
        return React__default.createElement(PopoverBody, props);
    }
    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */
    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;
    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';
    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g;
    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;
    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;
    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;
    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;
    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString$1 = objectProto$1.toString;
    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject$2(value) {
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
    }
    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
        return !!value && typeof value == 'object';
    }
    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && objectToString$1.call(value) == symbolTag;
    }
    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
        if (typeof value == 'number') {
            return value;
        }
        if (isSymbol(value)) {
            return NAN;
        }
        if (isObject$2(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject$2(other) ? other + '' : other;
        }
        if (typeof value != 'string') {
            return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    var lodash_tonumber = toNumber;
    var propTypes$F = {
        children: propTypes.node,
        bar: propTypes.bool,
        multi: propTypes.bool,
        tag: tagPropType,
        value: propTypes.oneOfType([propTypes.string, propTypes.number]),
        max: propTypes.oneOfType([propTypes.string, propTypes.number]),
        animated: propTypes.bool,
        striped: propTypes.bool,
        color: propTypes.string,
        className: propTypes.string,
        barClassName: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$C = {
        tag: 'div',
        value: 0,
        max: 100
    };
    var Progress = function Progress(props) {
        var children = props.children, className = props.className, barClassName = props.barClassName, cssModule = props.cssModule, value = props.value, max = props.max, animated = props.animated, striped = props.striped, color = props.color, bar = props.bar, multi = props.multi, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["children", "className", "barClassName", "cssModule", "value", "max", "animated", "striped", "color", "bar", "multi", "tag"]);
        var percent = lodash_tonumber(value) / lodash_tonumber(max) * 100;
        var progressClasses = mapToCssModules(classnames(className, 'progress'), cssModule);
        var progressBarClasses = mapToCssModules(classnames('progress-bar', bar ? className || barClassName : barClassName, animated ? 'progress-bar-animated' : null, color ? "bg-" + color : null, striped || animated ? 'progress-bar-striped' : null), cssModule);
        var ProgressBar = multi ? children : React__default.createElement("div", {
            className: progressBarClasses,
            style: {
                width: percent + "%"
            },
            role: "progressbar",
            "aria-valuenow": value,
            "aria-valuemin": "0",
            "aria-valuemax": max,
            children: children
        });
        if (bar) {
            return ProgressBar;
        }
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: progressClasses,
            children: ProgressBar
        }));
    };
    Progress.propTypes = propTypes$F;
    Progress.defaultProps = defaultProps$C;
    var propTypes$G = {
        children: propTypes.node.isRequired,
        node: propTypes.any
    };
    var Portal = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(Portal, _React$Component);
        function Portal() {
            return _React$Component.apply(this, arguments) || this;
        }
        var _proto = Portal.prototype;
        _proto.componentWillUnmount = function componentWillUnmount() {
            if (this.defaultNode) {
                document.body.removeChild(this.defaultNode);
            }
            this.defaultNode = null;
        };
        _proto.render = function render() {
            if (!canUseDOM) {
                return null;
            }
            if (!this.props.node && !this.defaultNode) {
                this.defaultNode = document.createElement('div');
                document.body.appendChild(this.defaultNode);
            }
            return ReactDOM.createPortal(this.props.children, this.props.node || this.defaultNode);
        };
        return Portal;
    }(React__default.Component);
    Portal.propTypes = propTypes$G;
    function noop() { }
    var FadePropTypes = propTypes.shape(Fade.propTypes);
    var propTypes$H = {
        isOpen: propTypes.bool,
        autoFocus: propTypes.bool,
        centered: propTypes.bool,
        size: propTypes.string,
        toggle: propTypes.func,
        keyboard: propTypes.bool,
        role: propTypes.string,
        labelledBy: propTypes.string,
        backdrop: propTypes.oneOfType([propTypes.bool, propTypes.oneOf(['static'])]),
        onEnter: propTypes.func,
        onExit: propTypes.func,
        onOpened: propTypes.func,
        onClosed: propTypes.func,
        children: propTypes.node,
        className: propTypes.string,
        wrapClassName: propTypes.string,
        modalClassName: propTypes.string,
        backdropClassName: propTypes.string,
        contentClassName: propTypes.string,
        external: propTypes.node,
        fade: propTypes.bool,
        cssModule: propTypes.object,
        zIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),
        backdropTransition: FadePropTypes,
        modalTransition: FadePropTypes,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.string, propTypes.func])
    };
    var propsToOmit = Object.keys(propTypes$H);
    var defaultProps$D = {
        isOpen: false,
        autoFocus: true,
        centered: false,
        role: 'dialog',
        backdrop: true,
        keyboard: true,
        zIndex: 1050,
        fade: true,
        onOpened: noop,
        onClosed: noop,
        modalTransition: {
            timeout: TransitionTimeouts.Modal
        },
        backdropTransition: {
            mountOnEnter: true,
            timeout: TransitionTimeouts.Fade // uses standard fade transition
        }
    };
    var Modal = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(Modal, _React$Component);
        function Modal(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this._element = null;
            _this._originalBodyPadding = null;
            _this.getFocusableChildren = _this.getFocusableChildren.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.handleBackdropClick = _this.handleBackdropClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.handleBackdropMouseDown = _this.handleBackdropMouseDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.handleEscape = _this.handleEscape.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.handleTab = _this.handleTab.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onOpened = _this.onOpened.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.onClosed = _this.onClosed.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.state = {
                isOpen: props.isOpen
            };
            if (props.isOpen) {
                _this.init();
            }
            return _this;
        }
        var _proto = Modal.prototype;
        _proto.componentDidMount = function componentDidMount() {
            if (this.props.onEnter) {
                this.props.onEnter();
            }
            if (this.state.isOpen && this.props.autoFocus) {
                this.setFocus();
            }
            this._isMounted = true;
        };
        _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            if (nextProps.isOpen && !this.props.isOpen) {
                this.setState({
                    isOpen: nextProps.isOpen
                });
            }
        };
        _proto.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {
            if (nextState.isOpen && !this.state.isOpen) {
                this.init();
            }
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
            if (this.props.autoFocus && this.state.isOpen && !prevState.isOpen) {
                this.setFocus();
            }
            if (this._element && prevProps.zIndex !== this.props.zIndex) {
                this._element.style.zIndex = this.props.zIndex;
            }
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            if (this.props.onExit) {
                this.props.onExit();
            }
            if (this.state.isOpen) {
                this.destroy();
            }
            this._isMounted = false;
        };
        _proto.onOpened = function onOpened(node, isAppearing) {
            this.props.onOpened();
            (this.props.modalTransition.onEntered || noop)(node, isAppearing);
        };
        _proto.onClosed = function onClosed(node) {
            // so all methods get called before it is unmounted
            this.props.onClosed();
            (this.props.modalTransition.onExited || noop)(node);
            this.destroy();
            if (this._isMounted) {
                this.setState({
                    isOpen: false
                });
            }
        };
        _proto.setFocus = function setFocus() {
            if (this._dialog && this._dialog.parentNode && typeof this._dialog.parentNode.focus === 'function') {
                this._dialog.parentNode.focus();
            }
        };
        _proto.getFocusableChildren = function getFocusableChildren() {
            return this._element.querySelectorAll(focusableElements.join(', '));
        };
        _proto.getFocusedChild = function getFocusedChild() {
            var currentFocus;
            var focusableChildren = this.getFocusableChildren();
            try {
                currentFocus = document.activeElement;
            }
            catch (err) {
                currentFocus = focusableChildren[0];
            }
            return currentFocus;
        } // not mouseUp because scrollbar fires it, shouldn't close when user scrolls
        ;
        _proto.handleBackdropClick = function handleBackdropClick(e) {
            if (e.target === this._mouseDownElement) {
                e.stopPropagation();
                if (!this.props.isOpen || this.props.backdrop !== true)
                    return;
                var backdrop = this._dialog ? this._dialog.parentNode : null;
                if (backdrop && e.target === backdrop && this.props.toggle) {
                    this.props.toggle(e);
                }
            }
        };
        _proto.handleTab = function handleTab(e) {
            if (e.which !== 9)
                return;
            var focusableChildren = this.getFocusableChildren();
            var totalFocusable = focusableChildren.length;
            var currentFocus = this.getFocusedChild();
            var focusedIndex = 0;
            for (var i = 0; i < totalFocusable; i += 1) {
                if (focusableChildren[i] === currentFocus) {
                    focusedIndex = i;
                    break;
                }
            }
            if (e.shiftKey && focusedIndex === 0) {
                e.preventDefault();
                focusableChildren[totalFocusable - 1].focus();
            }
            else if (!e.shiftKey && focusedIndex === totalFocusable - 1) {
                e.preventDefault();
                focusableChildren[0].focus();
            }
        };
        _proto.handleBackdropMouseDown = function handleBackdropMouseDown(e) {
            this._mouseDownElement = e.target;
        };
        _proto.handleEscape = function handleEscape(e) {
            if (this.props.isOpen && this.props.keyboard && e.keyCode === 27 && this.props.toggle) {
                e.preventDefault();
                e.stopPropagation();
                this.props.toggle(e);
            }
        };
        _proto.init = function init() {
            try {
                this._triggeringElement = document.activeElement;
            }
            catch (err) {
                this._triggeringElement = null;
            }
            this._element = document.createElement('div');
            this._element.setAttribute('tabindex', '-1');
            this._element.style.position = 'relative';
            this._element.style.zIndex = this.props.zIndex;
            this._originalBodyPadding = getOriginalBodyPadding();
            conditionallyUpdateScrollbar();
            document.body.appendChild(this._element);
            if (Modal.openCount === 0) {
                document.body.className = classnames(document.body.className, mapToCssModules('modal-open', this.props.cssModule));
            }
            Modal.openCount += 1;
        };
        _proto.destroy = function destroy() {
            if (this._element) {
                document.body.removeChild(this._element);
                this._element = null;
            }
            if (this._triggeringElement) {
                if (this._triggeringElement.focus)
                    this._triggeringElement.focus();
                this._triggeringElement = null;
            }
            if (Modal.openCount <= 1) {
                var modalOpenClassName = mapToCssModules('modal-open', this.props.cssModule); // Use regex to prevent matching `modal-open` as part of a different class, e.g. `my-modal-opened`
                var modalOpenClassNameRegex = new RegExp("(^| )" + modalOpenClassName + "( |$)");
                document.body.className = document.body.className.replace(modalOpenClassNameRegex, ' ').trim();
            }
            Modal.openCount -= 1;
            setScrollbarWidth(this._originalBodyPadding);
        };
        _proto.renderModalDialog = function renderModalDialog() {
            var _classNames, _this2 = this;
            var attributes = omit(this.props, propsToOmit);
            var dialogBaseClass = 'modal-dialog';
            return React__default.createElement("div", _extends({}, attributes, {
                className: mapToCssModules(classnames(dialogBaseClass, this.props.className, (_classNames = {}, _classNames["modal-" + this.props.size] = this.props.size, _classNames[dialogBaseClass + "-centered"] = this.props.centered, _classNames)), this.props.cssModule),
                role: "document",
                ref: function ref(c) {
                    _this2._dialog = c;
                }
            }), React__default.createElement("div", {
                className: mapToCssModules(classnames('modal-content', this.props.contentClassName), this.props.cssModule)
            }, this.props.children));
        };
        _proto.render = function render() {
            if (this.state.isOpen) {
                var _this$props = this.props, wrapClassName = _this$props.wrapClassName, modalClassName = _this$props.modalClassName, backdropClassName = _this$props.backdropClassName, cssModule = _this$props.cssModule, isOpen = _this$props.isOpen, backdrop = _this$props.backdrop, role = _this$props.role, labelledBy = _this$props.labelledBy, external = _this$props.external, innerRef = _this$props.innerRef;
                var modalAttributes = {
                    onClick: this.handleBackdropClick,
                    onMouseDown: this.handleBackdropMouseDown,
                    onKeyUp: this.handleEscape,
                    onKeyDown: this.handleTab,
                    style: {
                        display: 'block'
                    },
                    'aria-labelledby': labelledBy,
                    role: role,
                    tabIndex: '-1'
                };
                var hasTransition = this.props.fade;
                var modalTransition = _extends({}, Fade.defaultProps, this.props.modalTransition, {
                    baseClass: hasTransition ? this.props.modalTransition.baseClass : '',
                    timeout: hasTransition ? this.props.modalTransition.timeout : 0
                });
                var backdropTransition = _extends({}, Fade.defaultProps, this.props.backdropTransition, {
                    baseClass: hasTransition ? this.props.backdropTransition.baseClass : '',
                    timeout: hasTransition ? this.props.backdropTransition.timeout : 0
                });
                var Backdrop = backdrop && (hasTransition ? React__default.createElement(Fade, _extends({}, backdropTransition, {
                    in: isOpen && !!backdrop,
                    cssModule: cssModule,
                    className: mapToCssModules(classnames('modal-backdrop', backdropClassName), cssModule)
                })) : React__default.createElement("div", {
                    className: mapToCssModules(classnames('modal-backdrop', 'show', backdropClassName), cssModule)
                }));
                return React__default.createElement(Portal, {
                    node: this._element
                }, React__default.createElement("div", {
                    className: mapToCssModules(wrapClassName)
                }, React__default.createElement(Fade, _extends({}, modalAttributes, modalTransition, {
                    in: isOpen,
                    onEntered: this.onOpened,
                    onExited: this.onClosed,
                    cssModule: cssModule,
                    className: mapToCssModules(classnames('modal', modalClassName), cssModule),
                    innerRef: innerRef
                }), external, this.renderModalDialog()), Backdrop));
            }
            return null;
        };
        return Modal;
    }(React__default.Component);
    Modal.propTypes = propTypes$H;
    Modal.defaultProps = defaultProps$D;
    Modal.openCount = 0;
    var propTypes$I = {
        tag: tagPropType,
        wrapTag: tagPropType,
        toggle: propTypes.func,
        className: propTypes.string,
        cssModule: propTypes.object,
        children: propTypes.node,
        closeAriaLabel: propTypes.string,
        charCode: propTypes.oneOfType([propTypes.string, propTypes.number]),
        close: propTypes.object
    };
    var defaultProps$E = {
        tag: 'h5',
        wrapTag: 'div',
        closeAriaLabel: 'Close',
        charCode: 215
    };
    var ModalHeader = function ModalHeader(props) {
        var closeButton;
        var className = props.className, cssModule = props.cssModule, children = props.children, toggle = props.toggle, Tag = props.tag, WrapTag = props.wrapTag, closeAriaLabel = props.closeAriaLabel, charCode = props.charCode, close = props.close, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "children", "toggle", "tag", "wrapTag", "closeAriaLabel", "charCode", "close"]);
        var classes = mapToCssModules(classnames(className, 'modal-header'), cssModule);
        if (!close && toggle) {
            var closeIcon = typeof charCode === 'number' ? String.fromCharCode(charCode) : charCode;
            closeButton = React__default.createElement("button", {
                type: "button",
                onClick: toggle,
                className: mapToCssModules('close', cssModule),
                "aria-label": closeAriaLabel
            }, React__default.createElement("span", {
                "aria-hidden": "true"
            }, closeIcon));
        }
        return React__default.createElement(WrapTag, _extends({}, attributes, {
            className: classes
        }), React__default.createElement(Tag, {
            className: mapToCssModules('modal-title', cssModule)
        }, children), close || closeButton);
    };
    ModalHeader.propTypes = propTypes$I;
    ModalHeader.defaultProps = defaultProps$E;
    var propTypes$J = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$F = {
        tag: 'div'
    };
    var ModalBody = function ModalBody(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'modal-body'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    ModalBody.propTypes = propTypes$J;
    ModalBody.defaultProps = defaultProps$F;
    var propTypes$K = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$G = {
        tag: 'div'
    };
    var ModalFooter = function ModalFooter(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'modal-footer'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    ModalFooter.propTypes = propTypes$K;
    ModalFooter.defaultProps = defaultProps$G;
    var defaultProps$H = {
        placement: 'top',
        autohide: true,
        placementPrefix: 'bs-tooltip',
        trigger: 'click hover focus'
    };
    var Tooltip = function Tooltip(props) {
        var popperClasses = classnames('tooltip', 'show', props.className);
        var classes = classnames('tooltip-inner', props.innerClassName);
        return React__default.createElement(TooltipPopoverWrapper, _extends({}, props, {
            className: popperClasses,
            innerClassName: classes
        }));
    };
    Tooltip.propTypes = propTypes$C;
    Tooltip.defaultProps = defaultProps$H;
    var propTypes$L = {
        className: propTypes.string,
        cssModule: propTypes.object,
        size: propTypes.string,
        bordered: propTypes.bool,
        borderless: propTypes.bool,
        striped: propTypes.bool,
        inverse: deprecated(propTypes.bool, 'Please use the prop "dark"'),
        dark: propTypes.bool,
        hover: propTypes.bool,
        responsive: propTypes.oneOfType([propTypes.bool, propTypes.string]),
        tag: tagPropType,
        responsiveTag: tagPropType,
        innerRef: propTypes.oneOfType([propTypes.func, propTypes.string, propTypes.object])
    };
    var defaultProps$I = {
        tag: 'table',
        responsiveTag: 'div'
    };
    var Table = function Table(props) {
        var className = props.className, cssModule = props.cssModule, size = props.size, bordered = props.bordered, borderless = props.borderless, striped = props.striped, inverse = props.inverse, dark = props.dark, hover = props.hover, responsive = props.responsive, Tag = props.tag, ResponsiveTag = props.responsiveTag, innerRef = props.innerRef, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "size", "bordered", "borderless", "striped", "inverse", "dark", "hover", "responsive", "tag", "responsiveTag", "innerRef"]);
        var classes = mapToCssModules(classnames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark || inverse ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);
        var table = React__default.createElement(Tag, _extends({}, attributes, {
            ref: innerRef,
            className: classes
        }));
        if (responsive) {
            var responsiveClassName = responsive === true ? 'table-responsive' : "table-responsive-" + responsive;
            return React__default.createElement(ResponsiveTag, {
                className: responsiveClassName
            }, table);
        }
        return table;
    };
    Table.propTypes = propTypes$L;
    Table.defaultProps = defaultProps$I;
    var propTypes$M = {
        tag: tagPropType,
        flush: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$J = {
        tag: 'ul'
    };
    var ListGroup = function ListGroup(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, flush = props.flush, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag", "flush"]);
        var classes = mapToCssModules(classnames(className, 'list-group', flush ? 'list-group-flush' : false), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    ListGroup.propTypes = propTypes$M;
    ListGroup.defaultProps = defaultProps$J;
    var propTypes$N = {
        children: propTypes.node,
        inline: propTypes.bool,
        tag: tagPropType,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.string]),
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$K = {
        tag: 'form'
    };
    var Form = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(Form, _Component);
        function Form(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.getRef = _this.getRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.submit = _this.submit.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = Form.prototype;
        _proto.getRef = function getRef(ref) {
            if (this.props.innerRef) {
                this.props.innerRef(ref);
            }
            this.ref = ref;
        };
        _proto.submit = function submit() {
            if (this.ref) {
                this.ref.submit();
            }
        };
        _proto.render = function render() {
            var _this$props = this.props, className = _this$props.className, cssModule = _this$props.cssModule, inline = _this$props.inline, Tag = _this$props.tag, innerRef = _this$props.innerRef, attributes = _objectWithoutPropertiesLoose(_this$props, ["className", "cssModule", "inline", "tag", "innerRef"]);
            var classes = mapToCssModules(classnames(className, inline ? 'form-inline' : false), cssModule);
            return React__default.createElement(Tag, _extends({}, attributes, {
                ref: innerRef,
                className: classes
            }));
        };
        return Form;
    }(React.Component);
    Form.propTypes = propTypes$N;
    Form.defaultProps = defaultProps$K;
    var propTypes$O = {
        children: propTypes.node,
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object,
        valid: propTypes.bool,
        tooltip: propTypes.bool
    };
    var defaultProps$L = {
        tag: 'div',
        valid: undefined
    };
    var FormFeedback = function FormFeedback(props) {
        var className = props.className, cssModule = props.cssModule, valid = props.valid, tooltip = props.tooltip, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "valid", "tooltip", "tag"]);
        var validMode = tooltip ? 'tooltip' : 'feedback';
        var classes = mapToCssModules(classnames(className, valid ? "valid-" + validMode : "invalid-" + validMode), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    FormFeedback.propTypes = propTypes$O;
    FormFeedback.defaultProps = defaultProps$L;
    var propTypes$P = {
        children: propTypes.node,
        row: propTypes.bool,
        check: propTypes.bool,
        inline: propTypes.bool,
        disabled: propTypes.bool,
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$M = {
        tag: 'div'
    };
    var FormGroup = function FormGroup(props) {
        var className = props.className, cssModule = props.cssModule, row = props.row, disabled = props.disabled, check = props.check, inline = props.inline, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "row", "disabled", "check", "inline", "tag"]);
        var classes = mapToCssModules(classnames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    FormGroup.propTypes = propTypes$P;
    FormGroup.defaultProps = defaultProps$M;
    var propTypes$Q = {
        children: propTypes.node,
        inline: propTypes.bool,
        tag: tagPropType,
        color: propTypes.string,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$N = {
        tag: 'small',
        color: 'muted'
    };
    var FormText = function FormText(props) {
        var className = props.className, cssModule = props.cssModule, inline = props.inline, color = props.color, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "inline", "color", "tag"]);
        var classes = mapToCssModules(classnames(className, !inline ? 'form-text' : false, color ? "text-" + color : false), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    FormText.propTypes = propTypes$Q;
    FormText.defaultProps = defaultProps$N;
    var propTypes$R = {
        children: propTypes.node,
        type: propTypes.string,
        size: propTypes.string,
        bsSize: propTypes.string,
        state: deprecated(propTypes.string, 'Please use the props "valid" and "invalid" to indicate the state.'),
        valid: propTypes.bool,
        invalid: propTypes.bool,
        tag: tagPropType,
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.func, propTypes.string]),
        static: deprecated(propTypes.bool, 'Please use the prop "plaintext"'),
        plaintext: propTypes.bool,
        addon: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$O = {
        type: 'text'
    };
    var Input = 
    /*#__PURE__*/
    function (_React$Component) {
        _inheritsLoose(Input, _React$Component);
        function Input(props) {
            var _this;
            _this = _React$Component.call(this, props) || this;
            _this.getRef = _this.getRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.focus = _this.focus.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = Input.prototype;
        _proto.getRef = function getRef(ref) {
            if (this.props.innerRef) {
                this.props.innerRef(ref);
            }
            this.ref = ref;
        };
        _proto.focus = function focus() {
            if (this.ref) {
                this.ref.focus();
            }
        };
        _proto.render = function render() {
            var _this$props = this.props, className = _this$props.className, cssModule = _this$props.cssModule, type = _this$props.type, bsSize = _this$props.bsSize, state = _this$props.state, valid = _this$props.valid, invalid = _this$props.invalid, tag = _this$props.tag, addon = _this$props.addon, staticInput = _this$props.static, plaintext = _this$props.plaintext, innerRef = _this$props.innerRef, attributes = _objectWithoutPropertiesLoose(_this$props, ["className", "cssModule", "type", "bsSize", "state", "valid", "invalid", "tag", "addon", "static", "plaintext", "innerRef"]);
            var checkInput = ['radio', 'checkbox'].indexOf(type) > -1;
            var isNotaNumber = new RegExp('\\D', 'g');
            var fileInput = type === 'file';
            var textareaInput = type === 'textarea';
            var selectInput = type === 'select';
            var Tag = tag || (selectInput || textareaInput ? type : 'input');
            var formControlClass = 'form-control';
            if (plaintext || staticInput) {
                formControlClass = formControlClass + "-plaintext";
                Tag = tag || 'input';
            }
            else if (fileInput) {
                formControlClass = formControlClass + "-file";
            }
            else if (checkInput) {
                if (addon) {
                    formControlClass = null;
                }
                else {
                    formControlClass = 'form-check-input';
                }
            }
            if (state && typeof valid === 'undefined' && typeof invalid === 'undefined') {
                if (state === 'danger') {
                    invalid = true;
                }
                else if (state === 'success') {
                    valid = true;
                }
            }
            if (attributes.size && isNotaNumber.test(attributes.size)) {
                warnOnce('Please use the prop "bsSize" instead of the "size" to bootstrap\'s input sizing.');
                bsSize = attributes.size;
                delete attributes.size;
            }
            var classes = mapToCssModules(classnames(className, invalid && 'is-invalid', valid && 'is-valid', bsSize ? "form-control-" + bsSize : false, formControlClass), cssModule);
            if (Tag === 'input' || tag && typeof tag === 'function') {
                attributes.type = type;
            }
            if (attributes.children && !(plaintext || staticInput || type === 'select' || typeof Tag !== 'string' || Tag === 'select')) {
                warnOnce("Input with a type of \"" + type + "\" cannot have children. Please use \"value\"/\"defaultValue\" instead.");
                delete attributes.children;
            }
            return React__default.createElement(Tag, _extends({}, attributes, {
                ref: innerRef,
                className: classes
            }));
        };
        return Input;
    }(React__default.Component);
    Input.propTypes = propTypes$R;
    Input.defaultProps = defaultProps$O;
    var propTypes$S = {
        tag: tagPropType,
        size: propTypes.string,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$P = {
        tag: 'div'
    };
    var InputGroup = function InputGroup(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, size = props.size, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag", "size"]);
        var classes = mapToCssModules(classnames(className, 'input-group', size ? "input-group-" + size : null), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    InputGroup.propTypes = propTypes$S;
    InputGroup.defaultProps = defaultProps$P;
    var propTypes$T = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$Q = {
        tag: 'span'
    };
    var InputGroupText = function InputGroupText(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'input-group-text'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    InputGroupText.propTypes = propTypes$T;
    InputGroupText.defaultProps = defaultProps$Q;
    var propTypes$U = {
        tag: tagPropType,
        addonType: propTypes.oneOf(['prepend', 'append']).isRequired,
        children: propTypes.node,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$R = {
        tag: 'div'
    };
    var InputGroupAddon = function InputGroupAddon(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, addonType = props.addonType, children = props.children, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag", "addonType", "children"]);
        var classes = mapToCssModules(classnames(className, 'input-group-' + addonType), cssModule); // Convenience to assist with transition
        if (typeof children === 'string') {
            return React__default.createElement(Tag, _extends({}, attributes, {
                className: classes
            }), React__default.createElement(InputGroupText, {
                children: children
            }));
        }
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes,
            children: children
        }));
    };
    InputGroupAddon.propTypes = propTypes$U;
    InputGroupAddon.defaultProps = defaultProps$R;
    var propTypes$V = {
        tag: tagPropType,
        addonType: propTypes.oneOf(['prepend', 'append']).isRequired,
        children: propTypes.node,
        groupClassName: propTypes.string,
        groupAttributes: propTypes.object,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var InputGroupButton = function InputGroupButton(props) {
        warnOnce('The "InputGroupButton" component has been deprecated.\nPlease use component "InputGroupAddon".');
        var children = props.children, groupClassName = props.groupClassName, groupAttributes = props.groupAttributes, propsWithoutGroup = _objectWithoutPropertiesLoose(props, ["children", "groupClassName", "groupAttributes"]);
        if (typeof children === 'string') {
            var cssModule = propsWithoutGroup.cssModule, tag = propsWithoutGroup.tag, addonType = propsWithoutGroup.addonType, attributes = _objectWithoutPropertiesLoose(propsWithoutGroup, ["cssModule", "tag", "addonType"]);
            var allGroupAttributes = _extends({}, groupAttributes, {
                cssModule: cssModule,
                tag: tag,
                addonType: addonType
            });
            return React__default.createElement(InputGroupAddon, _extends({}, allGroupAttributes, {
                className: groupClassName
            }), React__default.createElement(Button, _extends({}, attributes, {
                children: children
            })));
        }
        return React__default.createElement(InputGroupAddon, _extends({}, props, {
            children: children
        }));
    };
    InputGroupButton.propTypes = propTypes$V;
    var propTypes$W = {
        addonType: propTypes.oneOf(['prepend', 'append']).isRequired,
        children: propTypes.node
    };
    var InputGroupButtonDropdown = function InputGroupButtonDropdown(props) {
        return React__default.createElement(Dropdown, props);
    };
    InputGroupButtonDropdown.propTypes = propTypes$W;
    var colWidths$1 = ['xs', 'sm', 'md', 'lg', 'xl'];
    var stringOrNumberProp$1 = propTypes.oneOfType([propTypes.number, propTypes.string]);
    var columnProps$1 = propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.shape({
            size: stringOrNumberProp$1,
            push: deprecated(stringOrNumberProp$1, 'Please use the prop "order"'),
            pull: deprecated(stringOrNumberProp$1, 'Please use the prop "order"'),
            order: stringOrNumberProp$1,
            offset: stringOrNumberProp$1
        })]);
    var propTypes$X = {
        children: propTypes.node,
        hidden: propTypes.bool,
        check: propTypes.bool,
        size: propTypes.string,
        for: propTypes.string,
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object,
        xs: columnProps$1,
        sm: columnProps$1,
        md: columnProps$1,
        lg: columnProps$1,
        xl: columnProps$1,
        widths: propTypes.array
    };
    var defaultProps$S = {
        tag: 'label',
        widths: colWidths$1
    };
    var getColumnSizeClass$1 = function getColumnSizeClass(isXs, colWidth, colSize) {
        if (colSize === true || colSize === '') {
            return isXs ? 'col' : "col-" + colWidth;
        }
        else if (colSize === 'auto') {
            return isXs ? 'col-auto' : "col-" + colWidth + "-auto";
        }
        return isXs ? "col-" + colSize : "col-" + colWidth + "-" + colSize;
    };
    var Label = function Label(props) {
        var className = props.className, cssModule = props.cssModule, hidden = props.hidden, widths = props.widths, Tag = props.tag, check = props.check, size = props.size, htmlFor = props.for, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "hidden", "widths", "tag", "check", "size", "for"]);
        var colClasses = [];
        widths.forEach(function (colWidth, i) {
            var columnProp = props[colWidth];
            delete attributes[colWidth];
            if (!columnProp && columnProp !== '') {
                return;
            }
            var isXs = !i;
            var colClass;
            if (lodash_isobject(columnProp)) {
                var _classNames;
                var colSizeInterfix = isXs ? '-' : "-" + colWidth + "-";
                colClass = getColumnSizeClass$1(isXs, colWidth, columnProp.size);
                colClasses.push(mapToCssModules(classnames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames["order" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames["offset" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);
            }
            else {
                colClass = getColumnSizeClass$1(isXs, colWidth, columnProp);
                colClasses.push(colClass);
            }
        });
        var classes = mapToCssModules(classnames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? "col-form-label-" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);
        return React__default.createElement(Tag, _extends({
            htmlFor: htmlFor
        }, attributes, {
            className: classes
        }));
    };
    Label.propTypes = propTypes$X;
    Label.defaultProps = defaultProps$S;
    var propTypes$Y = {
        body: propTypes.bool,
        bottom: propTypes.bool,
        children: propTypes.node,
        className: propTypes.string,
        cssModule: propTypes.object,
        heading: propTypes.bool,
        left: propTypes.bool,
        list: propTypes.bool,
        middle: propTypes.bool,
        object: propTypes.bool,
        right: propTypes.bool,
        tag: tagPropType,
        top: propTypes.bool
    };
    var Media = function Media(props) {
        var body = props.body, bottom = props.bottom, className = props.className, cssModule = props.cssModule, heading = props.heading, left = props.left, list = props.list, middle = props.middle, object = props.object, right = props.right, tag = props.tag, top = props.top, attributes = _objectWithoutPropertiesLoose(props, ["body", "bottom", "className", "cssModule", "heading", "left", "list", "middle", "object", "right", "tag", "top"]);
        var defaultTag;
        if (heading) {
            defaultTag = 'h4';
        }
        else if (attributes.href) {
            defaultTag = 'a';
        }
        else if (attributes.src || object) {
            defaultTag = 'img';
        }
        else if (list) {
            defaultTag = 'ul';
        }
        else {
            defaultTag = 'div';
        }
        var Tag = tag || defaultTag;
        var classes = mapToCssModules(classnames(className, {
            'media-body': body,
            'media-heading': heading,
            'media-left': left,
            'media-right': right,
            'media-top': top,
            'media-bottom': bottom,
            'media-middle': middle,
            'media-object': object,
            'media-list': list,
            media: !body && !heading && !left && !right && !top && !bottom && !middle && !object && !list
        }), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    Media.propTypes = propTypes$Y;
    var propTypes$Z = {
        children: propTypes.node,
        className: propTypes.string,
        listClassName: propTypes.string,
        cssModule: propTypes.object,
        size: propTypes.string,
        tag: tagPropType,
        listTag: tagPropType,
        'aria-label': propTypes.string
    };
    var defaultProps$T = {
        tag: 'nav',
        listTag: 'ul',
        'aria-label': 'pagination'
    };
    var Pagination = function Pagination(props) {
        var _classNames;
        var className = props.className, listClassName = props.listClassName, cssModule = props.cssModule, size = props.size, Tag = props.tag, ListTag = props.listTag, label = props['aria-label'], attributes = _objectWithoutPropertiesLoose(props, ["className", "listClassName", "cssModule", "size", "tag", "listTag", "aria-label"]);
        var classes = mapToCssModules(classnames(className), cssModule);
        var listClasses = mapToCssModules(classnames(listClassName, 'pagination', (_classNames = {}, _classNames["pagination-" + size] = !!size, _classNames)), cssModule);
        return React__default.createElement(Tag, {
            className: classes,
            "aria-label": label
        }, React__default.createElement(ListTag, _extends({}, attributes, {
            className: listClasses
        })));
    };
    Pagination.propTypes = propTypes$Z;
    Pagination.defaultProps = defaultProps$T;
    var propTypes$_ = {
        active: propTypes.bool,
        children: propTypes.node,
        className: propTypes.string,
        cssModule: propTypes.object,
        disabled: propTypes.bool,
        tag: tagPropType
    };
    var defaultProps$U = {
        tag: 'li'
    };
    var PaginationItem = function PaginationItem(props) {
        var active = props.active, className = props.className, cssModule = props.cssModule, disabled = props.disabled, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["active", "className", "cssModule", "disabled", "tag"]);
        var classes = mapToCssModules(classnames(className, 'page-item', {
            active: active,
            disabled: disabled
        }), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    PaginationItem.propTypes = propTypes$_;
    PaginationItem.defaultProps = defaultProps$U;
    var propTypes$10 = {
        'aria-label': propTypes.string,
        children: propTypes.node,
        className: propTypes.string,
        cssModule: propTypes.object,
        next: propTypes.bool,
        previous: propTypes.bool,
        tag: tagPropType
    };
    var defaultProps$V = {
        tag: 'a'
    };
    var PaginationLink = function PaginationLink(props) {
        var className = props.className, cssModule = props.cssModule, next = props.next, previous = props.previous, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "next", "previous", "tag"]);
        var classes = mapToCssModules(classnames(className, 'page-link'), cssModule);
        var defaultAriaLabel;
        if (previous) {
            defaultAriaLabel = 'Previous';
        }
        else if (next) {
            defaultAriaLabel = 'Next';
        }
        var ariaLabel = props['aria-label'] || defaultAriaLabel;
        var defaultCaret;
        if (previous) {
            defaultCaret = "\xAB";
        }
        else if (next) {
            defaultCaret = "\xBB";
        }
        var children = props.children;
        if (children && Array.isArray(children) && children.length === 0) {
            children = null;
        }
        if (!attributes.href && Tag === 'a') {
            Tag = 'button';
        }
        if (previous || next) {
            children = [React__default.createElement("span", {
                    "aria-hidden": "true",
                    key: "caret"
                }, children || defaultCaret), React__default.createElement("span", {
                    className: "sr-only",
                    key: "sr"
                }, ariaLabel)];
        }
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes,
            "aria-label": ariaLabel
        }), children);
    };
    PaginationLink.propTypes = propTypes$10;
    PaginationLink.defaultProps = defaultProps$V;
    var propTypes$11 = {
        tag: tagPropType,
        activeTab: propTypes.any,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$W = {
        tag: 'div'
    };
    var childContextTypes$2 = {
        activeTabId: propTypes.any
    };
    var TabContent = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(TabContent, _Component);
        TabContent.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
            if (prevState.activeTab !== nextProps.activeTab) {
                return {
                    activeTab: nextProps.activeTab
                };
            }
            return null;
        };
        function TabContent(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.state = {
                activeTab: _this.props.activeTab
            };
            return _this;
        }
        var _proto = TabContent.prototype;
        _proto.getChildContext = function getChildContext() {
            return {
                activeTabId: this.state.activeTab
            };
        };
        _proto.render = function render() {
            var _this$props = this.props, className = _this$props.className, cssModule = _this$props.cssModule, Tag = _this$props.tag;
            var attributes = omit(this.props, Object.keys(propTypes$11));
            var classes = mapToCssModules(classnames('tab-content', className), cssModule);
            return React__default.createElement(Tag, _extends({}, attributes, {
                className: classes
            }));
        };
        return TabContent;
    }(React.Component);
    polyfill(TabContent);
    TabContent.propTypes = propTypes$11;
    TabContent.defaultProps = defaultProps$W;
    TabContent.childContextTypes = childContextTypes$2;
    var propTypes$12 = {
        tag: tagPropType,
        className: propTypes.string,
        cssModule: propTypes.object,
        tabId: propTypes.any
    };
    var defaultProps$X = {
        tag: 'div'
    };
    var contextTypes$3 = {
        activeTabId: propTypes.any
    };
    function TabPane(props, context) {
        var className = props.className, cssModule = props.cssModule, tabId = props.tabId, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tabId", "tag"]);
        var classes = mapToCssModules(classnames('tab-pane', className, {
            active: tabId === context.activeTabId
        }), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    }
    TabPane.propTypes = propTypes$12;
    TabPane.defaultProps = defaultProps$X;
    TabPane.contextTypes = contextTypes$3;
    var propTypes$13 = {
        tag: tagPropType,
        fluid: propTypes.bool,
        className: propTypes.string,
        cssModule: propTypes.object
    };
    var defaultProps$Y = {
        tag: 'div'
    };
    var Jumbotron = function Jumbotron(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, fluid = props.fluid, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag", "fluid"]);
        var classes = mapToCssModules(classnames(className, 'jumbotron', fluid ? 'jumbotron-fluid' : false), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    Jumbotron.propTypes = propTypes$13;
    Jumbotron.defaultProps = defaultProps$Y;
    var propTypes$14 = {
        children: propTypes.node,
        className: propTypes.string,
        closeClassName: propTypes.string,
        closeAriaLabel: propTypes.string,
        cssModule: propTypes.object,
        color: propTypes.string,
        fade: propTypes.bool,
        isOpen: propTypes.bool,
        toggle: propTypes.func,
        tag: tagPropType,
        transition: propTypes.shape(Fade.propTypes),
        innerRef: propTypes.oneOfType([propTypes.object, propTypes.string, propTypes.func])
    };
    var defaultProps$Z = {
        color: 'success',
        isOpen: true,
        tag: 'div',
        closeAriaLabel: 'Close',
        fade: true,
        transition: _extends({}, Fade.defaultProps, {
            unmountOnExit: true
        })
    };
    function Alert(props) {
        var className = props.className, closeClassName = props.closeClassName, closeAriaLabel = props.closeAriaLabel, cssModule = props.cssModule, Tag = props.tag, color = props.color, isOpen = props.isOpen, toggle = props.toggle, children = props.children, transition = props.transition, fade = props.fade, innerRef = props.innerRef, attributes = _objectWithoutPropertiesLoose(props, ["className", "closeClassName", "closeAriaLabel", "cssModule", "tag", "color", "isOpen", "toggle", "children", "transition", "fade", "innerRef"]);
        var classes = mapToCssModules(classnames(className, 'alert', "alert-" + color, {
            'alert-dismissible': toggle
        }), cssModule);
        var closeClasses = mapToCssModules(classnames('close', closeClassName), cssModule);
        var alertTransition = _extends({}, Fade.defaultProps, transition, {
            baseClass: fade ? transition.baseClass : '',
            timeout: fade ? transition.timeout : 0
        });
        return React__default.createElement(Fade, _extends({}, attributes, alertTransition, {
            tag: Tag,
            className: classes,
            in: isOpen,
            role: "alert",
            innerRef: innerRef
        }), toggle ? React__default.createElement("button", {
            type: "button",
            className: closeClasses,
            "aria-label": closeAriaLabel,
            onClick: toggle
        }, React__default.createElement("span", {
            "aria-hidden": "true"
        }, "\xD7")) : null, children);
    }
    Alert.propTypes = propTypes$14;
    Alert.defaultProps = defaultProps$Z;
    var _transitionStatusToCl;
    var propTypes$15 = _extends({}, reactTransitionGroup_1.propTypes, {
        isOpen: propTypes.bool,
        children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
        tag: tagPropType,
        className: propTypes.node,
        navbar: propTypes.bool,
        cssModule: propTypes.object,
        innerRef: propTypes.oneOfType([propTypes.func, propTypes.string, propTypes.object])
    });
    var defaultProps$_ = _extends({}, reactTransitionGroup_1.defaultProps, {
        isOpen: false,
        appear: false,
        enter: true,
        exit: true,
        tag: 'div',
        timeout: TransitionTimeouts.Collapse
    });
    var transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);
    function getTransitionClass(status) {
        return transitionStatusToClassHash[status] || 'collapse';
    }
    function getHeight(node) {
        return node.scrollHeight;
    }
    var Collapse = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(Collapse, _Component);
        function Collapse(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.state = {
                height: null
            };
            ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {
                _this[name] = _this[name].bind(_assertThisInitialized(_assertThisInitialized(_this)));
            });
            return _this;
        }
        var _proto = Collapse.prototype;
        _proto.onEntering = function onEntering(node, isAppearing) {
            this.setState({
                height: getHeight(node)
            });
            this.props.onEntering(node, isAppearing);
        };
        _proto.onEntered = function onEntered(node, isAppearing) {
            this.setState({
                height: null
            });
            this.props.onEntered(node, isAppearing);
        };
        _proto.onExit = function onExit(node) {
            this.setState({
                height: getHeight(node)
            });
            this.props.onExit(node);
        };
        _proto.onExiting = function onExiting(node) {
            // getting this variable triggers a reflow
            var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars
            this.setState({
                height: 0
            });
            this.props.onExiting(node);
        };
        _proto.onExited = function onExited(node) {
            this.setState({
                height: null
            });
            this.props.onExited(node);
        };
        _proto.render = function render() {
            var _this2 = this;
            var _this$props = this.props, Tag = _this$props.tag, isOpen = _this$props.isOpen, className = _this$props.className, navbar = _this$props.navbar, cssModule = _this$props.cssModule, children = _this$props.children, innerRef = _this$props.innerRef, otherProps = _objectWithoutPropertiesLoose(_this$props, ["tag", "isOpen", "className", "navbar", "cssModule", "children", "innerRef"]);
            var height = this.state.height;
            var transitionProps = pick(otherProps, TransitionPropTypeKeys);
            var childProps = omit(otherProps, TransitionPropTypeKeys);
            return React__default.createElement(reactTransitionGroup_1, _extends({}, transitionProps, {
                in: isOpen,
                onEntering: this.onEntering,
                onEntered: this.onEntered,
                onExit: this.onExit,
                onExiting: this.onExiting,
                onExited: this.onExited
            }), function (status) {
                var collapseClass = getTransitionClass(status);
                var classes = mapToCssModules(classnames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);
                var style = height === null ? null : {
                    height: height
                };
                return React__default.createElement(Tag, _extends({}, childProps, {
                    style: _extends({}, childProps.style, style),
                    className: classes,
                    ref: _this2.props.innerRef
                }), children);
            });
        };
        return Collapse;
    }(React.Component);
    Collapse.propTypes = propTypes$15;
    Collapse.defaultProps = defaultProps$_;
    var propTypes$16 = {
        tag: tagPropType,
        active: propTypes.bool,
        disabled: propTypes.bool,
        color: propTypes.string,
        action: propTypes.bool,
        className: propTypes.any,
        cssModule: propTypes.object
    };
    var defaultProps$10 = {
        tag: 'li'
    };
    var handleDisabledOnClick = function handleDisabledOnClick(e) {
        e.preventDefault();
    };
    var ListGroupItem = function ListGroupItem(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, active = props.active, disabled = props.disabled, action = props.action, color = props.color, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag", "active", "disabled", "action", "color"]);
        var classes = mapToCssModules(classnames(className, active ? 'active' : false, disabled ? 'disabled' : false, action ? 'list-group-item-action' : false, color ? "list-group-item-" + color : false, 'list-group-item'), cssModule); // Prevent click event when disabled.
        if (disabled) {
            attributes.onClick = handleDisabledOnClick;
        }
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    ListGroupItem.propTypes = propTypes$16;
    ListGroupItem.defaultProps = defaultProps$10;
    var propTypes$17 = {
        tag: tagPropType,
        className: propTypes.any,
        cssModule: propTypes.object
    };
    var defaultProps$11 = {
        tag: 'h5'
    };
    var ListGroupItemHeading = function ListGroupItemHeading(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'list-group-item-heading'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    ListGroupItemHeading.propTypes = propTypes$17;
    ListGroupItemHeading.defaultProps = defaultProps$11;
    var propTypes$18 = {
        tag: tagPropType,
        className: propTypes.any,
        cssModule: propTypes.object
    };
    var defaultProps$12 = {
        tag: 'p'
    };
    var ListGroupItemText = function ListGroupItemText(props) {
        var className = props.className, cssModule = props.cssModule, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "tag"]);
        var classes = mapToCssModules(classnames(className, 'list-group-item-text'), cssModule);
        return React__default.createElement(Tag, _extends({}, attributes, {
            className: classes
        }));
    };
    ListGroupItemText.propTypes = propTypes$18;
    ListGroupItemText.defaultProps = defaultProps$12;
    var UncontrolledAlert = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(UncontrolledAlert, _Component);
        function UncontrolledAlert(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.state = {
                isOpen: true
            };
            _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = UncontrolledAlert.prototype;
        _proto.toggle = function toggle() {
            this.setState({
                isOpen: !this.state.isOpen
            });
        };
        _proto.render = function render() {
            return React__default.createElement(Alert, _extends({
                isOpen: this.state.isOpen,
                toggle: this.toggle
            }, this.props));
        };
        return UncontrolledAlert;
    }(React.Component);
    var omitKeys$1 = ['defaultOpen'];
    var UncontrolledButtonDropdown = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(UncontrolledButtonDropdown, _Component);
        function UncontrolledButtonDropdown(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.state = {
                isOpen: props.defaultOpen || false
            };
            _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = UncontrolledButtonDropdown.prototype;
        _proto.toggle = function toggle() {
            this.setState({
                isOpen: !this.state.isOpen
            });
        };
        _proto.render = function render() {
            return React__default.createElement(ButtonDropdown, _extends({
                isOpen: this.state.isOpen,
                toggle: this.toggle
            }, omit(this.props, omitKeys$1)));
        };
        return UncontrolledButtonDropdown;
    }(React.Component);
    UncontrolledButtonDropdown.propTypes = _extends({
        defaultOpen: propTypes.bool
    }, ButtonDropdown.propTypes);
    var omitKeys$2 = ['toggleEvents', 'defaultOpen'];
    var propTypes$19 = {
        defaultOpen: propTypes.bool,
        toggler: propTypes.string.isRequired,
        toggleEvents: propTypes.arrayOf(propTypes.string)
    };
    var defaultProps$13 = {
        toggleEvents: defaultToggleEvents
    };
    var UncontrolledCollapse = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(UncontrolledCollapse, _Component);
        function UncontrolledCollapse(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.togglers = null;
            _this.removeEventListeners = null;
            _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            _this.state = {
                isOpen: props.defaultOpen || false
            };
            return _this;
        }
        var _proto = UncontrolledCollapse.prototype;
        _proto.componentDidMount = function componentDidMount() {
            this.togglers = findDOMElements(this.props.toggler);
            if (this.togglers.length) {
                this.removeEventListeners = addMultipleEventListeners(this.togglers, this.toggle, this.props.toggleEvents);
            }
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            if (this.togglers.length && this.removeEventListeners) {
                this.removeEventListeners();
            }
        };
        _proto.toggle = function toggle(e) {
            this.setState(function (_ref) {
                var isOpen = _ref.isOpen;
                return {
                    isOpen: !isOpen
                };
            });
            e.preventDefault();
        };
        _proto.render = function render() {
            return React__default.createElement(Collapse, _extends({
                isOpen: this.state.isOpen
            }, omit(this.props, omitKeys$2)));
        };
        return UncontrolledCollapse;
    }(React.Component);
    UncontrolledCollapse.propTypes = propTypes$19;
    UncontrolledCollapse.defaultProps = defaultProps$13;
    var omitKeys$3 = ['defaultOpen'];
    var UncontrolledDropdown = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(UncontrolledDropdown, _Component);
        function UncontrolledDropdown(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.state = {
                isOpen: props.defaultOpen || false
            };
            _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = UncontrolledDropdown.prototype;
        _proto.toggle = function toggle() {
            this.setState({
                isOpen: !this.state.isOpen
            });
        };
        _proto.render = function render() {
            return React__default.createElement(Dropdown, _extends({
                isOpen: this.state.isOpen,
                toggle: this.toggle
            }, omit(this.props, omitKeys$3)));
        };
        return UncontrolledDropdown;
    }(React.Component);
    UncontrolledDropdown.propTypes = _extends({
        defaultOpen: propTypes.bool
    }, Dropdown.propTypes);
    var UncontrolledNavDropdown = function UncontrolledNavDropdown(props) {
        warnOnce('The "UncontrolledNavDropdown" component has been deprecated.\nPlease use component "UncontrolledDropdown" with nav prop.');
        return React__default.createElement(UncontrolledDropdown, _extends({
            nav: true
        }, props));
    };
    var omitKeys$4 = ['defaultOpen'];
    var UncontrolledTooltip = 
    /*#__PURE__*/
    function (_Component) {
        _inheritsLoose(UncontrolledTooltip, _Component);
        function UncontrolledTooltip(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.state = {
                isOpen: props.defaultOpen || false
            };
            _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
            return _this;
        }
        var _proto = UncontrolledTooltip.prototype;
        _proto.toggle = function toggle() {
            this.setState({
                isOpen: !this.state.isOpen
            });
        };
        _proto.render = function render() {
            return React__default.createElement(Tooltip, _extends({
                isOpen: this.state.isOpen,
                toggle: this.toggle
            }, omit(this.props, omitKeys$4)));
        };
        return UncontrolledTooltip;
    }(React.Component);
    UncontrolledTooltip.propTypes = _extends({
        defaultOpen: propTypes.bool
    }, Tooltip.propTypes);
    var propTypes$1a = {
        tag: tagPropType,
        type: propTypes.string,
        size: propTypes.string,
        color: propTypes.string,
        className: propTypes.string,
        cssModule: propTypes.object,
        children: propTypes.string
    };
    var defaultProps$14 = {
        tag: 'div',
        type: 'border',
        children: 'Loading...'
    };
    var Spinner = function Spinner(props) {
        var className = props.className, cssModule = props.cssModule, type = props.type, size = props.size, color = props.color, children = props.children, Tag = props.tag, attributes = _objectWithoutPropertiesLoose(props, ["className", "cssModule", "type", "size", "color", "children", "tag"]);
        var classes = mapToCssModules(classnames(className, size ? "spinner-" + type + "-" + size : false, "spinner-" + type, color ? "text-" + color : false), cssModule);
        return React__default.createElement(Tag, _extends({
            role: "status"
        }, attributes, {
            className: classes
        }), children && React__default.createElement("span", {
            className: mapToCssModules('sr-only', cssModule)
        }, children));
    };
    Spinner.propTypes = propTypes$1a;
    Spinner.defaultProps = defaultProps$14;
    exports.Container = Container;
    exports.Row = Row;
    exports.Col = Col;
    exports.Navbar = Navbar;
    exports.NavbarBrand = NavbarBrand;
    exports.NavbarToggler = NavbarToggler;
    exports.Nav = Nav;
    exports.NavItem = NavItem;
    exports.NavDropdown = NavDropdown;
    exports.NavLink = NavLink;
    exports.Breadcrumb = Breadcrumb;
    exports.BreadcrumbItem = BreadcrumbItem;
    exports.Button = Button;
    exports.ButtonDropdown = ButtonDropdown;
    exports.ButtonGroup = ButtonGroup;
    exports.ButtonToolbar = ButtonToolbar;
    exports.Dropdown = Dropdown;
    exports.DropdownItem = DropdownItem;
    exports.DropdownMenu = DropdownMenu;
    exports.DropdownToggle = DropdownToggle;
    exports.Fade = Fade;
    exports.Badge = Badge;
    exports.Card = Card;
    exports.CardGroup = CardGroup;
    exports.CardDeck = CardDeck;
    exports.CardColumns = CardColumns;
    exports.CardBody = CardBody;
    exports.CardBlock = CardBlock;
    exports.CardLink = CardLink;
    exports.CardFooter = CardFooter;
    exports.CardHeader = CardHeader;
    exports.CardImg = CardImg;
    exports.CardImgOverlay = CardImgOverlay;
    exports.Carousel = Carousel;
    exports.UncontrolledCarousel = UncontrolledCarousel;
    exports.CarouselControl = CarouselControl;
    exports.CarouselItem = CarouselItem;
    exports.CarouselIndicators = CarouselIndicators;
    exports.CarouselCaption = CarouselCaption;
    exports.CardSubtitle = CardSubtitle;
    exports.CardText = CardText;
    exports.CardTitle = CardTitle;
    exports.CustomInput = CustomInput;
    exports.PopperContent = PopperContent;
    exports.PopperTargetHelper = PopperTargetHelper;
    exports.Popover = Popover;
    exports.UncontrolledPopover = UncontrolledPopover;
    exports.PopoverHeader = PopoverHeader;
    exports.PopoverTitle = PopoverTitle;
    exports.PopoverBody = PopoverBody;
    exports.PopoverContent = PopoverContent;
    exports.Progress = Progress;
    exports.Modal = Modal;
    exports.ModalHeader = ModalHeader;
    exports.ModalBody = ModalBody;
    exports.ModalFooter = ModalFooter;
    exports.Tooltip = Tooltip;
    exports.Table = Table;
    exports.ListGroup = ListGroup;
    exports.Form = Form;
    exports.FormFeedback = FormFeedback;
    exports.FormGroup = FormGroup;
    exports.FormText = FormText;
    exports.Input = Input;
    exports.InputGroup = InputGroup;
    exports.InputGroupAddon = InputGroupAddon;
    exports.InputGroupButton = InputGroupButton;
    exports.InputGroupButtonDropdown = InputGroupButtonDropdown;
    exports.InputGroupText = InputGroupText;
    exports.Label = Label;
    exports.Media = Media;
    exports.Pagination = Pagination;
    exports.PaginationItem = PaginationItem;
    exports.PaginationLink = PaginationLink;
    exports.TabContent = TabContent;
    exports.TabPane = TabPane;
    exports.Jumbotron = Jumbotron;
    exports.Alert = Alert;
    exports.Collapse = Collapse;
    exports.ListGroupItem = ListGroupItem;
    exports.ListGroupItemHeading = ListGroupItemHeading;
    exports.ListGroupItemText = ListGroupItemText;
    exports.UncontrolledAlert = UncontrolledAlert;
    exports.UncontrolledButtonDropdown = UncontrolledButtonDropdown;
    exports.UncontrolledCollapse = UncontrolledCollapse;
    exports.UncontrolledDropdown = UncontrolledDropdown;
    exports.UncontrolledNavDropdown = UncontrolledNavDropdown;
    exports.UncontrolledTooltip = UncontrolledTooltip;
    exports.Spinner = Spinner;
    exports.Util = utils;
    Object.defineProperty(exports, '__esModule', { value: true });
}));
//# sourceMappingURL=reactstrap.js.map
//# sourceMappingURL=bundle.js.map